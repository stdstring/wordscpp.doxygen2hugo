<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_drawing_1_1_image_data" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::Drawing::ImageData</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IBorderAttrSource</basecompoundref>
    <includes refid="_image_data_8h" local="no">Aspose.Words.Cpp/Drawing/ImageData.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ae1737f2c3296026124f0386995242956" prot="private" static="no">
        <type>Aspose::Words::IBorderAttrSource</type>
        <definition>typedef Aspose::Words::IBorderAttrSource Aspose::Words::Drawing::ImageData::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="144" column="46" bodyfile="Aspose.Words.Cpp/Drawing/ImageData.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ae9b55817aa939936a7053dacceae0a21" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data" kindref="compound">ImageData</ref></type>
        <definition>typedef ImageData Aspose::Words::Drawing::ImageData::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="143" column="23" bodyfile="Aspose.Words.Cpp/Drawing/ImageData.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aa0183a70996627ceb2bf575d7203618f" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; BaseType &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType&gt; Aspose::Words::Drawing::ImageData::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="146" column="37" bodyfile="Aspose.Words.Cpp/Drawing/ImageData.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a0fe006af3273614e3db622edd44f124d" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::Drawing::ImageData::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1551" column="21" bodyfile="Aspose.Words.Cpp/Drawing/ImageData.h" bodystart="1551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a005aabf6130bcfada348253b1b808880" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Drawing::ImageData::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1552" column="23" bodyfile="Aspose.Words.Cpp/Drawing/ImageData.h" bodystart="1552" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aeb2a10afce79b1f49d9397fadc6ee16d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Drawing::ImageData::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1554" column="23" bodyfile="Aspose.Words.Cpp/Drawing/ImageData.h" bodystart="1554" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aaec00d2b40514f8db871cc69cee88cc7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::Drawing::ImageData::~ImageData</definition>
        <argsstring>()</argsstring>
        <name>~ImageData</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::~ImageData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1545" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a3597ba11f6171085f46f51b92d99d3a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Drawing::ImageData::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="147" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a3408255679c441e698617cc192707dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::ImageData::get_BiLevel</definition>
        <argsstring>()</argsstring>
        <name>get_BiLevel</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_BiLevel</qualifiedname>
        <briefdescription>
<para>Determines whether an image will be displayed in black and white. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is <bold>false</bold>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1164" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a98cd8b0ab5be254774f28f3b5e897a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_border_collection" kindref="compound">Aspose::Words::BorderCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::BorderCollection &gt; Aspose::Words::Drawing::ImageData::get_Borders</definition>
        <argsstring>()</argsstring>
        <name>get_Borders</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_Borders</qualifiedname>
        <briefdescription>
<para>Gets the collection of borders of the image. Borders only have effect for inline images. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="897" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aa9a7825f79fe1b3de67812790a09e5be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Drawing::ImageData::get_Brightness</definition>
        <argsstring>()</argsstring>
        <name>get_Brightness</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_Brightness</qualifiedname>
        <briefdescription>
<para>Gets or sets the brightness of the picture. The value for this property must be a number from 0.0 (dimmest) to 1.0 (brightest). </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is 0.5.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1029" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a90c258bf6648eb117c6e18a61abe725b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Drawing::ImageData::get_ChromaKey</definition>
        <argsstring>()</argsstring>
        <name>get_ChromaKey</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_ChromaKey</qualifiedname>
        <briefdescription>
<para>Defines the color value of the image that will be treated as transparent. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is 0.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="961" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a5acc8b705f9f3d0469f15dad18edca84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Drawing::ImageData::get_Contrast</definition>
        <argsstring>()</argsstring>
        <name>get_Contrast</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_Contrast</qualifiedname>
        <briefdescription>
<para>Gets or sets the contrast for the specified picture. The value for this property must be a number from 0.0 (the least contrast) to 1.0 (the greatest contrast). </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is 0.5.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1097" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aae95fdb47f0367f29d091a559d760b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Drawing::ImageData::get_CropBottom</definition>
        <argsstring>()</argsstring>
        <name>get_CropBottom</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_CropBottom</qualifiedname>
        <briefdescription>
<para>Defines the fraction of picture removal from the bottom side. </para>
        </briefdescription>
        <detaileddescription>
<para>The amount of cropping can range from -1.0 to 1.0. The default value is 0. Note that a value of 1 will display no picture at all. Negative values will result in the picture being squeezed inward from the edge being cropped (the empty space between the picture and the cropped edge will be filled by the fill color of the shape). Positive values less than 1 will result in the remaining picture being stretched to fit the shape.</para>
<para>The default value is 0.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="684" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1afa88761b1202fb3045f25041a224093b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Drawing::ImageData::get_CropLeft</definition>
        <argsstring>()</argsstring>
        <name>get_CropLeft</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_CropLeft</qualifiedname>
        <briefdescription>
<para>Defines the fraction of picture removal from the left side. </para>
        </briefdescription>
        <detaileddescription>
<para>The amount of cropping can range from -1.0 to 1.0. The default value is 0. Note that a value of 1 will display no picture at all. Negative values will result in the picture being squeezed inward from the edge being cropped (the empty space between the picture and the cropped edge will be filled by the fill color of the shape). Positive values less than 1 will result in the remaining picture being stretched to fit the shape.</para>
<para>The default value is 0.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="758" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a0711db8a412a22ed5729c7be53fd6801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Drawing::ImageData::get_CropRight</definition>
        <argsstring>()</argsstring>
        <name>get_CropRight</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_CropRight</qualifiedname>
        <briefdescription>
<para>Defines the fraction of picture removal from the right side. </para>
        </briefdescription>
        <detaileddescription>
<para>The amount of cropping can range from -1.0 to 1.0. The default value is 0. Note that a value of 1 will display no picture at all. Negative values will result in the picture being squeezed inward from the edge being cropped (the empty space between the picture and the cropped edge will be filled by the fill color of the shape). Positive values less than 1 will result in the remaining picture being stretched to fit the shape.</para>
<para>The default value is 0.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="832" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a4994c5204fc58ebbea145be3fd4d428b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Drawing::ImageData::get_CropTop</definition>
        <argsstring>()</argsstring>
        <name>get_CropTop</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_CropTop</qualifiedname>
        <briefdescription>
<para>Defines the fraction of picture removal from the top side. </para>
        </briefdescription>
        <detaileddescription>
<para>The amount of cropping can range from -1.0 to 1.0. The default value is 0. Note that a value of 1 will display no picture at all. Negative values will result in the picture being squeezed inward from the edge being cropped (the empty space between the picture and the cropped edge will be filled by the fill color of the shape). Positive values less than 1 will result in the remaining picture being stretched to fit the shape.</para>
<para>The default value is 0.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="610" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a957100c9347ea8e36294284816276296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::ImageData::get_GrayScale</definition>
        <argsstring>()</argsstring>
        <name>get_GrayScale</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_GrayScale</qualifiedname>
        <briefdescription>
<para>Determines whether a picture will display in grayscale mode. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is <bold>false</bold>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1231" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ae41e9fec7be26ec61b5982358c6fa661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::ImageData::get_HasImage</definition>
        <argsstring>()</argsstring>
        <name>get_HasImage</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_HasImage</qualifiedname>
        <briefdescription>
<para>Returns true if the shape has image bytes or links an image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to save all images from a document to the file system. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shapes<sp/>with<sp/>the<sp/>&quot;HasImage&quot;<sp/>flag<sp/>set<sp/>store<sp/>and<sp/>display<sp/>all<sp/>the<sp/>document&apos;s<sp/>images.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shapesWithImages<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_Cast&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Where([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;get_HasImage();<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>each<sp/>shape<sp/>and<sp/>save<sp/>its<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatConverter<sp/>=<sp/>MakeObject&lt;System::Drawing::ImageFormatConverter&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;Shape&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>shapesWithImages-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shapeIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>enumerator-&gt;get_Current()-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Imaging::ImageFormat&gt;<sp/>format<sp/>=<sp/>imageData-&gt;ToImage()-&gt;get_RawFormat();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>fileExtension<sp/>=<sp/>formatConverter-&gt;ConvertToString(format);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::FileStream&gt;<sp/>fileStream<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class/system.i_o.file/_1a4ae2fe9ccdd95b23c3aa07177a6f325e" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::File::Create</ref>(ArtifactsDir<sp/>+<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Drawing.SaveAllImages.{0}.{1}&quot;</highlight><highlight class="normal">,<sp/>++shapeIndex,<sp/>fileExtension));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageData-&gt;Save(fileStream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="224" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a355d0f443d9256bd801443f2b27ced46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt;</type>
        <definition>System::ArrayPtr&lt; uint8_t &gt; Aspose::Words::Drawing::ImageData::get_ImageBytes</definition>
        <argsstring>()</argsstring>
        <name>get_ImageBytes</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_ImageBytes</qualifiedname>
        <briefdescription>
<para>Gets or sets the raw bytes of the image stored in the shape. </para>
        </briefdescription>
        <detaileddescription>
<para>Setting the value to <computeroutput>null</computeroutput> or an empty array will remove the image from the shape.</para>
<para>Returns <computeroutput>null</computeroutput> if the image is not stored in the document (e.g the image is probably linked in this case).</para>
<para><simplesect kind="see"><para>Aspose::Words::Drawing::ImageData::SetImage(System::String) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a5ac978cf9d8ee35df2dc3c687daf9479" kindref="member">Aspose::Words::Drawing::ImageData::ToByteArray</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a919ffb6a0d60a20ae666df7d924efc37" kindref="member">Aspose::Words::Drawing::ImageData::ToImage</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a50e5fd61bec605566d3d4c18e0c1cab0" kindref="member">Aspose::Words::Drawing::ImageData::ToStream</ref> </para>
</simplesect>
<simplesect kind="see"><para>Aspose::Words::Drawing::ImageData::Save(System::String)</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create an image file from a shape&apos;s raw image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imgShape-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ToByteArray()<sp/>returns<sp/>the<sp/>array<sp/>stored<sp/>in<sp/>the<sp/>ImageBytes<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(imgShape-&gt;get_ImageData()-&gt;get_ImageBytes(),<sp/>imgShape-&gt;get_ImageData()-&gt;ToByteArray());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>shape&apos;s<sp/>image<sp/>data<sp/>to<sp/>an<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>imgStream<sp/>=<sp/>imgShape-&gt;get_ImageData()-&gt;ToStream();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outStream<sp/>=<sp/>MakeObject&lt;System::IO::FileStream&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.GetDataFromImage.png&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Create,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System::IO::FileAccess::ReadWrite);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgStream-&gt;CopyTo(outStream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="186" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a8cea11d5b3740d41bc34d0f27d8ec0a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_size" kindref="compound">Aspose::Words::Drawing::ImageSize</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::ImageSize &gt; Aspose::Words::Drawing::ImageData::get_ImageSize</definition>
        <argsstring>()</argsstring>
        <name>get_ImageSize</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_ImageSize</qualifiedname>
        <briefdescription>
<para>Gets the information about image size and resolution. </para>
        </briefdescription>
        <detaileddescription>
<para>If the image is linked only and not stored in the document, returns zero size.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to resize a shape with an image. <programlisting><codeline><highlight class="comment">//<sp/>When<sp/>we<sp/>insert<sp/>an<sp/>image<sp/>using<sp/>the<sp/>&quot;InsertImage&quot;<sp/>method,<sp/>the<sp/>builder<sp/>scales<sp/>the<sp/>shape<sp/>that<sp/>displays<sp/>the<sp/>image<sp/>so<sp/>that,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>we<sp/>view<sp/>the<sp/>document<sp/>using<sp/>100%<sp/>zoom<sp/>in<sp/>Microsoft<sp/>Word,<sp/>the<sp/>shape<sp/>displays<sp/>the<sp/>image<sp/>in<sp/>its<sp/>actual<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>400x400<sp/>image<sp/>will<sp/>create<sp/>an<sp/>ImageData<sp/>object<sp/>with<sp/>an<sp/>image<sp/>size<sp/>of<sp/>300x300pt.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageSize&gt;<sp/>imageSize<sp/>=<sp/>shape-&gt;get_ImageData()-&gt;get_ImageSize();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(300.0,<sp/>imageSize-&gt;get_WidthPoints());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(300.0,<sp/>imageSize-&gt;get_HeightPoints());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>shape&apos;s<sp/>dimensions<sp/>match<sp/>the<sp/>image<sp/>data&apos;s<sp/>dimensions,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>shape<sp/>is<sp/>displaying<sp/>the<sp/>image<sp/>in<sp/>its<sp/>original<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(300.0,<sp/>shape-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(300.0,<sp/>shape-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reduce<sp/>the<sp/>overall<sp/>size<sp/>of<sp/>the<sp/>shape<sp/>by<sp/>50%.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">System::setter_mul_wrap(shape.GetPointer(),<sp/>&amp;<ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a084bb01d8745091d41a49c4c02a4e4c1" kindref="member" tooltip="Gets or sets the width of the containing block of the shape.">ShapeBase::get_Width</ref>,<sp/>&amp;<ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1abc1647de067cb60261df30ae474a048d" kindref="member" tooltip="Setter for Aspose::Words::Drawing::ShapeBase::get_Width.">ShapeBase::set_Width</ref>,<sp/>0.5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Scaling<sp/>factors<sp/>apply<sp/>to<sp/>both<sp/>the<sp/>width<sp/>and<sp/>the<sp/>height<sp/>at<sp/>the<sp/>same<sp/>time<sp/>to<sp/>preserve<sp/>the<sp/>shape&apos;s<sp/>proportions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(150.0,<sp/>shape-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(150.0,<sp/>shape-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>resize<sp/>the<sp/>shape,<sp/>the<sp/>size<sp/>of<sp/>the<sp/>image<sp/>data<sp/>remains<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(300.0,<sp/>imageSize-&gt;get_WidthPoints());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(300.0,<sp/>imageSize-&gt;get_HeightPoints());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>reference<sp/>the<sp/>image<sp/>data<sp/>dimensions<sp/>to<sp/>apply<sp/>a<sp/>scaling<sp/>based<sp/>on<sp/>the<sp/>size<sp/>of<sp/>the<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Width(imageSize-&gt;get_WidthPoints()<sp/>*<sp/>1.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(330.0,<sp/>shape-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(330.0,<sp/>shape-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.ScaleImage.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="270" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a085d312feb8d0be8ad07931e488e6fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a439114bf0dc077ee793dd7871b2501c3" kindref="member">Aspose::Words::Drawing::ImageType</ref></type>
        <definition>Aspose::Words::Drawing::ImageType Aspose::Words::Drawing::ImageData::get_ImageType</definition>
        <argsstring>()</argsstring>
        <name>get_ImageType</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_ImageType</qualifiedname>
        <briefdescription>
<para>Gets the type of the image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to extract images from a document, and save them to the local file system as individual files. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>collection<sp/>of<sp/>shapes<sp/>from<sp/>the<sp/>document,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>save<sp/>the<sp/>image<sp/>data<sp/>of<sp/>every<sp/>shape<sp/>with<sp/>an<sp/>image<sp/>as<sp/>a<sp/>file<sp/>to<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>shapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(9,<sp/>shapes-&gt;LINQ_Count([](SharedPtr&lt;Node&gt;<sp/>s)<sp/>{<sp/>return<sp/>(System::DynamicCast&lt;Shape&gt;(s))-&gt;get_HasImage();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imageIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shape<sp/>:<sp/>System::IterateOver(shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasImage())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>image<sp/>data<sp/>of<sp/>shapes<sp/>may<sp/>contain<sp/>images<sp/>of<sp/>many<sp/>possible<sp/>image<sp/>formats.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>determine<sp/>a<sp/>file<sp/>extension<sp/>for<sp/>each<sp/>image<sp/>automatically,<sp/>based<sp/>on<sp/>its<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;File.ExtractImages.{0}{1}&quot;</highlight><highlight class="normal">,<sp/>imageIndex,<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a21e427265e23db717e528d7f901e570e" kindref="member" tooltip="Converts an Aspose.Words image type enumerated value into a file extension. The returned extension is...">FileFormatUtil::ImageTypeToExtension</ref>(shape-&gt;get_ImageData()-&gt;get_ImageType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_ImageData()-&gt;Save(ArtifactsDir<sp/>+<sp/>imageFileName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageIndex++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="300" column="42"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1acb568ee206bad01b43742d9883378146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::ImageData::get_IsLink</definition>
        <argsstring>()</argsstring>
        <name>get_IsLink</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_IsLink</qualifiedname>
        <briefdescription>
<para>Returns true if the image is linked to the shape (when <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a9b59019bb8da0aca952457544d9d3c58" kindref="member">SourceFullName</ref> is specified). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="362" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a3d1cb5816c055681197a2e35b0b394fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::ImageData::get_IsLinkOnly</definition>
        <argsstring>()</argsstring>
        <name>get_IsLinkOnly</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_IsLinkOnly</qualifiedname>
        <briefdescription>
<para>Returns true if the image is linked and not stored in the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="424" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a9b59019bb8da0aca952457544d9d3c58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Drawing::ImageData::get_SourceFullName</definition>
        <argsstring>()</argsstring>
        <name>get_SourceFullName</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_SourceFullName</qualifiedname>
        <briefdescription>
<para>Gets or sets the path and name of the source file for the linked image. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is an empty string.</para>
<para>If <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a9b59019bb8da0aca952457544d9d3c58" kindref="member">SourceFullName</ref> is not an empty string, the image is linked.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a linked image into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=<sp/>ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Windows<sp/>MetaFile.wmf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>applying<sp/>an<sp/>image<sp/>to<sp/>a<sp/>shape<sp/>so<sp/>that<sp/>it<sp/>can<sp/>display<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Set<sp/>the<sp/>shape<sp/>to<sp/>contain<sp/>the<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(builder-&gt;get_Document(),<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa0125cf5f3ca38b312ca5d3b511c45a13" kindref="member" tooltip="The shape remains on the same layer as text and treated as a character.">WrapType::Inline</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;SetImage(imageFileName);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Embedded.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>image<sp/>that<sp/>we<sp/>store<sp/>in<sp/>shape<sp/>will<sp/>increase<sp/>the<sp/>size<sp/>of<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(70000<sp/>&lt;<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Embedded.docx&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Set<sp/>the<sp/>shape<sp/>to<sp/>link<sp/>to<sp/>an<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(builder-&gt;get_Document(),<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa0125cf5f3ca38b312ca5d3b511c45a13" kindref="member" tooltip="The shape remains on the same layer as text and treated as a character.">WrapType::Inline</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;set_SourceFullName(imageFileName);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(shape);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Linked.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Linking<sp/>to<sp/>images<sp/>will<sp/>save<sp/>space<sp/>and<sp/>result<sp/>in<sp/>a<sp/>smaller<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>document<sp/>can<sp/>only<sp/>display<sp/>the<sp/>image<sp/>correctly<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>image<sp/>file<sp/>is<sp/>present<sp/>at<sp/>the<sp/>location<sp/>that<sp/>the<sp/>shape&apos;s<sp/>&quot;SourceFullName&quot;<sp/>property<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(10000<sp/>&gt;<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Linked.docx&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="469" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a4d0d221946c7e521f4c55382d38aa30c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Drawing::ImageData::get_Title</definition>
        <argsstring>()</argsstring>
        <name>get_Title</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::get_Title</qualifiedname>
        <briefdescription>
<para>Defines the title of an image. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is an empty string.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to edit a shape&apos;s image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sourceShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>a<sp/>shape<sp/>from<sp/>the<sp/>source<sp/>document<sp/>and<sp/>append<sp/>it<sp/>to<sp/>the<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>imported<sp/>shape<sp/>contains<sp/>an<sp/>image.<sp/>We<sp/>can<sp/>access<sp/>the<sp/>image&apos;s<sp/>properties<sp/>and<sp/>raw<sp/>data<sp/>via<sp/>the<sp/>ImageData<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>importedShape-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Title(u</highlight><highlight class="stringliteral">&quot;Imported<sp/>Image&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imageData-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>image<sp/>has<sp/>no<sp/>borders,<sp/>its<sp/>ImageData<sp/>object<sp/>will<sp/>define<sp/>the<sp/>border<sp/>color<sp/>as<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>imageData-&gt;get_Borders()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>imageData-&gt;get_Borders()-&gt;idx_get(0)-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>does<sp/>not<sp/>link<sp/>to<sp/>another<sp/>shape<sp/>or<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLink());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(imageData-&gt;get_IsLinkOnly());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Brightness&quot;<sp/>and<sp/>&quot;Contrast&quot;<sp/>properties<sp/>define<sp/>image<sp/>brightness<sp/>and<sp/>contrast</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>a<sp/>0-1<sp/>scale,<sp/>with<sp/>the<sp/>default<sp/>value<sp/>at<sp/>0.5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Brightness(0.8);</highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_Contrast(1.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>brightness<sp/>and<sp/>contrast<sp/>values<sp/>have<sp/>created<sp/>an<sp/>image<sp/>with<sp/>a<sp/>lot<sp/>of<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>select<sp/>a<sp/>color<sp/>with<sp/>the<sp/>ChromaKey<sp/>property<sp/>to<sp/>replace<sp/>with<sp/>transparency,<sp/>such<sp/>as<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageData-&gt;set_ChromaKey(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>and<sp/>set<sp/>the<sp/>image<sp/>to<sp/>monochrome.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_GrayScale(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Import<sp/>the<sp/>source<sp/>shape<sp/>again<sp/>to<sp/>create<sp/>a<sp/>third<sp/>image<sp/>and<sp/>set<sp/>it<sp/>to<sp/>BiLevel.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BiLevel<sp/>sets<sp/>every<sp/>pixel<sp/>to<sp/>either<sp/>black<sp/>or<sp/>white,<sp/>whichever<sp/>is<sp/>closer<sp/>to<sp/>the<sp/>original<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(dstDoc-&gt;ImportNode(sourceShape,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(importedShape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_BiLevel(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cropping<sp/>is<sp/>determined<sp/>on<sp/>a<sp/>0-1<sp/>scale.<sp/>Cropping<sp/>a<sp/>side<sp/>by<sp/>0.3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>crop<sp/>30%<sp/>of<sp/>the<sp/>image<sp/>out<sp/>at<sp/>the<sp/>cropped<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropBottom(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropLeft(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropTop(0.3);</highlight></codeline>
<codeline><highlight class="normal">importedShape-&gt;get_ImageData()-&gt;set_CropRight(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImageData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="536" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a4b5da3b21bce9d94d3c80b5d8eb78734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::Save</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream)</argsstring>
        <name>Save</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::Save</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Saves the image into the specified stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Is it the responsibility of the caller to dispose the stream object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream where to save the image to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to save all images from a document to the file system. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shapes<sp/>with<sp/>the<sp/>&quot;HasImage&quot;<sp/>flag<sp/>set<sp/>store<sp/>and<sp/>display<sp/>all<sp/>the<sp/>document&apos;s<sp/>images.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shapesWithImages<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_Cast&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Where([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;get_HasImage();<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>each<sp/>shape<sp/>and<sp/>save<sp/>its<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatConverter<sp/>=<sp/>MakeObject&lt;System::Drawing::ImageFormatConverter&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;Shape&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>shapesWithImages-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shapeIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>enumerator-&gt;get_Current()-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Imaging::ImageFormat&gt;<sp/>format<sp/>=<sp/>imageData-&gt;ToImage()-&gt;get_RawFormat();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>fileExtension<sp/>=<sp/>formatConverter-&gt;ConvertToString(format);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::FileStream&gt;<sp/>fileStream<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class/system.i_o.file/_1a4ae2fe9ccdd95b23c3aa07177a6f325e" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::File::Create</ref>(ArtifactsDir<sp/>+<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Drawing.SaveAllImages.{0}.{1}&quot;</highlight><highlight class="normal">,<sp/>++shapeIndex,<sp/>fileExtension));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageData-&gt;Save(fileStream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1495" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1afd2485997433dc762b1239727b646075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::Save</definition>
        <argsstring>(const System::String &amp;fileName)</argsstring>
        <name>Save</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::Save</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Saves the image into a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The file name where to save the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to extract images from a document, and save them to the local file system as individual files. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>collection<sp/>of<sp/>shapes<sp/>from<sp/>the<sp/>document,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>save<sp/>the<sp/>image<sp/>data<sp/>of<sp/>every<sp/>shape<sp/>with<sp/>an<sp/>image<sp/>as<sp/>a<sp/>file<sp/>to<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>shapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(9,<sp/>shapes-&gt;LINQ_Count([](SharedPtr&lt;Node&gt;<sp/>s)<sp/>{<sp/>return<sp/>(System::DynamicCast&lt;Shape&gt;(s))-&gt;get_HasImage();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imageIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shape<sp/>:<sp/>System::IterateOver(shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasImage())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>image<sp/>data<sp/>of<sp/>shapes<sp/>may<sp/>contain<sp/>images<sp/>of<sp/>many<sp/>possible<sp/>image<sp/>formats.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>determine<sp/>a<sp/>file<sp/>extension<sp/>for<sp/>each<sp/>image<sp/>automatically,<sp/>based<sp/>on<sp/>its<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;File.ExtractImages.{0}{1}&quot;</highlight><highlight class="normal">,<sp/>imageIndex,<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a21e427265e23db717e528d7f901e570e" kindref="member" tooltip="Converts an Aspose.Words image type enumerated value into a file extension. The returned extension is...">FileFormatUtil::ImageTypeToExtension</ref>(shape-&gt;get_ImageData()-&gt;get_ImageType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_ImageData()-&gt;Save(ArtifactsDir<sp/>+<sp/>imageFileName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageIndex++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1527" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ab71f73a63b4f324bb73a996f16f9c3fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::Save</definition>
        <argsstring>(std::basic_ostream&lt; CharType, Traits &gt; &amp;stream)</argsstring>
        <name>Save</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::Save</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; CharType, Traits &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1537" column="10" bodyfile="Aspose.Words.Cpp/Drawing/ImageData.h" bodystart="1537" bodyend="1541"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a67693353f0ae62f186be1e12d1fdf056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_BiLevel</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_BiLevel</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_BiLevel</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a3408255679c441e698617cc192707dea" kindref="member">Aspose::Words::Drawing::ImageData::get_BiLevel</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1167" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a5f037e63bfa49e7014c0156e8111b9f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_Brightness</definition>
        <argsstring>(double value)</argsstring>
        <name>set_Brightness</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_Brightness</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aa9a7825f79fe1b3de67812790a09e5be" kindref="member">Aspose::Words::Drawing::ImageData::get_Brightness</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1032" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1adb68d4789b6d906b4c39629dd20da03e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_ChromaKey</definition>
        <argsstring>(System::Drawing::Color value)</argsstring>
        <name>set_ChromaKey</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_ChromaKey</qualifiedname>
        <param>
          <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a90c258bf6648eb117c6e18a61abe725b" kindref="member">Aspose::Words::Drawing::ImageData::get_ChromaKey</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="964" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a6e39cb01cfbab46a29db46494388af95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_Contrast</definition>
        <argsstring>(double value)</argsstring>
        <name>set_Contrast</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_Contrast</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a5acc8b705f9f3d0469f15dad18edca84" kindref="member">Aspose::Words::Drawing::ImageData::get_Contrast</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1100" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a8dbba7fea240d16a346da564bc424f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_CropBottom</definition>
        <argsstring>(double value)</argsstring>
        <name>set_CropBottom</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_CropBottom</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aae95fdb47f0367f29d091a559d760b1b" kindref="member">Aspose::Words::Drawing::ImageData::get_CropBottom</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="687" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ab4cbde8431138173d4c870015f348474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_CropLeft</definition>
        <argsstring>(double value)</argsstring>
        <name>set_CropLeft</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_CropLeft</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1afa88761b1202fb3045f25041a224093b" kindref="member">Aspose::Words::Drawing::ImageData::get_CropLeft</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="761" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a9231ccbd092e6c920200bc7d7edc8ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_CropRight</definition>
        <argsstring>(double value)</argsstring>
        <name>set_CropRight</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_CropRight</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a0711db8a412a22ed5729c7be53fd6801" kindref="member">Aspose::Words::Drawing::ImageData::get_CropRight</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="835" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a969014aa986f0e83e9d1399a8de2936e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_CropTop</definition>
        <argsstring>(double value)</argsstring>
        <name>set_CropTop</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_CropTop</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a4994c5204fc58ebbea145be3fd4d428b" kindref="member">Aspose::Words::Drawing::ImageData::get_CropTop</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="613" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ab5174e05b99a9f20b3ce8eb6862d23ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_GrayScale</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_GrayScale</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_GrayScale</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a957100c9347ea8e36294284816276296" kindref="member">Aspose::Words::Drawing::ImageData::get_GrayScale</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1234" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a0411cb1459480d3e7682dbe787eaa9da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_ImageBytes</definition>
        <argsstring>(const System::ArrayPtr&lt; uint8_t &gt; &amp;value)</argsstring>
        <name>set_ImageBytes</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_ImageBytes</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a355d0f443d9256bd801443f2b27ced46" kindref="member">Aspose::Words::Drawing::ImageData::get_ImageBytes</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="189" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a4fdaca9ca0c458ff27098c06f4a9e90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_SourceFullName</definition>
        <argsstring>(const System::String &amp;value)</argsstring>
        <name>set_SourceFullName</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_SourceFullName</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a9b59019bb8da0aca952457544d9d3c58" kindref="member">Aspose::Words::Drawing::ImageData::get_SourceFullName</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="472" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1af1c3f4b3322ed33e467412ae41003e94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::set_Title</definition>
        <argsstring>(const System::String &amp;value)</argsstring>
        <name>set_Title</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::set_Title</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a4d0d221946c7e521f4c55382d38aa30c" kindref="member">Aspose::Words::Drawing::ImageData::get_Title</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="539" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aa2161a99bf606fb502ab09b4dfe807fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::SetImage</definition>
        <argsstring>(const System::SharedPtr&lt; System::Drawing::Image &gt; &amp;image)</argsstring>
        <name>SetImage</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::SetImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.drawing.image/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image</ref> &gt; &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
<para>Sets the image that the shape displays. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>The image object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to display images from the local file system in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>display<sp/>an<sp/>image<sp/>in<sp/>a<sp/>document,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>create<sp/>a<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>contain<sp/>an<sp/>image,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>to<sp/>the<sp/>document&apos;s<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>imgShape;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>getting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Create<sp/>an<sp/>image<sp/>object<sp/>from<sp/>an<sp/>image<sp/>file:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Image&gt;<sp/>srcImage<sp/>=<sp/><ref refid="class/system.drawing.image/_1a744ad35e2fcb00393fb7ce4e24e59263" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromFile</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgShape<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(imgShape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgShape-&gt;get_ImageData()-&gt;SetImage(srcImage);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Open<sp/>an<sp/>image<sp/>file<sp/>from<sp/>the<sp/>local<sp/>file<sp/>system<sp/>using<sp/>a<sp/>stream:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MakeObject&lt;System::IO::FileStream&gt;(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Open,<sp/>System::IO::FileAccess::Read);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgShape<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(imgShape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgShape-&gt;get_ImageData()-&gt;SetImage(stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgShape-&gt;set_Left(150.0f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImportImage.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1271" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a0d341c35d7125244af8a840fd003044b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::SetImage</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream)</argsstring>
        <name>SetImage</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::SetImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Sets the image that the shape displays. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream that contains the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to display images from the local file system in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>display<sp/>an<sp/>image<sp/>in<sp/>a<sp/>document,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>create<sp/>a<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>contain<sp/>an<sp/>image,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>to<sp/>the<sp/>document&apos;s<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>imgShape;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>getting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Create<sp/>an<sp/>image<sp/>object<sp/>from<sp/>an<sp/>image<sp/>file:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Image&gt;<sp/>srcImage<sp/>=<sp/><ref refid="class/system.drawing.image/_1a744ad35e2fcb00393fb7ce4e24e59263" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromFile</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgShape<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(imgShape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgShape-&gt;get_ImageData()-&gt;SetImage(srcImage);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Open<sp/>an<sp/>image<sp/>file<sp/>from<sp/>the<sp/>local<sp/>file<sp/>system<sp/>using<sp/>a<sp/>stream:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MakeObject&lt;System::IO::FileStream&gt;(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Open,<sp/>System::IO::FileAccess::Read);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgShape<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(imgShape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgShape-&gt;get_ImageData()-&gt;SetImage(stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgShape-&gt;set_Left(150.0f);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.ImportImage.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1308" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1af586c546d17fb4bc0cddd37ce308278f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::SetImage</definition>
        <argsstring>(const System::String &amp;fileName)</argsstring>
        <name>SetImage</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::SetImage</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Sets the image that the shape displays. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The image file. Can be a file name or a URL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a linked image into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=<sp/>ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Windows<sp/>MetaFile.wmf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>applying<sp/>an<sp/>image<sp/>to<sp/>a<sp/>shape<sp/>so<sp/>that<sp/>it<sp/>can<sp/>display<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Set<sp/>the<sp/>shape<sp/>to<sp/>contain<sp/>the<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(builder-&gt;get_Document(),<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa0125cf5f3ca38b312ca5d3b511c45a13" kindref="member" tooltip="The shape remains on the same layer as text and treated as a character.">WrapType::Inline</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;SetImage(imageFileName);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Embedded.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>image<sp/>that<sp/>we<sp/>store<sp/>in<sp/>shape<sp/>will<sp/>increase<sp/>the<sp/>size<sp/>of<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(70000<sp/>&lt;<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Embedded.docx&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Set<sp/>the<sp/>shape<sp/>to<sp/>link<sp/>to<sp/>an<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(builder-&gt;get_Document(),<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa0125cf5f3ca38b312ca5d3b511c45a13" kindref="member" tooltip="The shape remains on the same layer as text and treated as a character.">WrapType::Inline</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;set_SourceFullName(imageFileName);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(shape);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Linked.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Linking<sp/>to<sp/>images<sp/>will<sp/>save<sp/>space<sp/>and<sp/>result<sp/>in<sp/>a<sp/>smaller<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>document<sp/>can<sp/>only<sp/>display<sp/>the<sp/>image<sp/>correctly<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>image<sp/>file<sp/>is<sp/>present<sp/>at<sp/>the<sp/>location<sp/>that<sp/>the<sp/>shape&apos;s<sp/>&quot;SourceFullName&quot;<sp/>property<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(10000<sp/>&gt;<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Linked.docx&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1351" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1acb02e5669ca4c3fc251bf284a23b2543" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Aspose::Words::Drawing::ImageData::SetImage</definition>
        <argsstring>(std::basic_istream&lt; CharType, Traits &gt; &amp;stream)</argsstring>
        <name>SetImage</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::SetImage</qualifiedname>
        <param>
          <type>std::basic_istream&lt; CharType, Traits &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1530" column="10" bodyfile="Aspose.Words.Cpp/Drawing/ImageData.h" bodystart="1530" bodyend="1534"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a5ac978cf9d8ee35df2dc3c687daf9479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt;</type>
        <definition>System::ArrayPtr&lt; uint8_t &gt; Aspose::Words::Drawing::ImageData::ToByteArray</definition>
        <argsstring>()</argsstring>
        <name>ToByteArray</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::ToByteArray</qualifiedname>
        <briefdescription>
<para>Returns image bytes for any image regardless whether the image is stored or linked. </para>
        </briefdescription>
        <detaileddescription>
<para>If the image is linked, downloads the image every time it is called.</para>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a355d0f443d9256bd801443f2b27ced46" kindref="member">Aspose::Words::Drawing::ImageData::get_ImageBytes</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create an image file from a shape&apos;s raw image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imgShape-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ToByteArray()<sp/>returns<sp/>the<sp/>array<sp/>stored<sp/>in<sp/>the<sp/>ImageBytes<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(imgShape-&gt;get_ImageData()-&gt;get_ImageBytes(),<sp/>imgShape-&gt;get_ImageData()-&gt;ToByteArray());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>shape&apos;s<sp/>image<sp/>data<sp/>to<sp/>an<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>imgStream<sp/>=<sp/>imgShape-&gt;get_ImageData()-&gt;ToStream();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outStream<sp/>=<sp/>MakeObject&lt;System::IO::FileStream&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.GetDataFromImage.png&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Create,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System::IO::FileAccess::ReadWrite);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgStream-&gt;CopyTo(outStream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1456" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a919ffb6a0d60a20ae666df7d924efc37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.drawing.image/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image</ref> &gt;</type>
        <definition>System::SharedPtr&lt; System::Drawing::Image &gt; Aspose::Words::Drawing::ImageData::ToImage</definition>
        <argsstring>()</argsstring>
        <name>ToImage</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::ToImage</qualifiedname>
        <briefdescription>
<para>Gets the image stored in the shape as a <ref refid="class/system.drawing.image/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">Image</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>A new <ref refid="class/system.drawing.image/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">Image</ref> object is created every time this method is called.</para>
<para>It is the responsibility of the caller to dispose the image object.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to save all images from a document to the file system. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shapes<sp/>with<sp/>the<sp/>&quot;HasImage&quot;<sp/>flag<sp/>set<sp/>store<sp/>and<sp/>display<sp/>all<sp/>the<sp/>document&apos;s<sp/>images.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shapesWithImages<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imgSourceDoc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_Cast&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Where([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;get_HasImage();<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Go<sp/>through<sp/>each<sp/>shape<sp/>and<sp/>save<sp/>its<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatConverter<sp/>=<sp/>MakeObject&lt;System::Drawing::ImageFormatConverter&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;Shape&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>shapesWithImages-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shapeIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ImageData&gt;<sp/>imageData<sp/>=<sp/>enumerator-&gt;get_Current()-&gt;get_ImageData();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Imaging::ImageFormat&gt;<sp/>format<sp/>=<sp/>imageData-&gt;ToImage()-&gt;get_RawFormat();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>fileExtension<sp/>=<sp/>formatConverter-&gt;ConvertToString(format);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::FileStream&gt;<sp/>fileStream<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class/system.i_o.file/_1a4ae2fe9ccdd95b23c3aa07177a6f325e" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::File::Create</ref>(ArtifactsDir<sp/>+<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Drawing.SaveAllImages.{0}.{1}&quot;</highlight><highlight class="normal">,<sp/>++shapeIndex,<sp/>fileExtension));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageData-&gt;Save(fileStream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1390" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a50e5fd61bec605566d3d4c18e0c1cab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt;</type>
        <definition>System::SharedPtr&lt; System::IO::Stream &gt; Aspose::Words::Drawing::ImageData::ToStream</definition>
        <argsstring>()</argsstring>
        <name>ToStream</name>
        <qualifiedname>Aspose::Words::Drawing::ImageData::ToStream</qualifiedname>
        <briefdescription>
<para>Creates and returns a stream that contains the image bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>If the image bytes are stored in the shape, creates and returns a <ref refid="class/system.i_o.memory_stream/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">MemoryStream</ref> object.</para>
<para>If the image is linked and stored in a file, opens the file and returns a <ref refid="class/system.i_o.file_stream/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">FileStream</ref> object.</para>
<para>If the image is linked and stored in an external URL, downloads the file and returns a <ref refid="class/system.i_o.memory_stream/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">MemoryStream</ref> object.</para>
<para>Is it the responsibility of the caller to dispose the stream object.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create an image file from a shape&apos;s raw image data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgSourceDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imgShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(imgSourceDoc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(imgShape-&gt;get_HasImage());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ToByteArray()<sp/>returns<sp/>the<sp/>array<sp/>stored<sp/>in<sp/>the<sp/>ImageBytes<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(imgShape-&gt;get_ImageData()-&gt;get_ImageBytes(),<sp/>imgShape-&gt;get_ImageData()-&gt;ToByteArray());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>shape&apos;s<sp/>image<sp/>data<sp/>to<sp/>an<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>imgStream<sp/>=<sp/>imgShape-&gt;get_ImageData()-&gt;ToStream();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outStream<sp/>=<sp/>MakeObject&lt;System::IO::FileStream&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.GetDataFromImage.png&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Create,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System::IO::FileAccess::ReadWrite);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imgStream-&gt;CopyTo(outStream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="1425" column="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines an image for a shape. </para>
    </briefdescription>
    <detaileddescription>
<para>Use the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1abacf5f3de13076cf86ee7397a866c41d" kindref="member">ImageData</ref> property to access and modify the image inside a shape. You do not create instances of the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data" kindref="compound">ImageData</ref> class directly.</para>
<para>An image can be stored inside a shape, linked to external file or both (linked and stored in the document).</para>
<para>Regardless of whether the image is stored inside the shape or linked, you can always access the actual image using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a5ac978cf9d8ee35df2dc3c687daf9479" kindref="member">ToByteArray</ref>, <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a50e5fd61bec605566d3d4c18e0c1cab0" kindref="member">ToStream</ref>, <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a919ffb6a0d60a20ae666df7d924efc37" kindref="member">ToImage</ref> or <ref refid="" kindref="compound">Save()</ref> methods. If the image is stored inside the shape, you can also directly access it using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a355d0f443d9256bd801443f2b27ced46" kindref="member">ImageBytes</ref> property.</para>
<para>To store an image inside a shape use the <ref refid="" kindref="compound">SetImage()</ref> method. To link an image to a shape, set the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a9b59019bb8da0aca952457544d9d3c58" kindref="member">SourceFullName</ref> property.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to extract images from a document, and save them to the local file system as individual files. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>collection<sp/>of<sp/>shapes<sp/>from<sp/>the<sp/>document,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>save<sp/>the<sp/>image<sp/>data<sp/>of<sp/>every<sp/>shape<sp/>with<sp/>an<sp/>image<sp/>as<sp/>a<sp/>file<sp/>to<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>shapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(9,<sp/>shapes-&gt;LINQ_Count([](SharedPtr&lt;Node&gt;<sp/>s)<sp/>{<sp/>return<sp/>(System::DynamicCast&lt;Shape&gt;(s))-&gt;get_HasImage();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imageIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shape<sp/>:<sp/>System::IterateOver(shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasImage())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>image<sp/>data<sp/>of<sp/>shapes<sp/>may<sp/>contain<sp/>images<sp/>of<sp/>many<sp/>possible<sp/>image<sp/>formats.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>determine<sp/>a<sp/>file<sp/>extension<sp/>for<sp/>each<sp/>image<sp/>automatically,<sp/>based<sp/>on<sp/>its<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;File.ExtractImages.{0}{1}&quot;</highlight><highlight class="normal">,<sp/>imageIndex,<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a21e427265e23db717e528d7f901e570e" kindref="member" tooltip="Converts an Aspose.Words image type enumerated value into a file extension. The returned extension is...">FileFormatUtil::ImageTypeToExtension</ref>(shape-&gt;get_ImageData()-&gt;get_ImageType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_ImageData()-&gt;Save(ArtifactsDir<sp/>+<sp/>imageFileName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageIndex++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a linked image into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=<sp/>ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Windows<sp/>MetaFile.wmf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>applying<sp/>an<sp/>image<sp/>to<sp/>a<sp/>shape<sp/>so<sp/>that<sp/>it<sp/>can<sp/>display<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Set<sp/>the<sp/>shape<sp/>to<sp/>contain<sp/>the<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(builder-&gt;get_Document(),<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa0125cf5f3ca38b312ca5d3b511c45a13" kindref="member" tooltip="The shape remains on the same layer as text and treated as a character.">WrapType::Inline</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;SetImage(imageFileName);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Embedded.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>image<sp/>that<sp/>we<sp/>store<sp/>in<sp/>shape<sp/>will<sp/>increase<sp/>the<sp/>size<sp/>of<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(70000<sp/>&lt;<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Embedded.docx&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Set<sp/>the<sp/>shape<sp/>to<sp/>link<sp/>to<sp/>an<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(builder-&gt;get_Document(),<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa0125cf5f3ca38b312ca5d3b511c45a13" kindref="member" tooltip="The shape remains on the same layer as text and treated as a character.">WrapType::Inline</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;set_SourceFullName(imageFileName);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(shape);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Linked.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Linking<sp/>to<sp/>images<sp/>will<sp/>save<sp/>space<sp/>and<sp/>result<sp/>in<sp/>a<sp/>smaller<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>document<sp/>can<sp/>only<sp/>display<sp/>the<sp/>image<sp/>correctly<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>image<sp/>file<sp/>is<sp/>present<sp/>at<sp/>the<sp/>location<sp/>that<sp/>the<sp/>shape&apos;s<sp/>&quot;SourceFullName&quot;<sp/>property<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(10000<sp/>&gt;<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Linked.docx&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Aspose::Words::Drawing::ImageData</label>
        <link refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::IBorderAttrSource</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Aspose::Words::Drawing::ImageData</label>
        <link refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::IBorderAttrSource</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Drawing/ImageData.h" line="141" column="1" bodyfile="Aspose.Words.Cpp/Drawing/ImageData.h" bodystart="142" bodyend="1560"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ae1737f2c3296026124f0386995242956" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a3408255679c441e698617cc192707dea" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_BiLevel</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a98cd8b0ab5be254774f28f3b5e897a3d" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_Borders</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aa9a7825f79fe1b3de67812790a09e5be" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_Brightness</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a90c258bf6648eb117c6e18a61abe725b" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_ChromaKey</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a5acc8b705f9f3d0469f15dad18edca84" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_Contrast</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aae95fdb47f0367f29d091a559d760b1b" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_CropBottom</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1afa88761b1202fb3045f25041a224093b" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_CropLeft</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a0711db8a412a22ed5729c7be53fd6801" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_CropRight</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a4994c5204fc58ebbea145be3fd4d428b" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_CropTop</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a957100c9347ea8e36294284816276296" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_GrayScale</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ae41e9fec7be26ec61b5982358c6fa661" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_HasImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a355d0f443d9256bd801443f2b27ced46" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_ImageBytes</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a8cea11d5b3740d41bc34d0f27d8ec0a1" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_ImageSize</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a085d312feb8d0be8ad07931e488e6fbb" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_ImageType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1acb568ee206bad01b43742d9883378146" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_IsLink</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a3d1cb5816c055681197a2e35b0b394fb" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_IsLinkOnly</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a9b59019bb8da0aca952457544d9d3c58" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_SourceFullName</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a4d0d221946c7e521f4c55382d38aa30c" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>get_Title</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a0fe006af3273614e3db622edd44f124d" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a005aabf6130bcfada348253b1b808880" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aeb2a10afce79b1f49d9397fadc6ee16d" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a3597ba11f6171085f46f51b92d99d3a7" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a4b5da3b21bce9d94d3c80b5d8eb78734" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>Save</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1afd2485997433dc762b1239727b646075" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>Save</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ab71f73a63b4f324bb73a996f16f9c3fa" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>Save</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a67693353f0ae62f186be1e12d1fdf056" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_BiLevel</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a5f037e63bfa49e7014c0156e8111b9f5" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_Brightness</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1adb68d4789b6d906b4c39629dd20da03e" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_ChromaKey</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a6e39cb01cfbab46a29db46494388af95" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_Contrast</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a8dbba7fea240d16a346da564bc424f63" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_CropBottom</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ab4cbde8431138173d4c870015f348474" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_CropLeft</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a9231ccbd092e6c920200bc7d7edc8ab2" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_CropRight</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a969014aa986f0e83e9d1399a8de2936e" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_CropTop</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ab5174e05b99a9f20b3ce8eb6862d23ce" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_GrayScale</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a0411cb1459480d3e7682dbe787eaa9da" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_ImageBytes</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a4fdaca9ca0c458ff27098c06f4a9e90c" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_SourceFullName</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1af1c3f4b3322ed33e467412ae41003e94" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>set_Title</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aa2161a99bf606fb502ab09b4dfe807fc" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>SetImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a0d341c35d7125244af8a840fd003044b" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>SetImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1af586c546d17fb4bc0cddd37ce308278f" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>SetImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1acb02e5669ca4c3fc251bf284a23b2543" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>SetImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1ae9b55817aa939936a7053dacceae0a21" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aa0183a70996627ceb2bf575d7203618f" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a5ac978cf9d8ee35df2dc3c687daf9479" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>ToByteArray</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a919ffb6a0d60a20ae666df7d924efc37" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>ToImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1a50e5fd61bec605566d3d4c18e0c1cab0" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>ToStream</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data_1aaec00d2b40514f8db871cc69cee88cc7" prot="private" virt="virtual"><scope>Aspose::Words::Drawing::ImageData</scope><name>~ImageData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
