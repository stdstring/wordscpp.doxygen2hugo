<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_tables_1_1_cell_format" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::Tables::CellFormat</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IBorderAttrSource</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IShadingAttrSource</basecompoundref>
    <includes refid="_cell_format_8h" local="no">Aspose.Words.Cpp/Tables/CellFormat.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a4f6a7c1ea9a37ad156c0fcd6cbe9df65" prot="private" static="no">
        <type>Aspose::Words::IBorderAttrSource</type>
        <definition>typedef Aspose::Words::IBorderAttrSource Aspose::Words::Tables::CellFormat::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="164" column="46" bodyfile="Aspose.Words.Cpp/Tables/CellFormat.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a3592fa90249204a94f4dd8eb10e03d82" prot="private" static="no">
        <type>Aspose::Words::IShadingAttrSource</type>
        <definition>typedef Aspose::Words::IShadingAttrSource Aspose::Words::Tables::CellFormat::BaseType1</definition>
        <argsstring></argsstring>
        <name>BaseType1</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::BaseType1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="165" column="47" bodyfile="Aspose.Words.Cpp/Tables/CellFormat.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aa00c9bd5c7c0c00bbe814eaa98695413" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format" kindref="compound">CellFormat</ref></type>
        <definition>typedef CellFormat Aspose::Words::Tables::CellFormat::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="163" column="24" bodyfile="Aspose.Words.Cpp/Tables/CellFormat.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a3f6e415e2be1589f843e5f02578d08ec" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; BaseType, BaseType1 &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType, BaseType1&gt; Aspose::Words::Tables::CellFormat::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="167" column="37" bodyfile="Aspose.Words.Cpp/Tables/CellFormat.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a5fa4dda35b083315fb41b0a43fa71263" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::Tables::CellFormat::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1202" column="21" bodyfile="Aspose.Words.Cpp/Tables/CellFormat.h" bodystart="1202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a5e8db2f5a71fb9a4f2bd890c9740907c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Tables::CellFormat::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1203" column="23" bodyfile="Aspose.Words.Cpp/Tables/CellFormat.h" bodystart="1203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aecf8b881c027a6bbccc5d395689aa60d" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::Tables::CellFormat::~CellFormat</definition>
        <argsstring>()</argsstring>
        <name>~CellFormat</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::~CellFormat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1196" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ac6323bcbe92842c4ecbed724aabf3808" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Tables::CellFormat::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="168" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ae3942b29e0a2337f561f0ce51f8353e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::ClearFormatting</definition>
        <argsstring>()</argsstring>
        <name>ClearFormatting</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::ClearFormatting</qualifiedname>
        <briefdescription>
<para>Resets to default cell formatting. Does not change the width of the cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to combine the rows from two tables into one. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Tables.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>getting<sp/>a<sp/>table<sp/>from<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>From<sp/>the<sp/>&quot;Tables&quot;<sp/>collection<sp/>of<sp/>a<sp/>Body<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>firstTable<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Tables()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Using<sp/>the<sp/>&quot;GetChild&quot;<sp/>method:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>secondTable<sp/>=<sp/>System::DynamicCast&lt;Table&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Append<sp/>all<sp/>rows<sp/>from<sp/>the<sp/>current<sp/>table<sp/>to<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(secondTable-&gt;get_HasChildNodes())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>firstTable-&gt;get_Rows()-&gt;Add(secondTable-&gt;get_FirstRow());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>empty<sp/>table<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">secondTable-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.CombineTables.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1169" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1abb5ed397f7673c9839c35099d020c60a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_border_collection" kindref="compound">Aspose::Words::BorderCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::BorderCollection &gt; Aspose::Words::Tables::CellFormat::get_Borders</definition>
        <argsstring>()</argsstring>
        <name>get_Borders</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_Borders</qualifiedname>
        <briefdescription>
<para>Gets collection of borders of the cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to combine the rows from two tables into one. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Tables.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>getting<sp/>a<sp/>table<sp/>from<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>From<sp/>the<sp/>&quot;Tables&quot;<sp/>collection<sp/>of<sp/>a<sp/>Body<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>firstTable<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Tables()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Using<sp/>the<sp/>&quot;GetChild&quot;<sp/>method:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>secondTable<sp/>=<sp/>System::DynamicCast&lt;Table&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Append<sp/>all<sp/>rows<sp/>from<sp/>the<sp/>current<sp/>table<sp/>to<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(secondTable-&gt;get_HasChildNodes())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>firstTable-&gt;get_Rows()-&gt;Add(secondTable-&gt;get_FirstRow());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>empty<sp/>table<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">secondTable-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.CombineTables.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="394" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ae399fe5c7e136a15b7baef781f0f1852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Tables::CellFormat::get_BottomPadding</definition>
        <argsstring>()</argsstring>
        <name>get_BottomPadding</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_BottomPadding</qualifiedname>
        <briefdescription>
<para>Returns or sets the amount of space (in points) to add below the contents of cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format cells with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>second<sp/>cell,<sp/>and<sp/>then<sp/>configure<sp/>cell<sp/>text<sp/>padding<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>will<sp/>apply<sp/>these<sp/>settings<sp/>at<sp/>its<sp/>current<sp/>cell,<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>creates<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CellFormat&gt;<sp/>cellFormat<sp/>=<sp/>builder-&gt;get_CellFormat();</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_Width(250);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_LeftPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_RightPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_TopPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_BottomPadding(30);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>was<sp/>unaffected<sp/>by<sp/>the<sp/>padding<sp/>reconfiguration,<sp/>and<sp/>still<sp/>holds<sp/>the<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(250.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>will<sp/>still<sp/>grow<sp/>in<sp/>the<sp/>output<sp/>document<sp/>to<sp/>match<sp/>the<sp/>size<sp/>of<sp/>its<sp/>neighboring<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetCellFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="363" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ac5b4a988dd1ac9f27dee83aab0201a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Tables::CellFormat::get_FitText</definition>
        <argsstring>()</argsstring>
        <name>get_FitText</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_FitText</qualifiedname>
        <briefdescription>
<para>If true, fits text in the cell, compressing each paragraph to the width of the cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of a cell.">CellVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1070" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a87f7e4d5d677980d91ad730b42bb7066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36" kindref="member">Aspose::Words::Tables::CellMerge</ref></type>
        <definition>Aspose::Words::Tables::CellMerge Aspose::Words::Tables::CellFormat::get_HorizontalMerge</definition>
        <argsstring>()</argsstring>
        <name>get_HorizontalMerge</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_HorizontalMerge</qualifiedname>
        <briefdescription>
<para>Specifies how the cell is merged horizontally with other cells in the row. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a12b5695056495d5dbc765d43c6e15ab6" kindref="member">Aspose::Words::Tables::CellFormat::get_VerticalMerge</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to merge table cells horizontally. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>cell<sp/>into<sp/>the<sp/>first<sp/>column<sp/>of<sp/>the<sp/>first<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>cell<sp/>will<sp/>be<sp/>the<sp/>first<sp/>in<sp/>a<sp/>range<sp/>of<sp/>horizontally<sp/>merged<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_HorizontalMerge(<ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36a7fb55ed0b7a30342ba6da306428cae04" kindref="member" tooltip="The cell is the first cell in a range of merged cells.">CellMerge::First</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>merged<sp/>cells.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>cell<sp/>into<sp/>the<sp/>second<sp/>column<sp/>of<sp/>the<sp/>first<sp/>row.<sp/>Instead<sp/>of<sp/>adding<sp/>text<sp/>contents,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>merge<sp/>this<sp/>cell<sp/>with<sp/>the<sp/>first<sp/>cell<sp/>that<sp/>we<sp/>added<sp/>directly<sp/>to<sp/>the<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_HorizontalMerge(<ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36add1f775e443ff3b9a89270713580a51b" kindref="member" tooltip="The cell is merged to the previous cell horizontally or vertically.">CellMerge::Previous</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>two<sp/>more<sp/>unmerged<sp/>cells<sp/>to<sp/>the<sp/>second<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_HorizontalMerge(<ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36a6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="The cell is not merged.">CellMerge::None</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>unmerged<sp/>cell.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>unmerged<sp/>cell.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;CellFormat.HorizontalMerge.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Prints the horizontal and vertical merge type of a cell. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckCellsMerged()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table<sp/>with<sp/>merged<sp/>cells.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Tables()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>row<sp/>:<sp/>System::IterateOver(table-&gt;get_Rows()-&gt;LINQ_OfType&lt;SharedPtr&lt;Row&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cell<sp/>:<sp/>System::IterateOver(row-&gt;get_Cells()-&gt;LINQ_OfType&lt;SharedPtr&lt;Cell&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>PrintCellMergeType(cell)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>PrintCellMergeType(SharedPtr&lt;Cell&gt;<sp/>cell)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHorizontallyMerged<sp/>=<sp/>cell-&gt;get_CellFormat()-&gt;get_HorizontalMerge()<sp/>!=<sp/><ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36a6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="The cell is not merged.">CellMerge::None</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isVerticallyMerged<sp/>=<sp/>cell-&gt;get_CellFormat()-&gt;get_VerticalMerge()<sp/>!=<sp/><ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36a6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="The cell is not merged.">CellMerge::None</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>cellLocation<sp/>=<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;R{0},<sp/>C{1}&quot;</highlight><highlight class="normal">,<sp/>cell-&gt;get_ParentRow()-&gt;get_ParentTable()-&gt;IndexOf(cell-&gt;get_ParentRow())<sp/>+<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;get_ParentRow()-&gt;IndexOf(cell)<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isHorizontallyMerged<sp/>&amp;&amp;<sp/>isVerticallyMerged)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;The<sp/>cell<sp/>at<sp/>{0}<sp/>is<sp/>both<sp/>horizontally<sp/>and<sp/>vertically<sp/>merged&quot;</highlight><highlight class="normal">,<sp/>cellLocation);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isHorizontallyMerged)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;The<sp/>cell<sp/>at<sp/>{0}<sp/>is<sp/>horizontally<sp/>merged.&quot;</highlight><highlight class="normal">,<sp/>cellLocation);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isVerticallyMerged<sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;The<sp/>cell<sp/>at<sp/>{0}<sp/>is<sp/>vertically<sp/>merged&quot;</highlight><highlight class="normal">,<sp/>cellLocation)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;The<sp/>cell<sp/>at<sp/>{0}<sp/>is<sp/>not<sp/>merged&quot;</highlight><highlight class="normal">,<sp/>cellLocation);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="894" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a75bc4a3ee6d1a15921c279f78a7db19b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Tables::CellFormat::get_LeftPadding</definition>
        <argsstring>()</argsstring>
        <name>get_LeftPadding</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_LeftPadding</qualifiedname>
        <briefdescription>
<para>Returns or sets the amount of space (in points) to add to the left of the contents of cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format cells with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>second<sp/>cell,<sp/>and<sp/>then<sp/>configure<sp/>cell<sp/>text<sp/>padding<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>will<sp/>apply<sp/>these<sp/>settings<sp/>at<sp/>its<sp/>current<sp/>cell,<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>creates<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CellFormat&gt;<sp/>cellFormat<sp/>=<sp/>builder-&gt;get_CellFormat();</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_Width(250);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_LeftPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_RightPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_TopPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_BottomPadding(30);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>was<sp/>unaffected<sp/>by<sp/>the<sp/>padding<sp/>reconfiguration,<sp/>and<sp/>still<sp/>holds<sp/>the<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(250.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>will<sp/>still<sp/>grow<sp/>in<sp/>the<sp/>output<sp/>document<sp/>to<sp/>match<sp/>the<sp/>size<sp/>of<sp/>its<sp/>neighboring<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetCellFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="216" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a35afbed40f9de9c3ca82376f2e7e0729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394" kindref="member">Aspose::Words::TextOrientation</ref></type>
        <definition>Aspose::Words::TextOrientation Aspose::Words::Tables::CellFormat::get_Orientation</definition>
        <argsstring>()</argsstring>
        <name>get_Orientation</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_Orientation</qualifiedname>
        <briefdescription>
<para>Returns or sets the orientation of text in a table cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of a cell.">CellVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a formatted 2x2 table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of a cell.">CellVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>While<sp/>building<sp/>the<sp/>table,<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>its<sp/>current<sp/>RowFormat/CellFormat<sp/>property<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>current<sp/>row/cell<sp/>that<sp/>its<sp/>cursor<sp/>is<sp/>in<sp/>and<sp/>any<sp/>new<sp/>rows/cells<sp/>as<sp/>it<sp/>creates<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of a cell.">CellVerticalAlignment::Center</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of a cell.">CellVerticalAlignment::Center</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(100);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Previously<sp/>added<sp/>rows<sp/>and<sp/>cells<sp/>are<sp/>not<sp/>retroactively<sp/>affected<sp/>by<sp/>changes<sp/>to<sp/>the<sp/>builder&apos;s<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(100,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.BuildTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1002" column="39"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aee37c78572011e51c58e0dce7ec4a90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tables_1_1_preferred_width" kindref="compound">Aspose::Words::Tables::PreferredWidth</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Tables::PreferredWidth &gt; Aspose::Words::Tables::CellFormat::get_PreferredWidth</definition>
        <argsstring>()</argsstring>
        <name>get_PreferredWidth</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_PreferredWidth</qualifiedname>
        <briefdescription>
<para>Returns or sets the preferred width of the cell. </para>
        </briefdescription>
        <detaileddescription>
<para>The preferred width (along with the table&apos;s Auto Fit option) determines how the actual width of the cell is calculated by the table layout algorithm. <ref refid="class_aspose_1_1_words_1_1_tables_1_1_table" kindref="compound">Table</ref> layout can be performed by Aspose.Words when it saves the document or by Microsoft Word when it displays the document.</para>
<para>The preferred width can be specified in points or in percent. The preferred width can also be specified as &quot;auto&quot;, which means no preferred width is specified.</para>
<para>The default value is <ref refid="class_aspose_1_1_words_1_1_tables_1_1_preferred_width_1adebc822a2114926b2d725a763863172b" kindref="member">Auto</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1af3bd44fd0d4326dd2a663157ea96b442" kindref="member">Aspose::Words::Tables::CellFormat::get_Width</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set a preferred width for table cells. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>applying<sp/>the<sp/>&quot;PreferredWidth&quot;<sp/>class<sp/>to<sp/>table<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Set<sp/>an<sp/>absolute<sp/>preferred<sp/>width<sp/>based<sp/>on<sp/>points:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_PreferredWidth(<ref refid="class_aspose_1_1_words_1_1_tables_1_1_preferred_width_1a6ade9ec15a397cbfcc193503ac606245" kindref="member" tooltip="A creation method that returns a new instance that represents a preferred width specified using a num...">PreferredWidth::FromPoints</ref>(40));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a199339199c8bf5f857dc439fb9d291d4" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>with<sp/>a<sp/>width<sp/>of<sp/>{0}.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_CellFormat()-&gt;get_PreferredWidth()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Set<sp/>a<sp/>relative<sp/>preferred<sp/>width<sp/>based<sp/>on<sp/>percent<sp/>of<sp/>the<sp/>table&apos;s<sp/>width:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_PreferredWidth(<ref refid="class_aspose_1_1_words_1_1_tables_1_1_preferred_width_1a181872057b1b2a54cb5d0e660b23353e" kindref="member" tooltip="A creation method that returns a new instance that represents a preferred width specified as a percen...">PreferredWidth::FromPercent</ref>(20));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a989243916cf2bfbe0fc140d29ec2ea2e" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>with<sp/>a<sp/>width<sp/>of<sp/>{0}.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_CellFormat()-&gt;get_PreferredWidth()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>cell<sp/>with<sp/>no<sp/>preferred<sp/>width<sp/>specified<sp/>will<sp/>take<sp/>up<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>available<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_PreferredWidth(<ref refid="class_aspose_1_1_words_1_1_tables_1_1_preferred_width_1adebc822a2114926b2d725a763863172b" kindref="member" tooltip="Returns an instance that represents the &quot;preferred width is not specified&quot; value.">PreferredWidth::Auto</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>configuration<sp/>of<sp/>the<sp/>&quot;PreferredWidth&quot;<sp/>property<sp/>creates<sp/>a<sp/>new<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NE(<ref refid="class/system.object_ext/_1a911fa57b654ba73ed1f1fd24389ea94b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::GetHashCode</ref>(table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_PreferredWidth()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class/system.object_ext/_1a911fa57b654ba73ed1f1fd24389ea94b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::GetHashCode</ref>(builder-&gt;get_CellFormat()-&gt;get_PreferredWidth()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1ade19139d99999253a0c54558020c90d3" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightGreen</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Automatically<sp/>sized<sp/>cell.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertCellsWithPreferredWidths.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="732" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a88750757fc98b03717e862c7a05a9f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Tables::CellFormat::get_RightPadding</definition>
        <argsstring>()</argsstring>
        <name>get_RightPadding</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_RightPadding</qualifiedname>
        <briefdescription>
<para>Returns or sets the amount of space (in points) to add to the right of the contents of cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format cells with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>second<sp/>cell,<sp/>and<sp/>then<sp/>configure<sp/>cell<sp/>text<sp/>padding<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>will<sp/>apply<sp/>these<sp/>settings<sp/>at<sp/>its<sp/>current<sp/>cell,<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>creates<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CellFormat&gt;<sp/>cellFormat<sp/>=<sp/>builder-&gt;get_CellFormat();</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_Width(250);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_LeftPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_RightPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_TopPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_BottomPadding(30);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>was<sp/>unaffected<sp/>by<sp/>the<sp/>padding<sp/>reconfiguration,<sp/>and<sp/>still<sp/>holds<sp/>the<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(250.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>will<sp/>still<sp/>grow<sp/>in<sp/>the<sp/>output<sp/>document<sp/>to<sp/>match<sp/>the<sp/>size<sp/>of<sp/>its<sp/>neighboring<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetCellFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="265" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1af451c96c9ecde2bdd2168acf8ae0e3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_shading" kindref="compound">Aspose::Words::Shading</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Shading &gt; Aspose::Words::Tables::CellFormat::get_Shading</definition>
        <argsstring>()</argsstring>
        <name>get_Shading</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_Shading</qualifiedname>
        <briefdescription>
<para>Returns a <ref refid="class_aspose_1_1_words_1_1_shading" kindref="compound">Shading</ref> object that refers to the shading formatting for the cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of a cell.">CellVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to modify the format of rows and cells in a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Country&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;U.K.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>first<sp/>row&apos;s<sp/>&quot;RowFormat&quot;<sp/>property<sp/>to<sp/>modify<sp/>the<sp/>formatting</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>contents<sp/>of<sp/>all<sp/>cells<sp/>in<sp/>this<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;RowFormat&gt;<sp/>rowFormat<sp/>=<sp/>table-&gt;get_FirstRow()-&gt;get_RowFormat();</highlight></codeline>
<codeline><highlight class="normal">rowFormat-&gt;set_Height(25);</highlight></codeline>
<codeline><highlight class="normal">rowFormat-&gt;get_Borders()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a4d30a833e0d716f386fa8d31c3b70c54a2ad9d63b69c4a10a5cc9cad923133bc4" kindref="member" tooltip="Specifies the bottom border of a paragraph or a table cell.">BorderType::Bottom</ref>)-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;CellFormat&quot;<sp/>property<sp/>of<sp/>the<sp/>first<sp/>cell<sp/>in<sp/>the<sp/>last<sp/>row<sp/>to<sp/>modify<sp/>the<sp/>formatting<sp/>of<sp/>that<sp/>cell&apos;s<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CellFormat&gt;<sp/>cellFormat<sp/>=<sp/>table-&gt;get_LastRow()-&gt;get_FirstCell()-&gt;get_CellFormat();</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_Width(100);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.RowCellFormat.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="490" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a3d3b427536d458ca9024d125d16206d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Tables::CellFormat::get_TopPadding</definition>
        <argsstring>()</argsstring>
        <name>get_TopPadding</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_TopPadding</qualifiedname>
        <briefdescription>
<para>Returns or sets the amount of space (in points) to add above the contents of cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format cells with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>second<sp/>cell,<sp/>and<sp/>then<sp/>configure<sp/>cell<sp/>text<sp/>padding<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>will<sp/>apply<sp/>these<sp/>settings<sp/>at<sp/>its<sp/>current<sp/>cell,<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>creates<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CellFormat&gt;<sp/>cellFormat<sp/>=<sp/>builder-&gt;get_CellFormat();</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_Width(250);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_LeftPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_RightPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_TopPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_BottomPadding(30);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>was<sp/>unaffected<sp/>by<sp/>the<sp/>padding<sp/>reconfiguration,<sp/>and<sp/>still<sp/>holds<sp/>the<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(250.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>will<sp/>still<sp/>grow<sp/>in<sp/>the<sp/>output<sp/>document<sp/>to<sp/>match<sp/>the<sp/>size<sp/>of<sp/>its<sp/>neighboring<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetCellFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="314" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a0a7728c7ee7465ba3eca7d7d10cce8ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6d" kindref="member">Aspose::Words::Tables::CellVerticalAlignment</ref></type>
        <definition>Aspose::Words::Tables::CellVerticalAlignment Aspose::Words::Tables::CellFormat::get_VerticalAlignment</definition>
        <argsstring>()</argsstring>
        <name>get_VerticalAlignment</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_VerticalAlignment</qualifiedname>
        <briefdescription>
<para>Returns or sets the vertical alignment of text in the cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of a cell.">CellVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="555" column="53"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a12b5695056495d5dbc765d43c6e15ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36" kindref="member">Aspose::Words::Tables::CellMerge</ref></type>
        <definition>Aspose::Words::Tables::CellMerge Aspose::Words::Tables::CellFormat::get_VerticalMerge</definition>
        <argsstring>()</argsstring>
        <name>get_VerticalMerge</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_VerticalMerge</qualifiedname>
        <briefdescription>
<para>Specifies how the cell is merged with other cells vertically. </para>
        </briefdescription>
        <detaileddescription>
<para>Cells can only be merged vertically if their left and right boundaries are identical.</para>
<para>When cells are vertically merged, the display areas of the merged cells are consolidated. The consolidated area is used to display the contents of the first vertically merged cell and all other vertically merged cells must be empty.</para>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a87f7e4d5d677980d91ad730b42bb7066" kindref="member">Aspose::Words::Tables::CellFormat::get_HorizontalMerge</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to merge table cells vertically. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>cell<sp/>into<sp/>the<sp/>first<sp/>column<sp/>of<sp/>the<sp/>first<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>cell<sp/>will<sp/>be<sp/>the<sp/>first<sp/>in<sp/>a<sp/>range<sp/>of<sp/>vertically<sp/>merged<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalMerge(<ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36a7fb55ed0b7a30342ba6da306428cae04" kindref="member" tooltip="The cell is the first cell in a range of merged cells.">CellMerge::First</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>merged<sp/>cells.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>cell<sp/>into<sp/>the<sp/>second<sp/>column<sp/>of<sp/>the<sp/>first<sp/>row,<sp/>then<sp/>end<sp/>the<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>configure<sp/>the<sp/>builder<sp/>to<sp/>disable<sp/>vertical<sp/>merging<sp/>in<sp/>created<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalMerge(<ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36a6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="The cell is not merged.">CellMerge::None</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>unmerged<sp/>cell.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>cell<sp/>into<sp/>the<sp/>first<sp/>column<sp/>of<sp/>the<sp/>second<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instead<sp/>of<sp/>adding<sp/>text<sp/>contents,<sp/>we<sp/>will<sp/>merge<sp/>this<sp/>cell<sp/>with<sp/>the<sp/>first<sp/>cell<sp/>that<sp/>we<sp/>added<sp/>directly<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalMerge(<ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36add1f775e443ff3b9a89270713580a51b" kindref="member" tooltip="The cell is merged to the previous cell horizontally or vertically.">CellMerge::Previous</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>another<sp/>independent<sp/>cell<sp/>in<sp/>the<sp/>second<sp/>column<sp/>of<sp/>the<sp/>second<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalMerge(<ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36a6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="The cell is not merged.">CellMerge::None</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>unmerged<sp/>cell.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;CellFormat.VerticalMerge.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Prints the horizontal and vertical merge type of a cell. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckCellsMerged()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table<sp/>with<sp/>merged<sp/>cells.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Tables()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>row<sp/>:<sp/>System::IterateOver(table-&gt;get_Rows()-&gt;LINQ_OfType&lt;SharedPtr&lt;Row&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cell<sp/>:<sp/>System::IterateOver(row-&gt;get_Cells()-&gt;LINQ_OfType&lt;SharedPtr&lt;Cell&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>PrintCellMergeType(cell)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>PrintCellMergeType(SharedPtr&lt;Cell&gt;<sp/>cell)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHorizontallyMerged<sp/>=<sp/>cell-&gt;get_CellFormat()-&gt;get_HorizontalMerge()<sp/>!=<sp/><ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36a6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="The cell is not merged.">CellMerge::None</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isVerticallyMerged<sp/>=<sp/>cell-&gt;get_CellFormat()-&gt;get_VerticalMerge()<sp/>!=<sp/><ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36a6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="The cell is not merged.">CellMerge::None</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>cellLocation<sp/>=<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;R{0},<sp/>C{1}&quot;</highlight><highlight class="normal">,<sp/>cell-&gt;get_ParentRow()-&gt;get_ParentTable()-&gt;IndexOf(cell-&gt;get_ParentRow())<sp/>+<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;get_ParentRow()-&gt;IndexOf(cell)<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isHorizontallyMerged<sp/>&amp;&amp;<sp/>isVerticallyMerged)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;The<sp/>cell<sp/>at<sp/>{0}<sp/>is<sp/>both<sp/>horizontally<sp/>and<sp/>vertically<sp/>merged&quot;</highlight><highlight class="normal">,<sp/>cellLocation);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isHorizontallyMerged)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;The<sp/>cell<sp/>at<sp/>{0}<sp/>is<sp/>horizontally<sp/>merged.&quot;</highlight><highlight class="normal">,<sp/>cellLocation);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isVerticallyMerged<sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;The<sp/>cell<sp/>at<sp/>{0}<sp/>is<sp/>vertically<sp/>merged&quot;</highlight><highlight class="normal">,<sp/>cellLocation)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;The<sp/>cell<sp/>at<sp/>{0}<sp/>is<sp/>not<sp/>merged&quot;</highlight><highlight class="normal">,<sp/>cellLocation);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="818" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1af3bd44fd0d4326dd2a663157ea96b442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Tables::CellFormat::get_Width</definition>
        <argsstring>()</argsstring>
        <name>get_Width</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_Width</qualifiedname>
        <briefdescription>
<para>Gets the width of the cell in points. </para>
        </briefdescription>
        <detaileddescription>
<para>The width is calculated by Aspose.Words on document loading and saving. Currently, not every combination of table, cell and document properties is supported. The returned value may not be accurate for some documents. It may not exactly match the cell width as calculated by MS Word when the document is opened in MS Word.</para>
<para>Setting this property is not recommended. There is no guarantee that the cell will actually have the set width. The width may be adjusted to accommodate cell contents in an auto-fit table layout. Cells in other rows may have conflicting width settings. The table may be resized to fit into the container or to meet table width settings. Consider using <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aee37c78572011e51c58e0dce7ec4a90a" kindref="member">PreferredWidth</ref> for setting the cell width. Setting this property sets <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aee37c78572011e51c58e0dce7ec4a90a" kindref="member">PreferredWidth</ref> implicitly since version 15.8.</para>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aee37c78572011e51c58e0dce7ec4a90a" kindref="member">Aspose::Words::Tables::CellFormat::get_PreferredWidth</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of a cell.">CellVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to format cells with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>second<sp/>cell,<sp/>and<sp/>then<sp/>configure<sp/>cell<sp/>text<sp/>padding<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>will<sp/>apply<sp/>these<sp/>settings<sp/>at<sp/>its<sp/>current<sp/>cell,<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>creates<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CellFormat&gt;<sp/>cellFormat<sp/>=<sp/>builder-&gt;get_CellFormat();</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_Width(250);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_LeftPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_RightPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_TopPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_BottomPadding(30);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>was<sp/>unaffected<sp/>by<sp/>the<sp/>padding<sp/>reconfiguration,<sp/>and<sp/>still<sp/>holds<sp/>the<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(250.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>will<sp/>still<sp/>grow<sp/>in<sp/>the<sp/>output<sp/>document<sp/>to<sp/>match<sp/>the<sp/>size<sp/>of<sp/>its<sp/>neighboring<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetCellFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="679" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a078330fbc8f9f3caf32b28704794145b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Tables::CellFormat::get_WrapText</definition>
        <argsstring>()</argsstring>
        <name>get_WrapText</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::get_WrapText</qualifiedname>
        <briefdescription>
<para>If true, wrap text for the cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of a cell.">CellVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1138" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ad4d193411bbdedd2f99536eec5170dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_BottomPadding</definition>
        <argsstring>(double value)</argsstring>
        <name>set_BottomPadding</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_BottomPadding</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ae399fe5c7e136a15b7baef781f0f1852" kindref="member">Aspose::Words::Tables::CellFormat::get_BottomPadding</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="366" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a85440b6b3baffd3ea00467758464014e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_FitText</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_FitText</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_FitText</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ac5b4a988dd1ac9f27dee83aab0201a06" kindref="member">Aspose::Words::Tables::CellFormat::get_FitText</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1073" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a711e0c9e3a680ddbd96467ad839762ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_HorizontalMerge</definition>
        <argsstring>(Aspose::Words::Tables::CellMerge value)</argsstring>
        <name>set_HorizontalMerge</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_HorizontalMerge</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36" kindref="member">Aspose::Words::Tables::CellMerge</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a87f7e4d5d677980d91ad730b42bb7066" kindref="member">Aspose::Words::Tables::CellFormat::get_HorizontalMerge</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="897" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a601c03bd12411b78f9e408e3aa8e4c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_LeftPadding</definition>
        <argsstring>(double value)</argsstring>
        <name>set_LeftPadding</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_LeftPadding</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a75bc4a3ee6d1a15921c279f78a7db19b" kindref="member">Aspose::Words::Tables::CellFormat::get_LeftPadding</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="219" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a2df616aae449d19c64563687b4c336c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_Orientation</definition>
        <argsstring>(Aspose::Words::TextOrientation value)</argsstring>
        <name>set_Orientation</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_Orientation</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394" kindref="member">Aspose::Words::TextOrientation</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a35afbed40f9de9c3ca82376f2e7e0729" kindref="member">Aspose::Words::Tables::CellFormat::get_Orientation</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1005" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a72d3e8a5756630b83eb9b4ffc3b61130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_PreferredWidth</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Tables::PreferredWidth &gt; &amp;value)</argsstring>
        <name>set_PreferredWidth</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_PreferredWidth</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tables_1_1_preferred_width" kindref="compound">Aspose::Words::Tables::PreferredWidth</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aee37c78572011e51c58e0dce7ec4a90a" kindref="member">Aspose::Words::Tables::CellFormat::get_PreferredWidth</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="735" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a147f76e62f99ae1eb8dcdb23991da59f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_RightPadding</definition>
        <argsstring>(double value)</argsstring>
        <name>set_RightPadding</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_RightPadding</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a88750757fc98b03717e862c7a05a9f59" kindref="member">Aspose::Words::Tables::CellFormat::get_RightPadding</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="268" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aa651928a9e16101c3ebcb8d20ed2583a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_TopPadding</definition>
        <argsstring>(double value)</argsstring>
        <name>set_TopPadding</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_TopPadding</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a3d3b427536d458ca9024d125d16206d1" kindref="member">Aspose::Words::Tables::CellFormat::get_TopPadding</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="317" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aaf2d52b74a432454acb00d211fcbec06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_VerticalAlignment</definition>
        <argsstring>(Aspose::Words::Tables::CellVerticalAlignment value)</argsstring>
        <name>set_VerticalAlignment</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_VerticalAlignment</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6d" kindref="member">Aspose::Words::Tables::CellVerticalAlignment</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a0a7728c7ee7465ba3eca7d7d10cce8ed" kindref="member">Aspose::Words::Tables::CellFormat::get_VerticalAlignment</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="558" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aa691a370177872fd1355628f032ea794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_VerticalMerge</definition>
        <argsstring>(Aspose::Words::Tables::CellMerge value)</argsstring>
        <name>set_VerticalMerge</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_VerticalMerge</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_tables_1ab35de21af4b94ae47786873927d89c36" kindref="member">Aspose::Words::Tables::CellMerge</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a12b5695056495d5dbc765d43c6e15ab6" kindref="member">Aspose::Words::Tables::CellFormat::get_VerticalMerge</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="821" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aa203ed5451435789a26998db9ace4216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_Width</definition>
        <argsstring>(double value)</argsstring>
        <name>set_Width</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_Width</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1af3bd44fd0d4326dd2a663157ea96b442" kindref="member">Aspose::Words::Tables::CellFormat::get_Width</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="682" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a0ca24a78635ebb3ff450ce25e2a31e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::set_WrapText</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_WrapText</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::set_WrapText</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a078330fbc8f9f3caf32b28704794145b" kindref="member">Aspose::Words::Tables::CellFormat::get_WrapText</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1141" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a1f80623ab43fad92c18f3a00ac7a60b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Tables::CellFormat::SetPaddings</definition>
        <argsstring>(double leftPadding, double topPadding, double rightPadding, double bottomPadding)</argsstring>
        <name>SetPaddings</name>
        <qualifiedname>Aspose::Words::Tables::CellFormat::SetPaddings</qualifiedname>
        <param>
          <type>double</type>
          <declname>leftPadding</declname>
        </param>
        <param>
          <type>double</type>
          <declname>topPadding</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rightPadding</declname>
        </param>
        <param>
          <type>double</type>
          <declname>bottomPadding</declname>
        </param>
        <briefdescription>
<para>Sets the amount of space (in points) to add to the left/top/right/bottom of the contents of cell. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to pad the contents of a cell with whitespace. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>a<sp/>padding<sp/>distance<sp/>(in<sp/>points)<sp/>between<sp/>the<sp/>border<sp/>and<sp/>the<sp/>text<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>each<sp/>table<sp/>cell<sp/>we<sp/>create<sp/>with<sp/>the<sp/>document<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;SetPaddings(5,<sp/>10,<sp/>40,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>table<sp/>with<sp/>one<sp/>cell<sp/>whose<sp/>contents<sp/>will<sp/>have<sp/>whitespace<sp/>padding.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;Ut<sp/>enim<sp/>ad<sp/>minim<sp/>veniam,<sp/>quis<sp/>nostrud<sp/>exercitation<sp/>ullamco<sp/>laboris<sp/>nisi<sp/>ut<sp/>aliquip<sp/>ex<sp/>ea<sp/>commodo<sp/>consequat.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;CellFormat.Padding.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="1192" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents all formatting for a table cell. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_tables_1a4c33d97f9cfe518aa1864baeb6533c6da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of a cell.">CellVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to modify the format of rows and cells in a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Country&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;U.K.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>first<sp/>row&apos;s<sp/>&quot;RowFormat&quot;<sp/>property<sp/>to<sp/>modify<sp/>the<sp/>formatting</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>contents<sp/>of<sp/>all<sp/>cells<sp/>in<sp/>this<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;RowFormat&gt;<sp/>rowFormat<sp/>=<sp/>table-&gt;get_FirstRow()-&gt;get_RowFormat();</highlight></codeline>
<codeline><highlight class="normal">rowFormat-&gt;set_Height(25);</highlight></codeline>
<codeline><highlight class="normal">rowFormat-&gt;get_Borders()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a4d30a833e0d716f386fa8d31c3b70c54a2ad9d63b69c4a10a5cc9cad923133bc4" kindref="member" tooltip="Specifies the bottom border of a paragraph or a table cell.">BorderType::Bottom</ref>)-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;CellFormat&quot;<sp/>property<sp/>of<sp/>the<sp/>first<sp/>cell<sp/>in<sp/>the<sp/>last<sp/>row<sp/>to<sp/>modify<sp/>the<sp/>formatting<sp/>of<sp/>that<sp/>cell&apos;s<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CellFormat&gt;<sp/>cellFormat<sp/>=<sp/>table-&gt;get_LastRow()-&gt;get_FirstCell()-&gt;get_CellFormat();</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_Width(100);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.RowCellFormat.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to modify formatting of a table cell. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Tables.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Tables()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Cell&gt;<sp/>firstCell<sp/>=<sp/>table-&gt;get_FirstRow()-&gt;get_FirstCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>cell&apos;s<sp/>&quot;CellFormat&quot;<sp/>property<sp/>to<sp/>set<sp/>formatting<sp/>that<sp/>modifies<sp/>the<sp/>appearance<sp/>of<sp/>that<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstCell-&gt;get_CellFormat()-&gt;set_Width(30);</highlight></codeline>
<codeline><highlight class="normal">firstCell-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">firstCell-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_ForegroundPatternColor(<ref refid="class/system.drawing.color/_1ade19139d99999253a0c54558020c90d3" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightGreen</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.CellFormat.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Aspose::Words::IBorderAttrSource</label>
      </node>
      <node id="3">
        <label>Aspose::Words::IShadingAttrSource</label>
      </node>
      <node id="1">
        <label>Aspose::Words::Tables::CellFormat</label>
        <link refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Aspose::Words::IBorderAttrSource</label>
      </node>
      <node id="3">
        <label>Aspose::Words::IShadingAttrSource</label>
      </node>
      <node id="1">
        <label>Aspose::Words::Tables::CellFormat</label>
        <link refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Tables/CellFormat.h" line="161" column="1" bodyfile="Aspose.Words.Cpp/Tables/CellFormat.h" bodystart="162" bodyend="1210"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a4f6a7c1ea9a37ad156c0fcd6cbe9df65" prot="private" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a3592fa90249204a94f4dd8eb10e03d82" prot="private" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>BaseType1</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ae3942b29e0a2337f561f0ce51f8353e1" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>ClearFormatting</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1abb5ed397f7673c9839c35099d020c60a" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_Borders</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ae399fe5c7e136a15b7baef781f0f1852" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_BottomPadding</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ac5b4a988dd1ac9f27dee83aab0201a06" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_FitText</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a87f7e4d5d677980d91ad730b42bb7066" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_HorizontalMerge</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a75bc4a3ee6d1a15921c279f78a7db19b" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_LeftPadding</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a35afbed40f9de9c3ca82376f2e7e0729" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_Orientation</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aee37c78572011e51c58e0dce7ec4a90a" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_PreferredWidth</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a88750757fc98b03717e862c7a05a9f59" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_RightPadding</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1af451c96c9ecde2bdd2168acf8ae0e3f4" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_Shading</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a3d3b427536d458ca9024d125d16206d1" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_TopPadding</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a0a7728c7ee7465ba3eca7d7d10cce8ed" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_VerticalAlignment</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a12b5695056495d5dbc765d43c6e15ab6" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_VerticalMerge</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1af3bd44fd0d4326dd2a663157ea96b442" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_Width</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a078330fbc8f9f3caf32b28704794145b" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>get_WrapText</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a5fa4dda35b083315fb41b0a43fa71263" prot="private" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a5e8db2f5a71fb9a4f2bd890c9740907c" prot="private" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ac6323bcbe92842c4ecbed724aabf3808" prot="private" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1ad4d193411bbdedd2f99536eec5170dfa" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_BottomPadding</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a85440b6b3baffd3ea00467758464014e" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_FitText</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a711e0c9e3a680ddbd96467ad839762ca" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_HorizontalMerge</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a601c03bd12411b78f9e408e3aa8e4c55" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_LeftPadding</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a2df616aae449d19c64563687b4c336c2" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_Orientation</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a72d3e8a5756630b83eb9b4ffc3b61130" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_PreferredWidth</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a147f76e62f99ae1eb8dcdb23991da59f" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_RightPadding</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aa651928a9e16101c3ebcb8d20ed2583a" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_TopPadding</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aaf2d52b74a432454acb00d211fcbec06" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_VerticalAlignment</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aa691a370177872fd1355628f032ea794" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_VerticalMerge</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aa203ed5451435789a26998db9ace4216" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_Width</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a0ca24a78635ebb3ff450ce25e2a31e1c" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>set_WrapText</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a1f80623ab43fad92c18f3a00ac7a60b7" prot="public" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>SetPaddings</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aa00c9bd5c7c0c00bbe814eaa98695413" prot="private" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1a3f6e415e2be1589f843e5f02578d08ec" prot="private" virt="non-virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format_1aecf8b881c027a6bbccc5d395689aa60d" prot="private" virt="virtual"><scope>Aspose::Words::Tables::CellFormat</scope><name>~CellFormat</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
