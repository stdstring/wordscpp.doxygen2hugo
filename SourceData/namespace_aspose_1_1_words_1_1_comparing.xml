<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="namespace_aspose_1_1_words_1_1_comparing" kind="namespace" language="C++">
    <compoundname>Aspose::Words::Comparing</compoundname>
    <innerclass refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options" prot="public">Aspose::Words::Comparing::CompareOptions</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939" prot="public" static="no" strong="yes">
        <type></type>
        <name>ComparisonTargetType</name>
        <qualifiedname>Aspose::Words::Comparing::ComparisonTargetType</qualifiedname>
        <enumvalue id="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a222a267cc5778206b253be35ee3ddab5" prot="public">
          <name>Current</name>
          <briefdescription>
<para>This document is used as a base during comparison. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" prot="public">
          <name>New</name>
          <briefdescription>
<para>Other document is used as a base during comparison. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Allows to specify base document which will be used during comparison. Default value is <ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a222a267cc5778206b253be35ee3ddab5" kindref="member">Current</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/ComparisonTargetType.h" line="117" column="1" bodyfile="Aspose.Words.Cpp/Comparing/ComparisonTargetType.h" bodystart="118" bodyend="125"/>
      </memberdef>
      <memberdef kind="enum" id="namespace_aspose_1_1_words_1_1_comparing_1a95c350b22d53d90016451949934ab44c" prot="public" static="no" strong="yes">
        <type></type>
        <name>Granularity</name>
        <qualifiedname>Aspose::Words::Comparing::Granularity</qualifiedname>
        <enumvalue id="namespace_aspose_1_1_words_1_1_comparing_1a95c350b22d53d90016451949934ab44ca33641661d8cf93986bac7c61633665e6" prot="public">
          <name>CharLevel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespace_aspose_1_1_words_1_1_comparing_1a95c350b22d53d90016451949934ab44cade272e12691eadc454e67832c5d489e5" prot="public">
          <name>WordLevel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Specifies the granularity of changes to track when comparing two documents. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows to specify a granularity while comparing documents. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docA<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builderA<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docA);</highlight></codeline>
<codeline><highlight class="normal">builderA-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Alpha<sp/>Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docB<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builderB<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docB);</highlight></codeline>
<codeline><highlight class="normal">builderB-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Lorems<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet<sp/>consectetur<sp/>-<sp/>\&quot;adipiscing\&quot;<sp/>elit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>whether<sp/>changes<sp/>are<sp/>tracking</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>character<sp/>(&apos;Granularity.CharLevel&apos;),<sp/>or<sp/>by<sp/>word<sp/>(&apos;Granularity.WordLevel&apos;).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Granularity(granularity);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docA-&gt;Compare(docB,<sp/>u</highlight><highlight class="stringliteral">&quot;author&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>document&apos;s<sp/>collection<sp/>of<sp/>revision<sp/>groups<sp/>contains<sp/>all<sp/>the<sp/>differences<sp/>between<sp/>documents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;RevisionGroupCollection&gt;<sp/>groups<sp/>=<sp/>docA-&gt;get_Revisions()-&gt;get_Groups();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(5,<sp/>groups-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/Granularity.h" line="47" column="1" bodyfile="Aspose.Words.Cpp/Comparing/Granularity.h" bodystart="48" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <bold>Aspose.Words.Comparing</bold> namespace provides classes and enumerations that allow to specify additional options when comparing documents. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="21" column="1"/>
  </compounddef>
</doxygen>
