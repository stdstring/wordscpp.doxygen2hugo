<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_control_char" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::ControlChar</compoundname>
    <includes refid="_control_char_8h" local="no">Aspose.Words.Cpp/ControlChar.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_control_char_1aeab755cbe3a306b9cd92ea297eccd181" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_control_char" kindref="compound">ControlChar</ref></type>
        <definition>typedef ControlChar Aspose::Words::ControlChar::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::ControlChar::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="46" column="25" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::CellChar</definition>
        <argsstring></argsstring>
        <name>CellChar</name>
        <qualifiedname>Aspose::Words::ControlChar::CellChar</qualifiedname>
        <initializer>= (char16_t)7</initializer>
        <briefdescription>
<para>End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="876" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::ColumnBreakChar</definition>
        <argsstring></argsstring>
        <name>ColumnBreakChar</name>
        <qualifiedname>Aspose::Words::ControlChar::ColumnBreakChar</qualifiedname>
        <initializer>= (char16_t)14</initializer>
        <briefdescription>
<para>End of column character: (char)14. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1320" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1ab2ec66b8bba1684aea187b48039f36e1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::DefaultTextInputChar</definition>
        <argsstring></argsstring>
        <name>DefaultTextInputChar</name>
        <qualifiedname>Aspose::Words::ControlChar::DefaultTextInputChar</qualifiedname>
        <initializer>= u&apos;\x2002&apos;</initializer>
        <briefdescription>
<para>This is the &quot;o&quot; character used as a default value in text input form fields. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1897" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1ac33d54530e758e4841d4fb062714ba6e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::FieldEndChar</definition>
        <argsstring></argsstring>
        <name>FieldEndChar</name>
        <qualifiedname>Aspose::Words::ControlChar::FieldEndChar</qualifiedname>
        <initializer>= (char16_t)21</initializer>
        <briefdescription>
<para>End of MS Word field character: (char)21. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1533" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1ae4f3a17178235279ac5c53b00df451e6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::FieldSeparatorChar</definition>
        <argsstring></argsstring>
        <name>FieldSeparatorChar</name>
        <qualifiedname>Aspose::Words::ControlChar::FieldSeparatorChar</qualifiedname>
        <initializer>= (char16_t)20</initializer>
        <briefdescription>
<para>Field separator character separates field code from field value. Optional in some fields. Value: (char)20. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1462" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a47ee02870caea63c1bf114887b1fcb6f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::FieldStartChar</definition>
        <argsstring></argsstring>
        <name>FieldStartChar</name>
        <qualifiedname>Aspose::Words::ControlChar::FieldStartChar</qualifiedname>
        <initializer>= (char16_t)19</initializer>
        <briefdescription>
<para>Start of MS Word field character: (char)19. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1391" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::LineBreakChar</definition>
        <argsstring></argsstring>
        <name>LineBreakChar</name>
        <qualifiedname>Aspose::Words::ControlChar::LineBreakChar</qualifiedname>
        <initializer>= (char16_t)11</initializer>
        <briefdescription>
<para>Line break character: (char)11 or &quot;\v&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1036" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1036" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::LineFeedChar</definition>
        <argsstring></argsstring>
        <name>LineFeedChar</name>
        <qualifiedname>Aspose::Words::ControlChar::LineFeedChar</qualifiedname>
        <initializer>= (char16_t)10</initializer>
        <briefdescription>
<para>Line feed character: (char)10 or &quot;\n&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="965" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a22ca59f8183d3db2e852a0190ba3a183" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::NonBreakingHyphenChar</definition>
        <argsstring></argsstring>
        <name>NonBreakingHyphenChar</name>
        <qualifiedname>Aspose::Words::ControlChar::NonBreakingHyphenChar</qualifiedname>
        <initializer>= (char16_t)30</initializer>
        <briefdescription>
<para>Nonbreaking Hyphen in Microsoft Word is (char)30. </para>
        </briefdescription>
        <detaileddescription>
<para>Nonbreaking Hyphen in Microsoft Word does not correspond to the Unicode character U+2011 non-breaking hyphen but instead represents internal information that tells Microsoft Word to display a hyphen and not to break a line.</para>
<para>Useful info: <ulink url="http://www.cs.tut.fi/~jkorpela/dashes.html#linebreaks">http://www.cs.tut.fi/~jkorpela/dashes.html#linebreaks</ulink>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1610" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::NonBreakingSpaceChar</definition>
        <argsstring></argsstring>
        <name>NonBreakingSpaceChar</name>
        <qualifiedname>Aspose::Words::ControlChar::NonBreakingSpaceChar</qualifiedname>
        <initializer>= u&apos;\x00a0&apos;</initializer>
        <briefdescription>
<para>Non-breaking space character: (char)160. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1826" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1826" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1adf739ab51d62ea260f812e538a8697d3" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::OptionalHyphenChar</definition>
        <argsstring></argsstring>
        <name>OptionalHyphenChar</name>
        <qualifiedname>Aspose::Words::ControlChar::OptionalHyphenChar</qualifiedname>
        <initializer>= (char16_t)31</initializer>
        <briefdescription>
<para>Optional Hyphen in Microsoft Word is (char)31. </para>
        </briefdescription>
        <detaileddescription>
<para>Optional Hyphen in Microsoft Word does not correspond to the Unicode character U+00AD soft hyphen. Instead, it inserts internal information that tells Word about a possible hyphenation point.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1684" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a7265b37b293df218653666a652ef1842" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::PageBreakChar</definition>
        <argsstring></argsstring>
        <name>PageBreakChar</name>
        <qualifiedname>Aspose::Words::ControlChar::PageBreakChar</qualifiedname>
        <initializer>= (char16_t)12</initializer>
        <briefdescription>
<para>Page break character: (char)12 or &quot;\f&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1107" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::ParagraphBreakChar</definition>
        <argsstring></argsstring>
        <name>ParagraphBreakChar</name>
        <qualifiedname>Aspose::Words::ControlChar::ParagraphBreakChar</qualifiedname>
        <initializer>= (char16_t)13</initializer>
        <briefdescription>
<para>End of paragraph character: (char)13 or &quot;\r&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1249" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::SectionBreakChar</definition>
        <argsstring></argsstring>
        <name>SectionBreakChar</name>
        <qualifiedname>Aspose::Words::ControlChar::SectionBreakChar</qualifiedname>
        <initializer>= (char16_t)12</initializer>
        <briefdescription>
<para>End of section character: (char)12 or &quot;\f&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1178" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::SpaceChar</definition>
        <argsstring></argsstring>
        <name>SpaceChar</name>
        <qualifiedname>Aspose::Words::ControlChar::SpaceChar</qualifiedname>
        <initializer>= (char16_t)32</initializer>
        <briefdescription>
<para>Space character: (char)32. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1755" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::TabChar</definition>
        <argsstring></argsstring>
        <name>TabChar</name>
        <qualifiedname>Aspose::Words::ControlChar::TabChar</qualifiedname>
        <initializer>= (char16_t)9</initializer>
        <briefdescription>
<para>Tab character: (char)9 or &quot;\t&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set a custom interval for tab stop positions. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>tab<sp/>stops<sp/>to<sp/>appear<sp/>every<sp/>72<sp/>points<sp/>(1<sp/>inch).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;set_DefaultTabStop(72);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>tab<sp/>character<sp/>snaps<sp/>the<sp/>text<sp/>after<sp/>it<sp/>to<sp/>the<sp/>next<sp/>closest<sp/>tab<sp/>stop<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;World!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;World!&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="894" column="34" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="894" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a9ffb3cc73c34851a322a8abfa1b80e1c" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::ArabicLetterMark</definition>
        <argsstring></argsstring>
        <name>ArabicLetterMark</name>
        <qualifiedname>Aspose::Words::ControlChar::ArabicLetterMark</qualifiedname>
        <initializer>= u&apos;\x061C&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1919" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1adc01e6cbab9c955b8fb9fe8f7d70af0c" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::BackSlashChar</definition>
        <argsstring></argsstring>
        <name>BackSlashChar</name>
        <qualifiedname>Aspose::Words::ControlChar::BackSlashChar</qualifiedname>
        <initializer>= u&apos;\\&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1901" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1901" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a672048c25787bffc9b786257d147310f" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::EmDashChar</definition>
        <argsstring></argsstring>
        <name>EmDashChar</name>
        <qualifiedname>Aspose::Words::ControlChar::EmDashChar</qualifiedname>
        <initializer>= u&apos;\x2014&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1922" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a0105df70a2002f0cfb27c788da66aa39" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::EmSpaceChar</definition>
        <argsstring></argsstring>
        <name>EmSpaceChar</name>
        <qualifiedname>Aspose::Words::ControlChar::EmSpaceChar</qualifiedname>
        <initializer>= u&apos;\x2003&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1905" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1905" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a0eb39c5dd9ddd0d83ef54d29dafac166" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::EnDashChar</definition>
        <argsstring></argsstring>
        <name>EnDashChar</name>
        <qualifiedname>Aspose::Words::ControlChar::EnDashChar</qualifiedname>
        <initializer>= u&apos;\x2013&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1921" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1921" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1af9352eb892cd2ebae91c49544dd80c2f" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::EnSpaceChar</definition>
        <argsstring></argsstring>
        <name>EnSpaceChar</name>
        <qualifiedname>Aspose::Words::ControlChar::EnSpaceChar</qualifiedname>
        <initializer>= u&apos;\x2002&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1904" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1904" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a5d66d3bab54c4ab2c86da84fb2466036" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::FirstStrongIsolate</definition>
        <argsstring></argsstring>
        <name>FirstStrongIsolate</name>
        <qualifiedname>Aspose::Words::ControlChar::FirstStrongIsolate</qualifiedname>
        <initializer>= u&apos;\x2068&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1917" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1917" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1acd6e0b0ac7ae1ad626ac0ff80aef65fd" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::FourPerEmSpaceChar</definition>
        <argsstring></argsstring>
        <name>FourPerEmSpaceChar</name>
        <qualifiedname>Aspose::Words::ControlChar::FourPerEmSpaceChar</qualifiedname>
        <initializer>= u&apos;\x2005&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1906" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1906" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1acdacb1f13527ca138cd60953f0784346" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::IdeographicSpaceChar</definition>
        <argsstring></argsstring>
        <name>IdeographicSpaceChar</name>
        <qualifiedname>Aspose::Words::ControlChar::IdeographicSpaceChar</qualifiedname>
        <initializer>= u&apos;\x3000&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1907" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1907" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1ac717b202c79f5fbadd3a7f5260f2aa02" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::LeftToRightEmbedding</definition>
        <argsstring></argsstring>
        <name>LeftToRightEmbedding</name>
        <qualifiedname>Aspose::Words::ControlChar::LeftToRightEmbedding</qualifiedname>
        <initializer>= u&apos;\x202A&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1910" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1910" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1ae96a785d38984f446592bd500b660b63" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::LeftToRightIsolate</definition>
        <argsstring></argsstring>
        <name>LeftToRightIsolate</name>
        <qualifiedname>Aspose::Words::ControlChar::LeftToRightIsolate</qualifiedname>
        <initializer>= u&apos;\x2066&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1915" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1915" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1af85ddc6f585d610a452b441ad07a9d23" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::LeftToRightMarkChar</definition>
        <argsstring></argsstring>
        <name>LeftToRightMarkChar</name>
        <qualifiedname>Aspose::Words::ControlChar::LeftToRightMarkChar</qualifiedname>
        <initializer>= u&apos;\x200e&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1908" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1908" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a86bd485300bdba9e3b80376361c6ea91" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::LeftToRightOverride</definition>
        <argsstring></argsstring>
        <name>LeftToRightOverride</name>
        <qualifiedname>Aspose::Words::ControlChar::LeftToRightOverride</qualifiedname>
        <initializer>= u&apos;\x202D&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1912" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a2381bbabb80a4616026731fee8f45bd0" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::PopDirectionalFormatting</definition>
        <argsstring></argsstring>
        <name>PopDirectionalFormatting</name>
        <qualifiedname>Aspose::Words::ControlChar::PopDirectionalFormatting</qualifiedname>
        <initializer>= u&apos;\x202C&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1914" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1914" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1ab0aee63e4a2de0f6903c6e1b27656b36" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::PopDirectionalIsolate</definition>
        <argsstring></argsstring>
        <name>PopDirectionalIsolate</name>
        <qualifiedname>Aspose::Words::ControlChar::PopDirectionalIsolate</qualifiedname>
        <initializer>= u&apos;\x2069&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1918" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a18f54dfc6a80ac4f8b4b3e05714440c0" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::RightToLeftEmbedding</definition>
        <argsstring></argsstring>
        <name>RightToLeftEmbedding</name>
        <qualifiedname>Aspose::Words::ControlChar::RightToLeftEmbedding</qualifiedname>
        <initializer>= u&apos;\x202B&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1911" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1911" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a91124d581bcfac7908facd2f6efdd9b9" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::RightToLeftIsolate</definition>
        <argsstring></argsstring>
        <name>RightToLeftIsolate</name>
        <qualifiedname>Aspose::Words::ControlChar::RightToLeftIsolate</qualifiedname>
        <initializer>= u&apos;\x2067&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1916" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1916" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1af25565855854dd6b8e4473e24a07492d" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::RightToLeftMarkChar</definition>
        <argsstring></argsstring>
        <name>RightToLeftMarkChar</name>
        <qualifiedname>Aspose::Words::ControlChar::RightToLeftMarkChar</qualifiedname>
        <initializer>= u&apos;\x200f&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1909" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1909" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a748b454a125549c1d3df9c0bd5ac41ef" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::RightToLeftOverride</definition>
        <argsstring></argsstring>
        <name>RightToLeftOverride</name>
        <qualifiedname>Aspose::Words::ControlChar::RightToLeftOverride</qualifiedname>
        <initializer>= u&apos;\x202E&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1913" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a3d5e78ecd982182d415de1ca3b6e78aa" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::UnicodeLineSeparator</definition>
        <argsstring></argsstring>
        <name>UnicodeLineSeparator</name>
        <qualifiedname>Aspose::Words::ControlChar::UnicodeLineSeparator</qualifiedname>
        <initializer>= u&apos;\x2028&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1927" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1ab9094f1b3d2ad8d7466ef944b749384f" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::UnicodeNonBreakingHyphenChar</definition>
        <argsstring></argsstring>
        <name>UnicodeNonBreakingHyphenChar</name>
        <qualifiedname>Aspose::Words::ControlChar::UnicodeNonBreakingHyphenChar</qualifiedname>
        <initializer>= u&apos;\x2011&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1920" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1920" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a2d4d0cb6b27c098fa2761706cd49170a" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::UnicodeOptionalHyphenChar</definition>
        <argsstring></argsstring>
        <name>UnicodeOptionalHyphenChar</name>
        <qualifiedname>Aspose::Words::ControlChar::UnicodeOptionalHyphenChar</qualifiedname>
        <initializer>= u&apos;\x00ad&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1903" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1903" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1aea9e3709529fd574defb194c98228755" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::YenChar</definition>
        <argsstring></argsstring>
        <name>YenChar</name>
        <qualifiedname>Aspose::Words::ControlChar::YenChar</qualifiedname>
        <initializer>= u&apos;\x00a5&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1902" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1902" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a8e85f1adee665a9697cfbbab44e6c522" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::ZeroWidthJoinerChar</definition>
        <argsstring></argsstring>
        <name>ZeroWidthJoinerChar</name>
        <qualifiedname>Aspose::Words::ControlChar::ZeroWidthJoinerChar</qualifiedname>
        <initializer>= u&apos;\x200d&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1924" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1924" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a24c8f22e00c9dfd43cd797a35a1614dd" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::ZeroWidthNonJoinerChar</definition>
        <argsstring></argsstring>
        <name>ZeroWidthNonJoinerChar</name>
        <qualifiedname>Aspose::Words::ControlChar::ZeroWidthNonJoinerChar</qualifiedname>
        <initializer>= u&apos;\x200c&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1923" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1923" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1a61c8cc47914b0dd86fbd35c92a446c06" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::ZeroWidthSpaceChar</definition>
        <argsstring></argsstring>
        <name>ZeroWidthSpaceChar</name>
        <qualifiedname>Aspose::Words::ControlChar::ZeroWidthSpaceChar</qualifiedname>
        <initializer>= u&apos;\x200b&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1925" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1925" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_control_char_1ace20b1b8cb4807fa77ea6dbd60c74a47" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr char16_t</type>
        <definition>constexpr char16_t Aspose::Words::ControlChar::ZeroWithNoBreakSpace</definition>
        <argsstring></argsstring>
        <name>ZeroWithNoBreakSpace</name>
        <qualifiedname>Aspose::Words::ControlChar::ZeroWithNoBreakSpace</qualifiedname>
        <initializer>= u&apos;\xfeff&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1926" column="32" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="1926" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::Cell</definition>
        <argsstring>()</argsstring>
        <name>Cell</name>
        <qualifiedname>Aspose::Words::ControlChar::Cell</qualifiedname>
        <briefdescription>
<para>End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="119" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::ColumnBreak</definition>
        <argsstring>()</argsstring>
        <name>ColumnBreak</name>
        <qualifiedname>Aspose::Words::ControlChar::ColumnBreak</qualifiedname>
        <briefdescription>
<para>End of column character: &quot;\x000e&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="658" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::Cr</definition>
        <argsstring>()</argsstring>
        <name>Cr</name>
        <qualifiedname>Aspose::Words::ControlChar::Cr</qualifiedname>
        <briefdescription>
<para>Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as <ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member">ParagraphBreak</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use control characters. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>paragraphs<sp/>with<sp/>text<sp/>with<sp/>DocumentBuilder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>the<sp/>document<sp/>to<sp/>text<sp/>form<sp/>reveals<sp/>that<sp/>control<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>represent<sp/>some<sp/>of<sp/>the<sp/>document&apos;s<sp/>structural<sp/>elements,<sp/>such<sp/>as<sp/>page<sp/>breaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Format(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!{0}&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>())<sp/>+<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!{0}&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>())<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;GetText());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>converting<sp/>a<sp/>document<sp/>to<sp/>string<sp/>form,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>omit<sp/>some<sp/>of<sp/>the<sp/>control<sp/>characters<sp/>with<sp/>the<sp/>Trim<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Format(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!{0}&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>())<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="516" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::CrLf</definition>
        <argsstring>()</argsstring>
        <name>CrLf</name>
        <qualifiedname>Aspose::Words::ControlChar::CrLf</qualifiedname>
        <briefdescription>
<para>Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Microsoft Word documents, but commonly used in text files for paragraph breaks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="730" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::Lf</definition>
        <argsstring>()</argsstring>
        <name>Lf</name>
        <qualifiedname>Aspose::Words::ControlChar::Lf</qualifiedname>
        <briefdescription>
<para>Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as <ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member">LineFeed</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="208" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::LineBreak</definition>
        <argsstring>()</argsstring>
        <name>LineBreak</name>
        <qualifiedname>Aspose::Words::ControlChar::LineBreak</qualifiedname>
        <briefdescription>
<para>Line break character: &quot;\x000b&quot; or &quot;\v&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="350" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::LineFeed</definition>
        <argsstring>()</argsstring>
        <name>LineFeed</name>
        <qualifiedname>Aspose::Words::ControlChar::LineFeed</qualifiedname>
        <briefdescription>
<para>Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as <ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member">Lf</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="279" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::NonBreakingSpace</definition>
        <argsstring>()</argsstring>
        <name>NonBreakingSpace</name>
        <qualifiedname>Aspose::Words::ControlChar::NonBreakingSpace</qualifiedname>
        <briefdescription>
<para>Non-breaking space character: &quot;\x00a0&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="801" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::PageBreak</definition>
        <argsstring>()</argsstring>
        <name>PageBreak</name>
        <qualifiedname>Aspose::Words::ControlChar::PageBreak</qualifiedname>
        <briefdescription>
<para>Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as <ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member">SectionBreak</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="421" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::ParagraphBreak</definition>
        <argsstring>()</argsstring>
        <name>ParagraphBreak</name>
        <qualifiedname>Aspose::Words::ControlChar::ParagraphBreak</qualifiedname>
        <briefdescription>
<para>End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as <ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member">Cr</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="587" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::SectionBreak</definition>
        <argsstring>()</argsstring>
        <name>SectionBreak</name>
        <qualifiedname>Aspose::Words::ControlChar::SectionBreak</qualifiedname>
        <briefdescription>
<para>End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as <ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member">PageBreak</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add various control characters to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>regular<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" kindref="member" tooltip="Space character: (char)32.">ControlChar::SpaceChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>NBSP,<sp/>which<sp/>is<sp/>a<sp/>non-breaking<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unlike<sp/>the<sp/>regular<sp/>space,<sp/>this<sp/>space<sp/>cannot<sp/>have<sp/>an<sp/>automatic<sp/>line<sp/>break<sp/>at<sp/>its<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>space.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>space.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>tab<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>tab.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>tab.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>line<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>new<sp/>line<sp/>and<sp/>starts<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>line<sp/>feed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>feed<sp/>character<sp/>has<sp/>two<sp/>versions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Carriage<sp/>returns<sp/>and<sp/>line<sp/>feeds<sp/>can<sp/>be<sp/>represented<sp/>together<sp/>by<sp/>one<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" kindref="member" tooltip="Carriage return followed by line feed character: &quot;\x000d\x000a&quot; or &quot;\r\n&quot;. Not used as such in Micros...">ControlChar::CrLf</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>()<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as LineFeed.">ControlChar::Lf</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>break,<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>paragraph<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>break.<sp/>This<sp/>does<sp/>not<sp/>make<sp/>a<sp/>new<sp/>section<sp/>or<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>section<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Before<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;After<sp/>page<sp/>break.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>page<sp/>break<sp/>is<sp/>the<sp/>same<sp/>value<sp/>as<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>set<sp/>its<sp/>column<sp/>count<sp/>to<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(MakeObject&lt;Section&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>a<sp/>control<sp/>character<sp/>to<sp/>mark<sp/>the<sp/>point<sp/>where<sp/>text<sp/>moves<sp/>to<sp/>the<sp/>next<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>end<sp/>of<sp/>column<sp/>1.&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>at<sp/>beginning<sp/>of<sp/>column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ControlChar.InsertControlChars.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>char<sp/>and<sp/>string<sp/>counterparts<sp/>for<sp/>most<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" kindref="member" tooltip="End of a table cell or end of a table row character: &quot;\x0007&quot; or &quot;\a&quot;.">ControlChar::Cell</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" kindref="member" tooltip="End of a table cell or end of a table row character: (char)7 or &quot;\a&quot;.">ControlChar::CellChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" kindref="member" tooltip="Non-breaking space character: &quot;\x00a0&quot;.">ControlChar::NonBreakingSpace</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" kindref="member" tooltip="Non-breaking space character: (char)160.">ControlChar::NonBreakingSpaceChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" kindref="member" tooltip="Line break character: &quot;\x000b&quot; or &quot;\v&quot;.">ControlChar::LineBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" kindref="member" tooltip="Line break character: (char)11 or &quot;\v&quot;.">ControlChar::LineBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" kindref="member" tooltip="Line feed character: &quot;\x000a&quot; or &quot;\n&quot;. Same as Lf.">ControlChar::LineFeed</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" kindref="member" tooltip="Line feed character: (char)10 or &quot;\n&quot;.">ControlChar::LineFeedChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" kindref="member" tooltip="End of paragraph character: &quot;\x000d&quot; or &quot;\r&quot;. Same as Cr">ControlChar::ParagraphBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" kindref="member" tooltip="End of paragraph character: (char)13 or &quot;\r&quot;.">ControlChar::ParagraphBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" kindref="member" tooltip="End of section character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as PageBreak.">ControlChar::SectionBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" kindref="member" tooltip="End of section character: (char)12 or &quot;\f&quot;.">ControlChar::SectionBreakChar</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="struct/system.convert/_1ab7679cfe7a96466fa1493293b673cf98" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Convert::ToChar</ref>(<ref refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" kindref="member" tooltip="End of column character: &quot;\x000e&quot;.">ControlChar::ColumnBreak</ref>()),<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" kindref="member" tooltip="End of column character: (char)14.">ControlChar::ColumnBreakChar</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="492" column="30"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
        <definition>static System::String &amp; Aspose::Words::ControlChar::Tab</definition>
        <argsstring>()</argsstring>
        <name>Tab</name>
        <qualifiedname>Aspose::Words::ControlChar::Tab</qualifiedname>
        <briefdescription>
<para>Tab character: &quot;\x0009&quot; or &quot;\t&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set a custom interval for tab stop positions. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>tab<sp/>stops<sp/>to<sp/>appear<sp/>every<sp/>72<sp/>points<sp/>(1<sp/>inch).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;set_DefaultTabStop(72);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>tab<sp/>character<sp/>snaps<sp/>the<sp/>text<sp/>after<sp/>it<sp/>to<sp/>the<sp/>next<sp/>closest<sp/>tab<sp/>stop<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;World!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;World!&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="137" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_control_char_1ad825db588962736260317dac1ce318cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::ControlChar::ControlChar</definition>
        <argsstring>()=delete</argsstring>
        <name>ControlChar</name>
        <qualifiedname>Aspose::Words::ControlChar::ControlChar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ControlChar.h" line="1930" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Control characters often encountered in documents. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use control characters. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>paragraphs<sp/>with<sp/>text<sp/>with<sp/>DocumentBuilder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>the<sp/>document<sp/>to<sp/>text<sp/>form<sp/>reveals<sp/>that<sp/>control<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>represent<sp/>some<sp/>of<sp/>the<sp/>document&apos;s<sp/>structural<sp/>elements,<sp/>such<sp/>as<sp/>page<sp/>breaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Format(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!{0}&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>())<sp/>+<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!{0}&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>())<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;GetText());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>converting<sp/>a<sp/>document<sp/>to<sp/>string<sp/>form,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>omit<sp/>some<sp/>of<sp/>the<sp/>control<sp/>characters<sp/>with<sp/>the<sp/>Trim<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Format(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!{0}&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>())<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="Aspose.Words.Cpp/ControlChar.h" line="44" column="1" bodyfile="Aspose.Words.Cpp/ControlChar.h" bodystart="45" bodyend="1931"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a9ffb3cc73c34851a322a8abfa1b80e1c" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ArabicLetterMark</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1adc01e6cbab9c955b8fb9fe8f7d70af0c" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>BackSlashChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1afc20607efd9b182547efd44dc14229bb" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>Cell</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ad3659b4f7aece20f391ee41de44afe77" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>CellChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a7a9b98ff2b8d36017dcfc801867d6a0f" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ColumnBreak</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a19454101c997d54ab372bc5a760575a5" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ColumnBreakChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ad825db588962736260317dac1ce318cb" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ControlChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>Cr</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a11f37d9d2b9145ec921b6f6e611eda89" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>CrLf</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ab2ec66b8bba1684aea187b48039f36e1" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>DefaultTextInputChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a672048c25787bffc9b786257d147310f" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>EmDashChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a0105df70a2002f0cfb27c788da66aa39" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>EmSpaceChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a0eb39c5dd9ddd0d83ef54d29dafac166" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>EnDashChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1af9352eb892cd2ebae91c49544dd80c2f" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>EnSpaceChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ac33d54530e758e4841d4fb062714ba6e" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>FieldEndChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ae4f3a17178235279ac5c53b00df451e6" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>FieldSeparatorChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a47ee02870caea63c1bf114887b1fcb6f" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>FieldStartChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a5d66d3bab54c4ab2c86da84fb2466036" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>FirstStrongIsolate</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1acd6e0b0ac7ae1ad626ac0ff80aef65fd" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>FourPerEmSpaceChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1acdacb1f13527ca138cd60953f0784346" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>IdeographicSpaceChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ac717b202c79f5fbadd3a7f5260f2aa02" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>LeftToRightEmbedding</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ae96a785d38984f446592bd500b660b63" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>LeftToRightIsolate</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1af85ddc6f585d610a452b441ad07a9d23" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>LeftToRightMarkChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a86bd485300bdba9e3b80376361c6ea91" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>LeftToRightOverride</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ac6c487271f3c06e222f840977b909f26" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>Lf</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a56b0073e40fb2dd555da6fb2515792d9" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>LineBreak</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a8e9c26f5b0c61e85698a8ea0cc686946" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>LineBreakChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1adba3e44f60d2340bbdfa5ff6f09771c8" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>LineFeed</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a9012a78fe96c93f89e7873b7973decac" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>LineFeedChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a22ca59f8183d3db2e852a0190ba3a183" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>NonBreakingHyphenChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1aae624f7f8ec9d10a31ccb0f86d3b2c30" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>NonBreakingSpace</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a98f7e5a0b80a24a538da6a5cfc303bd6" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>NonBreakingSpaceChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1adf739ab51d62ea260f812e538a8697d3" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>OptionalHyphenChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>PageBreak</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a7265b37b293df218653666a652ef1842" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>PageBreakChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ac122747db97062d04f8bdcd60178408b" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ParagraphBreak</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1adb923ecefe4d8b46216a74aa07e95e03" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ParagraphBreakChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a2381bbabb80a4616026731fee8f45bd0" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>PopDirectionalFormatting</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ab0aee63e4a2de0f6903c6e1b27656b36" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>PopDirectionalIsolate</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a18f54dfc6a80ac4f8b4b3e05714440c0" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>RightToLeftEmbedding</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a91124d581bcfac7908facd2f6efdd9b9" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>RightToLeftIsolate</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1af25565855854dd6b8e4473e24a07492d" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>RightToLeftMarkChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a748b454a125549c1d3df9c0bd5ac41ef" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>RightToLeftOverride</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a6b4e1572bb56ce6bd2431c3a548ff537" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>SectionBreak</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a4f0cc820bd702c0042776ac902947dc4" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>SectionBreakChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a6c46841335acbab373d0f7d1142201dc" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>SpaceChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>Tab</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" prot="public" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>TabChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1aeab755cbe3a306b9cd92ea297eccd181" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a3d5e78ecd982182d415de1ca3b6e78aa" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>UnicodeLineSeparator</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ab9094f1b3d2ad8d7466ef944b749384f" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>UnicodeNonBreakingHyphenChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a2d4d0cb6b27c098fa2761706cd49170a" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>UnicodeOptionalHyphenChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1aea9e3709529fd574defb194c98228755" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>YenChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a8e85f1adee665a9697cfbbab44e6c522" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ZeroWidthJoinerChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a24c8f22e00c9dfd43cd797a35a1614dd" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ZeroWidthNonJoinerChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1a61c8cc47914b0dd86fbd35c92a446c06" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ZeroWidthSpaceChar</name></member>
      <member refid="class_aspose_1_1_words_1_1_control_char_1ace20b1b8cb4807fa77ea6dbd60c74a47" prot="private" virt="non-virtual"><scope>Aspose::Words::ControlChar</scope><name>ZeroWithNoBreakSpace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
