<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_font" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::Font</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IBorderAttrSource</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IShadingAttrSource</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::Drawing::Core::IFillable</basecompoundref>
    <includes refid="_font_8h" local="no">Aspose.Words.Cpp/Font.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_font_1a6e5d6f2542105d6bfa8b861c72afb406" prot="private" static="no">
        <type>Aspose::Words::IBorderAttrSource</type>
        <definition>typedef Aspose::Words::IBorderAttrSource Aspose::Words::Font::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Font::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="155" column="46" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_font_1ab83d44cae8f70f976e78ec7f8d3b57d7" prot="private" static="no">
        <type>Aspose::Words::IShadingAttrSource</type>
        <definition>typedef Aspose::Words::IShadingAttrSource Aspose::Words::Font::BaseType1</definition>
        <argsstring></argsstring>
        <name>BaseType1</name>
        <qualifiedname>Aspose::Words::Font::BaseType1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="156" column="47" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_font_1a415cb63548edb2099a7344f0ddae6e7b" prot="private" static="no">
        <type>Aspose::Words::Drawing::Core::IFillable</type>
        <definition>typedef Aspose::Words::Drawing::Core::IFillable Aspose::Words::Font::BaseType2</definition>
        <argsstring></argsstring>
        <name>BaseType2</name>
        <qualifiedname>Aspose::Words::Font::BaseType2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="157" column="53" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_font_1a883442362c9f2be57c97f1d79d91d3a0" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref></type>
        <definition>typedef Font Aspose::Words::Font::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Font::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="154" column="18" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_font_1adf94f2a3ef695cba63d6f5e4d29cf2a0" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; BaseType, BaseType1, BaseType2 &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType, BaseType1, BaseType2&gt; Aspose::Words::Font::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Font::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="159" column="37" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_font_1ac343c9c4dc1337f5bef2a16e15d99261" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::Font::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Font::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2533" column="21" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="2533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_font_1ac75455da5113fd87ed8a64d568d2fc2a" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::Font::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Font::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2534" column="21" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="2534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_font_1a232f02ee894a1fe7e324b6b55e211651" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::Font::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::Font::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2535" column="21" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="2535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_font_1acc5d4ff59261b300b26aba9fed0d4c71" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Font::mField3</definition>
        <argsstring></argsstring>
        <name>mField3</name>
        <qualifiedname>Aspose::Words::Font::mField3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2536" column="23" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="2536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_font_1aba4c0bdd98d802292aa43ec7ce61d400" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Font::mField4</definition>
        <argsstring></argsstring>
        <name>mField4</name>
        <qualifiedname>Aspose::Words::Font::mField4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2537" column="23" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="2537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_font_1a07cfcfa22b6b6904f183cbbe828e64e1" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Font::mField5</definition>
        <argsstring></argsstring>
        <name>mField5</name>
        <qualifiedname>Aspose::Words::Font::mField5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2538" column="23" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="2538" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ac02aaf93e0bb970b2e3e2c92be1dbc78" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::Font::~Font</definition>
        <argsstring>()</argsstring>
        <name>~Font</name>
        <qualifiedname>Aspose::Words::Font::~Font</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2501" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ad8f6651487b06495f3172d68141cf496" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Font::get_FillableBackColor</definition>
        <argsstring>() override</argsstring>
        <name>get_FillableBackColor</name>
        <qualifiedname>Aspose::Words::Font::get_FillableBackColor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2522" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a00ec68a8fef32513e46cc7690f2d4850" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Font::get_FillableForeColor</definition>
        <argsstring>() override</argsstring>
        <name>get_FillableForeColor</name>
        <qualifiedname>Aspose::Words::Font::get_FillableForeColor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2520" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1afc5c40e68cd5de21cc85bb06df3a24e5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt;</type>
        <definition>System::ArrayPtr&lt; uint8_t &gt; Aspose::Words::Font::get_FillableImageBytes</definition>
        <argsstring>() override</argsstring>
        <name>get_FillableImageBytes</name>
        <qualifiedname>Aspose::Words::Font::get_FillableImageBytes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2512" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a94b4c15b9995b9431e0cb566919d02f9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::Drawing::Core::Dml::Themes::IThemeProvider &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Core::Dml::Themes::IThemeProvider &gt; Aspose::Words::Font::get_FillableThemeProvider</definition>
        <argsstring>() override</argsstring>
        <name>get_FillableThemeProvider</name>
        <qualifiedname>Aspose::Words::Font::get_FillableThemeProvider</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2531" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aee5123a2606f87fba9155b51bda04cb6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::get_FillableTransparency</definition>
        <argsstring>() override</argsstring>
        <name>get_FillableTransparency</name>
        <qualifiedname>Aspose::Words::Font::get_FillableTransparency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2526" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a5236bc987a9afc087a64b445ef72850e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_FillableVisible</definition>
        <argsstring>() override</argsstring>
        <name>get_FillableVisible</name>
        <qualifiedname>Aspose::Words::Font::get_FillableVisible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2524" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a4e3305c76ee62e99fe5a1b9af2e3b022" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Font::get_FilledColor</definition>
        <argsstring>() override</argsstring>
        <name>get_FilledColor</name>
        <qualifiedname>Aspose::Words::Font::get_FilledColor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2506" column="28"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ae4fe0cb3ff555306784d9398416b2118" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Aspose::Words::Drawing::Core::FillTypeCore</type>
        <definition>Aspose::Words::Drawing::Core::FillTypeCore Aspose::Words::Font::get_FillType</definition>
        <argsstring>() override</argsstring>
        <name>get_FillType</name>
        <qualifiedname>Aspose::Words::Font::get_FillType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2530" column="48"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a065b982192fd99cd6b088775b7c8107b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::get_GradientAngle</definition>
        <argsstring>() override</argsstring>
        <name>get_GradientAngle</name>
        <qualifiedname>Aspose::Words::Font::get_GradientAngle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2515" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ae1daaf5ae4140f8d8cfc1bdfb13b244d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_gradient_stop_collection" kindref="compound">Aspose::Words::Drawing::GradientStopCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::GradientStopCollection &gt; Aspose::Words::Font::get_GradientStops</definition>
        <argsstring>() override</argsstring>
        <name>get_GradientStops</name>
        <qualifiedname>Aspose::Words::Font::get_GradientStops</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2519" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1adb8f6a4044c4dd88876f0619f498b078" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a610db2dc24cd10024dddc254b5992edb" kindref="member">Aspose::Words::Drawing::GradientStyle</ref></type>
        <definition>Aspose::Words::Drawing::GradientStyle Aspose::Words::Font::get_GradientStyle</definition>
        <argsstring>() override</argsstring>
        <name>get_GradientStyle</name>
        <qualifiedname>Aspose::Words::Font::get_GradientStyle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2518" column="43"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a1e8b7273768bd63abdb09351f702cdca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1adab7b8aed778ae3af981575ce6809974" kindref="member">Aspose::Words::Drawing::GradientVariant</ref></type>
        <definition>Aspose::Words::Drawing::GradientVariant Aspose::Words::Font::get_GradientVariant</definition>
        <argsstring>() override</argsstring>
        <name>get_GradientVariant</name>
        <qualifiedname>Aspose::Words::Font::get_GradientVariant</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2517" column="45"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a5784d4697b4955d476730f342d8351d5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_On</definition>
        <argsstring>() override</argsstring>
        <name>get_On</name>
        <qualifiedname>Aspose::Words::Font::get_On</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2508" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a443432d7f278ae6906d52c7dbaabfb78" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::get_Opacity</definition>
        <argsstring>() override</argsstring>
        <name>get_Opacity</name>
        <qualifiedname>Aspose::Words::Font::get_Opacity</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2510" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a0351e5aa0625a32ec67fd2cd8e1838b7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_RotateWithObject</definition>
        <argsstring>() override</argsstring>
        <name>get_RotateWithObject</name>
        <qualifiedname>Aspose::Words::Font::get_RotateWithObject</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2528" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a7a953abfbded2357d3669b8b536f8979" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a7d37f1d8a4325aa913702818080464e0" kindref="member">Aspose::Words::Drawing::TextureAlignment</ref></type>
        <definition>Aspose::Words::Drawing::TextureAlignment Aspose::Words::Font::get_TextureAlignment</definition>
        <argsstring>() override</argsstring>
        <name>get_TextureAlignment</name>
        <qualifiedname>Aspose::Words::Font::get_TextureAlignment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2513" column="46"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ad7e4318ac9de40089a61059669abc857" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a440e38f9b3ff8cbca20c3fb37c77d230" kindref="member">Aspose::Words::Drawing::PatternType</ref></type>
        <definition>Aspose::Words::Drawing::PatternType Aspose::Words::Font::GetPatternType</definition>
        <argsstring>() override</argsstring>
        <name>GetPatternType</name>
        <qualifiedname>Aspose::Words::Font::GetPatternType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2546" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a14a50cb2c25fc7daecb9ddb482a069b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a1f2b0ebeb8bbf0139dfe4b63053195fc" kindref="member">Aspose::Words::Drawing::PresetTexture</ref></type>
        <definition>Aspose::Words::Drawing::PresetTexture Aspose::Words::Font::GetPresetTexture</definition>
        <argsstring>() override</argsstring>
        <name>GetPresetTexture</name>
        <qualifiedname>Aspose::Words::Font::GetPresetTexture</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2545" column="43"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a777279fbb534eacec6cd0b7ada0f0b5f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::GetTransparency</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::Drawing::Core::Dml::Colors::DmlColor &gt;) override</argsstring>
        <name>GetTransparency</name>
        <qualifiedname>Aspose::Words::Font::GetTransparency</qualifiedname>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::Drawing::Core::Dml::Colors::DmlColor &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2553" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a8d4279151263448f3c9d9113f9e16471" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::OneColorGradient</definition>
        <argsstring>(Aspose::Words::Drawing::GradientStyle, Aspose::Words::Drawing::GradientVariant, double) override</argsstring>
        <name>OneColorGradient</name>
        <qualifiedname>Aspose::Words::Font::OneColorGradient</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a610db2dc24cd10024dddc254b5992edb" kindref="member">Aspose::Words::Drawing::GradientStyle</ref></type>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1adab7b8aed778ae3af981575ce6809974" kindref="member">Aspose::Words::Drawing::GradientVariant</ref></type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2550" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ae58d830f88442cf82fe684605a614835" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::Patterned</definition>
        <argsstring>(Aspose::Words::Drawing::PatternType) override</argsstring>
        <name>Patterned</name>
        <qualifiedname>Aspose::Words::Font::Patterned</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a440e38f9b3ff8cbca20c3fb37c77d230" kindref="member">Aspose::Words::Drawing::PatternType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2548" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a653e37a8d162786b480eaf236ed47579" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::PresetTextured</definition>
        <argsstring>(Aspose::Words::Drawing::PresetTexture) override</argsstring>
        <name>PresetTextured</name>
        <qualifiedname>Aspose::Words::Font::PresetTextured</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a1f2b0ebeb8bbf0139dfe4b63053195fc" kindref="member">Aspose::Words::Drawing::PresetTexture</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2547" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1abd44ff57aa50403d088f10c65bf1ec43" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Font::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Font::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="160" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a8ab869844706b4d4c1ca2e200fc8fb09" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_FillableBackColor</definition>
        <argsstring>(System::Drawing::Color) override</argsstring>
        <name>set_FillableBackColor</name>
        <qualifiedname>Aspose::Words::Font::set_FillableBackColor</qualifiedname>
        <param>
          <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2523" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a5316c9d2ac08c99810bc073bbe080228" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_FillableForeColor</definition>
        <argsstring>(System::Drawing::Color) override</argsstring>
        <name>set_FillableForeColor</name>
        <qualifiedname>Aspose::Words::Font::set_FillableForeColor</qualifiedname>
        <param>
          <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2521" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a6b37e478c9e9149c44066349dcc56879" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_FillableTransparency</definition>
        <argsstring>(double) override</argsstring>
        <name>set_FillableTransparency</name>
        <qualifiedname>Aspose::Words::Font::set_FillableTransparency</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2527" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a475e8fc612426b2b92405e876409d68b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_FillableVisible</definition>
        <argsstring>(bool) override</argsstring>
        <name>set_FillableVisible</name>
        <qualifiedname>Aspose::Words::Font::set_FillableVisible</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2525" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1afcc5b56b6e94ff2c0a2cc3dea7782d62" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_FilledColor</definition>
        <argsstring>(System::Drawing::Color) override</argsstring>
        <name>set_FilledColor</name>
        <qualifiedname>Aspose::Words::Font::set_FilledColor</qualifiedname>
        <param>
          <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2507" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a4d02727090713d4b8a4bcc2db23c7188" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_GradientAngle</definition>
        <argsstring>(double) override</argsstring>
        <name>set_GradientAngle</name>
        <qualifiedname>Aspose::Words::Font::set_GradientAngle</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2516" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1abb16d1801f91342d0121409d7905ca6c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_On</definition>
        <argsstring>(bool) override</argsstring>
        <name>set_On</name>
        <qualifiedname>Aspose::Words::Font::set_On</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2509" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a503a3719045de3eabdb31ac06760407a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Opacity</definition>
        <argsstring>(double) override</argsstring>
        <name>set_Opacity</name>
        <qualifiedname>Aspose::Words::Font::set_Opacity</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2511" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a4013d0a585539da23d46cd7b7fd2819c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_RotateWithObject</definition>
        <argsstring>(bool) override</argsstring>
        <name>set_RotateWithObject</name>
        <qualifiedname>Aspose::Words::Font::set_RotateWithObject</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2529" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1af86a8346dbac1cd01c280f5cecf7892d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_TextureAlignment</definition>
        <argsstring>(Aspose::Words::Drawing::TextureAlignment) override</argsstring>
        <name>set_TextureAlignment</name>
        <qualifiedname>Aspose::Words::Font::set_TextureAlignment</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a7d37f1d8a4325aa913702818080464e0" kindref="member">Aspose::Words::Drawing::TextureAlignment</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2514" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a2414035a1af1b83c2e40504dd089c6cd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::SetFill</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::Drawing::Core::IFill &gt;) override</argsstring>
        <name>SetFill</name>
        <qualifiedname>Aspose::Words::Font::SetFill</qualifiedname>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::Drawing::Core::IFill &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2552" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a220e0b64c995c7db488d97cc556f9f79" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::SetImage</definition>
        <argsstring>(System::ArrayPtr&lt; uint8_t &gt;) override</argsstring>
        <name>SetImage</name>
        <qualifiedname>Aspose::Words::Font::SetImage</qualifiedname>
        <param>
          <type><ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2551" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ae8603b6c96aad2536418ab109a65989e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::SetTransparency</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::Drawing::Core::Dml::Colors::DmlColor &gt;, double) override</argsstring>
        <name>SetTransparency</name>
        <qualifiedname>Aspose::Words::Font::SetTransparency</qualifiedname>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::Drawing::Core::Dml::Colors::DmlColor &gt;</type>
        </param>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2554" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a2fbe90ca698add47d788f29d0c8aaf4a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::Solid</definition>
        <argsstring>() override</argsstring>
        <name>Solid</name>
        <qualifiedname>Aspose::Words::Font::Solid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2544" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a685d06a32c25185950809274f57a4606" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::TwoColorGradient</definition>
        <argsstring>(Aspose::Words::Drawing::GradientStyle, Aspose::Words::Drawing::GradientVariant) override</argsstring>
        <name>TwoColorGradient</name>
        <qualifiedname>Aspose::Words::Font::TwoColorGradient</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a610db2dc24cd10024dddc254b5992edb" kindref="member">Aspose::Words::Drawing::GradientStyle</ref></type>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1adab7b8aed778ae3af981575ce6809974" kindref="member">Aspose::Words::Drawing::GradientVariant</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2549" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a9ba53599fdc423775368cd2e13f8a6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::ClearFormatting</definition>
        <argsstring>()</argsstring>
        <name>ClearFormatting</name>
        <qualifiedname>Aspose::Words::Font::ClearFormatting</qualifiedname>
        <briefdescription>
<para>Resets to default font formatting. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes all font formatting specified explicitly on the object from which <bold>Font</bold> was obtained so the font formatting will be inherited from the appropriate parent.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a hyperlink field. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;For<sp/>more<sp/>information,<sp/>please<sp/>visit<sp/>the<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>hyperlink<sp/>and<sp/>emphasize<sp/>it<sp/>with<sp/>custom<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>hyperlink<sp/>will<sp/>be<sp/>a<sp/>clickable<sp/>piece<sp/>of<sp/>text<sp/>which<sp/>will<sp/>take<sp/>us<sp/>to<sp/>the<sp/>location<sp/>specified<sp/>in<sp/>the<sp/>URL.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a66ba162102bbf6ae31b522aec561735e" kindref="member">Underline::Single</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHyperlink(u</highlight><highlight class="stringliteral">&quot;Google<sp/>website&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;https://www.google.com&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ctrl<sp/>+<sp/>left<sp/>clicking<sp/>the<sp/>link<sp/>in<sp/>the<sp/>text<sp/>in<sp/>Microsoft<sp/>Word<sp/>will<sp/>take<sp/>us<sp/>to<sp/>the<sp/>URL<sp/>via<sp/>a<sp/>new<sp/>web<sp/>browser<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertHyperlink.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2475" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a56ccbfde5f497fb922f2dcd0ca7563e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_AllCaps</definition>
        <argsstring>()</argsstring>
        <name>get_AllCaps</name>
        <qualifiedname>Aspose::Words::Font::get_AllCaps</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as all capital letters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format a run to display its contents in capitals. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>getting<sp/>a<sp/>run<sp/>to<sp/>display<sp/>its<sp/>lowercase<sp/>text<sp/>in<sp/>uppercase<sp/>without<sp/>changing<sp/>the<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Set<sp/>the<sp/>AllCaps<sp/>flag<sp/>to<sp/>display<sp/>all<sp/>characters<sp/>in<sp/>regular<sp/>capitals:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;all<sp/>capitals&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_AllCaps(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(para-&gt;get_ParentNode()-&gt;AppendChild(MakeObject&lt;Paragraph&gt;(doc)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Set<sp/>the<sp/>SmallCaps<sp/>flag<sp/>to<sp/>display<sp/>all<sp/>characters<sp/>in<sp/>small<sp/>capitals:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>character<sp/>is<sp/>lower<sp/>case,<sp/>it<sp/>will<sp/>appear<sp/>in<sp/>its<sp/>upper<sp/>case<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>will<sp/>have<sp/>the<sp/>same<sp/>height<sp/>as<sp/>the<sp/>lower<sp/>case<sp/>(the<sp/>font&apos;s<sp/>x-height).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Characters<sp/>that<sp/>were<sp/>in<sp/>upper<sp/>case<sp/>originally<sp/>will<sp/>look<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Small<sp/>Capitals&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_SmallCaps(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Caps.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1544" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a026891d07660863b7368248a9e5850cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Font::get_AutoColor</definition>
        <argsstring>()</argsstring>
        <name>get_AutoColor</name>
        <qualifiedname>Aspose::Words::Font::get_AutoColor</qualifiedname>
        <briefdescription>
<para>Returns the present calculated color of the text (black or white) to be used for &apos;auto color&apos;. If the color is not &apos;auto&apos; then returns <ref refid="class_aspose_1_1_words_1_1_font_1a4b5deeeea37f74871e1d46cd4f381654" kindref="member">Color</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>When text has &apos;automatic color&apos;, the actual color of text is calculated automatically so that it is readable against the background color. As you change the background color, the text color will automatically switch to black or white in MS Word to maximize legibility.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to improve readability by automatically selecting text color based on the brightness of its background. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>run&apos;s<sp/>Font<sp/>object<sp/>does<sp/>not<sp/>specify<sp/>text<sp/>color,<sp/>it<sp/>will<sp/>automatically</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>select<sp/>either<sp/>black<sp/>or<sp/>white<sp/>depending<sp/>on<sp/>the<sp/>background<sp/>color&apos;s<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>.ToArgb(),<sp/>builder-&gt;get_Font()-&gt;get_Color().ToArgb());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>color<sp/>for<sp/>text<sp/>is<sp/>black.<sp/>If<sp/>the<sp/>color<sp/>of<sp/>the<sp/>background<sp/>is<sp/>dark,<sp/>black<sp/>text<sp/>will<sp/>be<sp/>difficult<sp/>to<sp/>see.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>solve<sp/>this<sp/>problem,<sp/>the<sp/>AutoColor<sp/>property<sp/>will<sp/>display<sp/>this<sp/>text<sp/>in<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1aa571d1dab14d0305df4bf2bc6a022c8d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_DarkBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;The<sp/>text<sp/>color<sp/>automatically<sp/>chosen<sp/>for<sp/>this<sp/>run<sp/>is<sp/>white.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>().ToArgb(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_Runs()-&gt;idx_get(0)-&gt;get_Font()-&gt;get_AutoColor().ToArgb());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>change<sp/>the<sp/>background<sp/>to<sp/>a<sp/>light<sp/>color,<sp/>black<sp/>will<sp/>be<sp/>a<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>suitable<sp/>text<sp/>color<sp/>than<sp/>white<sp/>so<sp/>that<sp/>the<sp/>auto<sp/>color<sp/>will<sp/>display<sp/>it<sp/>in<sp/>black.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a989243916cf2bfbe0fc140d29ec2ea2e" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;The<sp/>text<sp/>color<sp/>automatically<sp/>chosen<sp/>for<sp/>this<sp/>run<sp/>is<sp/>black.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>().ToArgb(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(1)-&gt;get_Runs()-&gt;idx_get(0)-&gt;get_Font()-&gt;get_AutoColor().ToArgb());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.SetFontAutoColor.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1242" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a7280a2e0beabe020d34d52adf5065877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_Bidi</definition>
        <argsstring>()</argsstring>
        <name>get_Bidi</name>
        <qualifiedname>Aspose::Words::Font::get_Bidi</qualifiedname>
        <briefdescription>
<para>Specifies whether the contents of this run shall have right-to-left characteristics. </para>
        </briefdescription>
        <detaileddescription>
<para>This property, when on, shall not be used with strongly left-to-right text. Any behavior under that condition is unspecified. This property, when off, shall not be used with strong right-to-left text. Any behavior under that condition is unspecified.</para>
<para>When the contents of this run are displayed, all characters shall be treated as complex script characters for formatting purposes. This means that <ref refid="class_aspose_1_1_words_1_1_font_1a547fecd3a7dcd62c324743c7cb10a70d" kindref="member">BoldBi</ref>, <ref refid="class_aspose_1_1_words_1_1_font_1a30a5c8250c1d206ccf8253f8d7090b9e" kindref="member">ItalicBi</ref>, <ref refid="class_aspose_1_1_words_1_1_font_1aeb91960b87617b887ea53f4a2bea6328" kindref="member">SizeBi</ref> and a corresponding font name will be used when rendering this run.</para>
<para>Also, when the contents of this run are displayed, this property acts as a right-to-left override for characters which are classified as &quot;weak types&quot; and &quot;neutral types&quot;.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to define separate sets of font settings for right-to-left, and right-to-left text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Italic(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleId(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>another<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>right-to-left<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameBi(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_SizeBi(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_ItalicBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_BoldBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleIdBi(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;ar-AR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>Bidi<sp/>flag<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>text<sp/>we<sp/>are<sp/>about<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>document<sp/>builder<sp/>is<sp/>right-to-left.<sp/>When<sp/>we<sp/>add<sp/>text<sp/>with<sp/>this<sp/>flag<sp/>set<sp/>to<sp/>true,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>be<sp/>formatted<sp/>using<sp/>the<sp/>right-to-left<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;مرحبًا&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>flag<sp/>to<sp/>false,<sp/>and<sp/>then<sp/>add<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder<sp/>will<sp/>format<sp/>these<sp/>using<sp/>the<sp/>left-to-right<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Bidi.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2111" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1afaa22f9076743e0c4d79cdd7c2436284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_Bold</definition>
        <argsstring>()</argsstring>
        <name>get_Bold</name>
        <qualifiedname>Aspose::Words::Font::get_Bold</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as bold. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert formatted text using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>font<sp/>formatting,<sp/>then<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="916" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a547fecd3a7dcd62c324743c7cb10a70d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_BoldBi</definition>
        <argsstring>()</argsstring>
        <name>get_BoldBi</name>
        <qualifiedname>Aspose::Words::Font::get_BoldBi</qualifiedname>
        <briefdescription>
<para>True if the right-to-left text is formatted as bold. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to define separate sets of font settings for right-to-left, and right-to-left text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Italic(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleId(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>another<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>right-to-left<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameBi(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_SizeBi(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_ItalicBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_BoldBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleIdBi(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;ar-AR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>Bidi<sp/>flag<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>text<sp/>we<sp/>are<sp/>about<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>document<sp/>builder<sp/>is<sp/>right-to-left.<sp/>When<sp/>we<sp/>add<sp/>text<sp/>with<sp/>this<sp/>flag<sp/>set<sp/>to<sp/>true,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>be<sp/>formatted<sp/>using<sp/>the<sp/>right-to-left<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;مرحبًا&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>flag<sp/>to<sp/>false,<sp/>and<sp/>then<sp/>add<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder<sp/>will<sp/>format<sp/>these<sp/>using<sp/>the<sp/>left-to-right<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Bidi.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="957" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a61ec72be23f14e26acec812a3af9b269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_border" kindref="compound">Aspose::Words::Border</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Border &gt; Aspose::Words::Font::get_Border</definition>
        <argsstring>()</argsstring>
        <name>get_Border</name>
        <qualifiedname>Aspose::Words::Font::get_Border</qualifiedname>
        <briefdescription>
<para>Returns a <ref refid="class_aspose_1_1_words_1_1_border" kindref="compound">Border</ref> object that specifies border for the font. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a string surrounded by a border into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_LineWidth(2.5);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da8cf8027b2b64fbbc8ed979f94a7555b8" kindref="member">LineStyle::DashDotStroker</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>surrounded<sp/>by<sp/>green<sp/>border.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Border.FontBorder.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2276" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a4b5deeeea37f74871e1d46cd4f381654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Font::get_Color</definition>
        <argsstring>()</argsstring>
        <name>get_Color</name>
        <qualifiedname>Aspose::Words::Font::get_Color</qualifiedname>
        <briefdescription>
<para>Gets or sets the color of the font. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert formatted text using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>font<sp/>formatting,<sp/>then<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a hyperlink field. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;For<sp/>more<sp/>information,<sp/>please<sp/>visit<sp/>the<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>hyperlink<sp/>and<sp/>emphasize<sp/>it<sp/>with<sp/>custom<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>hyperlink<sp/>will<sp/>be<sp/>a<sp/>clickable<sp/>piece<sp/>of<sp/>text<sp/>which<sp/>will<sp/>take<sp/>us<sp/>to<sp/>the<sp/>location<sp/>specified<sp/>in<sp/>the<sp/>URL.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a66ba162102bbf6ae31b522aec561735e" kindref="member">Underline::Single</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHyperlink(u</highlight><highlight class="stringliteral">&quot;Google<sp/>website&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;https://www.google.com&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ctrl<sp/>+<sp/>left<sp/>clicking<sp/>the<sp/>link<sp/>in<sp/>the<sp/>text<sp/>in<sp/>Microsoft<sp/>Word<sp/>will<sp/>take<sp/>us<sp/>to<sp/>the<sp/>URL<sp/>via<sp/>a<sp/>new<sp/>web<sp/>browser<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertHyperlink.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1061" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a609b75c498498bd903a818177b230a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_ComplexScript</definition>
        <argsstring>()</argsstring>
        <name>get_ComplexScript</name>
        <qualifiedname>Aspose::Words::Font::get_ComplexScript</qualifiedname>
        <briefdescription>
<para>Specifies whether the contents of this run shall be treated as complex script text regardless of their Unicode character values when determining the formatting for this run. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add text that is always treated as complex script. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_ComplexScript(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>treated<sp/>as<sp/>complex<sp/>script.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.ComplexScript.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2132" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ab25c54aafb5fa0996b520e0eb3cf9f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_DoubleStrikeThrough</definition>
        <argsstring>()</argsstring>
        <name>get_DoubleStrikeThrough</name>
        <qualifiedname>Aspose::Words::Font::get_DoubleStrikeThrough</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as double strikethrough text. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add a line strikethrough to text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>with<sp/>a<sp/>single-line<sp/>strikethrough.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_StrikeThrough(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(para-&gt;get_ParentNode()-&gt;AppendChild(MakeObject&lt;Paragraph&gt;(doc)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>with<sp/>a<sp/>double-line<sp/>strikethrough.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_DoubleStrikeThrough(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.StrikeThrough.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1291" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a8334d2cd8f2b4f6dbf393802cc0603c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_Emboss</definition>
        <argsstring>()</argsstring>
        <name>get_Emboss</name>
        <qualifiedname>Aspose::Words::Font::get_Emboss</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as embossed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply engraving/embossing effects to text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a989243916cf2bfbe0fc140d29ec2ea2e" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>using<sp/>shadows<sp/>to<sp/>apply<sp/>a<sp/>3D-like<sp/>effect<sp/>to<sp/>the<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Engrave<sp/>text<sp/>to<sp/>make<sp/>it<sp/>look<sp/>like<sp/>the<sp/>letters<sp/>are<sp/>sunken<sp/>into<sp/>the<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Engrave(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>engraved.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Emboss<sp/>text<sp/>to<sp/>make<sp/>it<sp/>look<sp/>like<sp/>the<sp/>letters<sp/>pop<sp/>out<sp/>of<sp/>the<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Engrave(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Emboss(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>embossed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.EngraveEmboss.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1369" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ae436298f0dc3bebdc9274edb26e40ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a0031adcf684ba2f1355459c842a15754" kindref="member">Aspose::Words::EmphasisMark</ref></type>
        <definition>Aspose::Words::EmphasisMark Aspose::Words::Font::get_EmphasisMark</definition>
        <argsstring>()</argsstring>
        <name>get_EmphasisMark</name>
        <qualifiedname>Aspose::Words::Font::get_EmphasisMark</qualifiedname>
        <briefdescription>
<para>Gets or sets the emphasis mark applied to this formatting. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add additional character rendered above/below the glyph-character. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Possible<sp/>types<sp/>of<sp/>emphasis<sp/>mark:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://apireference.aspose.com/words/net/aspose.words/emphasismark</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_EmphasisMark(emphasisMark);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Emphasis<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Simple<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Fonts.SetEmphasisMark.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2444" column="36"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a8350cb258d9adcaf0f1803314a038005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_Engrave</definition>
        <argsstring>()</argsstring>
        <name>get_Engrave</name>
        <qualifiedname>Aspose::Words::Font::get_Engrave</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as engraved. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply engraving/embossing effects to text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a989243916cf2bfbe0fc140d29ec2ea2e" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>using<sp/>shadows<sp/>to<sp/>apply<sp/>a<sp/>3D-like<sp/>effect<sp/>to<sp/>the<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Engrave<sp/>text<sp/>to<sp/>make<sp/>it<sp/>look<sp/>like<sp/>the<sp/>letters<sp/>are<sp/>sunken<sp/>into<sp/>the<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Engrave(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>engraved.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Emboss<sp/>text<sp/>to<sp/>make<sp/>it<sp/>look<sp/>like<sp/>the<sp/>letters<sp/>pop<sp/>out<sp/>of<sp/>the<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Engrave(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Emboss(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>embossed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.EngraveEmboss.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1400" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a3723d609e8e87c778ddaf5420d57faad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_fill" kindref="compound">Aspose::Words::Drawing::Fill</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Fill &gt; Aspose::Words::Font::get_Fill</definition>
        <argsstring>()</argsstring>
        <name>get_Fill</name>
        <qualifiedname>Aspose::Words::Font::get_Fill</qualifiedname>
        <briefdescription>
<para>Gets fill formatting for the <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2063" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ad19fcd5ec5f802dfd6e791053f430b30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_Hidden</definition>
        <argsstring>()</argsstring>
        <name>get_Hidden</name>
        <qualifiedname>Aspose::Words::Font::get_Hidden</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as hidden text. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a run of hidden text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>With<sp/>the<sp/>Hidden<sp/>flag<sp/>set<sp/>to<sp/>true,<sp/>any<sp/>text<sp/>that<sp/>we<sp/>create<sp/>using<sp/>this<sp/>Font<sp/>object<sp/>will<sp/>be<sp/>invisible<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>not<sp/>see<sp/>or<sp/>highlight<sp/>hidden<sp/>text<sp/>unless<sp/>we<sp/>enable<sp/>the<sp/>&quot;Hidden<sp/>text&quot;<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>found<sp/>in<sp/>Microsoft<sp/>Word<sp/>via<sp/>&quot;File&quot;<sp/>-&gt;<sp/>&quot;Options&quot;<sp/>-&gt;<sp/>&quot;Display&quot;.<sp/>The<sp/>text<sp/>will<sp/>still<sp/>be<sp/>there,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>will<sp/>be<sp/>able<sp/>to<sp/>access<sp/>this<sp/>text<sp/>programmatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>not<sp/>advised<sp/>to<sp/>use<sp/>this<sp/>method<sp/>to<sp/>hide<sp/>sensitive<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Hidden(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>will<sp/>not<sp/>be<sp/>visible<sp/>in<sp/>the<sp/>document.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Hidden.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to use a <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref> implementation to remove all hidden content from a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RemoveHiddenContentFromDocument()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Hidden<sp/>content.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hiddenContentRemover<sp/>=<sp/>MakeObject&lt;ExFont::RemoveHiddenContentVisitor&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>types<sp/>of<sp/>fields<sp/>which<sp/>can<sp/>accept<sp/>a<sp/>document<sp/>visitor,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>allow<sp/>it<sp/>to<sp/>visit<sp/>the<sp/>accepting<sp/>node,<sp/>and<sp/>then<sp/>traverse<sp/>its<sp/>child<sp/>nodes<sp/>in<sp/>a<sp/>depth-first<sp/>manner.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Paragraph<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>4,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>para-&gt;Accept(hiddenContentRemover);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Table<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Tables()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;Accept(hiddenContentRemover);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Document<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(hiddenContentRemover);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.RemoveHiddenContentFromDocument.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">RemoveHiddenContentVisitor<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFieldStart(SharedPtr&lt;FieldStart&gt;<sp/>fieldStart)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fieldStart-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldStart-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFieldEnd(SharedPtr&lt;FieldEnd&gt;<sp/>fieldEnd)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fieldEnd-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldEnd-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFieldSeparator(SharedPtr&lt;FieldSeparator&gt;<sp/>fieldSeparator)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fieldSeparator-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldSeparator-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitRun(SharedPtr&lt;Run&gt;<sp/>run)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitParagraphStart(SharedPtr&lt;Paragraph&gt;<sp/>paragraph)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paragraph-&gt;get_ParagraphBreakFont()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paragraph-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFormField(SharedPtr&lt;FormField&gt;<sp/>formField)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formField-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formField-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groupShape-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupShape-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitCommentStart(SharedPtr&lt;Comment&gt;<sp/>comment)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comment-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFootnoteStart(SharedPtr&lt;Footnote&gt;<sp/>footnote)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(footnote-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>footnote-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitSpecialChar(SharedPtr&lt;SpecialChar&gt;<sp/>specialChar)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specialChar-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specialChar-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitTableEnd(SharedPtr&lt;Table&gt;<sp/>table)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>content<sp/>inside<sp/>table<sp/>cells<sp/>may<sp/>have<sp/>the<sp/>hidden<sp/>content<sp/>flag,<sp/>but<sp/>the<sp/>tables<sp/>themselves<sp/>cannot.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>table<sp/>had<sp/>nothing<sp/>but<sp/>hidden<sp/>content,<sp/>this<sp/>visitor<sp/>would<sp/>have<sp/>removed<sp/>all<sp/>of<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>there<sp/>would<sp/>be<sp/>no<sp/>child<sp/>nodes<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thus,<sp/>we<sp/>can<sp/>also<sp/>treat<sp/>the<sp/>table<sp/>itself<sp/>as<sp/>hidden<sp/>content<sp/>and<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tables<sp/>which<sp/>are<sp/>empty<sp/>but<sp/>do<sp/>not<sp/>have<sp/>hidden<sp/>content<sp/>will<sp/>have<sp/>cells<sp/>with<sp/>empty<sp/>paragraphs<sp/>inside,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>this<sp/>visitor<sp/>will<sp/>not<sp/>remove.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!table-&gt;get_HasChildNodes())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitCellEnd(SharedPtr&lt;Cell&gt;<sp/>cell)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cell-&gt;get_HasChildNodes()<sp/>&amp;&amp;<sp/>cell-&gt;get_ParentNode()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitRowEnd(SharedPtr&lt;Row&gt;<sp/>row)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!row-&gt;get_HasChildNodes()<sp/>&amp;&amp;<sp/>row-&gt;get_ParentNode()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1790" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a77ddaf8c261c2372e8de1b7c255ad04f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Font::get_HighlightColor</definition>
        <argsstring>()</argsstring>
        <name>get_HighlightColor</name>
        <qualifiedname>Aspose::Words::Font::get_HighlightColor</qualifiedname>
        <briefdescription>
<para>Gets or sets the highlight (marker) color. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format a run of text using its font property. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>run-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_HighlightColor(<ref refid="class/system.drawing.color/_1ab0895ee04ac7572b810a3c0f97544c55" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Yellow</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.CreateFormattedRun.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2035" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a587d02969e68bbdf4b911c0308c6c578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_Italic</definition>
        <argsstring>()</argsstring>
        <name>get_Italic</name>
        <qualifiedname>Aspose::Words::Font::get_Italic</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as italic. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to write italicized text using a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Italic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Italic.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="977" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a30a5c8250c1d206ccf8253f8d7090b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_ItalicBi</definition>
        <argsstring>()</argsstring>
        <name>get_ItalicBi</name>
        <qualifiedname>Aspose::Words::Font::get_ItalicBi</qualifiedname>
        <briefdescription>
<para>True if the right-to-left text is formatted as italic. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to define separate sets of font settings for right-to-left, and right-to-left text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Italic(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleId(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>another<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>right-to-left<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameBi(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_SizeBi(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_ItalicBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_BoldBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleIdBi(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;ar-AR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>Bidi<sp/>flag<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>text<sp/>we<sp/>are<sp/>about<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>document<sp/>builder<sp/>is<sp/>right-to-left.<sp/>When<sp/>we<sp/>add<sp/>text<sp/>with<sp/>this<sp/>flag<sp/>set<sp/>to<sp/>true,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>be<sp/>formatted<sp/>using<sp/>the<sp/>right-to-left<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;مرحبًا&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>flag<sp/>to<sp/>false,<sp/>and<sp/>then<sp/>add<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder<sp/>will<sp/>format<sp/>these<sp/>using<sp/>the<sp/>left-to-right<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Bidi.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1018" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a7422cdb149284123ed48463acf73488b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::get_Kerning</definition>
        <argsstring>()</argsstring>
        <name>get_Kerning</name>
        <qualifiedname>Aspose::Words::Font::get_Kerning</qualifiedname>
        <briefdescription>
<para>Gets or sets the font size at which kerning starts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to specify the font size at which kerning begins to take effect. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial<sp/>Black&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>builder&apos;s<sp/>font<sp/>size,<sp/>and<sp/>minimum<sp/>size<sp/>at<sp/>which<sp/>kerning<sp/>will<sp/>take<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>font<sp/>size<sp/>falls<sp/>below<sp/>the<sp/>kerning<sp/>threshold,<sp/>so<sp/>the<sp/>run<sp/>bellow<sp/>will<sp/>not<sp/>have<sp/>kerning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(18);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Kerning(24);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;TALLY.<sp/>(Kerning<sp/>not<sp/>applied)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>kerning<sp/>threshold<sp/>so<sp/>that<sp/>the<sp/>builder&apos;s<sp/>current<sp/>font<sp/>size<sp/>is<sp/>above<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Any<sp/>text<sp/>we<sp/>add<sp/>from<sp/>this<sp/>point<sp/>will<sp/>have<sp/>kerning<sp/>applied.<sp/>The<sp/>spaces<sp/>between<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>adjusted,<sp/>normally<sp/>resulting<sp/>in<sp/>a<sp/>slightly<sp/>more<sp/>aesthetically<sp/>pleasing<sp/>text<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Kerning(12);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;TALLY.<sp/>(Kerning<sp/>applied)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Kerning.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2013" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1abe858bd585361c6ea7a0ca229cb461bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::get_LineSpacing</definition>
        <argsstring>()</argsstring>
        <name>get_LineSpacing</name>
        <qualifiedname>Aspose::Words::Font::get_LineSpacing</qualifiedname>
        <briefdescription>
<para>Returns line spacing of this font (in points). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get a font&apos;s line spacing, in points. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>different<sp/>fonts<sp/>for<sp/>the<sp/>DocumentBuilder<sp/>and<sp/>verify<sp/>their<sp/>line<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(14.6484375,<sp/>builder-&gt;get_Font()-&gt;get_LineSpacing());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Times<sp/>New<sp/>Roman&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(13.798828125,<sp/>builder-&gt;get_Font()-&gt;get_LineSpacing());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1944" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a6a77e8daf2422d2206dad756ae249220" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Font::get_LocaleId</definition>
        <argsstring>()</argsstring>
        <name>get_LocaleId</name>
        <qualifiedname>Aspose::Words::Font::get_LocaleId</qualifiedname>
        <briefdescription>
<para>Gets or sets the locale identifier (language) of the formatted characters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set the locale of the text that we are adding with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>set<sp/>the<sp/>font&apos;s<sp/>locale<sp/>to<sp/>English<sp/>and<sp/>insert<sp/>some<sp/>Russian<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>English<sp/>locale<sp/>spell<sp/>checker<sp/>will<sp/>not<sp/>recognize<sp/>the<sp/>text<sp/>and<sp/>detect<sp/>it<sp/>as<sp/>a<sp/>spelling<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleId(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Привет!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>a<sp/>matching<sp/>locale<sp/>for<sp/>the<sp/>text<sp/>that<sp/>we<sp/>are<sp/>about<sp/>to<sp/>add<sp/>to<sp/>apply<sp/>the<sp/>appropriate<sp/>spell<sp/>checker.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleId(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;ru-RU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Привет!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.LocaleId.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2180" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a2dc5d877b4ba35a0e59110dee3f7ba78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Font::get_LocaleIdBi</definition>
        <argsstring>()</argsstring>
        <name>get_LocaleIdBi</name>
        <qualifiedname>Aspose::Words::Font::get_LocaleIdBi</qualifiedname>
        <briefdescription>
<para>Gets or sets the locale identifier (language) of the formatted right-to-left characters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to define separate sets of font settings for right-to-left, and right-to-left text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Italic(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleId(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>another<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>right-to-left<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameBi(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_SizeBi(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_ItalicBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_BoldBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleIdBi(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;ar-AR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>Bidi<sp/>flag<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>text<sp/>we<sp/>are<sp/>about<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>document<sp/>builder<sp/>is<sp/>right-to-left.<sp/>When<sp/>we<sp/>add<sp/>text<sp/>with<sp/>this<sp/>flag<sp/>set<sp/>to<sp/>true,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>be<sp/>formatted<sp/>using<sp/>the<sp/>right-to-left<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;مرحبًا&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>flag<sp/>to<sp/>false,<sp/>and<sp/>then<sp/>add<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder<sp/>will<sp/>format<sp/>these<sp/>using<sp/>the<sp/>left-to-right<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Bidi.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2221" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a10fceeefa829873195883ff8bcea6d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Font::get_LocaleIdFarEast</definition>
        <argsstring>()</argsstring>
        <name>get_LocaleIdFarEast</name>
        <qualifiedname>Aspose::Words::Font::get_LocaleIdFarEast</qualifiedname>
        <briefdescription>
<para>Gets or sets the locale identifier (language) of the formatted Asian characters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert and format text in a Far East language. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>font<sp/>settings<sp/>that<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>to<sp/>any<sp/>text<sp/>that<sp/>it<sp/>inserts.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleId(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name<sp/>&quot;FarEast&quot;<sp/>equivalents<sp/>for<sp/>our<sp/>font<sp/>and<sp/>locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>builder<sp/>inserts<sp/>Asian<sp/>characters<sp/>with<sp/>this<sp/>Font<sp/>configuration,<sp/>then<sp/>each<sp/>run<sp/>that<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>characters<sp/>will<sp/>display<sp/>them<sp/>using<sp/>the<sp/>&quot;FarEast&quot;<sp/>font/locale<sp/>instead<sp/>of<sp/>the<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>could<sp/>be<sp/>useful<sp/>when<sp/>a<sp/>western<sp/>font<sp/>does<sp/>not<sp/>have<sp/>ideal<sp/>representations<sp/>for<sp/>Asian<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameFarEast(u</highlight><highlight class="stringliteral">&quot;SimSun&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleIdFarEast(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;zh-CN&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>text<sp/>will<sp/>be<sp/>displayed<sp/>in<sp/>the<sp/>default<sp/>font/locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>these<sp/>are<sp/>Asian<sp/>characters,<sp/>this<sp/>run<sp/>will<sp/>apply<sp/>our<sp/>&quot;FarEast&quot;<sp/>font/locale<sp/>equivalents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;你好世界&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.FarEast.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2254" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ae8f9a3e1ae19b17f735b0214e93b5b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Font::get_Name</definition>
        <argsstring>()</argsstring>
        <name>get_Name</name>
        <qualifiedname>Aspose::Words::Font::get_Name</qualifiedname>
        <briefdescription>
<para>Gets or sets the name of the font. </para>
        </briefdescription>
        <detaileddescription>
<para>When getting, returns <ref refid="class_aspose_1_1_words_1_1_font_1af62e04edd5da4c7b4675b965ecd2fb58" kindref="member">NameAscii</ref>.</para>
<para>When setting, sets <ref refid="class_aspose_1_1_words_1_1_font_1af62e04edd5da4c7b4675b965ecd2fb58" kindref="member">NameAscii</ref>, <ref refid="class_aspose_1_1_words_1_1_font_1afeda74bc147066c9f49ba39b580d3d6a" kindref="member">NameBi</ref>, <ref refid="class_aspose_1_1_words_1_1_font_1acbd14d46493a74e30665f1c71f217577" kindref="member">NameFarEast</ref> and <ref refid="class_aspose_1_1_words_1_1_font_1a10c67cca17eeee5a159cc262361b6708" kindref="member">NameOther</ref> to the specified value.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert formatted text using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>font<sp/>formatting,<sp/>then<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to format a run of text using its font property. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>run-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_HighlightColor(<ref refid="class/system.drawing.color/_1ab0895ee04ac7572b810a3c0f97544c55" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Yellow</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.CreateFormattedRun.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="202" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1af62e04edd5da4c7b4675b965ecd2fb58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Font::get_NameAscii</definition>
        <argsstring>()</argsstring>
        <name>get_NameAscii</name>
        <qualifiedname>Aspose::Words::Font::get_NameAscii</qualifiedname>
        <briefdescription>
<para>Returns or sets the font used for Latin text (characters with character codes from 0 (zero) through 127). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_font_1ae8f9a3e1ae19b17f735b0214e93b5b76" kindref="member">Aspose::Words::Font::get_Name</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how Microsoft Word can combine two different fonts in one run. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Suppose<sp/>a<sp/>run<sp/>that<sp/>we<sp/>use<sp/>the<sp/>builder<sp/>to<sp/>insert<sp/>while<sp/>using<sp/>this<sp/>font<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>contains<sp/>characters<sp/>within<sp/>the<sp/>ASCII<sp/>characters&apos;<sp/>range.<sp/>In<sp/>that<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>display<sp/>those<sp/>characters<sp/>using<sp/>this<sp/>font.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameAscii(u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>With<sp/>no<sp/>other<sp/>font<sp/>specified,<sp/>the<sp/>builder<sp/>will<sp/>also<sp/>apply<sp/>this<sp/>font<sp/>to<sp/>all<sp/>characters<sp/>that<sp/>it<sp/>inserts.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_Font()-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>a<sp/>font<sp/>to<sp/>use<sp/>for<sp/>all<sp/>characters<sp/>outside<sp/>of<sp/>the<sp/>ASCII<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ideally,<sp/>this<sp/>font<sp/>should<sp/>have<sp/>a<sp/>glyph<sp/>for<sp/>each<sp/>required<sp/>non-ASCII<sp/>character<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameOther(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>run<sp/>with<sp/>one<sp/>word<sp/>consisting<sp/>of<sp/>ASCII<sp/>characters,<sp/>and<sp/>one<sp/>word<sp/>with<sp/>all<sp/>characters<sp/>outside<sp/>that<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>character<sp/>will<sp/>be<sp/>displayed<sp/>using<sp/>either<sp/>of<sp/>the<sp/>fonts,<sp/>depending<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello,<sp/>Привет&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.NameAscii.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="236" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1afeda74bc147066c9f49ba39b580d3d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Font::get_NameBi</definition>
        <argsstring>()</argsstring>
        <name>get_NameBi</name>
        <qualifiedname>Aspose::Words::Font::get_NameBi</qualifiedname>
        <briefdescription>
<para>Returns or sets the name of the font in a right-to-left language document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_font_1ae8f9a3e1ae19b17f735b0214e93b5b76" kindref="member">Aspose::Words::Font::get_Name</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to define separate sets of font settings for right-to-left, and right-to-left text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Italic(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleId(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>another<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>right-to-left<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameBi(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_SizeBi(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_ItalicBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_BoldBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleIdBi(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;ar-AR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>Bidi<sp/>flag<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>text<sp/>we<sp/>are<sp/>about<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>document<sp/>builder<sp/>is<sp/>right-to-left.<sp/>When<sp/>we<sp/>add<sp/>text<sp/>with<sp/>this<sp/>flag<sp/>set<sp/>to<sp/>true,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>be<sp/>formatted<sp/>using<sp/>the<sp/>right-to-left<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;مرحبًا&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>flag<sp/>to<sp/>false,<sp/>and<sp/>then<sp/>add<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder<sp/>will<sp/>format<sp/>these<sp/>using<sp/>the<sp/>left-to-right<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Bidi.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="279" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1acbd14d46493a74e30665f1c71f217577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Font::get_NameFarEast</definition>
        <argsstring>()</argsstring>
        <name>get_NameFarEast</name>
        <qualifiedname>Aspose::Words::Font::get_NameFarEast</qualifiedname>
        <briefdescription>
<para>Returns or sets an East Asian font name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_font_1ae8f9a3e1ae19b17f735b0214e93b5b76" kindref="member">Aspose::Words::Font::get_Name</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert and format text in a Far East language. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>font<sp/>settings<sp/>that<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>to<sp/>any<sp/>text<sp/>that<sp/>it<sp/>inserts.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleId(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Name<sp/>&quot;FarEast&quot;<sp/>equivalents<sp/>for<sp/>our<sp/>font<sp/>and<sp/>locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>builder<sp/>inserts<sp/>Asian<sp/>characters<sp/>with<sp/>this<sp/>Font<sp/>configuration,<sp/>then<sp/>each<sp/>run<sp/>that<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>characters<sp/>will<sp/>display<sp/>them<sp/>using<sp/>the<sp/>&quot;FarEast&quot;<sp/>font/locale<sp/>instead<sp/>of<sp/>the<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>could<sp/>be<sp/>useful<sp/>when<sp/>a<sp/>western<sp/>font<sp/>does<sp/>not<sp/>have<sp/>ideal<sp/>representations<sp/>for<sp/>Asian<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameFarEast(u</highlight><highlight class="stringliteral">&quot;SimSun&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleIdFarEast(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;zh-CN&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>text<sp/>will<sp/>be<sp/>displayed<sp/>in<sp/>the<sp/>default<sp/>font/locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>these<sp/>are<sp/>Asian<sp/>characters,<sp/>this<sp/>run<sp/>will<sp/>apply<sp/>our<sp/>&quot;FarEast&quot;<sp/>font/locale<sp/>equivalents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;你好世界&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.FarEast.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="314" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a10c67cca17eeee5a159cc262361b6708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Font::get_NameOther</definition>
        <argsstring>()</argsstring>
        <name>get_NameOther</name>
        <qualifiedname>Aspose::Words::Font::get_NameOther</qualifiedname>
        <briefdescription>
<para>Returns or sets the font used for characters with character codes from 128 through 255. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_font_1ae8f9a3e1ae19b17f735b0214e93b5b76" kindref="member">Aspose::Words::Font::get_Name</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how Microsoft Word can combine two different fonts in one run. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Suppose<sp/>a<sp/>run<sp/>that<sp/>we<sp/>use<sp/>the<sp/>builder<sp/>to<sp/>insert<sp/>while<sp/>using<sp/>this<sp/>font<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>contains<sp/>characters<sp/>within<sp/>the<sp/>ASCII<sp/>characters&apos;<sp/>range.<sp/>In<sp/>that<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>display<sp/>those<sp/>characters<sp/>using<sp/>this<sp/>font.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameAscii(u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>With<sp/>no<sp/>other<sp/>font<sp/>specified,<sp/>the<sp/>builder<sp/>will<sp/>also<sp/>apply<sp/>this<sp/>font<sp/>to<sp/>all<sp/>characters<sp/>that<sp/>it<sp/>inserts.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_Font()-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>a<sp/>font<sp/>to<sp/>use<sp/>for<sp/>all<sp/>characters<sp/>outside<sp/>of<sp/>the<sp/>ASCII<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ideally,<sp/>this<sp/>font<sp/>should<sp/>have<sp/>a<sp/>glyph<sp/>for<sp/>each<sp/>required<sp/>non-ASCII<sp/>character<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameOther(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>run<sp/>with<sp/>one<sp/>word<sp/>consisting<sp/>of<sp/>ASCII<sp/>characters,<sp/>and<sp/>one<sp/>word<sp/>with<sp/>all<sp/>characters<sp/>outside<sp/>that<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>character<sp/>will<sp/>be<sp/>displayed<sp/>using<sp/>either<sp/>of<sp/>the<sp/>fonts,<sp/>depending<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello,<sp/>Привет&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.NameAscii.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="348" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a91123e4af044ebfd4b4588e73127c5a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_NoProofing</definition>
        <argsstring>()</argsstring>
        <name>get_NoProofing</name>
        <qualifiedname>Aspose::Words::Font::get_NoProofing</qualifiedname>
        <briefdescription>
<para>True when the formatted characters are not to be spell checked. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to prevent text from being spell checked by Microsoft Word. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normally,<sp/>Microsoft<sp/>Word<sp/>emphasizes<sp/>spelling<sp/>errors<sp/>with<sp/>a<sp/>jagged<sp/>red<sp/>underline.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>un-set<sp/>the<sp/>&quot;NoProofing&quot;<sp/>flag<sp/>to<sp/>create<sp/>a<sp/>portion<sp/>of<sp/>text<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>bypasses<sp/>the<sp/>spell<sp/>checker<sp/>while<sp/>completely<sp/>disabling<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NoProofing(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Proofing<sp/>has<sp/>been<sp/>disabled,<sp/>so<sp/>these<sp/>spelking<sp/>errrs<sp/>will<sp/>not<sp/>display<sp/>red<sp/>lines<sp/>underneath.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.NoProofing.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2155" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aab300f6c82381c9e25569f132b234b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_Outline</definition>
        <argsstring>()</argsstring>
        <name>get_Outline</name>
        <qualifiedname>Aspose::Words::Font::get_Outline</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as outline. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a run of text formatted as outline. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>Outline<sp/>flag<sp/>to<sp/>change<sp/>the<sp/>text&apos;s<sp/>fill<sp/>color<sp/>to<sp/>white<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>leave<sp/>a<sp/>thin<sp/>outline<sp/>around<sp/>each<sp/>character<sp/>in<sp/>the<sp/>original<sp/>color<sp/>of<sp/>the<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Outline(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>has<sp/>an<sp/>outline.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Outline.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1338" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a9fa33f95ebfafb913e7c0adff1c6f0dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::get_Position</definition>
        <argsstring>()</argsstring>
        <name>get_Position</name>
        <qualifiedname>Aspose::Words::Font::get_Position</qualifiedname>
        <briefdescription>
<para>Gets or sets the position of text (in points) relative to the base line. A positive number raises the text, and a negative number lowers it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format text to offset its position. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Raise<sp/>this<sp/>run<sp/>of<sp/>text<sp/>5<sp/>points<sp/>above<sp/>the<sp/>baseline.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Raised<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Position(5);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Lower<sp/>this<sp/>run<sp/>of<sp/>text<sp/>10<sp/>points<sp/>below<sp/>the<sp/>baseline.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Lowered<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Position(-10);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>run<sp/>of<sp/>normal<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>its<sp/>default<sp/>position.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>run<sp/>of<sp/>text<sp/>that<sp/>appears<sp/>as<sp/>subscript.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Subscript.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Subscript(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>run<sp/>of<sp/>text<sp/>that<sp/>appears<sp/>as<sp/>superscript.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Superscript.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Superscript(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.PositionSubscript.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1982" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aec0f302173bbced823dcdb2e3503db1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Font::get_Scaling</definition>
        <argsstring>()</argsstring>
        <name>get_Scaling</name>
        <qualifiedname>Aspose::Words::Font::get_Scaling</qualifiedname>
        <briefdescription>
<para>Gets or sets character width scaling in percent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set horizontal scaling and spacing for characters. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>run<sp/>of<sp/>text<sp/>and<sp/>increase<sp/>character<sp/>width<sp/>to<sp/>150%.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Scaling(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Wide<sp/>characters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>run<sp/>of<sp/>text<sp/>and<sp/>add<sp/>1pt<sp/>of<sp/>extra<sp/>horizontal<sp/>spacing<sp/>between<sp/>each<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Spacing(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Expanded<sp/>by<sp/>1pt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>run<sp/>of<sp/>text<sp/>and<sp/>bring<sp/>characters<sp/>closer<sp/>together<sp/>by<sp/>1pt.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Spacing(-1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Condensed<sp/>by<sp/>1pt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.ScalingSpacing.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1895" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aecd1a7700cad6faaf35a44cfea5740a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_shading" kindref="compound">Aspose::Words::Shading</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Shading &gt; Aspose::Words::Font::get_Shading</definition>
        <argsstring>()</argsstring>
        <name>get_Shading</name>
        <qualifiedname>Aspose::Words::Font::get_Shading</qualifiedname>
        <briefdescription>
<para>Returns a <ref refid="class_aspose_1_1_words_1_1_shading" kindref="compound">Shading</ref> object that refers to the shading formatting for the font. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply shading to text created by a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>One<sp/>way<sp/>to<sp/>make<sp/>the<sp/>text<sp/>created<sp/>using<sp/>our<sp/>white<sp/>font<sp/>color<sp/>visible</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>to<sp/>apply<sp/>a<sp/>background<sp/>shading<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shading&gt;<sp/>shading<sp/>=<sp/>builder-&gt;get_Font()-&gt;get_Shading();</highlight></codeline>
<codeline><highlight class="normal">shading-&gt;set_Texture(<ref refid="namespace_aspose_1_1_words_1af4457ef004db1cfbdfafbaea990d3674ae31a48e9c0002fb37afae7fa2c9ec275" kindref="member">TextureIndex::TextureDiagonalUp</ref>);</highlight></codeline>
<codeline><highlight class="normal">shading-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1ad919cab7e7551108ec999af829407a7f" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_OrangeRed</ref>());</highlight></codeline>
<codeline><highlight class="normal">shading-&gt;set_ForegroundPatternColor(<ref refid="class/system.drawing.color/_1aa571d1dab14d0305df4bf2bc6a022c8d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_DarkBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;White<sp/>text<sp/>on<sp/>an<sp/>orange<sp/>background<sp/>with<sp/>a<sp/>two-tone<sp/>texture.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Shading.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2300" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a465d34c3c3eb471915df56965c867dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_Shadow</definition>
        <argsstring>()</argsstring>
        <name>get_Shadow</name>
        <qualifiedname>Aspose::Words::Font::get_Shadow</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as shadowed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a run of text formatted with a shadow. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>Shadow<sp/>flag<sp/>to<sp/>apply<sp/>an<sp/>offset<sp/>shadow<sp/>effect,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>making<sp/>it<sp/>look<sp/>like<sp/>the<sp/>letters<sp/>are<sp/>floating<sp/>above<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Shadow(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>has<sp/>a<sp/>shadow.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Shadow.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1314" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a87a676f402fce9911b037bf96b7bdaa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::get_Size</definition>
        <argsstring>()</argsstring>
        <name>get_Size</name>
        <qualifiedname>Aspose::Words::Font::get_Size</qualifiedname>
        <briefdescription>
<para>Gets or sets the font size in points. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert formatted text using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>font<sp/>formatting,<sp/>then<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to format a run of text using its font property. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>run-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_HighlightColor(<ref refid="class/system.drawing.color/_1ab0895ee04ac7572b810a3c0f97544c55" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Yellow</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.CreateFormattedRun.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="851" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aeb91960b87617b887ea53f4a2bea6328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::get_SizeBi</definition>
        <argsstring>()</argsstring>
        <name>get_SizeBi</name>
        <qualifiedname>Aspose::Words::Font::get_SizeBi</qualifiedname>
        <briefdescription>
<para>Gets or sets the font size in points used in a right-to-left document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to define separate sets of font settings for right-to-left, and right-to-left text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>a<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Italic(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleId(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>another<sp/>set<sp/>of<sp/>font<sp/>settings<sp/>for<sp/>right-to-left<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_NameBi(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_SizeBi(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_ItalicBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_BoldBi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_LocaleIdBi(MakeObject&lt;System::Globalization::CultureInfo&gt;(u</highlight><highlight class="stringliteral">&quot;ar-AR&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;get_LCID());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>Bidi<sp/>flag<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>text<sp/>we<sp/>are<sp/>about<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>document<sp/>builder<sp/>is<sp/>right-to-left.<sp/>When<sp/>we<sp/>add<sp/>text<sp/>with<sp/>this<sp/>flag<sp/>set<sp/>to<sp/>true,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>be<sp/>formatted<sp/>using<sp/>the<sp/>right-to-left<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;مرحبًا&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>flag<sp/>to<sp/>false,<sp/>and<sp/>then<sp/>add<sp/>left-to-right<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder<sp/>will<sp/>format<sp/>these<sp/>using<sp/>the<sp/>left-to-right<sp/>set<sp/>of<sp/>font<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bidi(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Bidi.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="892" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a8773b9e36f304da94c7d86d9a25f3541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_SmallCaps</definition>
        <argsstring>()</argsstring>
        <name>get_SmallCaps</name>
        <qualifiedname>Aspose::Words::Font::get_SmallCaps</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as small capital letters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format a run to display its contents in capitals. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>getting<sp/>a<sp/>run<sp/>to<sp/>display<sp/>its<sp/>lowercase<sp/>text<sp/>in<sp/>uppercase<sp/>without<sp/>changing<sp/>the<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Set<sp/>the<sp/>AllCaps<sp/>flag<sp/>to<sp/>display<sp/>all<sp/>characters<sp/>in<sp/>regular<sp/>capitals:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;all<sp/>capitals&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_AllCaps(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(para-&gt;get_ParentNode()-&gt;AppendChild(MakeObject&lt;Paragraph&gt;(doc)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Set<sp/>the<sp/>SmallCaps<sp/>flag<sp/>to<sp/>display<sp/>all<sp/>characters<sp/>in<sp/>small<sp/>capitals:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>character<sp/>is<sp/>lower<sp/>case,<sp/>it<sp/>will<sp/>appear<sp/>in<sp/>its<sp/>upper<sp/>case<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>will<sp/>have<sp/>the<sp/>same<sp/>height<sp/>as<sp/>the<sp/>lower<sp/>case<sp/>(the<sp/>font&apos;s<sp/>x-height).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Characters<sp/>that<sp/>were<sp/>in<sp/>upper<sp/>case<sp/>originally<sp/>will<sp/>look<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Small<sp/>Capitals&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_SmallCaps(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Caps.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1512" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a034e31789f11e8d630475eb5abb659d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_SnapToGrid</definition>
        <argsstring>()</argsstring>
        <name>get_SnapToGrid</name>
        <qualifiedname>Aspose::Words::Font::get_SnapToGrid</qualifiedname>
        <briefdescription>
<para>Specifies whether the current font should use the document grid characters per line settings when laying out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2419" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a6a69ea553e0855e252e599493922a91d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::get_Spacing</definition>
        <argsstring>()</argsstring>
        <name>get_Spacing</name>
        <qualifiedname>Aspose::Words::Font::get_Spacing</qualifiedname>
        <briefdescription>
<para>Returns or sets the spacing (in points) between characters . </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set horizontal scaling and spacing for characters. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>run<sp/>of<sp/>text<sp/>and<sp/>increase<sp/>character<sp/>width<sp/>to<sp/>150%.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Scaling(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Wide<sp/>characters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>run<sp/>of<sp/>text<sp/>and<sp/>add<sp/>1pt<sp/>of<sp/>extra<sp/>horizontal<sp/>spacing<sp/>between<sp/>each<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Spacing(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Expanded<sp/>by<sp/>1pt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>run<sp/>of<sp/>text<sp/>and<sp/>bring<sp/>characters<sp/>closer<sp/>together<sp/>by<sp/>1pt.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Spacing(-1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Condensed<sp/>by<sp/>1pt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.ScalingSpacing.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1923" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aef9cb694db65a36ee3131f609c5fa25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_StrikeThrough</definition>
        <argsstring>()</argsstring>
        <name>get_StrikeThrough</name>
        <qualifiedname>Aspose::Words::Font::get_StrikeThrough</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as strikethrough text. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add a line strikethrough to text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>with<sp/>a<sp/>single-line<sp/>strikethrough.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_StrikeThrough(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(para-&gt;get_ParentNode()-&gt;AppendChild(MakeObject&lt;Paragraph&gt;(doc)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>with<sp/>a<sp/>double-line<sp/>strikethrough.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_DoubleStrikeThrough(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.StrikeThrough.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1265" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a197cc246b91436e34f7191499f61946b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_style" kindref="compound">Aspose::Words::Style</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Style &gt; Aspose::Words::Font::get_Style</definition>
        <argsstring>()</argsstring>
        <name>get_Style</name>
        <qualifiedname>Aspose::Words::Font::get_Style</qualifiedname>
        <briefdescription>
<para>Gets or sets the character style applied to this formatting. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Applies a double underline to all runs in a document that are formatted with custom character styles. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>custom<sp/>style<sp/>and<sp/>apply<sp/>it<sp/>to<sp/>text<sp/>created<sp/>using<sp/>a<sp/>document<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>style<sp/>=<sp/>doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba76a40e4f974fd895a0a2598c1cee28b4" kindref="member" tooltip="The style is a character style.">StyleType::Character</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;MyStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>in<sp/>a<sp/>custom<sp/>style.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>every<sp/>run<sp/>and<sp/>add<sp/>a<sp/>double<sp/>underline<sp/>to<sp/>every<sp/>custom<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>run<sp/>:<sp/>System::IterateOver(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_OfType&lt;SharedPtr&lt;Run&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Style&gt;<sp/>charStyle<sp/>=<sp/>run-&gt;get_Font()-&gt;get_Style();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!charStyle-&gt;get_BuiltIn())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;get_Font()-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94ad909d38d705ce75386dd86e611a82f5b" kindref="member">Underline::Double</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Style.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2332" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1afd182d3cebe7d2a97511a6ec672c8b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34" kindref="member">Aspose::Words::StyleIdentifier</ref></type>
        <definition>Aspose::Words::StyleIdentifier Aspose::Words::Font::get_StyleIdentifier</definition>
        <argsstring>()</argsstring>
        <name>get_StyleIdentifier</name>
        <qualifiedname>Aspose::Words::Font::get_StyleIdentifier</qualifiedname>
        <briefdescription>
<para>Gets or sets the locale independent style identifier of the character style applied to this formatting. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to change the style of existing text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>referencing<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Using<sp/>the<sp/>style<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;Emphasis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>originally<sp/>in<sp/>\&quot;Emphasis\&quot;<sp/>style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Using<sp/>a<sp/>built-in<sp/>style<sp/>identifier:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34ae7d36e0bf9eeecc77e6a06dfe5cabadc" kindref="member">StyleIdentifier::IntenseEmphasis</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>originally<sp/>in<sp/>\&quot;Intense<sp/>Emphasis\&quot;<sp/>style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>all<sp/>uses<sp/>of<sp/>one<sp/>style<sp/>to<sp/>another,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>above<sp/>methods<sp/>to<sp/>reference<sp/>old<sp/>and<sp/>new<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>run<sp/>:<sp/>System::IterateOver(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_OfType&lt;SharedPtr&lt;Run&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run-&gt;get_Font()-&gt;get_StyleName()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;Emphasis&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;get_Font()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;Strong&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run-&gt;get_Font()-&gt;get_StyleIdentifier()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34ae7d36e0bf9eeecc77e6a06dfe5cabadc" kindref="member">StyleIdentifier::IntenseEmphasis</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;get_Font()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34ac43e0fd449c758dab8f891d8e19eb1a9" kindref="member">StyleIdentifier::Strong</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.ChangeStyle.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2412" column="39"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a4bc2c3f798b5da09853f47b617c15424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Font::get_StyleName</definition>
        <argsstring>()</argsstring>
        <name>get_StyleName</name>
        <qualifiedname>Aspose::Words::Font::get_StyleName</qualifiedname>
        <briefdescription>
<para>Gets or sets the name of the character style applied to this formatting. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to change the style of existing text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>referencing<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Using<sp/>the<sp/>style<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;Emphasis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>originally<sp/>in<sp/>\&quot;Emphasis\&quot;<sp/>style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Using<sp/>a<sp/>built-in<sp/>style<sp/>identifier:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34ae7d36e0bf9eeecc77e6a06dfe5cabadc" kindref="member">StyleIdentifier::IntenseEmphasis</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>originally<sp/>in<sp/>\&quot;Intense<sp/>Emphasis\&quot;<sp/>style&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>all<sp/>uses<sp/>of<sp/>one<sp/>style<sp/>to<sp/>another,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>above<sp/>methods<sp/>to<sp/>reference<sp/>old<sp/>and<sp/>new<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>run<sp/>:<sp/>System::IterateOver(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_OfType&lt;SharedPtr&lt;Run&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run-&gt;get_Font()-&gt;get_StyleName()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;Emphasis&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;get_Font()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;Strong&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run-&gt;get_Font()-&gt;get_StyleIdentifier()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34ae7d36e0bf9eeecc77e6a06dfe5cabadc" kindref="member">StyleIdentifier::IntenseEmphasis</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;get_Font()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34ac43e0fd449c758dab8f891d8e19eb1a9" kindref="member">StyleIdentifier::Strong</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.ChangeStyle.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2372" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1adccbb704b942cc1edbefd09007eccb21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_Subscript</definition>
        <argsstring>()</argsstring>
        <name>get_Subscript</name>
        <qualifiedname>Aspose::Words::Font::get_Subscript</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as subscript. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format text to offset its position. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Raise<sp/>this<sp/>run<sp/>of<sp/>text<sp/>5<sp/>points<sp/>above<sp/>the<sp/>baseline.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Raised<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Position(5);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Lower<sp/>this<sp/>run<sp/>of<sp/>text<sp/>10<sp/>points<sp/>below<sp/>the<sp/>baseline.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Lowered<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Position(-10);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>run<sp/>of<sp/>normal<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>its<sp/>default<sp/>position.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>run<sp/>of<sp/>text<sp/>that<sp/>appears<sp/>as<sp/>subscript.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Subscript.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Subscript(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>run<sp/>of<sp/>text<sp/>that<sp/>appears<sp/>as<sp/>superscript.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Superscript.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Superscript(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.PositionSubscript.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1480" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a9962c6242eb8c13223a574b112cb3845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::get_Superscript</definition>
        <argsstring>()</argsstring>
        <name>get_Superscript</name>
        <qualifiedname>Aspose::Words::Font::get_Superscript</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as superscript. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format text to offset its position. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Raise<sp/>this<sp/>run<sp/>of<sp/>text<sp/>5<sp/>points<sp/>above<sp/>the<sp/>baseline.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Raised<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Position(5);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Lower<sp/>this<sp/>run<sp/>of<sp/>text<sp/>10<sp/>points<sp/>below<sp/>the<sp/>baseline.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Lowered<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Position(-10);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>run<sp/>of<sp/>normal<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>its<sp/>default<sp/>position.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>run<sp/>of<sp/>text<sp/>that<sp/>appears<sp/>as<sp/>subscript.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Subscript.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Subscript(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>run<sp/>of<sp/>text<sp/>that<sp/>appears<sp/>as<sp/>superscript.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Superscript.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Superscript(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.PositionSubscript.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1440" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a45deddd0fd9fffe88b0212f3edb40270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a17709581ebf0b64c493a0f9061d86ce5" kindref="member">Aspose::Words::TextEffect</ref></type>
        <definition>Aspose::Words::TextEffect Aspose::Words::Font::get_TextEffect</definition>
        <argsstring>()</argsstring>
        <name>get_TextEffect</name>
        <qualifiedname>Aspose::Words::Font::get_TextEffect</qualifiedname>
        <briefdescription>
<para>Gets or sets the font animation effect. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply a visual effect to a run. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_TextEffect(<ref refid="namespace_aspose_1_1_words_1a17709581ebf0b64c493a0f9061d86ce5a33d268efe280075c5e940fb877c1bfc8" kindref="member">TextEffect::SparkleText</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>with<sp/>a<sp/>sparkle<sp/>effect.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Older<sp/>versions<sp/>of<sp/>Microsoft<sp/>Word<sp/>only<sp/>support<sp/>font<sp/>animation<sp/>effects.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.SparklingText.doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2057" column="34"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a8ec7a9d2b31c5052f111d6b4bb493d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a359432108a4486015e6eb1e240c52be4" kindref="member">Aspose::Words::Themes::ThemeColor</ref></type>
        <definition>Aspose::Words::Themes::ThemeColor Aspose::Words::Font::get_ThemeColor</definition>
        <argsstring>()</argsstring>
        <name>get_ThemeColor</name>
        <qualifiedname>Aspose::Words::Font::get_ThemeColor</qualifiedname>
        <briefdescription>
<para>Gets or sets the theme color in the applied color scheme that is associated with this <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with theme fonts and colors. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>fonts<sp/>for<sp/>languages<sp/>uses<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_Latin(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_EastAsian(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_ComplexScript(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">)-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Originally<sp/>the<sp/>Normal<sp/>style<sp/>theme<sp/>color<sp/>is:<sp/>{0}<sp/>and<sp/>RGB<sp/>color<sp/>is:<sp/>{1}\n&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_ThemeColor(),<sp/>font-&gt;get_Color())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>theme<sp/>font<sp/>and<sp/>color<sp/>instead<sp/>of<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::Minor);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::Accent2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::Accent2,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>several<sp/>ways<sp/>of<sp/>reset<sp/>them<sp/>font<sp/>and<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>setting<sp/>ThemeFont.None/ThemeColor.None:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::None);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::None);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>setting<sp/>non-theme<sp/>font/color<sp/>names:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>().ToArgb(),<sp/>font-&gt;get_Color().ToArgb());</highlight></codeline>
</programlisting></para>
<para>Shows how to create and use themed style. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>some<sp/>style<sp/>with<sp/>theme<sp/>font<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>style<sp/>=<sp/>doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;ThemedStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_ThemeFont(ThemeFont::Major);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_ThemeColor(ThemeColor::Accent5);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_TintAndShade(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;ThemedStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>with<sp/>themed<sp/>style&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1167" column="42"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1abd61938d3a063375ce8f0474a73c3559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a7b0cef2de0b2a3238a45f1f6eb8e7cfc" kindref="member">Aspose::Words::Themes::ThemeFont</ref></type>
        <definition>Aspose::Words::Themes::ThemeFont Aspose::Words::Font::get_ThemeFont</definition>
        <argsstring>()</argsstring>
        <name>get_ThemeFont</name>
        <qualifiedname>Aspose::Words::Font::get_ThemeFont</qualifiedname>
        <briefdescription>
<para>Gets or sets the theme font in the applied font scheme that is associated with this <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with theme fonts and colors. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>fonts<sp/>for<sp/>languages<sp/>uses<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_Latin(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_EastAsian(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_ComplexScript(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">)-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Originally<sp/>the<sp/>Normal<sp/>style<sp/>theme<sp/>color<sp/>is:<sp/>{0}<sp/>and<sp/>RGB<sp/>color<sp/>is:<sp/>{1}\n&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_ThemeColor(),<sp/>font-&gt;get_Color())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>theme<sp/>font<sp/>and<sp/>color<sp/>instead<sp/>of<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::Minor);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::Accent2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::Accent2,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>several<sp/>ways<sp/>of<sp/>reset<sp/>them<sp/>font<sp/>and<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>setting<sp/>ThemeFont.None/ThemeColor.None:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::None);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::None);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>setting<sp/>non-theme<sp/>font/color<sp/>names:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>().ToArgb(),<sp/>font-&gt;get_Color().ToArgb());</highlight></codeline>
</programlisting></para>
<para>Shows how to create and use themed style. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>some<sp/>style<sp/>with<sp/>theme<sp/>font<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>style<sp/>=<sp/>doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;ThemedStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_ThemeFont(ThemeFont::Major);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_ThemeColor(ThemeColor::Accent5);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_TintAndShade(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;ThemedStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>with<sp/>themed<sp/>style&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="454" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a00c1322f4d8b7be9556a928e3a98de5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a7b0cef2de0b2a3238a45f1f6eb8e7cfc" kindref="member">Aspose::Words::Themes::ThemeFont</ref></type>
        <definition>Aspose::Words::Themes::ThemeFont Aspose::Words::Font::get_ThemeFontAscii</definition>
        <argsstring>()</argsstring>
        <name>get_ThemeFontAscii</name>
        <qualifiedname>Aspose::Words::Font::get_ThemeFontAscii</qualifiedname>
        <briefdescription>
<para>Gets or sets the theme font used for Latin text (characters with character codes from 0 (zero) through 127) in the applied font scheme that is associated with this <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with theme fonts and colors. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>fonts<sp/>for<sp/>languages<sp/>uses<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_Latin(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_EastAsian(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_ComplexScript(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">)-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Originally<sp/>the<sp/>Normal<sp/>style<sp/>theme<sp/>color<sp/>is:<sp/>{0}<sp/>and<sp/>RGB<sp/>color<sp/>is:<sp/>{1}\n&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_ThemeColor(),<sp/>font-&gt;get_Color())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>theme<sp/>font<sp/>and<sp/>color<sp/>instead<sp/>of<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::Minor);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::Accent2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::Accent2,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>several<sp/>ways<sp/>of<sp/>reset<sp/>them<sp/>font<sp/>and<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>setting<sp/>ThemeFont.None/ThemeColor.None:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::None);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::None);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>setting<sp/>non-theme<sp/>font/color<sp/>names:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>().ToArgb(),<sp/>font-&gt;get_Color().ToArgb());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="544" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a2fa36b94520c5e9c58d2c0555e9b49bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a7b0cef2de0b2a3238a45f1f6eb8e7cfc" kindref="member">Aspose::Words::Themes::ThemeFont</ref></type>
        <definition>Aspose::Words::Themes::ThemeFont Aspose::Words::Font::get_ThemeFontBi</definition>
        <argsstring>()</argsstring>
        <name>get_ThemeFontBi</name>
        <qualifiedname>Aspose::Words::Font::get_ThemeFontBi</qualifiedname>
        <briefdescription>
<para>Gets or sets the theme font in the applied font scheme that is associated with this <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref> object in a right-to-left language document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with theme fonts and colors. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>fonts<sp/>for<sp/>languages<sp/>uses<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_Latin(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_EastAsian(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_ComplexScript(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">)-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Originally<sp/>the<sp/>Normal<sp/>style<sp/>theme<sp/>color<sp/>is:<sp/>{0}<sp/>and<sp/>RGB<sp/>color<sp/>is:<sp/>{1}\n&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_ThemeColor(),<sp/>font-&gt;get_Color())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>theme<sp/>font<sp/>and<sp/>color<sp/>instead<sp/>of<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::Minor);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::Accent2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::Accent2,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>several<sp/>ways<sp/>of<sp/>reset<sp/>them<sp/>font<sp/>and<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>setting<sp/>ThemeFont.None/ThemeColor.None:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::None);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::None);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>setting<sp/>non-theme<sp/>font/color<sp/>names:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>().ToArgb(),<sp/>font-&gt;get_Color().ToArgb());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="813" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aa8604058d106fe568bb2e520f6fe5b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a7b0cef2de0b2a3238a45f1f6eb8e7cfc" kindref="member">Aspose::Words::Themes::ThemeFont</ref></type>
        <definition>Aspose::Words::Themes::ThemeFont Aspose::Words::Font::get_ThemeFontFarEast</definition>
        <argsstring>()</argsstring>
        <name>get_ThemeFontFarEast</name>
        <qualifiedname>Aspose::Words::Font::get_ThemeFontFarEast</qualifiedname>
        <briefdescription>
<para>Gets or sets the East Asian theme font in the applied font scheme that is associated with this <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with theme fonts and colors. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>fonts<sp/>for<sp/>languages<sp/>uses<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_Latin(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_EastAsian(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_ComplexScript(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">)-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Originally<sp/>the<sp/>Normal<sp/>style<sp/>theme<sp/>color<sp/>is:<sp/>{0}<sp/>and<sp/>RGB<sp/>color<sp/>is:<sp/>{1}\n&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_ThemeColor(),<sp/>font-&gt;get_Color())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>theme<sp/>font<sp/>and<sp/>color<sp/>instead<sp/>of<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::Minor);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::Accent2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::Accent2,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>several<sp/>ways<sp/>of<sp/>reset<sp/>them<sp/>font<sp/>and<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>setting<sp/>ThemeFont.None/ThemeColor.None:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::None);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::None);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>setting<sp/>non-theme<sp/>font/color<sp/>names:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>().ToArgb(),<sp/>font-&gt;get_Color().ToArgb());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="633" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ad42a26e60b65ee48808c25b4fea8a5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a7b0cef2de0b2a3238a45f1f6eb8e7cfc" kindref="member">Aspose::Words::Themes::ThemeFont</ref></type>
        <definition>Aspose::Words::Themes::ThemeFont Aspose::Words::Font::get_ThemeFontOther</definition>
        <argsstring>()</argsstring>
        <name>get_ThemeFontOther</name>
        <qualifiedname>Aspose::Words::Font::get_ThemeFontOther</qualifiedname>
        <briefdescription>
<para>Gets or sets the theme font used for characters with character codes from 128 through 255 in the applied font scheme that is associated with this <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with theme fonts and colors. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>fonts<sp/>for<sp/>languages<sp/>uses<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_Latin(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_EastAsian(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Theme()-&gt;get_MinorFonts()-&gt;set_ComplexScript(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">)-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Originally<sp/>the<sp/>Normal<sp/>style<sp/>theme<sp/>color<sp/>is:<sp/>{0}<sp/>and<sp/>RGB<sp/>color<sp/>is:<sp/>{1}\n&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_ThemeColor(),<sp/>font-&gt;get_Color())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>theme<sp/>font<sp/>and<sp/>color<sp/>instead<sp/>of<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::Minor);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::Accent2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::Minor,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::Accent2,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>several<sp/>ways<sp/>of<sp/>reset<sp/>them<sp/>font<sp/>and<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>setting<sp/>ThemeFont.None/ThemeColor.None:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeFont(ThemeFont::None);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_ThemeColor(ThemeColor::None);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Andalus&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Aharoni&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Algerian&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>font-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>setting<sp/>non-theme<sp/>font/color<sp/>names:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFont());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontAscii());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameAscii());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontBi());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameBi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontFarEast());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameFarEast());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeFont::None,<sp/>font-&gt;get_ThemeFontOther());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>font-&gt;get_NameOther());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ThemeColor::None,<sp/>font-&gt;get_ThemeColor());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>().ToArgb(),<sp/>font-&gt;get_Color().ToArgb());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="723" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a11fb25a7b6ecde9f5e7c64e0f216db84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Font::get_TintAndShade</definition>
        <argsstring>()</argsstring>
        <name>get_TintAndShade</name>
        <qualifiedname>Aspose::Words::Font::get_TintAndShade</qualifiedname>
        <briefdescription>
<para>Gets or sets a double value that lightens or darkens a color. </para>
        </briefdescription>
        <detaileddescription>
<para>The allowed values are in range from -1 (darkest) to 1 (lightest) for this property. Zero (0) is neutral. Attempting to set this property to a value less than -1 or more than 1 results in a <ref refid="" kindref="compound">ArgumentOutOfRangeException</ref>.</para>
<para>Setting this property for <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref> object with non-theme colors results in a <ref refid="" kindref="compound">InvalidOperationException</ref>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create and use themed style. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>some<sp/>style<sp/>with<sp/>theme<sp/>font<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>style<sp/>=<sp/>doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;ThemedStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_ThemeFont(ThemeFont::Major);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_ThemeColor(ThemeColor::Accent5);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_TintAndShade(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;ThemedStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>with<sp/>themed<sp/>style&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1199" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a80f049cdf07bc30d29c1e64f5cc0842e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94" kindref="member">Aspose::Words::Underline</ref></type>
        <definition>Aspose::Words::Underline Aspose::Words::Font::get_Underline</definition>
        <argsstring>()</argsstring>
        <name>get_Underline</name>
        <qualifiedname>Aspose::Words::Font::get_Underline</qualifiedname>
        <briefdescription>
<para>Gets or sets the type of underline applied to the font. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert formatted text using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>font<sp/>formatting,<sp/>then<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a hyperlink field. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;For<sp/>more<sp/>information,<sp/>please<sp/>visit<sp/>the<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>hyperlink<sp/>and<sp/>emphasize<sp/>it<sp/>with<sp/>custom<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>hyperlink<sp/>will<sp/>be<sp/>a<sp/>clickable<sp/>piece<sp/>of<sp/>text<sp/>which<sp/>will<sp/>take<sp/>us<sp/>to<sp/>the<sp/>location<sp/>specified<sp/>in<sp/>the<sp/>URL.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a66ba162102bbf6ae31b522aec561735e" kindref="member">Underline::Single</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHyperlink(u</highlight><highlight class="stringliteral">&quot;Google<sp/>website&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;https://www.google.com&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ctrl<sp/>+<sp/>left<sp/>clicking<sp/>the<sp/>link<sp/>in<sp/>the<sp/>text<sp/>in<sp/>Microsoft<sp/>Word<sp/>will<sp/>take<sp/>us<sp/>to<sp/>the<sp/>URL<sp/>via<sp/>a<sp/>new<sp/>web<sp/>browser<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertHyperlink.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to configure the style and color of a text underline. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a90c09393a4c0970bc9a6703ad527781c" kindref="member">Underline::Dotted</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_UnderlineColor(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Underlined<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Underlines.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1846" column="33"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a8bae37120d439b3bcb04f3a97e69639f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Font::get_UnderlineColor</definition>
        <argsstring>()</argsstring>
        <name>get_UnderlineColor</name>
        <qualifiedname>Aspose::Words::Font::get_UnderlineColor</qualifiedname>
        <briefdescription>
<para>Gets or sets the color of the underline applied to the font. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to configure the style and color of a text underline. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a90c09393a4c0970bc9a6703ad527781c" kindref="member">Underline::Dotted</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_UnderlineColor(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Underlined<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.Underlines.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1867" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a975c11a7f90f919b22597fbdc2a6f9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Font::HasDmlEffect</definition>
        <argsstring>(Aspose::Words::TextDmlEffect dmlEffectType)</argsstring>
        <name>HasDmlEffect</name>
        <qualifiedname>Aspose::Words::Font::HasDmlEffect</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1af869d7087aa0c25c55a4e7df123167e8" kindref="member">Aspose::Words::TextDmlEffect</ref></type>
          <declname>dmlEffectType</declname>
        </param>
        <briefdescription>
<para>Checks if particular DrawingML text effect is applied. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dmlEffectType</parametername>
</parameternamelist>
<parameterdescription>
<para>DrawingML text effect type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if particular DrawingML text effect is applied.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to check if a run displays a DrawingML text effect. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DrawingML<sp/>text<sp/>effects.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;RunCollection&gt;<sp/>runs<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(runs-&gt;idx_get(0)-&gt;get_Font()-&gt;HasDmlEffect(<ref refid="namespace_aspose_1_1_words_1af869d7087aa0c25c55a4e7df123167e8a3f39588bb19e28051d9aedfbb170025c" kindref="member" tooltip="Shadow effect.">TextDmlEffect::Shadow</ref>));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(runs-&gt;idx_get(1)-&gt;get_Font()-&gt;HasDmlEffect(<ref refid="namespace_aspose_1_1_words_1af869d7087aa0c25c55a4e7df123167e8a3f39588bb19e28051d9aedfbb170025c" kindref="member" tooltip="Shadow effect.">TextDmlEffect::Shadow</ref>));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(runs-&gt;idx_get(2)-&gt;get_Font()-&gt;HasDmlEffect(<ref refid="namespace_aspose_1_1_words_1af869d7087aa0c25c55a4e7df123167e8aaea1e492943ccbad7ee270ec1e064758" kindref="member" tooltip="Reflection effect.">TextDmlEffect::Reflection</ref>));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(runs-&gt;idx_get(3)-&gt;get_Font()-&gt;HasDmlEffect(<ref refid="namespace_aspose_1_1_words_1af869d7087aa0c25c55a4e7df123167e8a4afae6a64c5d855295a0cf23ee39c2b4" kindref="member" tooltip="3D effect.">TextDmlEffect::Effect3D</ref>));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(runs-&gt;idx_get(4)-&gt;get_Font()-&gt;HasDmlEffect(<ref refid="namespace_aspose_1_1_words_1af869d7087aa0c25c55a4e7df123167e8adb3e3f51c9107e26c9bccf9a188ce2ed" kindref="member" tooltip="Fill overlay effect.">TextDmlEffect::Fill</ref>));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2497" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ae8ed54bc5ffd6fbf4972a5029d207ad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_AllCaps</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_AllCaps</name>
        <qualifiedname>Aspose::Words::Font::set_AllCaps</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a56ccbfde5f497fb922f2dcd0ca7563e7" kindref="member">Aspose::Words::Font::get_AllCaps</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1547" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1afff0e0b7bc4b90da50d63e0e815cc808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Bidi</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Bidi</name>
        <qualifiedname>Aspose::Words::Font::set_Bidi</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a7280a2e0beabe020d34d52adf5065877" kindref="member">Aspose::Words::Font::get_Bidi</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2114" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a321186d0ff687df7328f15fd23444acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Bold</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Bold</name>
        <qualifiedname>Aspose::Words::Font::set_Bold</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1afaa22f9076743e0c4d79cdd7c2436284" kindref="member">Aspose::Words::Font::get_Bold</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="919" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aa203a99ebf88b1a3ace9d0d2c2c745c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_BoldBi</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_BoldBi</name>
        <qualifiedname>Aspose::Words::Font::set_BoldBi</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a547fecd3a7dcd62c324743c7cb10a70d" kindref="member">Aspose::Words::Font::get_BoldBi</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="960" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1acbe0f55f1e8f67a8b0582fff2a1b6086" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Color</definition>
        <argsstring>(System::Drawing::Color value)</argsstring>
        <name>set_Color</name>
        <qualifiedname>Aspose::Words::Font::set_Color</qualifiedname>
        <param>
          <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a4b5deeeea37f74871e1d46cd4f381654" kindref="member">Aspose::Words::Font::get_Color</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1064" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aa08cbc8336f77c3c84236dbb9a5c49df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_ComplexScript</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_ComplexScript</name>
        <qualifiedname>Aspose::Words::Font::set_ComplexScript</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a609b75c498498bd903a818177b230a64" kindref="member">Aspose::Words::Font::get_ComplexScript</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2135" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a457c710d7b6ea2fa0819c831fc2c0fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_DoubleStrikeThrough</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_DoubleStrikeThrough</name>
        <qualifiedname>Aspose::Words::Font::set_DoubleStrikeThrough</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1ab25c54aafb5fa0996b520e0eb3cf9f38" kindref="member">Aspose::Words::Font::get_DoubleStrikeThrough</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1294" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a5bda0571bb832130e9fdfb4330d8118c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Emboss</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Emboss</name>
        <qualifiedname>Aspose::Words::Font::set_Emboss</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a8334d2cd8f2b4f6dbf393802cc0603c7" kindref="member">Aspose::Words::Font::get_Emboss</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1372" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a0e0f04e14ac77c54e96df5e23e0fc103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_EmphasisMark</definition>
        <argsstring>(Aspose::Words::EmphasisMark value)</argsstring>
        <name>set_EmphasisMark</name>
        <qualifiedname>Aspose::Words::Font::set_EmphasisMark</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a0031adcf684ba2f1355459c842a15754" kindref="member">Aspose::Words::EmphasisMark</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1ae436298f0dc3bebdc9274edb26e40ed9" kindref="member">Aspose::Words::Font::get_EmphasisMark</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2447" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a49d40480b11bb6015440b34eae5f6a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Engrave</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Engrave</name>
        <qualifiedname>Aspose::Words::Font::set_Engrave</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a8350cb258d9adcaf0f1803314a038005" kindref="member">Aspose::Words::Font::get_Engrave</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1403" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ad0edec9cbb3278a4a227453770b74b9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Hidden</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Hidden</name>
        <qualifiedname>Aspose::Words::Font::set_Hidden</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1ad19fcd5ec5f802dfd6e791053f430b30" kindref="member">Aspose::Words::Font::get_Hidden</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1793" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aa36bc604428f43bc608b0cfe68c90ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_HighlightColor</definition>
        <argsstring>(System::Drawing::Color value)</argsstring>
        <name>set_HighlightColor</name>
        <qualifiedname>Aspose::Words::Font::set_HighlightColor</qualifiedname>
        <param>
          <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a77ddaf8c261c2372e8de1b7c255ad04f" kindref="member">Aspose::Words::Font::get_HighlightColor</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2038" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a567e5f51bda576ac68e64ac28c27dd2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Italic</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Italic</name>
        <qualifiedname>Aspose::Words::Font::set_Italic</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a587d02969e68bbdf4b911c0308c6c578" kindref="member">Aspose::Words::Font::get_Italic</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="980" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aa6d75b475cc391c4c44ce6235964bbbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_ItalicBi</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_ItalicBi</name>
        <qualifiedname>Aspose::Words::Font::set_ItalicBi</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a30a5c8250c1d206ccf8253f8d7090b9e" kindref="member">Aspose::Words::Font::get_ItalicBi</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1021" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a55250f76b8fd953bf141d7e489ce8e81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Kerning</definition>
        <argsstring>(double value)</argsstring>
        <name>set_Kerning</name>
        <qualifiedname>Aspose::Words::Font::set_Kerning</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a7422cdb149284123ed48463acf73488b" kindref="member">Aspose::Words::Font::get_Kerning</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2016" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a10543c956c5ee718ee469c60d5847f30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_LocaleId</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>set_LocaleId</name>
        <qualifiedname>Aspose::Words::Font::set_LocaleId</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a6a77e8daf2422d2206dad756ae249220" kindref="member">Aspose::Words::Font::get_LocaleId</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2183" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a10564dc256d08ac4c5706cee1857cb0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_LocaleIdBi</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>set_LocaleIdBi</name>
        <qualifiedname>Aspose::Words::Font::set_LocaleIdBi</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a2dc5d877b4ba35a0e59110dee3f7ba78" kindref="member">Aspose::Words::Font::get_LocaleIdBi</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2224" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ad500a2b17c8eecea5a91cb9372d6e231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_LocaleIdFarEast</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>set_LocaleIdFarEast</name>
        <qualifiedname>Aspose::Words::Font::set_LocaleIdFarEast</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a10fceeefa829873195883ff8bcea6d35" kindref="member">Aspose::Words::Font::get_LocaleIdFarEast</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2257" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1afb034d2e09ca0023526ab0918147d285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Name</definition>
        <argsstring>(const System::String &amp;value)</argsstring>
        <name>set_Name</name>
        <qualifiedname>Aspose::Words::Font::set_Name</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1ae8f9a3e1ae19b17f735b0214e93b5b76" kindref="member">Aspose::Words::Font::get_Name</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="205" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a4f3c834e9be5f05b93c1417fe791a6df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_NameAscii</definition>
        <argsstring>(const System::String &amp;value)</argsstring>
        <name>set_NameAscii</name>
        <qualifiedname>Aspose::Words::Font::set_NameAscii</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1af62e04edd5da4c7b4675b965ecd2fb58" kindref="member">Aspose::Words::Font::get_NameAscii</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="239" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a4659db9c5651685afa66b469d4345464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_NameBi</definition>
        <argsstring>(const System::String &amp;value)</argsstring>
        <name>set_NameBi</name>
        <qualifiedname>Aspose::Words::Font::set_NameBi</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1afeda74bc147066c9f49ba39b580d3d6a" kindref="member">Aspose::Words::Font::get_NameBi</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="282" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1add039b64745e3b2f885ba5ce5edf3b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_NameFarEast</definition>
        <argsstring>(const System::String &amp;value)</argsstring>
        <name>set_NameFarEast</name>
        <qualifiedname>Aspose::Words::Font::set_NameFarEast</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1acbd14d46493a74e30665f1c71f217577" kindref="member">Aspose::Words::Font::get_NameFarEast</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="317" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a7076b6be84d45031c7c53ffbe7263135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_NameOther</definition>
        <argsstring>(const System::String &amp;value)</argsstring>
        <name>set_NameOther</name>
        <qualifiedname>Aspose::Words::Font::set_NameOther</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a10c67cca17eeee5a159cc262361b6708" kindref="member">Aspose::Words::Font::get_NameOther</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="351" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1acc1b53f674b916da528aad5a79a72daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_NoProofing</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_NoProofing</name>
        <qualifiedname>Aspose::Words::Font::set_NoProofing</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a91123e4af044ebfd4b4588e73127c5a0" kindref="member">Aspose::Words::Font::get_NoProofing</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2158" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a759398e2cb96aeaeb5991cc4a8725d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Outline</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Outline</name>
        <qualifiedname>Aspose::Words::Font::set_Outline</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1aab300f6c82381c9e25569f132b234b43" kindref="member">Aspose::Words::Font::get_Outline</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1341" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a85b6e61d6efbdc875f2914ca8fe7936e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Position</definition>
        <argsstring>(double value)</argsstring>
        <name>set_Position</name>
        <qualifiedname>Aspose::Words::Font::set_Position</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a9fa33f95ebfafb913e7c0adff1c6f0dc" kindref="member">Aspose::Words::Font::get_Position</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1985" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aa1f667d212d611a025d0fcd9af758ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Scaling</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>set_Scaling</name>
        <qualifiedname>Aspose::Words::Font::set_Scaling</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1aec0f302173bbced823dcdb2e3503db1c" kindref="member">Aspose::Words::Font::get_Scaling</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1898" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a7de2eab4b5e67123469ce92994daa43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Shadow</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Shadow</name>
        <qualifiedname>Aspose::Words::Font::set_Shadow</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a465d34c3c3eb471915df56965c867dfd" kindref="member">Aspose::Words::Font::get_Shadow</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1317" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a7deff5224f9028ce9d19ec6d136b862b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Size</definition>
        <argsstring>(double value)</argsstring>
        <name>set_Size</name>
        <qualifiedname>Aspose::Words::Font::set_Size</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a87a676f402fce9911b037bf96b7bdaa8" kindref="member">Aspose::Words::Font::get_Size</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="854" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a9e616034ef09352a259a4689f647ef6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_SizeBi</definition>
        <argsstring>(double value)</argsstring>
        <name>set_SizeBi</name>
        <qualifiedname>Aspose::Words::Font::set_SizeBi</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1aeb91960b87617b887ea53f4a2bea6328" kindref="member">Aspose::Words::Font::get_SizeBi</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="895" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a9d43ccc942241e9d0e6f00144f1504b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_SmallCaps</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_SmallCaps</name>
        <qualifiedname>Aspose::Words::Font::set_SmallCaps</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a8773b9e36f304da94c7d86d9a25f3541" kindref="member">Aspose::Words::Font::get_SmallCaps</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1515" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a484653872c9cd48b4042bebadd872829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_SnapToGrid</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_SnapToGrid</name>
        <qualifiedname>Aspose::Words::Font::set_SnapToGrid</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Specifies whether the current font should use the document grid characters per line settings when laying out. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2423" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a27598696d182cda15ea33caecd7f021a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Spacing</definition>
        <argsstring>(double value)</argsstring>
        <name>set_Spacing</name>
        <qualifiedname>Aspose::Words::Font::set_Spacing</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a6a69ea553e0855e252e599493922a91d" kindref="member">Aspose::Words::Font::get_Spacing</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1926" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1af8d7f8c786155621590fc840e0a6cce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_StrikeThrough</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_StrikeThrough</name>
        <qualifiedname>Aspose::Words::Font::set_StrikeThrough</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1aef9cb694db65a36ee3131f609c5fa25c" kindref="member">Aspose::Words::Font::get_StrikeThrough</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1268" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ac9b7003f186cc1bcc5f4475e54b572b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Style</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Style &gt; &amp;value)</argsstring>
        <name>set_Style</name>
        <qualifiedname>Aspose::Words::Font::set_Style</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_style" kindref="compound">Aspose::Words::Style</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a197cc246b91436e34f7191499f61946b" kindref="member">Aspose::Words::Font::get_Style</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2335" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a40394494886087459dd670514d4f2f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_StyleIdentifier</definition>
        <argsstring>(Aspose::Words::StyleIdentifier value)</argsstring>
        <name>set_StyleIdentifier</name>
        <qualifiedname>Aspose::Words::Font::set_StyleIdentifier</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34" kindref="member">Aspose::Words::StyleIdentifier</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1afd182d3cebe7d2a97511a6ec672c8b3f" kindref="member">Aspose::Words::Font::get_StyleIdentifier</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2415" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ad5ca5d0aea748397b86d3e6840da4e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_StyleName</definition>
        <argsstring>(const System::String &amp;value)</argsstring>
        <name>set_StyleName</name>
        <qualifiedname>Aspose::Words::Font::set_StyleName</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a4bc2c3f798b5da09853f47b617c15424" kindref="member">Aspose::Words::Font::get_StyleName</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2375" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a79dc643492f7f5b978dd5b3a66b28948" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Subscript</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Subscript</name>
        <qualifiedname>Aspose::Words::Font::set_Subscript</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1adccbb704b942cc1edbefd09007eccb21" kindref="member">Aspose::Words::Font::get_Subscript</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1483" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a97e6e74e4adc0c65b5055fc7836c2ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Superscript</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Superscript</name>
        <qualifiedname>Aspose::Words::Font::set_Superscript</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a9962c6242eb8c13223a574b112cb3845" kindref="member">Aspose::Words::Font::get_Superscript</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1443" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1aabdbdba00b27a37275b23072d2e6d679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_TextEffect</definition>
        <argsstring>(Aspose::Words::TextEffect value)</argsstring>
        <name>set_TextEffect</name>
        <qualifiedname>Aspose::Words::Font::set_TextEffect</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a17709581ebf0b64c493a0f9061d86ce5" kindref="member">Aspose::Words::TextEffect</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a45deddd0fd9fffe88b0212f3edb40270" kindref="member">Aspose::Words::Font::get_TextEffect</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="2060" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a9e74ac144d96e88cd72fc7223f640e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_ThemeColor</definition>
        <argsstring>(Aspose::Words::Themes::ThemeColor value)</argsstring>
        <name>set_ThemeColor</name>
        <qualifiedname>Aspose::Words::Font::set_ThemeColor</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a359432108a4486015e6eb1e240c52be4" kindref="member">Aspose::Words::Themes::ThemeColor</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a8ec7a9d2b31c5052f111d6b4bb493d93" kindref="member">Aspose::Words::Font::get_ThemeColor</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1170" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1ac9f1a80df5f11c61f12661901dae499b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_ThemeFont</definition>
        <argsstring>(Aspose::Words::Themes::ThemeFont value)</argsstring>
        <name>set_ThemeFont</name>
        <qualifiedname>Aspose::Words::Font::set_ThemeFont</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a7b0cef2de0b2a3238a45f1f6eb8e7cfc" kindref="member">Aspose::Words::Themes::ThemeFont</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1abd61938d3a063375ce8f0474a73c3559" kindref="member">Aspose::Words::Font::get_ThemeFont</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="457" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a1558829f3fd45d0a2c216b12fad6cf8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_ThemeFontAscii</definition>
        <argsstring>(Aspose::Words::Themes::ThemeFont value)</argsstring>
        <name>set_ThemeFontAscii</name>
        <qualifiedname>Aspose::Words::Font::set_ThemeFontAscii</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a7b0cef2de0b2a3238a45f1f6eb8e7cfc" kindref="member">Aspose::Words::Themes::ThemeFont</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a00c1322f4d8b7be9556a928e3a98de5b" kindref="member">Aspose::Words::Font::get_ThemeFontAscii</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="547" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1acd85cafe94712ceb5bfe64af3ce043a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_ThemeFontBi</definition>
        <argsstring>(Aspose::Words::Themes::ThemeFont value)</argsstring>
        <name>set_ThemeFontBi</name>
        <qualifiedname>Aspose::Words::Font::set_ThemeFontBi</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a7b0cef2de0b2a3238a45f1f6eb8e7cfc" kindref="member">Aspose::Words::Themes::ThemeFont</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a2fa36b94520c5e9c58d2c0555e9b49bc" kindref="member">Aspose::Words::Font::get_ThemeFontBi</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="816" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1acc5f0f5f581764e7164a3a6744580ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_ThemeFontFarEast</definition>
        <argsstring>(Aspose::Words::Themes::ThemeFont value)</argsstring>
        <name>set_ThemeFontFarEast</name>
        <qualifiedname>Aspose::Words::Font::set_ThemeFontFarEast</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a7b0cef2de0b2a3238a45f1f6eb8e7cfc" kindref="member">Aspose::Words::Themes::ThemeFont</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1aa8604058d106fe568bb2e520f6fe5b7c" kindref="member">Aspose::Words::Font::get_ThemeFontFarEast</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="636" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1af08e3a91a057a83e8e7e834bdd6f278a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_ThemeFontOther</definition>
        <argsstring>(Aspose::Words::Themes::ThemeFont value)</argsstring>
        <name>set_ThemeFontOther</name>
        <qualifiedname>Aspose::Words::Font::set_ThemeFontOther</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_themes_1a7b0cef2de0b2a3238a45f1f6eb8e7cfc" kindref="member">Aspose::Words::Themes::ThemeFont</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1ad42a26e60b65ee48808c25b4fea8a5da" kindref="member">Aspose::Words::Font::get_ThemeFontOther</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="726" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1afc36cfe2aaafb17a19bd7a7dc00b63e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_TintAndShade</definition>
        <argsstring>(double value)</argsstring>
        <name>set_TintAndShade</name>
        <qualifiedname>Aspose::Words::Font::set_TintAndShade</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a11fb25a7b6ecde9f5e7c64e0f216db84" kindref="member">Aspose::Words::Font::get_TintAndShade</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1202" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a0815ffa425165fcfcb584e48fdd8ad7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_Underline</definition>
        <argsstring>(Aspose::Words::Underline value)</argsstring>
        <name>set_Underline</name>
        <qualifiedname>Aspose::Words::Font::set_Underline</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94" kindref="member">Aspose::Words::Underline</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a80f049cdf07bc30d29c1e64f5cc0842e" kindref="member">Aspose::Words::Font::get_Underline</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1849" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_font_1a371abd8720b412375b0f454a894e3cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Font::set_UnderlineColor</definition>
        <argsstring>(System::Drawing::Color value)</argsstring>
        <name>set_UnderlineColor</name>
        <qualifiedname>Aspose::Words::Font::set_UnderlineColor</qualifiedname>
        <param>
          <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_font_1a8bae37120d439b3bcb04f3a97e69639f" kindref="member">Aspose::Words::Font::get_UnderlineColor</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Font.h" line="1870" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains font attributes (font name, font size, color, and so on) for an object. </para>
    </briefdescription>
    <detaileddescription>
<para>You do not create instances of the <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref> class directly. You just use <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Font</ref> to access the font properties of the various objects such as <ref refid="class_aspose_1_1_words_1_1_run" kindref="compound">Run</ref>, <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Paragraph</ref>, <ref refid="class_aspose_1_1_words_1_1_style" kindref="compound">Style</ref>, <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a string surrounded by a border into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_LineWidth(2.5);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da8cf8027b2b64fbbc8ed979f94a7555b8" kindref="member">LineStyle::DashDotStroker</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>surrounded<sp/>by<sp/>green<sp/>border.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Border.FontBorder.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to format a run of text using its font property. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>run-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_HighlightColor(<ref refid="class/system.drawing.color/_1ab0895ee04ac7572b810a3c0f97544c55" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Yellow</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.CreateFormattedRun.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to create and use a paragraph style with list formatting. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>paragraph<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>style<sp/>=<sp/>doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyStyle1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Size(24);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Verdana&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_ParagraphFormat()-&gt;set_SpaceAfter(12);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>list<sp/>and<sp/>make<sp/>sure<sp/>the<sp/>paragraphs<sp/>that<sp/>use<sp/>this<sp/>style<sp/>will<sp/>use<sp/>this<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_ListFormat()-&gt;set_List(doc-&gt;get_Lists()-&gt;Add(ListTemplate::BulletDefault));</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_ListFormat()-&gt;set_ListLevelNumber(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>paragraph<sp/>style<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>current<sp/>paragraph,<sp/>and<sp/>then<sp/>add<sp/>some<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(style);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World:<sp/>MyStyle1,<sp/>bulleted<sp/>list.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Change<sp/>the<sp/>document<sp/>builder&apos;s<sp/>style<sp/>to<sp/>one<sp/>that<sp/>has<sp/>no<sp/>list<sp/>formatting<sp/>and<sp/>write<sp/>another<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World:<sp/>Normal.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Styles.ParagraphStyleBulletedList.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>Aspose::Words::Drawing::Core::IFillable</label>
      </node>
      <node id="1">
        <label>Aspose::Words::Font</label>
        <link refid="class_aspose_1_1_words_1_1_font"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::IBorderAttrSource</label>
      </node>
      <node id="3">
        <label>Aspose::Words::IShadingAttrSource</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Aspose::Words::Drawing::Core::IFillable</label>
      </node>
      <node id="1">
        <label>Aspose::Words::Font</label>
        <link refid="class_aspose_1_1_words_1_1_font"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::IBorderAttrSource</label>
      </node>
      <node id="3">
        <label>Aspose::Words::IShadingAttrSource</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Font.h" line="152" column="1" bodyfile="Aspose.Words.Cpp/Font.h" bodystart="153" bodyend="2556"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_font_1a6e5d6f2542105d6bfa8b861c72afb406" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ab83d44cae8f70f976e78ec7f8d3b57d7" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>BaseType1</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a415cb63548edb2099a7344f0ddae6e7b" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>BaseType2</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a9ba53599fdc423775368cd2e13f8a6f7" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>ClearFormatting</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a56ccbfde5f497fb922f2dcd0ca7563e7" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_AllCaps</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a026891d07660863b7368248a9e5850cd" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_AutoColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a7280a2e0beabe020d34d52adf5065877" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Bidi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1afaa22f9076743e0c4d79cdd7c2436284" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Bold</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a547fecd3a7dcd62c324743c7cb10a70d" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_BoldBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a61ec72be23f14e26acec812a3af9b269" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Border</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a4b5deeeea37f74871e1d46cd4f381654" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Color</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a609b75c498498bd903a818177b230a64" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_ComplexScript</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ab25c54aafb5fa0996b520e0eb3cf9f38" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_DoubleStrikeThrough</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a8334d2cd8f2b4f6dbf393802cc0603c7" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Emboss</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ae436298f0dc3bebdc9274edb26e40ed9" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_EmphasisMark</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a8350cb258d9adcaf0f1803314a038005" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Engrave</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a3723d609e8e87c778ddaf5420d57faad" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Fill</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ad8f6651487b06495f3172d68141cf496" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_FillableBackColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a00ec68a8fef32513e46cc7690f2d4850" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_FillableForeColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1afc5c40e68cd5de21cc85bb06df3a24e5" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_FillableImageBytes</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a94b4c15b9995b9431e0cb566919d02f9" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_FillableThemeProvider</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aee5123a2606f87fba9155b51bda04cb6" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_FillableTransparency</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a5236bc987a9afc087a64b445ef72850e" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_FillableVisible</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a4e3305c76ee62e99fe5a1b9af2e3b022" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_FilledColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ae4fe0cb3ff555306784d9398416b2118" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_FillType</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a065b982192fd99cd6b088775b7c8107b" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_GradientAngle</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ae1daaf5ae4140f8d8cfc1bdfb13b244d" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_GradientStops</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1adb8f6a4044c4dd88876f0619f498b078" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_GradientStyle</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a1e8b7273768bd63abdb09351f702cdca" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_GradientVariant</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ad19fcd5ec5f802dfd6e791053f430b30" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Hidden</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a77ddaf8c261c2372e8de1b7c255ad04f" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_HighlightColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a587d02969e68bbdf4b911c0308c6c578" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Italic</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a30a5c8250c1d206ccf8253f8d7090b9e" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_ItalicBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a7422cdb149284123ed48463acf73488b" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Kerning</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1abe858bd585361c6ea7a0ca229cb461bd" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_LineSpacing</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a6a77e8daf2422d2206dad756ae249220" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_LocaleId</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a2dc5d877b4ba35a0e59110dee3f7ba78" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_LocaleIdBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a10fceeefa829873195883ff8bcea6d35" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_LocaleIdFarEast</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ae8f9a3e1ae19b17f735b0214e93b5b76" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Name</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1af62e04edd5da4c7b4675b965ecd2fb58" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_NameAscii</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1afeda74bc147066c9f49ba39b580d3d6a" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_NameBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1acbd14d46493a74e30665f1c71f217577" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_NameFarEast</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a10c67cca17eeee5a159cc262361b6708" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_NameOther</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a91123e4af044ebfd4b4588e73127c5a0" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_NoProofing</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a5784d4697b4955d476730f342d8351d5" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_On</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a443432d7f278ae6906d52c7dbaabfb78" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Opacity</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aab300f6c82381c9e25569f132b234b43" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Outline</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a9fa33f95ebfafb913e7c0adff1c6f0dc" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Position</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a0351e5aa0625a32ec67fd2cd8e1838b7" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_RotateWithObject</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aec0f302173bbced823dcdb2e3503db1c" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Scaling</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aecd1a7700cad6faaf35a44cfea5740a2" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Shading</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a465d34c3c3eb471915df56965c867dfd" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Shadow</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a87a676f402fce9911b037bf96b7bdaa8" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Size</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aeb91960b87617b887ea53f4a2bea6328" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_SizeBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a8773b9e36f304da94c7d86d9a25f3541" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_SmallCaps</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a034e31789f11e8d630475eb5abb659d5" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_SnapToGrid</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a6a69ea553e0855e252e599493922a91d" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Spacing</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aef9cb694db65a36ee3131f609c5fa25c" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_StrikeThrough</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a197cc246b91436e34f7191499f61946b" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Style</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1afd182d3cebe7d2a97511a6ec672c8b3f" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_StyleIdentifier</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a4bc2c3f798b5da09853f47b617c15424" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_StyleName</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1adccbb704b942cc1edbefd09007eccb21" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Subscript</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a9962c6242eb8c13223a574b112cb3845" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Superscript</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a45deddd0fd9fffe88b0212f3edb40270" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_TextEffect</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a7a953abfbded2357d3669b8b536f8979" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_TextureAlignment</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a8ec7a9d2b31c5052f111d6b4bb493d93" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_ThemeColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1abd61938d3a063375ce8f0474a73c3559" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_ThemeFont</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a00c1322f4d8b7be9556a928e3a98de5b" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_ThemeFontAscii</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a2fa36b94520c5e9c58d2c0555e9b49bc" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_ThemeFontBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aa8604058d106fe568bb2e520f6fe5b7c" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_ThemeFontFarEast</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ad42a26e60b65ee48808c25b4fea8a5da" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_ThemeFontOther</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a11fb25a7b6ecde9f5e7c64e0f216db84" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_TintAndShade</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a80f049cdf07bc30d29c1e64f5cc0842e" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_Underline</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a8bae37120d439b3bcb04f3a97e69639f" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>get_UnderlineColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ad7e4318ac9de40089a61059669abc857" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>GetPatternType</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a14a50cb2c25fc7daecb9ddb482a069b9" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>GetPresetTexture</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a777279fbb534eacec6cd0b7ada0f0b5f" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>GetTransparency</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a975c11a7f90f919b22597fbdc2a6f9e3" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>HasDmlEffect</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ac343c9c4dc1337f5bef2a16e15d99261" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ac75455da5113fd87ed8a64d568d2fc2a" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a232f02ee894a1fe7e324b6b55e211651" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1acc5d4ff59261b300b26aba9fed0d4c71" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>mField3</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aba4c0bdd98d802292aa43ec7ce61d400" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>mField4</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a07cfcfa22b6b6904f183cbbe828e64e1" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>mField5</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a8d4279151263448f3c9d9113f9e16471" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>OneColorGradient</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ae58d830f88442cf82fe684605a614835" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>Patterned</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a653e37a8d162786b480eaf236ed47579" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>PresetTextured</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1abd44ff57aa50403d088f10c65bf1ec43" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ae8ed54bc5ffd6fbf4972a5029d207ad1" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_AllCaps</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1afff0e0b7bc4b90da50d63e0e815cc808" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Bidi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a321186d0ff687df7328f15fd23444acc" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Bold</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aa203a99ebf88b1a3ace9d0d2c2c745c0" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_BoldBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1acbe0f55f1e8f67a8b0582fff2a1b6086" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Color</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aa08cbc8336f77c3c84236dbb9a5c49df" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_ComplexScript</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a457c710d7b6ea2fa0819c831fc2c0fb8" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_DoubleStrikeThrough</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a5bda0571bb832130e9fdfb4330d8118c" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Emboss</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a0e0f04e14ac77c54e96df5e23e0fc103" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_EmphasisMark</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a49d40480b11bb6015440b34eae5f6a7c" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Engrave</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a8ab869844706b4d4c1ca2e200fc8fb09" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_FillableBackColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a5316c9d2ac08c99810bc073bbe080228" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_FillableForeColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a6b37e478c9e9149c44066349dcc56879" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_FillableTransparency</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a475e8fc612426b2b92405e876409d68b" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_FillableVisible</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1afcc5b56b6e94ff2c0a2cc3dea7782d62" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_FilledColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a4d02727090713d4b8a4bcc2db23c7188" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_GradientAngle</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ad0edec9cbb3278a4a227453770b74b9f" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Hidden</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aa36bc604428f43bc608b0cfe68c90ad2" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_HighlightColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a567e5f51bda576ac68e64ac28c27dd2c" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Italic</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aa6d75b475cc391c4c44ce6235964bbbf" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_ItalicBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a55250f76b8fd953bf141d7e489ce8e81" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Kerning</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a10543c956c5ee718ee469c60d5847f30" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_LocaleId</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a10564dc256d08ac4c5706cee1857cb0b" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_LocaleIdBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ad500a2b17c8eecea5a91cb9372d6e231" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_LocaleIdFarEast</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1afb034d2e09ca0023526ab0918147d285" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Name</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a4f3c834e9be5f05b93c1417fe791a6df" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_NameAscii</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a4659db9c5651685afa66b469d4345464" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_NameBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1add039b64745e3b2f885ba5ce5edf3b2a" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_NameFarEast</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a7076b6be84d45031c7c53ffbe7263135" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_NameOther</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1acc1b53f674b916da528aad5a79a72daa" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_NoProofing</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1abb16d1801f91342d0121409d7905ca6c" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_On</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a503a3719045de3eabdb31ac06760407a" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Opacity</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a759398e2cb96aeaeb5991cc4a8725d9d" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Outline</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a85b6e61d6efbdc875f2914ca8fe7936e" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Position</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a4013d0a585539da23d46cd7b7fd2819c" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_RotateWithObject</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aa1f667d212d611a025d0fcd9af758ae6" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Scaling</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a7de2eab4b5e67123469ce92994daa43b" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Shadow</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a7deff5224f9028ce9d19ec6d136b862b" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Size</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a9e616034ef09352a259a4689f647ef6b" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_SizeBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a9d43ccc942241e9d0e6f00144f1504b3" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_SmallCaps</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a484653872c9cd48b4042bebadd872829" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_SnapToGrid</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a27598696d182cda15ea33caecd7f021a" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Spacing</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1af8d7f8c786155621590fc840e0a6cce8" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_StrikeThrough</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ac9b7003f186cc1bcc5f4475e54b572b5" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Style</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a40394494886087459dd670514d4f2f28" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_StyleIdentifier</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ad5ca5d0aea748397b86d3e6840da4e1a" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_StyleName</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a79dc643492f7f5b978dd5b3a66b28948" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Subscript</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a97e6e74e4adc0c65b5055fc7836c2ab3" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Superscript</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1aabdbdba00b27a37275b23072d2e6d679" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_TextEffect</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1af86a8346dbac1cd01c280f5cecf7892d" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_TextureAlignment</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a9e74ac144d96e88cd72fc7223f640e33" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_ThemeColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ac9f1a80df5f11c61f12661901dae499b" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_ThemeFont</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a1558829f3fd45d0a2c216b12fad6cf8d" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_ThemeFontAscii</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1acd85cafe94712ceb5bfe64af3ce043a5" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_ThemeFontBi</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1acc5f0f5f581764e7164a3a6744580ef7" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_ThemeFontFarEast</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1af08e3a91a057a83e8e7e834bdd6f278a" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_ThemeFontOther</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1afc36cfe2aaafb17a19bd7a7dc00b63e4" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_TintAndShade</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a0815ffa425165fcfcb584e48fdd8ad7f" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_Underline</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a371abd8720b412375b0f454a894e3cf5" prot="public" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>set_UnderlineColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a2414035a1af1b83c2e40504dd089c6cd" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>SetFill</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a220e0b64c995c7db488d97cc556f9f79" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>SetImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ae8603b6c96aad2536418ab109a65989e" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>SetTransparency</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a2fbe90ca698add47d788f29d0c8aaf4a" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>Solid</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a883442362c9f2be57c97f1d79d91d3a0" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1adf94f2a3ef695cba63d6f5e4d29cf2a0" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1a685d06a32c25185950809274f57a4606" prot="private" virt="non-virtual"><scope>Aspose::Words::Font</scope><name>TwoColorGradient</name></member>
      <member refid="class_aspose_1_1_words_1_1_font_1ac02aaf93e0bb970b2e3e2c92be1dbc78" prot="private" virt="virtual"><scope>Aspose::Words::Font</scope><name>~Font</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
