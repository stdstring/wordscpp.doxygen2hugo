<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::Markup::StructuredDocumentTagRangeStart</compoundname>
    <basecompoundref refid="class_aspose_1_1_words_1_1_node" prot="public" virt="non-virtual">Aspose::Words::Node</basecompoundref>
    <basecompoundref refid="class/system.collections.generic.i_enumerable/" prot="public" virt="non-virtual">System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Node &gt; &gt;</basecompoundref>
    <basecompoundref refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag" prot="public" virt="non-virtual">Aspose::Words::Markup::IStructuredDocumentTag</basecompoundref>
    <includes refid="_structured_document_tag_range_start_8h" local="no">Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1add1b746c6ba0fdf15c244a4aa679ee84" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref></type>
        <definition>typedef Aspose::Words::Node Aspose::Words::Markup::StructuredDocumentTagRangeStart::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="107" column="33" bodyfile="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a27e25e784752d712905b29be94ee0517" prot="private" static="no">
        <type><ref refid="class/system.collections.generic.i_enumerable/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::IEnumerable</ref>&lt; <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt; &gt;</type>
        <definition>typedef System::Collections::Generic::IEnumerable&lt;System::SharedPtr&lt;Aspose::Words::Node&gt; &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::BaseType1</definition>
        <argsstring></argsstring>
        <name>BaseType1</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::BaseType1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="108" column="55" bodyfile="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a909f1a688790a910b42cc8c19884ff15" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag" kindref="compound">Aspose::Words::Markup::IStructuredDocumentTag</ref></type>
        <definition>typedef Aspose::Words::Markup::IStructuredDocumentTag Aspose::Words::Markup::StructuredDocumentTagRangeStart::BaseType2</definition>
        <argsstring></argsstring>
        <name>BaseType2</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::BaseType2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="109" column="59" bodyfile="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a98c875b3726a08a3d48e05d3be52810c" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start" kindref="compound">StructuredDocumentTagRangeStart</ref></type>
        <definition>typedef StructuredDocumentTagRangeStart Aspose::Words::Markup::StructuredDocumentTagRangeStart::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="106" column="45" bodyfile="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1adc445c827ff8c63737dbd1c08cac3910" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">BaseType</ref>, <ref refid="class/system.collections.generic.i_enumerable/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">BaseType1</ref>, <ref refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag" kindref="compound">BaseType2</ref> &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType, BaseType1, BaseType2&gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="111" column="37" bodyfile="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a04861a07ffb2db7284ea2683b29e22fa" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="806" column="23" bodyfile="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" bodystart="806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aff689313b153e37cbd2c42c3571f0172" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="807" column="23" bodyfile="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" bodystart="807" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1af631a451508e983a9c49625a25253530" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::Markup::StructuredDocumentTagRangeStart::~StructuredDocumentTagRangeStart</definition>
        <argsstring>()</argsstring>
        <name>~StructuredDocumentTagRangeStart</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::~StructuredDocumentTagRangeStart</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="802" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aeeff79336eef852b91b642fe63f448d6" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::Clone</definition>
        <argsstring>(bool, System::SharedPtr&lt; Aspose::Words::INodeCloningListener &gt;) override</argsstring>
        <name>Clone</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::Clone</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_node_1a53bf7103c6ec9da7872f99f68ef13ae4">Clone</reimplements>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::INodeCloningListener &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="800" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aa9ce72906a258acc65991375779fe6c0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start" kindref="compound">ThisType</ref> *</type>
        <definition>ThisType * Aspose::Words::Markup::StructuredDocumentTagRangeStart::CppMemberwiseClone</definition>
        <argsstring>() const override</argsstring>
        <name>CppMemberwiseClone</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::CppMemberwiseClone</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_node_1a9358fb4208d077e8411fdf0d4e8553e5">CppMemberwiseClone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="812" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1abc383247290915d279dff624ffc0e2f9" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Markup::StructuredDocumentTagRangeStart::IsRanged</definition>
        <argsstring>() override</argsstring>
        <name>IsRanged</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::IsRanged</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a62297a8525e14dc7e0df9bccda5b4472">IsRanged</reimplements>
        <briefdescription>
<para>Returns true if this instance is a ranged structured document tag. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="809" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1af13a6f7dbd844566d31983a9bde5a2e1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Markup::StructuredDocumentTagRangeStart::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::RTTI_INFO_DECL_EX</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a4bd402ca17646eccea5b72ba142a55f4">RTTI_INFO_DECL_EX</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="112" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1af442715880d7a5eef13ef326b6f51e5f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::StructuredDocumentTagNode</definition>
        <argsstring>() override</argsstring>
        <name>StructuredDocumentTagNode</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::StructuredDocumentTagNode</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a685e9d5dab356b6a55d8e1c18a2840ef">StructuredDocumentTagNode</reimplements>
        <briefdescription>
<para>Returns <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Node</ref> object that implements this interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="810" column="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a92158a8a733cece8d93528992d2495d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Markup::StructuredDocumentTagRangeStart::StructuredDocumentTagRangeStart</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::DocumentBase &gt; &amp;doc, Aspose::Words::Markup::SdtType type)</argsstring>
        <name>StructuredDocumentTagRangeStart</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::StructuredDocumentTagRangeStart</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_base" kindref="compound">Aspose::Words::DocumentBase</ref> &gt; &amp;</type>
          <declname>doc</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7" kindref="member">Aspose::Words::Markup::SdtType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Initializes a new instance of the <bold>Structured document tag range start</bold> class. </para>
        </briefdescription>
        <detaileddescription>
<para>The following types of SDT can be created:</para>
<para><itemizedlist>
<listitem><para><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7a4f8222964f9a317cef99dddc23a121bd" kindref="member">Checkbox</ref></para>
</listitem><listitem><para><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7ae4ef5c80fe94d0cad53a95d50691a0c7" kindref="member">DropDownList</ref></para>
</listitem><listitem><para><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7afd249a0c28275ebf9d4c8464ca2225cf" kindref="member">ComboBox</ref></para>
</listitem><listitem><para><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7a44749712dbec183e983dcd78a7736c41" kindref="member">Date</ref></para>
</listitem><listitem><para><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7a8015d4844c6e94e05ff443cc5cf816d4" kindref="member">BuildingBlockGallery</ref></para>
</listitem><listitem><para><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7a03937134cedab9078be39a77ee3a48a0" kindref="member">Group</ref></para>
</listitem><listitem><para><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7a8ae5811be1a55b9b8447ad2dbdadbf6e" kindref="member">Picture</ref></para>
</listitem><listitem><para><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7a26dfbb5d9e174bf46f73d8fe97cb1dd5" kindref="member">RichText</ref></para>
</listitem><listitem><para><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7ab7ebbf7f254ef646928dd58f62383a85" kindref="member">PlainText</ref></para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The owner document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of SDT node.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create/remove structured document tag and its content. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SdtRangeExtendedMethods()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag<sp/>element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;StructuredDocumentTagRangeStart&gt;<sp/>rangeStart;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InsertStructuredDocumentTagRanges(doc,<sp/>rangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>ranged<sp/>structured<sp/>document<sp/>tag,<sp/>but<sp/>keeps<sp/>content<sp/>inside.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart-&gt;RemoveSelfOnly();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart<sp/>=<sp/>System::DynamicCast&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>rangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEnd<sp/>=<sp/>System::DynamicCast&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>rangeEnd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag<sp/>element&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InsertStructuredDocumentTagRanges(doc,<sp/>rangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>paragraphNode<sp/>=<sp/>rangeStart-&gt;LINQ_LastOrDefault();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag<sp/>element&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paragraphNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>?<sp/>System::ObjectExt::Box&lt;String&gt;(paragraphNode-&gt;GetText().Trim())<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>ranged<sp/>structured<sp/>document<sp/>tag<sp/>and<sp/>content<sp/>inside.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>paragraphNode<sp/>=<sp/>rangeStart-&gt;LINQ_LastOrDefault();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>paragraphNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>?<sp/>System::ObjectExt::Box&lt;String&gt;(paragraphNode-&gt;GetText())<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InsertStructuredDocumentTagRanges(SharedPtr&lt;Document&gt;<sp/>doc,<sp/>SharedPtr&lt;StructuredDocumentTagRangeStart&gt;&amp;<sp/>rangeStart)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart<sp/>=<sp/>MakeObject&lt;StructuredDocumentTagRangeStart&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7ab7ebbf7f254ef646928dd58f62383a85" kindref="member" tooltip="The SDT represents a plain text box when displayed in the document.">SdtType::PlainText</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEnd<sp/>=<sp/>MakeObject&lt;StructuredDocumentTagRangeEnd&gt;(doc,<sp/>rangeStart-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;InsertBefore(rangeStart,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_LastSection()-&gt;get_Body()-&gt;InsertAfter(rangeEnd,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="656" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ab468f2b66f938d01417aff953e5d8749" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Markup::StructuredDocumentTagRangeStart::Accept</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::DocumentVisitor &gt; visitor) override</argsstring>
        <name>Accept</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::Accept</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_node_1a556472e35a86820cf189f10594933f3e">Accept</reimplements>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">Aspose::Words::DocumentVisitor</ref> &gt;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>Accepts a visitor. </para>
        </briefdescription>
        <detaileddescription>
<para>Enumerates over this node and all of its children. Each node calls a corresponding method on <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref>.</para>
<para>For more info see the Visitor design pattern.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visitor</parametername>
</parameternamelist>
<parameterdescription>
<para>The visitor that will visit the nodes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all nodes were visited; false if <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref> stopped the operation before visiting all nodes.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use a <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref> implementation to remove all hidden content from a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RemoveHiddenContentFromDocument()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Hidden<sp/>content.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hiddenContentRemover<sp/>=<sp/>MakeObject&lt;ExFont::RemoveHiddenContentVisitor&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>types<sp/>of<sp/>fields<sp/>which<sp/>can<sp/>accept<sp/>a<sp/>document<sp/>visitor,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>allow<sp/>it<sp/>to<sp/>visit<sp/>the<sp/>accepting<sp/>node,<sp/>and<sp/>then<sp/>traverse<sp/>its<sp/>child<sp/>nodes<sp/>in<sp/>a<sp/>depth-first<sp/>manner.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Paragraph<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>4,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>para-&gt;Accept(hiddenContentRemover);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Table<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Tables()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;Accept(hiddenContentRemover);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Document<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(hiddenContentRemover);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.RemoveHiddenContentFromDocument.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">RemoveHiddenContentVisitor<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFieldStart(SharedPtr&lt;FieldStart&gt;<sp/>fieldStart)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fieldStart-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldStart-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFieldEnd(SharedPtr&lt;FieldEnd&gt;<sp/>fieldEnd)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fieldEnd-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldEnd-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFieldSeparator(SharedPtr&lt;FieldSeparator&gt;<sp/>fieldSeparator)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fieldSeparator-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldSeparator-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitRun(SharedPtr&lt;Run&gt;<sp/>run)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitParagraphStart(SharedPtr&lt;Paragraph&gt;<sp/>paragraph)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paragraph-&gt;get_ParagraphBreakFont()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paragraph-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFormField(SharedPtr&lt;FormField&gt;<sp/>formField)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formField-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formField-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groupShape-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupShape-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitCommentStart(SharedPtr&lt;Comment&gt;<sp/>comment)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comment-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFootnoteStart(SharedPtr&lt;Footnote&gt;<sp/>footnote)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(footnote-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>footnote-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitSpecialChar(SharedPtr&lt;SpecialChar&gt;<sp/>specialChar)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specialChar-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specialChar-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitTableEnd(SharedPtr&lt;Table&gt;<sp/>table)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>content<sp/>inside<sp/>table<sp/>cells<sp/>may<sp/>have<sp/>the<sp/>hidden<sp/>content<sp/>flag,<sp/>but<sp/>the<sp/>tables<sp/>themselves<sp/>cannot.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>table<sp/>had<sp/>nothing<sp/>but<sp/>hidden<sp/>content,<sp/>this<sp/>visitor<sp/>would<sp/>have<sp/>removed<sp/>all<sp/>of<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>there<sp/>would<sp/>be<sp/>no<sp/>child<sp/>nodes<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thus,<sp/>we<sp/>can<sp/>also<sp/>treat<sp/>the<sp/>table<sp/>itself<sp/>as<sp/>hidden<sp/>content<sp/>and<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tables<sp/>which<sp/>are<sp/>empty<sp/>but<sp/>do<sp/>not<sp/>have<sp/>hidden<sp/>content<sp/>will<sp/>have<sp/>cells<sp/>with<sp/>empty<sp/>paragraphs<sp/>inside,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>this<sp/>visitor<sp/>will<sp/>not<sp/>remove.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!table-&gt;get_HasChildNodes())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitCellEnd(SharedPtr&lt;Cell&gt;<sp/>cell)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cell-&gt;get_HasChildNodes()<sp/>&amp;&amp;<sp/>cell-&gt;get_ParentNode()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitRowEnd(SharedPtr&lt;Row&gt;<sp/>row)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!row-&gt;get_HasChildNodes()<sp/>&amp;&amp;<sp/>row-&gt;get_ParentNode()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="682" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a80e92c15d3184264c00ca097ecb7e149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::AppendChild</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Node &gt; &amp;newChild)</argsstring>
        <name>AppendChild</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::AppendChild</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt; &amp;</type>
          <declname>newChild</declname>
        </param>
        <briefdescription>
<para>Adds the specified node to the end of the stdContent range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newChild</parametername>
</parameternamelist>
<parameterdescription>
<para>The node to add.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The node added. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="692" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a55c4817ae754c008af870869b557ff8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node_collection" kindref="compound">Aspose::Words::NodeCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::NodeCollection &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_ChildNodes</definition>
        <argsstring>()</argsstring>
        <name>get_ChildNodes</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_ChildNodes</qualifiedname>
        <briefdescription>
<para>Gets all nodes between this range start node and the range end node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get child nodes of <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start" kindref="compound">StructuredDocumentTagRangeStart</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Child<sp/>nodes<sp/>count:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tag-&gt;get_ChildNodes()-&gt;get_Count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>node<sp/>:<sp/>System::IterateOver(tag-&gt;get_ChildNodes()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Child<sp/>node<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>node-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>node<sp/>:<sp/>System::IterateOver(tag-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Child<sp/>node<sp/>text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="146" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a8381444cdeba08d60e9a34ae97da30ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Color</definition>
        <argsstring>() override</argsstring>
        <name>get_Color</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Color</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a8a70df7237d09b7d5de1415fe3873779">get_Color</reimplements>
        <briefdescription>
<para>Gets or sets the color of the structured document tag. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="248" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a5d3bc9dafa4d37c93ca525ec9ffa3752" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Id</definition>
        <argsstring>() override</argsstring>
        <name>get_Id</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Id</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a7584de7e7e5fc53e9db2425fa7d0a834">get_Id</reimplements>
        <briefdescription>
<para>Specifies a unique read-only persistent numerical Id for this structured document tag. </para>
        </briefdescription>
        <detaileddescription>
<para>Id attribute shall follow these rules:<itemizedlist>
<listitem><para>The document shall retain structured document tag ids only if the whole document is cloned <ref refid="class_aspose_1_1_words_1_1_document_1a1c3dcff6be884eec696d20719353e93a" kindref="member">Clone</ref>.</para>
</listitem><listitem><para>During <ref refid="" kindref="compound">ImportNode()</ref> Id shall be retained if import does not cause conflicts with other structured document tag Ids in the target document.</para>
</listitem><listitem><para>If multiple structured document tag nodes specify the same decimal number value for the Id attribute, then the first structured document tag in the document shall maintain this original Id, and all subsequent structured document tag nodes shall have new identifiers assigned to them when the document is loaded.</para>
</listitem><listitem><para>During standalone structured document tag <ref refid="_1a0e410cd8498ebdf1c4e775115d77877f" kindref="member">Clone()</ref> operation new unique ID will be generated for the cloned structured document tag node.</para>
</listitem><listitem><para>If Id is not specified in the source document, then the structured document tag node shall have a new unique identifier assigned to it when the document is loaded.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="298" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a59bf36640027c93e16a62dc540a493a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_IsShowingPlaceholderText</definition>
        <argsstring>() override</argsstring>
        <name>get_IsShowingPlaceholderText</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_IsShowingPlaceholderText</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a1ab2e722f06028da0a1b163ee533b356">get_IsShowingPlaceholderText</reimplements>
        <briefdescription>
<para>Specifies whether the content of this structured document tag shall be interpreted to contain placeholder text (as opposed to regular text contents within the structured document tag). if set to true, this state shall be resumed (showing placeholder text) upon opening this document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="405" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a9f894a1a3a4f4a5d3cfbce8b598dd307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_LastChild</definition>
        <argsstring>()</argsstring>
        <name>get_LastChild</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_LastChild</qualifiedname>
        <briefdescription>
<para>Gets the last child in the stdContent range. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="149" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aab95209962eb8fd363293256c466de06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_markup_1a57672f3522526bfeb73e0b7539583751" kindref="member">Aspose::Words::Markup::MarkupLevel</ref></type>
        <definition>Aspose::Words::Markup::MarkupLevel Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Level</definition>
        <argsstring>() const override</argsstring>
        <name>get_Level</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Level</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a8efb955f1e7c6bb152710173a84dc024">get_Level</reimplements>
        <briefdescription>
<para>Gets the level at which this structured document tag range start occurs in the document tree. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="182" column="43"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a8e01dae38211f9ed4ca6d83cb97eb042" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_LockContentControl</definition>
        <argsstring>() override</argsstring>
        <name>get_LockContentControl</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_LockContentControl</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1ab1bf20fbe8e05369e08f3bcb72767653">get_LockContentControl</reimplements>
        <briefdescription>
<para>When set to true, this property will prohibit a user from deleting this structured document tag. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="331" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aae14a4e0cef8886a2bcb0ab14b3190ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_LockContents</definition>
        <argsstring>() override</argsstring>
        <name>get_LockContents</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_LockContents</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1aaa7e81d342e0ac5fcefb4dec7e1ee4a6">get_LockContents</reimplements>
        <briefdescription>
<para>When set to true, this property will prohibit a user from editing the contents of this structured document tag. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="367" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ae6e2102696085b39f7c7aa534eccb4b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379" kindref="member">Aspose::Words::NodeType</ref></type>
        <definition>Aspose::Words::NodeType Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_NodeType</definition>
        <argsstring>() const override</argsstring>
        <name>get_NodeType</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_NodeType</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_node_1a7f80e8d96b7a072fca14157b25ae025e">get_NodeType</reimplements>
        <briefdescription>
<para>Gets the type of this node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to traverse a composite node&apos;s tree of child nodes. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecurseChildren()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>node<sp/>that<sp/>can<sp/>contain<sp/>child<sp/>nodes,<sp/>such<sp/>as<sp/>the<sp/>document<sp/>itself,<sp/>is<sp/>composite.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc-&gt;get_IsComposite());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>recursive<sp/>function<sp/>that<sp/>will<sp/>go<sp/>through<sp/>and<sp/>print<sp/>all<sp/>the<sp/>child<sp/>nodes<sp/>of<sp/>a<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseAllNodes(doc,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseAllNodes(SharedPtr&lt;CompositeNode&gt;<sp/>parentNode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>childNode<sp/>=<sp/>parentNode-&gt;get_FirstChild();<sp/>childNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>childNode<sp/>=<sp/>childNode-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>depth))<sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(childNode-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurse<sp/>into<sp/>the<sp/>node<sp/>if<sp/>it<sp/>is<sp/>a<sp/>composite<sp/>node.<sp/>Otherwise,<sp/>print<sp/>its<sp/>contents<sp/>if<sp/>it<sp/>is<sp/>an<sp/>inline<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childNode-&gt;get_IsComposite())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseAllNodes(System::DynamicCast&lt;CompositeNode&gt;(childNode),<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(System::ObjectExt::Is&lt;Inline&gt;(childNode))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>childNode-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to remove all child nodes of a specific type from a composite node. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Tables.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>curNode<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstChild();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>next<sp/>sibling<sp/>node<sp/>as<sp/>a<sp/>variable<sp/>in<sp/>case<sp/>we<sp/>want<sp/>to<sp/>move<sp/>to<sp/>it<sp/>after<sp/>deleting<sp/>this<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>nextNode<sp/>=<sp/>curNode-&gt;get_NextSibling();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>section<sp/>body<sp/>can<sp/>contain<sp/>Paragraph<sp/>and<sp/>Table<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>node<sp/>is<sp/>a<sp/>Table,<sp/>remove<sp/>it<sp/>from<sp/>the<sp/>parent.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curNode-&gt;get_NodeType()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curNode-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>curNode<sp/>=<sp/>nextNode;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
</programlisting></para>
<para>Shows how to use a node&apos;s NextSibling property to enumerate through its immediate children. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>node<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstChild();<sp/>node<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>node<sp/>=<sp/>node-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>type:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(node-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>contents<sp/>=<sp/>node-&gt;GetText().Trim();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(contents<sp/>==<sp/>String::Empty<sp/>?<sp/>u</highlight><highlight class="stringliteral">&quot;This<sp/>node<sp/>contains<sp/>no<sp/>text&quot;</highlight><highlight class="normal"><sp/>:<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Contents:<sp/>\&quot;{0}\&quot;&quot;</highlight><highlight class="normal">,<sp/>node-&gt;GetText().Trim()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="121" column="32"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aae793c1b83fc7b396c2863b6b5cc243e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_building_blocks_1_1_building_block" kindref="compound">Aspose::Words::BuildingBlocks::BuildingBlock</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::BuildingBlocks::BuildingBlock &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Placeholder</definition>
        <argsstring>() override</argsstring>
        <name>get_Placeholder</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Placeholder</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a992d885c9047a155b49add6a3d2317a0">get_Placeholder</reimplements>
        <briefdescription>
<para>Gets the <ref refid="class_aspose_1_1_words_1_1_building_blocks_1_1_building_block" kindref="compound">BuildingBlock</ref> containing placeholder text which should be displayed when this structured document tag run contents are empty, the associated mapped XML element is empty as specified via the <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1abd7c32c028b9f9ce977446950e9b1104" kindref="member">XmlMapping</ref> element or the <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a59bf36640027c93e16a62dc540a493a4" kindref="member">IsShowingPlaceholderText</ref> element is true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="413" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ae438ed75c97117e1c50a4bd10f85327c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_PlaceholderName</definition>
        <argsstring>() override</argsstring>
        <name>get_PlaceholderName</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_PlaceholderName</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1ab9fa61541f7a536def5472a837ef7334">get_PlaceholderName</reimplements>
        <briefdescription>
<para>Gets or sets Name of the <ref refid="class_aspose_1_1_words_1_1_building_blocks_1_1_building_block" kindref="compound">BuildingBlock</ref> containing placeholder text. BuildingBlock with this name <ref refid="class_aspose_1_1_words_1_1_building_blocks_1_1_building_block_1a9702f5e51bb180101ef9bf72cac5e3f7" kindref="member">Name</ref> has to be present in the <ref refid="class_aspose_1_1_words_1_1_document_1a752df20b10d4e733957abf7ab630bd21" kindref="member">GlossaryDocument</ref> otherwise <ref refid="" kindref="compound">InvalidOperationException</ref> will occur. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="448" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a231ab9742edd840d9a3f91ab02fbe13a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_end" kindref="compound">Aspose::Words::Markup::StructuredDocumentTagRangeEnd</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Markup::StructuredDocumentTagRangeEnd &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_RangeEnd</definition>
        <argsstring>()</argsstring>
        <name>get_RangeEnd</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_RangeEnd</qualifiedname>
        <briefdescription>
<para>Specifies end of range if the <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag" kindref="compound">StructuredDocumentTag</ref> is a ranged structured document tag. Otherwise returns null. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="590" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a6ba5e665d0f2adcedf41f2adc6fe0a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7" kindref="member">Aspose::Words::Markup::SdtType</ref></type>
        <definition>Aspose::Words::Markup::SdtType Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_SdtType</definition>
        <argsstring>() override</argsstring>
        <name>get_SdtType</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_SdtType</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1afe955c31f3256411c0d7875d5267c619">get_SdtType</reimplements>
        <briefdescription>
<para>Gets type of this structured document tag. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="215" column="39"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a742fe0fb2c995161742b676e52c5a21f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Tag</definition>
        <argsstring>() const override</argsstring>
        <name>get_Tag</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Tag</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a8c37418724ab251a6fdf088bb9abb56f">get_Tag</reimplements>
        <briefdescription>
<para>Specifies a tag associated with the current structured document tag node. Can not be null. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="485" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a904777468048316bbfe406bf49a7a794" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Title</definition>
        <argsstring>() const override</argsstring>
        <name>get_Title</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Title</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a558d2b81b37cc048a18d3281f65b01d8">get_Title</reimplements>
        <briefdescription>
<para>Specifies the friendly name associated with this structured document tag. Can not be null. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="522" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a2fcd9279e66eafb3744d30cbdb8d09b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_WordOpenXML</definition>
        <argsstring>() override</argsstring>
        <name>get_WordOpenXML</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_WordOpenXML</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a73b0bf7b03751c8a6c8bdb3338fd059d">get_WordOpenXML</reimplements>
        <briefdescription>
<para>Gets a string that represents the XML contained within the node in the <ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a2b7085a73e76e581d28543a39fb2b981" kindref="member">FlatOpc</ref> format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="528" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1abd7c32c028b9f9ce977446950e9b1104" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_markup_1_1_xml_mapping" kindref="compound">Aspose::Words::Markup::XmlMapping</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Markup::XmlMapping &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_XmlMapping</definition>
        <argsstring>() override</argsstring>
        <name>get_XmlMapping</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_XmlMapping</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1ae409cb79e13ef5c53000fb1eab7ab663">get_XmlMapping</reimplements>
        <briefdescription>
<para>Gets an object that represents the mapping of this structured document tag range to XML data in a custom XML part of the current document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set XML mappings for the range start of a structured document tag. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Construct<sp/>an<sp/>XML<sp/>part<sp/>that<sp/>contains<sp/>text<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>document&apos;s<sp/>CustomXmlPart<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>xmlPartId<sp/>=<sp/><ref refid="class/system.guid/_1a33465ce6eef642b741d2307309e36202" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Guid::NewGuid</ref>().ToString(u</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>xmlPartContent<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;root&gt;&lt;text&gt;Text<sp/>element<sp/>#1&lt;/text&gt;&lt;text&gt;Text<sp/>element<sp/>#2&lt;/text&gt;&lt;/root&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CustomXmlPart&gt;<sp/>xmlPart<sp/>=<sp/>doc-&gt;get_CustomXmlParts()-&gt;Add(xmlPartId,<sp/>xmlPartContent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;&lt;root&gt;&lt;text&gt;Text<sp/>element<sp/>#1&lt;/text&gt;&lt;text&gt;Text<sp/>element<sp/>#2&lt;/text&gt;&lt;/root&gt;&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.text.encoding/_1a95985d0da959aa35a89574de5fb4bfd8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Text::Encoding::get_UTF8</ref>()-&gt;GetString(xmlPart-&gt;get_Data()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>structured<sp/>document<sp/>tag<sp/>that<sp/>will<sp/>display<sp/>the<sp/>contents<sp/>of<sp/>our<sp/>CustomXmlPart<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sdtRangeStart<sp/>=<sp/>System::DynamicCast&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>set<sp/>a<sp/>mapping<sp/>for<sp/>our<sp/>structured<sp/>document<sp/>tag,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>only<sp/>display<sp/>a<sp/>portion<sp/>of<sp/>the<sp/>CustomXmlPart<sp/>that<sp/>the<sp/>XPath<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>XPath<sp/>will<sp/>point<sp/>to<sp/>the<sp/>contents<sp/>second<sp/>&quot;&lt;text&gt;&quot;<sp/>element<sp/>of<sp/>the<sp/>first<sp/>&quot;&lt;root&gt;&quot;<sp/>element<sp/>of<sp/>our<sp/>CustomXmlPart.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">sdtRangeStart-&gt;get_XmlMapping()-&gt;SetMapping(xmlPart,<sp/>u</highlight><highlight class="stringliteral">&quot;/root[1]/text[2]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag.StructuredDocumentTagRangeStartXmlMapping.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="556" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1abe2ed4773a3e66c8e38f6b71ce2bef7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node_collection" kindref="compound">Aspose::Words::NodeCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::NodeCollection &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::GetChildNodes</definition>
        <argsstring>(Aspose::Words::NodeType nodeType, bool isDeep)</argsstring>
        <name>GetChildNodes</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::GetChildNodes</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379" kindref="member">Aspose::Words::NodeType</ref></type>
          <declname>nodeType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isDeep</declname>
        </param>
        <briefdescription>
<para>Returns a live collection of child nodes that match the specified types. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get child nodes of <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start" kindref="compound">StructuredDocumentTagRangeStart</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Child<sp/>nodes<sp/>count:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tag-&gt;get_ChildNodes()-&gt;get_Count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>node<sp/>:<sp/>System::IterateOver(tag-&gt;get_ChildNodes()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Child<sp/>node<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>node-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>node<sp/>:<sp/>System::IterateOver(tag-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Child<sp/>node<sp/>text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="681" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a2cdaa4d08ecde3524f2e9e7c37f4243c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.collections.generic.i_enumerator/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::IEnumerator</ref>&lt; <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt; &gt; &gt;</type>
        <definition>System::SharedPtr&lt; System::Collections::Generic::IEnumerator&lt; System::SharedPtr&lt; Aspose::Words::Node &gt; &gt; &gt; Aspose::Words::Markup::StructuredDocumentTagRangeStart::GetEnumerator</definition>
        <argsstring>() override</argsstring>
        <name>GetEnumerator</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::GetEnumerator</qualifiedname>
        <briefdescription>
<para>Provides support for the for each style iteration over the child nodes of this node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="685" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a677685f0f62f1ba6c4619011277efa2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Markup::StructuredDocumentTagRangeStart::RemoveAllChildren</definition>
        <argsstring>()</argsstring>
        <name>RemoveAllChildren</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::RemoveAllChildren</qualifiedname>
        <briefdescription>
<para>Removes all the nodes between this range start node and the range end node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create/remove structured document tag and its content. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SdtRangeExtendedMethods()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag<sp/>element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;StructuredDocumentTagRangeStart&gt;<sp/>rangeStart;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InsertStructuredDocumentTagRanges(doc,<sp/>rangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>ranged<sp/>structured<sp/>document<sp/>tag,<sp/>but<sp/>keeps<sp/>content<sp/>inside.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart-&gt;RemoveSelfOnly();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart<sp/>=<sp/>System::DynamicCast&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>rangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEnd<sp/>=<sp/>System::DynamicCast&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>rangeEnd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag<sp/>element&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InsertStructuredDocumentTagRanges(doc,<sp/>rangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>paragraphNode<sp/>=<sp/>rangeStart-&gt;LINQ_LastOrDefault();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag<sp/>element&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paragraphNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>?<sp/>System::ObjectExt::Box&lt;String&gt;(paragraphNode-&gt;GetText().Trim())<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>ranged<sp/>structured<sp/>document<sp/>tag<sp/>and<sp/>content<sp/>inside.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>paragraphNode<sp/>=<sp/>rangeStart-&gt;LINQ_LastOrDefault();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>paragraphNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>?<sp/>System::ObjectExt::Box&lt;String&gt;(paragraphNode-&gt;GetText())<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InsertStructuredDocumentTagRanges(SharedPtr&lt;Document&gt;<sp/>doc,<sp/>SharedPtr&lt;StructuredDocumentTagRangeStart&gt;&amp;<sp/>rangeStart)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart<sp/>=<sp/>MakeObject&lt;StructuredDocumentTagRangeStart&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7ab7ebbf7f254ef646928dd58f62383a85" kindref="member" tooltip="The SDT represents a plain text box when displayed in the document.">SdtType::PlainText</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEnd<sp/>=<sp/>MakeObject&lt;StructuredDocumentTagRangeEnd&gt;(doc,<sp/>rangeStart-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;InsertBefore(rangeStart,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_LastSection()-&gt;get_Body()-&gt;InsertAfter(rangeEnd,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="743" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1adda90fb9f40c70778ba750af00f9dd5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Markup::StructuredDocumentTagRangeStart::RemoveSelfOnly</definition>
        <argsstring>()</argsstring>
        <name>RemoveSelfOnly</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::RemoveSelfOnly</qualifiedname>
        <briefdescription>
<para>Removes this range start and appropriate range end nodes of the structured document tag, but keeps its content inside the document tree. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create/remove structured document tag and its content. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SdtRangeExtendedMethods()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag<sp/>element&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;StructuredDocumentTagRangeStart&gt;<sp/>rangeStart;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InsertStructuredDocumentTagRanges(doc,<sp/>rangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>ranged<sp/>structured<sp/>document<sp/>tag,<sp/>but<sp/>keeps<sp/>content<sp/>inside.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart-&gt;RemoveSelfOnly();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart<sp/>=<sp/>System::DynamicCast&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>rangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEnd<sp/>=<sp/>System::DynamicCast&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>rangeEnd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag<sp/>element&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InsertStructuredDocumentTagRanges(doc,<sp/>rangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>paragraphNode<sp/>=<sp/>rangeStart-&gt;LINQ_LastOrDefault();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag<sp/>element&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paragraphNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>?<sp/>System::ObjectExt::Box&lt;String&gt;(paragraphNode-&gt;GetText().Trim())<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removes<sp/>ranged<sp/>structured<sp/>document<sp/>tag<sp/>and<sp/>content<sp/>inside.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>paragraphNode<sp/>=<sp/>rangeStart-&gt;LINQ_LastOrDefault();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>paragraphNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>?<sp/>System::ObjectExt::Box&lt;String&gt;(paragraphNode-&gt;GetText())<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InsertStructuredDocumentTagRanges(SharedPtr&lt;Document&gt;<sp/>doc,<sp/>SharedPtr&lt;StructuredDocumentTagRangeStart&gt;&amp;<sp/>rangeStart)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rangeStart<sp/>=<sp/>MakeObject&lt;StructuredDocumentTagRangeStart&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_markup_1a857aa9a59398c85d6ad07f20c4123ae7ab7ebbf7f254ef646928dd58f62383a85" kindref="member" tooltip="The SDT represents a plain text box when displayed in the document.">SdtType::PlainText</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEnd<sp/>=<sp/>MakeObject&lt;StructuredDocumentTagRangeEnd&gt;(doc,<sp/>rangeStart-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;InsertBefore(rangeStart,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_LastSection()-&gt;get_Body()-&gt;InsertAfter(rangeEnd,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="795" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a8c2d1eed7a871866bcc8da3ae565afa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_Color</definition>
        <argsstring>(System::Drawing::Color value) override</argsstring>
        <name>set_Color</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_Color</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a48a8e1ab33b12532cb35a185f0c2d192">set_Color</reimplements>
        <param>
          <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a8381444cdeba08d60e9a34ae97da30ca" kindref="member">Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Color</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="251" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a7cb803d4ac20897a10eb35321c05bb20" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_IsShowingPlaceholderText</definition>
        <argsstring>(bool value) override</argsstring>
        <name>set_IsShowingPlaceholderText</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_IsShowingPlaceholderText</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a96dc2a8d22546487017f32190823079a">set_IsShowingPlaceholderText</reimplements>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a59bf36640027c93e16a62dc540a493a4" kindref="member">Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_IsShowingPlaceholderText</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="408" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ad1577240b9b82862b61805e1d849d5df" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_LockContentControl</definition>
        <argsstring>(bool value) override</argsstring>
        <name>set_LockContentControl</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_LockContentControl</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1af1475e1ab6bd64db7aadcd980bcc4695">set_LockContentControl</reimplements>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a8e01dae38211f9ed4ca6d83cb97eb042" kindref="member">Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_LockContentControl</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="334" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a6bafd24c0333ba9080ce222c4012aae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_LockContents</definition>
        <argsstring>(bool value) override</argsstring>
        <name>set_LockContents</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_LockContents</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a79775afdafb32dc6d3551460f4032be3">set_LockContents</reimplements>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aae14a4e0cef8886a2bcb0ab14b3190ba" kindref="member">Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_LockContents</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="370" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a39b7e7ed0b0849eb7f62bbff6a3fadf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_PlaceholderName</definition>
        <argsstring>(System::String value) override</argsstring>
        <name>set_PlaceholderName</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_PlaceholderName</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1a4f8da9ded9231b64ba38e5a2b09f3ba2">set_PlaceholderName</reimplements>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ae438ed75c97117e1c50a4bd10f85327c" kindref="member">Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_PlaceholderName</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="451" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a7a9a5d52feafb25753acef0ee760c94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_Tag</definition>
        <argsstring>(System::String value) override</argsstring>
        <name>set_Tag</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_Tag</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1addbcf89eadc671acb287459b37b91e76">set_Tag</reimplements>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a742fe0fb2c995161742b676e52c5a21f" kindref="member">Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Tag</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="488" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ad9a6665496abdc2a209e7ebf3589d797" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_Title</definition>
        <argsstring>(System::String value) override</argsstring>
        <name>set_Title</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::set_Title</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag_1afe8d3be2b883b74bdbffaed1127bd4d9">set_Title</reimplements>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a904777468048316bbfe406bf49a7a794" kindref="member">Aspose::Words::Markup::StructuredDocumentTagRangeStart::get_Title</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="525" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ac839fe9aa363afb221272eb7af14ccf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Aspose::Words::Markup::StructuredDocumentTagRangeStart::SetTemplateWeakPtr</definition>
        <argsstring>(uint32_t argument) override</argsstring>
        <name>SetTemplateWeakPtr</name>
        <qualifiedname>Aspose::Words::Markup::StructuredDocumentTagRangeStart::SetTemplateWeakPtr</qualifiedname>
        <reimplements refid="class/system.object/_1af9b1be876f4ff5a0717aec22a79b98c3">SetTemplateWeakPtr</reimplements>
        <param>
          <type>uint32_t</type>
          <declname>argument</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="796" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a start of <bold>ranged</bold> structured document tag which accepts multi-sections content. See also <ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_end" kindref="compound">StructuredDocumentTagRangeEnd</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the properties of multi-section structured document tags. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Multi-section<sp/>structured<sp/>document<sp/>tags.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeStartTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeStart&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a09b0876d6e390af48f5dc77052fd2380" kindref="member" tooltip="A start of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeStart</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rangeEndTag<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;StructuredDocumentTagRangeEnd&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a7fe740404365ef2376a2085ba839f9ba" kindref="member" tooltip="A end of ranged structured document tag which accepts multi-sections content.">NodeType::StructuredDocumentTagRangeEnd</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeStart<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Title:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Title()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|PlaceholderName:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_PlaceholderName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|IsShowingPlaceholderText:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_IsShowingPlaceholderText())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContentControl:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContentControl())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|LockContents:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_LockContents())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|Level:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_Level())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|RangeEnd:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_RangeEnd()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Color:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Color().ToArgb()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|SdtType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeStartTag-&gt;get_SdtType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Tag:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeStartTag-&gt;get_Tag()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StructuredDocumentTagRangeEnd<sp/>values:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t|Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeEndTag-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t|NodeType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>rangeEndTag-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>Aspose::Words::Markup::IStructuredDocumentTag</label>
        <link refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Aspose::Words::Markup::StructuredDocumentTagRangeStart</label>
        <link refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::Node</label>
        <link refid="class_aspose_1_1_words_1_1_node"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Node &gt; &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>Aspose::Words::Markup::IStructuredDocumentTag</label>
        <link refid="class_aspose_1_1_words_1_1_markup_1_1_i_structured_document_tag"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Aspose::Words::Markup::StructuredDocumentTagRangeStart</label>
        <link refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::Node</label>
        <link refid="class_aspose_1_1_words_1_1_node"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Node &gt; &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" line="104" column="1" bodyfile="Aspose.Words.Cpp/Markup/StructuredDocumentTagRangeStart.h" bodystart="105" bodyend="814"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ab468f2b66f938d01417aff953e5d8749" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>Accept</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a80e92c15d3184264c00ca097ecb7e149" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>AppendChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1add1b746c6ba0fdf15c244a4aa679ee84" prot="private" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a27e25e784752d712905b29be94ee0517" prot="private" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>BaseType1</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a909f1a688790a910b42cc8c19884ff15" prot="private" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>BaseType2</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aeeff79336eef852b91b642fe63f448d6" prot="private" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a81dedd9b241b09760112b5e5068f1daa" prot="public" virt="non-virtual" ambiguityscope="Aspose::Words::Node::"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aa9ce72906a258acc65991375779fe6c0" prot="private" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>CppMemberwiseClone</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a55c4817ae754c008af870869b557ff8e" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_ChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a8381444cdeba08d60e9a34ae97da30ca" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_Color</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a941120df17372b25f9a7127a9d9b3816" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_CustomNodeId</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a2a69f84e3ccd323199299c999ab32d46" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a5d3bc9dafa4d37c93ca525ec9ffa3752" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_Id</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a670ce0649c755bec895c34d7d7b4e46b" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_IsComposite</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a59bf36640027c93e16a62dc540a493a4" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_IsShowingPlaceholderText</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a9f894a1a3a4f4a5d3cfbce8b598dd307" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_LastChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aab95209962eb8fd363293256c466de06" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_Level</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a8e01dae38211f9ed4ca6d83cb97eb042" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_LockContentControl</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aae14a4e0cef8886a2bcb0ab14b3190ba" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_LockContents</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a938ff32d060619d89ecefdf57984abf8" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_NextSibling</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ae6e2102696085b39f7c7aa534eccb4b5" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_NodeType</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ab9e608488885c65a2a165dea6645d15e" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_ParentNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aae793c1b83fc7b396c2863b6b5cc243e" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_Placeholder</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ae438ed75c97117e1c50a4bd10f85327c" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_PlaceholderName</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a6013fe75e5859c54d12a87f9b97fa7f3" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_PreviousSibling</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0f8077bf80409ba331148095b95bc3e5" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_Range</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a231ab9742edd840d9a3f91ab02fbe13a" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_RangeEnd</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a6ba5e665d0f2adcedf41f2adc6fe0a9b" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_SdtType</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a742fe0fb2c995161742b676e52c5a21f" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_Tag</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a904777468048316bbfe406bf49a7a794" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_Title</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a2fcd9279e66eafb3744d30cbdb8d09b8" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_WordOpenXML</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1abd7c32c028b9f9ce977446950e9b1104" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>get_XmlMapping</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a951706cfa681573e79a56204a2029e9e" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>GetAncestor</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ae19991f4d5aa7ccb60ce6d7207495f1c" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>GetAncestorOf</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1abe2ed4773a3e66c8e38f6b71ce2bef7a" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>GetChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a2cdaa4d08ecde3524f2e9e7c37f4243c" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>GetEnumerator</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a8fa0ad395d10ff21e0ac404c0e965007" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>GetText</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1abc383247290915d279dff624ffc0e2f9" prot="private" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>IsRanged</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a04861a07ffb2db7284ea2683b29e22fa" prot="private" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aff689313b153e37cbd2c42c3571f0172" prot="private" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a4f6979e06a5914aeb37a9cb8448658a6" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>NextPreOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>NodeTypeToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af40f9573daf950d978d211d3e75c6a95" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>PreviousPreOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a75a9cc0fda5ec9c8aaa1c4910af8f28c" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>Remove</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a677685f0f62f1ba6c4619011277efa2e" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>RemoveAllChildren</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1adda90fb9f40c70778ba750af00f9dd5e" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>RemoveSelfOnly</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1af13a6f7dbd844566d31983a9bde5a2e1" prot="private" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a8c2d1eed7a871866bcc8da3ae565afa2" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>set_Color</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0d412cc05de7836acb92332e55eea267" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>set_CustomNodeId</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a7cb803d4ac20897a10eb35321c05bb20" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>set_IsShowingPlaceholderText</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ad1577240b9b82862b61805e1d849d5df" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>set_LockContentControl</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a6bafd24c0333ba9080ce222c4012aae3" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>set_LockContents</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a39b7e7ed0b0849eb7f62bbff6a3fadf7" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>set_PlaceholderName</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a7a9a5d52feafb25753acef0ee760c94e" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>set_Tag</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ad9a6665496abdc2a209e7ebf3589d797" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>set_Title</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ac839fe9aa363afb221272eb7af14ccf1" prot="public" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>SetTemplateWeakPtr</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1af442715880d7a5eef13ef326b6f51e5f" prot="private" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>StructuredDocumentTagNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a92158a8a733cece8d93528992d2495d9" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>StructuredDocumentTagRangeStart</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1a98c875b3726a08a3d48e05d3be52810c" prot="private" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1adc445c827ff8c63737dbd1c08cac3910" prot="private" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af7aa71ab5f185ee2463406dab7727595" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>ToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ad18f64c5586b84a071957824b24426a2" prot="public" virt="non-virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>ToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1af631a451508e983a9c49625a25253530" prot="private" virt="virtual"><scope>Aspose::Words::Markup::StructuredDocumentTagRangeStart</scope><name>~StructuredDocumentTagRangeStart</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
