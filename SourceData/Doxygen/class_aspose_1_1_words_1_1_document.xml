<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_document" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::Document</compoundname>
    <basecompoundref refid="class_aspose_1_1_words_1_1_document_base" prot="public" virt="non-virtual">Aspose::Words::DocumentBase</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::ISectionAttrSource</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IWatermarkProvider</basecompoundref>
    <includes refid="_document_8h" local="no">Aspose.Words.Cpp/Document.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_document_1ac1c0943a733a99df6b380a377647c908" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_document_base" kindref="compound">Aspose::Words::DocumentBase</ref></type>
        <definition>typedef Aspose::Words::DocumentBase Aspose::Words::Document::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Document::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="253" column="41" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_document_1a6dc5524c6ba99106230cc27cc652b9d6" prot="private" static="no">
        <type>Aspose::Words::ISectionAttrSource</type>
        <definition>typedef Aspose::Words::ISectionAttrSource Aspose::Words::Document::BaseType1</definition>
        <argsstring></argsstring>
        <name>BaseType1</name>
        <qualifiedname>Aspose::Words::Document::BaseType1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="254" column="47" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_document_1af3d3ba8dc31e7abcd87df7b06977ae16" prot="private" static="no">
        <type>Aspose::Words::IWatermarkProvider</type>
        <definition>typedef Aspose::Words::IWatermarkProvider Aspose::Words::Document::BaseType2</definition>
        <argsstring></argsstring>
        <name>BaseType2</name>
        <qualifiedname>Aspose::Words::Document::BaseType2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="255" column="47" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_document_1af559cfbcfd39027db279ee3c9d74e54f" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Document</ref></type>
        <definition>typedef Document Aspose::Words::Document::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Document::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="252" column="22" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_document_1a93fd65fccde2f954ac96a90dd28e9ae4" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_base" kindref="compound">BaseType</ref>, BaseType1, BaseType2 &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType, BaseType1, BaseType2&gt; Aspose::Words::Document::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Document::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="257" column="37" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1ad6c3fbf3d49058cf443eaa8632bef657" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 8, 8, 8, 8 &gt;::type</type>
        <definition>__TypeStub&lt;8,8,8,8&gt;::type Aspose::Words::Document::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Document::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4772" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1ae2000d17ded10e58c00c6273891ebba1" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Document::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4790" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a403a9c3c218261faf03d2f13617804b7" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField10</definition>
        <argsstring></argsstring>
        <name>mField10</name>
        <qualifiedname>Aspose::Words::Document::mField10</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4799" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4799" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1aeb7c610ccd794c9db1cca5c4ed3fdc25" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField11</definition>
        <argsstring></argsstring>
        <name>mField11</name>
        <qualifiedname>Aspose::Words::Document::mField11</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4800" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4800" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a1fc7e75179ef4022b4f7522085901c22" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField12</definition>
        <argsstring></argsstring>
        <name>mField12</name>
        <qualifiedname>Aspose::Words::Document::mField12</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4801" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4801" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1afddc7ace73328277888808c58747088f" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField13</definition>
        <argsstring></argsstring>
        <name>mField13</name>
        <qualifiedname>Aspose::Words::Document::mField13</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4802" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1ae319fcd829b2a436e5b9a5a410fb9716" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField14</definition>
        <argsstring></argsstring>
        <name>mField14</name>
        <qualifiedname>Aspose::Words::Document::mField14</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4803" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a073a0a92d3367cc5d4bb15778c314c00" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Document::mField15</definition>
        <argsstring></argsstring>
        <name>mField15</name>
        <qualifiedname>Aspose::Words::Document::mField15</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4804" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1aec43fd60b686b0393b87510eaecda45b" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField16</definition>
        <argsstring></argsstring>
        <name>mField16</name>
        <qualifiedname>Aspose::Words::Document::mField16</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4805" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4805" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a4f47f4e45a65dcccf41f1701dc5b4423" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Document::mField17</definition>
        <argsstring></argsstring>
        <name>mField17</name>
        <qualifiedname>Aspose::Words::Document::mField17</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4806" column="20" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a0728fd00528e35dfd2eb180f965e7aec" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Document::mField18</definition>
        <argsstring></argsstring>
        <name>mField18</name>
        <qualifiedname>Aspose::Words::Document::mField18</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4807" column="20" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4807" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a02c37c8c8ad36d95e3ae367eea523702" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Document::mField19</definition>
        <argsstring></argsstring>
        <name>mField19</name>
        <qualifiedname>Aspose::Words::Document::mField19</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4808" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a86fe38d9c932a7ab76e3aa2b1e5392fa" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::Document::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4791" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4791" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a80d2d720921ff40c554c2f58d1b5d4d9" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Document::mField20</definition>
        <argsstring></argsstring>
        <name>mField20</name>
        <qualifiedname>Aspose::Words::Document::mField20</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4809" column="20" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1af5e3e7ea13d301a0bd68e5bf2a3afcea" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField21</definition>
        <argsstring></argsstring>
        <name>mField21</name>
        <qualifiedname>Aspose::Words::Document::mField21</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4810" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1afc485540f6c682c8064832c9c1a02340" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField22</definition>
        <argsstring></argsstring>
        <name>mField22</name>
        <qualifiedname>Aspose::Words::Document::mField22</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4811" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1aea0a5741bf56102f2772bed99162a7da" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField23</definition>
        <argsstring></argsstring>
        <name>mField23</name>
        <qualifiedname>Aspose::Words::Document::mField23</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4812" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a61a95a8cca5b6c2f097372d52863c41a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField24</definition>
        <argsstring></argsstring>
        <name>mField24</name>
        <qualifiedname>Aspose::Words::Document::mField24</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4813" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a9cb57e3caf1e78cc86ce26e318d95299" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField25</definition>
        <argsstring></argsstring>
        <name>mField25</name>
        <qualifiedname>Aspose::Words::Document::mField25</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4814" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4814" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a8dc9e6fa45ebf23337494f89e7c6539c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField26</definition>
        <argsstring></argsstring>
        <name>mField26</name>
        <qualifiedname>Aspose::Words::Document::mField26</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4815" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4815" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a5b869f27bbce01696ae6955166694ab0" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField27</definition>
        <argsstring></argsstring>
        <name>mField27</name>
        <qualifiedname>Aspose::Words::Document::mField27</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4816" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a7571707848904e94dcca475b609d8e7a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField28</definition>
        <argsstring></argsstring>
        <name>mField28</name>
        <qualifiedname>Aspose::Words::Document::mField28</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4817" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1afebe9bc60ea7b819a370dcbe635a6a2d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField29</definition>
        <argsstring></argsstring>
        <name>mField29</name>
        <qualifiedname>Aspose::Words::Document::mField29</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4818" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a8afa3d1b8aba5ef834133e8f77843f67" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField3</definition>
        <argsstring></argsstring>
        <name>mField3</name>
        <qualifiedname>Aspose::Words::Document::mField3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4792" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a3fa116762431fe8868dd403eb571efe2" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField30</definition>
        <argsstring></argsstring>
        <name>mField30</name>
        <qualifiedname>Aspose::Words::Document::mField30</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4819" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a663f778a99115889ff59d3a177cd485b" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField31</definition>
        <argsstring></argsstring>
        <name>mField31</name>
        <qualifiedname>Aspose::Words::Document::mField31</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4820" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a5f42c6aaea5cb03073ade82b1aea9210" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField32</definition>
        <argsstring></argsstring>
        <name>mField32</name>
        <qualifiedname>Aspose::Words::Document::mField32</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4821" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4821" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a7854fe3903338792b11cb8b932abd1a6" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Document::mField33</definition>
        <argsstring></argsstring>
        <name>mField33</name>
        <qualifiedname>Aspose::Words::Document::mField33</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4822" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1aef2e082d512caf2e2b3ca6cb1c947a6c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField34</definition>
        <argsstring></argsstring>
        <name>mField34</name>
        <qualifiedname>Aspose::Words::Document::mField34</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4823" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4823" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a7366bef72b84a9b9d25c10fe967a53da" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField35</definition>
        <argsstring></argsstring>
        <name>mField35</name>
        <qualifiedname>Aspose::Words::Document::mField35</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4824" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4824" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a966050b199c2249d4a610e17b163a9ad" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField36</definition>
        <argsstring></argsstring>
        <name>mField36</name>
        <qualifiedname>Aspose::Words::Document::mField36</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4825" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4825" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1adf106948356d2b84ec035986127d723e" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 1, 1, 1, 1 &gt;::type</type>
        <definition>__TypeStub&lt;1,1,1,1&gt;::type Aspose::Words::Document::mField37</definition>
        <argsstring></argsstring>
        <name>mField37</name>
        <qualifiedname>Aspose::Words::Document::mField37</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4826" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4826" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a222a3f495102ba68657eecb4c79ecebe" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Document::mField38</definition>
        <argsstring></argsstring>
        <name>mField38</name>
        <qualifiedname>Aspose::Words::Document::mField38</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4827" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4827" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1acde5655cf71058f0ba545732d88520c9" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Document::mField39</definition>
        <argsstring></argsstring>
        <name>mField39</name>
        <qualifiedname>Aspose::Words::Document::mField39</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4828" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a80ad4433ed4e8536b967936175242b86" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField4</definition>
        <argsstring></argsstring>
        <name>mField4</name>
        <qualifiedname>Aspose::Words::Document::mField4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4793" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a57be7b52b9b9707ee687600be916da6c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField40</definition>
        <argsstring></argsstring>
        <name>mField40</name>
        <qualifiedname>Aspose::Words::Document::mField40</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4829" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a53979311bc90039fc5afac4322702150" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.date_time/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime</ref></type>
        <definition>System::DateTime Aspose::Words::Document::mField41</definition>
        <argsstring></argsstring>
        <name>mField41</name>
        <qualifiedname>Aspose::Words::Document::mField41</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4830" column="22" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a5934c902181378dc9017571238991091" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField42</definition>
        <argsstring></argsstring>
        <name>mField42</name>
        <qualifiedname>Aspose::Words::Document::mField42</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4831" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4831" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1ab7491b6970fc095e1b4dc10f0023dba0" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField43</definition>
        <argsstring></argsstring>
        <name>mField43</name>
        <qualifiedname>Aspose::Words::Document::mField43</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4832" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1ab1f7b4d4e2ff25fbcc630474fcb01055" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Document::mField44</definition>
        <argsstring></argsstring>
        <name>mField44</name>
        <qualifiedname>Aspose::Words::Document::mField44</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4833" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a5f20fbbdc6426a9387a824343242cf59" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField45</definition>
        <argsstring></argsstring>
        <name>mField45</name>
        <qualifiedname>Aspose::Words::Document::mField45</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4834" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a3d547fb49bc9212a271757b41e211921" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField46</definition>
        <argsstring></argsstring>
        <name>mField46</name>
        <qualifiedname>Aspose::Words::Document::mField46</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4835" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a94cf425a8a256322cfc9a226c35e911d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField47</definition>
        <argsstring></argsstring>
        <name>mField47</name>
        <qualifiedname>Aspose::Words::Document::mField47</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4836" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a4613b034d290939f8aebd8582806063e" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField48</definition>
        <argsstring></argsstring>
        <name>mField48</name>
        <qualifiedname>Aspose::Words::Document::mField48</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4837" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1ada83b406e12bfec87374ed04f94431ba" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField49</definition>
        <argsstring></argsstring>
        <name>mField49</name>
        <qualifiedname>Aspose::Words::Document::mField49</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4838" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1afce20b5865ac42bf5decb868301840e5" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField5</definition>
        <argsstring></argsstring>
        <name>mField5</name>
        <qualifiedname>Aspose::Words::Document::mField5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4794" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a0612c82373c50af0d283ed6efd5529f9" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField6</definition>
        <argsstring></argsstring>
        <name>mField6</name>
        <qualifiedname>Aspose::Words::Document::mField6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4795" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a36baaf61abffaace8d0cf189d52bb4a6" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField7</definition>
        <argsstring></argsstring>
        <name>mField7</name>
        <qualifiedname>Aspose::Words::Document::mField7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4796" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1a017ee8122877d599060ae5f023fd8d03" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField8</definition>
        <argsstring></argsstring>
        <name>mField8</name>
        <qualifiedname>Aspose::Words::Document::mField8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4797" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_1ad01a7b44f8c5ae5e8def766810c11610" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Document::mField9</definition>
        <argsstring></argsstring>
        <name>mField9</name>
        <qualifiedname>Aspose::Words::Document::mField9</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4798" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4798" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a30f90f6fd9a4f71d25302518ef379c86" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::Document::~Document</definition>
        <argsstring>()</argsstring>
        <name>~Document</name>
        <qualifiedname>Aspose::Words::Document::~Document</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4786" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ac9763bb68caeca4f51ce24f73d7140a1" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member">Aspose::Words::VisitorAction</ref></type>
        <definition>Aspose::Words::VisitorAction Aspose::Words::Document::AcceptEnd</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::DocumentVisitor &gt;) override</argsstring>
        <name>AcceptEnd</name>
        <qualifiedname>Aspose::Words::Document::AcceptEnd</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_composite_node_1acfce958aecccd97d02b9ce640c71adb0">AcceptEnd</reimplements>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">Aspose::Words::DocumentVisitor</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4778" column="37"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ad6f3daaa9c3bfa29a5f00304877a8da7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member">Aspose::Words::VisitorAction</ref></type>
        <definition>Aspose::Words::VisitorAction Aspose::Words::Document::AcceptStart</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::DocumentVisitor &gt;) override</argsstring>
        <name>AcceptStart</name>
        <qualifiedname>Aspose::Words::Document::AcceptStart</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_composite_node_1a4161179423c4ab1bd74fe8825dc06e2f">AcceptStart</reimplements>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">Aspose::Words::DocumentVisitor</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4777" column="37"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a4d74ddb488f09ec7cfebed4116fd7d84" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::Add</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt;) override</argsstring>
        <name>Add</name>
        <qualifiedname>Aspose::Words::Document::Add</qualifiedname>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4840" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ac87413341e0f60289ca2c07c62ccb5e7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::CanInsert</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::Node &gt;) override</argsstring>
        <name>CanInsert</name>
        <qualifiedname>Aspose::Words::Document::CanInsert</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_composite_node_1a06d62fddfb918b33b307b9201c7951aa">CanInsert</reimplements>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4781" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab986ab248ec51590b122a8e2212bb0c4" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Document::Clone</definition>
        <argsstring>(bool, System::SharedPtr&lt; Aspose::Words::INodeCloningListener &gt;) override</argsstring>
        <name>Clone</name>
        <qualifiedname>Aspose::Words::Document::Clone</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_composite_node_1ae90ecec13614a52c3ab6fe645fb88807">Clone</reimplements>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::INodeCloningListener &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4776" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a212d4bb489f785fabaad35fc3209ef04" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">ThisType</ref> *</type>
        <definition>ThisType * Aspose::Words::Document::CppMemberwiseClone</definition>
        <argsstring>() const override</argsstring>
        <name>CppMemberwiseClone</name>
        <qualifiedname>Aspose::Words::Document::CppMemberwiseClone</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_node_1a9358fb4208d077e8411fdf0d4e8553e5">CppMemberwiseClone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4848" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a653744bcaabbbf51e3f8a101dcd9b054" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::Document::Get</definition>
        <argsstring>() override</argsstring>
        <name>Get</name>
        <qualifiedname>Aspose::Words::Document::Get</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4841" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a4dca8f888715dcee7900b5a7b824633f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::Fonts::DocumentFontProvider &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fonts::DocumentFontProvider &gt; Aspose::Words::Document::get_FontProvider</definition>
        <argsstring>() override</argsstring>
        <name>get_FontProvider</name>
        <qualifiedname>Aspose::Words::Document::get_FontProvider</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_document_base_1aea991dcfd1d3808dde6913c0fffd7d6c">get_FontProvider</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4767" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a1248f8762f5a08362e859ee14f288b2f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_IsMoveRevisionsTracked</definition>
        <argsstring>() override</argsstring>
        <name>get_IsMoveRevisionsTracked</name>
        <qualifiedname>Aspose::Words::Document::get_IsMoveRevisionsTracked</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_document_base_1a97d0752e279529953a333f908cc79dd5">get_IsMoveRevisionsTracked</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4770" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ae2d0929768372defce5408c9b7f232a2" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_IsTrackRevisionsEnabled</definition>
        <argsstring>() override</argsstring>
        <name>get_IsTrackRevisionsEnabled</name>
        <qualifiedname>Aspose::Words::Document::get_IsTrackRevisionsEnabled</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_document_base_1a72429906d2d29bc89a9684699e750cdc">get_IsTrackRevisionsEnabled</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4769" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ae4bac0ca985ed43bf6d477e1093419ba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::Remove</definition>
        <argsstring>() override</argsstring>
        <name>Remove</name>
        <qualifiedname>Aspose::Words::Document::Remove</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4842" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a5100f5cbede8a2ce1cecb444ee78699b" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::ResumeTrackRevisions</definition>
        <argsstring>(Aspose::Words::SuspendedRevisionTypes) override</argsstring>
        <name>ResumeTrackRevisions</name>
        <qualifiedname>Aspose::Words::Document::ResumeTrackRevisions</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_document_base_1a6d368bcb7f009be8d4469fc282191ca1">ResumeTrackRevisions</reimplements>
        <param>
          <type>Aspose::Words::SuspendedRevisionTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4784" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aa3626f86fa256e8df3093e4659fab595" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Document::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Document::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="258" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a650b299ce55575764d81a15be16392d0" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::SuspendTrackRevisions</definition>
        <argsstring>(Aspose::Words::SuspendedRevisionTypes) override</argsstring>
        <name>SuspendTrackRevisions</name>
        <qualifiedname>Aspose::Words::Document::SuspendTrackRevisions</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_document_base_1a0d324f09e783785285676c0fd9a2f0a4">SuspendTrackRevisions</reimplements>
        <param>
          <type>Aspose::Words::SuspendedRevisionTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4783" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab5da7cae36658dfd65df8ab33f301e53" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Aspose::Words::Document::WriteDocToHttResponse</definition>
        <argsstring>(System::SharedPtr&lt; System::Web::HttpResponse &gt;, System::ArrayPtr&lt; uint8_t &gt;, int32_t, System::String, System::String)</argsstring>
        <name>WriteDocToHttResponse</name>
        <qualifiedname>Aspose::Words::Document::WriteDocToHttResponse</qualifiedname>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.web.http_response/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Web::HttpResponse</ref> &gt;</type>
        </param>
        <param>
          <type><ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt;</type>
        </param>
        <param>
          <type>int32_t</type>
        </param>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        </param>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4779" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a6eca964618aa7c205058fba5eb8e3906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Document::Document</definition>
        <argsstring>()</argsstring>
        <name>Document</name>
        <qualifiedname>Aspose::Words::Document::Document</qualifiedname>
        <briefdescription>
<para>Creates a blank Word document. </para>
        </briefdescription>
        <detaileddescription>
<para>The document paper size is Letter by default. If you want to change page setup, use <ref refid="class_aspose_1_1_words_1_1_section_1a9b1ebf69ef964d0328e20a78129531f4" kindref="member">Section.PageSetup</ref>.</para>
<para>After creation, you can use <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref> to add document content easily.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create and load documents. <programlisting><codeline><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>creating<sp/>a<sp/>Document<sp/>object<sp/>using<sp/>Aspose.Words.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Create<sp/>a<sp/>blank<sp/>document:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>New<sp/>Document<sp/>objects<sp/>by<sp/>default<sp/>come<sp/>with<sp/>the<sp/>minimal<sp/>set<sp/>of<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>required<sp/>to<sp/>begin<sp/>adding<sp/>content<sp/>such<sp/>as<sp/>text<sp/>and<sp/>shapes:<sp/>a<sp/>Section,<sp/>a<sp/>Body,<sp/>and<sp/>a<sp/>Paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Load<sp/>a<sp/>document<sp/>that<sp/>exists<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Loaded<sp/>documents<sp/>will<sp/>have<sp/>contents<sp/>that<sp/>we<sp/>can<sp/>access<sp/>and<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>operations<sp/>that<sp/>need<sp/>to<sp/>occur<sp/>during<sp/>loading,<sp/>such<sp/>as<sp/>using<sp/>a<sp/>password<sp/>to<sp/>decrypt<sp/>a<sp/>document,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>done<sp/>by<sp/>passing<sp/>a<sp/>LoadOptions<sp/>object<sp/>when<sp/>loading<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Encrypted.docx&quot;</highlight><highlight class="normal">,<sp/>MakeObject&lt;LoadOptions&gt;(u</highlight><highlight class="stringliteral">&quot;docPassword&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Test<sp/>encrypted<sp/>document.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetText().Trim());</highlight></codeline>
</programlisting></para>
<para>Shows how to format a run of text using its font property. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>run-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(36);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_HighlightColor(<ref refid="class/system.drawing.color/_1ab0895ee04ac7572b810a3c0f97544c55" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Yellow</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.CreateFormattedRun.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2454" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a01adcf205a17dd24e7589d2d0e7a1bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Document::Document</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream)</argsstring>
        <name>Document</name>
        <qualifiedname>Aspose::Words::Document::Document</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Opens an existing document from a stream. Automatically detects the file format. </para>
        </briefdescription>
        <detaileddescription>
<para>The document must be stored at the beginning of the stream. The stream must support random positioning.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream where to load the document from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a5f95c02b57c5a02d17215084f6a5beca" kindref="member">Aspose::Words::UnsupportedFileFormatException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document format is not recognized or not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a7049037a1789fffea26a5c985c45c880" kindref="member">Aspose::Words::FileCorruptedException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document appears to be corrupted and cannot be loaded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace/system/_1af2ac70ce5544cf54b67cc546c2dc19aa" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There is a problem with the document and it should be reported to Aspose.Words developers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::IO::IOException</parametername>
</parameternamelist>
<parameterdescription>
<para>There is an input/output exception. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a69d5ddc9f0a7b4c2dfd356817c3be538" kindref="member">Aspose::Words::IncorrectPasswordException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document is encrypted and requires a password to open, but you supplied an incorrect password. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::ArgumentNullException</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream cannot be null. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::NotSupportedException</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream does not support reading or seeking. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::ObjectDisposedException</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream is a disposed object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to load a document using a stream. <programlisting><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=<sp/><ref refid="class/system.i_o.file/_1acf0c889be242fb4723b33e96e9377423" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::File::OpenRead</ref>(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(stream);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!\r\rHello<sp/>Word!\r\r\rHello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to load a document from a URL. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>a<sp/>URL<sp/>that<sp/>points<sp/>to<sp/>a<sp/>Microsoft<sp/>Word<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>url<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;https://omextemplates.content.office.net/support/templates/en-us/tf16402488.dotx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Download<sp/>the<sp/>document<sp/>into<sp/>a<sp/>byte<sp/>array,<sp/>then<sp/>load<sp/>that<sp/>array<sp/>into<sp/>a<sp/>document<sp/>using<sp/>a<sp/>memory<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>webClient<sp/>=<sp/>MakeObject&lt;System::Net::WebClient&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayPtr&lt;uint8_t&gt;<sp/>dataBytes<sp/>=<sp/>webClient-&gt;DownloadData(url);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>byteStream<sp/>=<sp/>MakeObject&lt;System::IO::MemoryStream&gt;(dataBytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(byteStream);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>stage,<sp/>we<sp/>can<sp/>read<sp/>and<sp/>edit<sp/>the<sp/>document&apos;s<sp/>contents<sp/>and<sp/>then<sp/>save<sp/>it<sp/>to<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Use<sp/>this<sp/>section<sp/>to<sp/>highlight<sp/>your<sp/>relevant<sp/>passions,<sp/>activities,<sp/>and<sp/>how<sp/>you<sp/>like<sp/>to<sp/>give<sp/>back.<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;It’s<sp/>good<sp/>to<sp/>include<sp/>Leadership<sp/>and<sp/>volunteer<sp/>experiences<sp/>here.<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;Or<sp/>show<sp/>off<sp/>important<sp/>extras<sp/>like<sp/>publications,<sp/>certifications,<sp/>languages<sp/>and<sp/>more.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(4)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.LoadFromWeb.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2587" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a565291841e9747bbe94aa73d439bce53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Document::Document</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream, const System::SharedPtr&lt; Aspose::Words::Loading::LoadOptions &gt; &amp;loadOptions)</argsstring>
        <name>Document</name>
        <qualifiedname>Aspose::Words::Document::Document</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_loading_1_1_load_options" kindref="compound">Aspose::Words::Loading::LoadOptions</ref> &gt; &amp;</type>
          <declname>loadOptions</declname>
        </param>
        <briefdescription>
<para>Opens an existing document from a stream. Allows to specify additional options such as an encryption password. </para>
        </briefdescription>
        <detaileddescription>
<para>The document must be stored at the beginning of the stream. The stream must support random positioning.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream where to load the document from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loadOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options to use when loading a document. Can be null.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a5f95c02b57c5a02d17215084f6a5beca" kindref="member">Aspose::Words::UnsupportedFileFormatException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document format is not recognized or not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a7049037a1789fffea26a5c985c45c880" kindref="member">Aspose::Words::FileCorruptedException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document appears to be corrupted and cannot be loaded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace/system/_1af2ac70ce5544cf54b67cc546c2dc19aa" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There is a problem with the document and it should be reported to Aspose.Words developers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::IO::IOException</parametername>
</parameternamelist>
<parameterdescription>
<para>There is an input/output exception. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a69d5ddc9f0a7b4c2dfd356817c3be538" kindref="member">Aspose::Words::IncorrectPasswordException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document is encrypted and requires a password to open, but you supplied an incorrect password. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::ArgumentNullException</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream cannot be null. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::NotSupportedException</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream does not support reading or seeking. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::ObjectDisposedException</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream is a disposed object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to open an HTML document with images from a stream using a base URI. <programlisting><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=<sp/><ref refid="class/system.i_o.file/_1acf0c889be242fb4723b33e96e9377423" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::File::OpenRead</ref>(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.html&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>the<sp/>URI<sp/>of<sp/>the<sp/>base<sp/>folder<sp/>while<sp/>loading<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>any<sp/>images<sp/>with<sp/>relative<sp/>URIs<sp/>in<sp/>the<sp/>HTML<sp/>document<sp/>can<sp/>be<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loadOptions<sp/>=<sp/>MakeObject&lt;LoadOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>loadOptions-&gt;set_BaseUri(ImageDir);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(stream,<sp/>loadOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>first<sp/>shape<sp/>of<sp/>the<sp/>document<sp/>contains<sp/>a<sp/>valid<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(shape-&gt;get_IsImage());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(shape-&gt;get_ImageData()-&gt;get_ImageBytes()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_NEAR(32.0,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1ae154837d40adf7638fd63672041e856b" kindref="member" tooltip="Converts points to pixels at 96 dpi.">ConvertUtil::PointToPixel</ref>(shape-&gt;get_Width()),<sp/>0.01);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_NEAR(32.0,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1ae154837d40adf7638fd63672041e856b" kindref="member" tooltip="Converts points to pixels at 96 dpi.">ConvertUtil::PointToPixel</ref>(shape-&gt;get_Height()),<sp/>0.01);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how save a web page as a .docx file. <programlisting><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>url<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;https://www.aspose.com/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>client<sp/>=<sp/>MakeObject&lt;System::Net::WebClient&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream<sp/>=<sp/>MakeObject&lt;System::IO::MemoryStream&gt;(client-&gt;DownloadData(url));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>URL<sp/>is<sp/>used<sp/>again<sp/>as<sp/>a<sp/>baseUri<sp/>to<sp/>ensure<sp/>that<sp/>any<sp/>relative<sp/>image<sp/>paths<sp/>are<sp/>retrieved<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;LoadOptions&gt;(<ref refid="namespace_aspose_1_1_words_1a5fddddb463c824cf3fe353ce1bcd8f52a3135f4019bee015e2d1ae7f77f9f3f64" kindref="member" tooltip="HTML format.">LoadFormat::Html</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>url);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>HTML<sp/>document<sp/>from<sp/>stream<sp/>and<sp/>pass<sp/>the<sp/>LoadOptions<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(stream,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>stage,<sp/>we<sp/>can<sp/>read<sp/>and<sp/>edit<sp/>the<sp/>document&apos;s<sp/>contents<sp/>and<sp/>then<sp/>save<sp/>it<sp/>to<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.InsertHtmlFromWebPage.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to load an encrypted Microsoft Word document. <programlisting><codeline><highlight class="normal">SharedPtr&lt;Document&gt;<sp/>doc;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Aspose.Words<sp/>throw<sp/>an<sp/>exception<sp/>if<sp/>we<sp/>try<sp/>to<sp/>open<sp/>an<sp/>encrypted<sp/>document<sp/>without<sp/>its<sp/>password.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_THROW(doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Encrypted.docx&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespace_aspose_1_1_words_1a69d5ddc9f0a7b4c2dfd356817c3be538" kindref="member" tooltip="Thrown if a document is encrypted with a password and the password specified when opening the documen...">IncorrectPasswordException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>loading<sp/>such<sp/>a<sp/>document,<sp/>the<sp/>password<sp/>is<sp/>passed<sp/>to<sp/>the<sp/>document&apos;s<sp/>constructor<sp/>using<sp/>a<sp/>LoadOptions<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;LoadOptions&gt;(u</highlight><highlight class="stringliteral">&quot;docPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>loading<sp/>an<sp/>encrypted<sp/>document<sp/>with<sp/>a<sp/>LoadOptions<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Load<sp/>the<sp/>document<sp/>from<sp/>the<sp/>local<sp/>file<sp/>system<sp/>by<sp/>filename:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Encrypted.docx&quot;</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Load<sp/>the<sp/>document<sp/>from<sp/>a<sp/>stream:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=<sp/><ref refid="class/system.i_o.file/_1acf0c889be242fb4723b33e96e9377423" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::File::OpenRead</ref>(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Encrypted.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(stream,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2669" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ae7936daa25f43f9c3d1ac8a9503a8d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Document::Document</definition>
        <argsstring>(const System::String &amp;fileName)</argsstring>
        <name>Document</name>
        <qualifiedname>Aspose::Words::Document::Document</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Opens an existing document from a file. Automatically detects the file format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>File name of the document to open.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a5f95c02b57c5a02d17215084f6a5beca" kindref="member">Aspose::Words::UnsupportedFileFormatException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document format is not recognized or not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a7049037a1789fffea26a5c985c45c880" kindref="member">Aspose::Words::FileCorruptedException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document appears to be corrupted and cannot be loaded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace/system/_1af2ac70ce5544cf54b67cc546c2dc19aa" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There is a problem with the document and it should be reported to Aspose.Words developers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::IO::IOException</parametername>
</parameternamelist>
<parameterdescription>
<para>There is an input/output exception. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a69d5ddc9f0a7b4c2dfd356817c3be538" kindref="member">Aspose::Words::IncorrectPasswordException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document is encrypted and requires a password to open, but you supplied an incorrect password. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file cannot be null or empty string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to open a document and convert it to .PDF. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.ConvertToPdf.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2475" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ad861f07ffe2130db8170a023847cffe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Document::Document</definition>
        <argsstring>(const System::String &amp;fileName, const System::SharedPtr&lt; Aspose::Words::Loading::LoadOptions &gt; &amp;loadOptions)</argsstring>
        <name>Document</name>
        <qualifiedname>Aspose::Words::Document::Document</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_loading_1_1_load_options" kindref="compound">Aspose::Words::Loading::LoadOptions</ref> &gt; &amp;</type>
          <declname>loadOptions</declname>
        </param>
        <briefdescription>
<para>Opens an existing document from a file. Allows to specify additional options such as an encryption password. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>File name of the document to open. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loadOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional options to use when loading a document. Can be null.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a5f95c02b57c5a02d17215084f6a5beca" kindref="member">Aspose::Words::UnsupportedFileFormatException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document format is not recognized or not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a7049037a1789fffea26a5c985c45c880" kindref="member">Aspose::Words::FileCorruptedException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document appears to be corrupted and cannot be loaded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace/system/_1af2ac70ce5544cf54b67cc546c2dc19aa" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Exception</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>There is a problem with the document and it should be reported to Aspose.Words developers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::IO::IOException</parametername>
</parameternamelist>
<parameterdescription>
<para>There is an input/output exception. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespace_aspose_1_1_words_1a69d5ddc9f0a7b4c2dfd356817c3be538" kindref="member">Aspose::Words::IncorrectPasswordException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>The document is encrypted and requires a password to open, but you supplied an incorrect password. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>System::ArgumentException</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file cannot be null or empty string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create and load documents. <programlisting><codeline><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>creating<sp/>a<sp/>Document<sp/>object<sp/>using<sp/>Aspose.Words.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Create<sp/>a<sp/>blank<sp/>document:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>New<sp/>Document<sp/>objects<sp/>by<sp/>default<sp/>come<sp/>with<sp/>the<sp/>minimal<sp/>set<sp/>of<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>required<sp/>to<sp/>begin<sp/>adding<sp/>content<sp/>such<sp/>as<sp/>text<sp/>and<sp/>shapes:<sp/>a<sp/>Section,<sp/>a<sp/>Body,<sp/>and<sp/>a<sp/>Paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Load<sp/>a<sp/>document<sp/>that<sp/>exists<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Loaded<sp/>documents<sp/>will<sp/>have<sp/>contents<sp/>that<sp/>we<sp/>can<sp/>access<sp/>and<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>operations<sp/>that<sp/>need<sp/>to<sp/>occur<sp/>during<sp/>loading,<sp/>such<sp/>as<sp/>using<sp/>a<sp/>password<sp/>to<sp/>decrypt<sp/>a<sp/>document,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>done<sp/>by<sp/>passing<sp/>a<sp/>LoadOptions<sp/>object<sp/>when<sp/>loading<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Encrypted.docx&quot;</highlight><highlight class="normal">,<sp/>MakeObject&lt;LoadOptions&gt;(u</highlight><highlight class="stringliteral">&quot;docPassword&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Test<sp/>encrypted<sp/>document.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetText().Trim());</highlight></codeline>
</programlisting></para>
<para>Shows how to load an encrypted Microsoft Word document. <programlisting><codeline><highlight class="normal">SharedPtr&lt;Document&gt;<sp/>doc;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Aspose.Words<sp/>throw<sp/>an<sp/>exception<sp/>if<sp/>we<sp/>try<sp/>to<sp/>open<sp/>an<sp/>encrypted<sp/>document<sp/>without<sp/>its<sp/>password.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_THROW(doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Encrypted.docx&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespace_aspose_1_1_words_1a69d5ddc9f0a7b4c2dfd356817c3be538" kindref="member" tooltip="Thrown if a document is encrypted with a password and the password specified when opening the documen...">IncorrectPasswordException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>loading<sp/>such<sp/>a<sp/>document,<sp/>the<sp/>password<sp/>is<sp/>passed<sp/>to<sp/>the<sp/>document&apos;s<sp/>constructor<sp/>using<sp/>a<sp/>LoadOptions<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;LoadOptions&gt;(u</highlight><highlight class="stringliteral">&quot;docPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>loading<sp/>an<sp/>encrypted<sp/>document<sp/>with<sp/>a<sp/>LoadOptions<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Load<sp/>the<sp/>document<sp/>from<sp/>the<sp/>local<sp/>file<sp/>system<sp/>by<sp/>filename:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Encrypted.docx&quot;</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Load<sp/>the<sp/>document<sp/>from<sp/>a<sp/>stream:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=<sp/><ref refid="class/system.i_o.file/_1acf0c889be242fb4723b33e96e9377423" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::File::OpenRead</ref>(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Encrypted.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(stream,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2534" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ad362998510a0c4509829b5ea320be421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Document::Document</definition>
        <argsstring>(std::istream &amp;stream)</argsstring>
        <name>Document</name>
        <qualifiedname>Aspose::Words::Document::Document</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4748" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a72de20fce9b39c8e6ab895da0c662658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Document::Document</definition>
        <argsstring>(std::istream &amp;stream, const System::SharedPtr&lt; Aspose::Words::Loading::LoadOptions &gt; &amp;loadOptions)</argsstring>
        <name>Document</name>
        <qualifiedname>Aspose::Words::Document::Document</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_loading_1_1_load_options" kindref="compound">Aspose::Words::Loading::LoadOptions</ref> &gt; &amp;</type>
          <declname>loadOptions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4749" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a7a66c78afffcee340863e16ecdec53f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::Accept</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::DocumentVisitor &gt; visitor) override</argsstring>
        <name>Accept</name>
        <qualifiedname>Aspose::Words::Document::Accept</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_node_1a556472e35a86820cf189f10594933f3e">Accept</reimplements>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">Aspose::Words::DocumentVisitor</ref> &gt;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>Accepts a visitor. </para>
        </briefdescription>
        <detaileddescription>
<para>Enumerates over this node and all of its children. Each node calls a corresponding method on <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref>.</para>
<para>For more info see the Visitor design pattern.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visitor</parametername>
</parameternamelist>
<parameterdescription>
<para>The visitor that will visit the nodes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all nodes were visited; false if <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref> stopped the operation before visiting all nodes.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use a document visitor to print a document&apos;s node structure. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DocStructureToText()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentVisitor-compatible<sp/>features.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExDocumentVisitor::DocStructurePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>get<sp/>a<sp/>composite<sp/>node<sp/>to<sp/>accept<sp/>a<sp/>document<sp/>visitor,<sp/>the<sp/>visitor<sp/>visits<sp/>the<sp/>accepting<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>traverses<sp/>all<sp/>the<sp/>node&apos;s<sp/>children<sp/>in<sp/>a<sp/>depth-first<sp/>manner.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>visitor<sp/>can<sp/>read<sp/>and<sp/>modify<sp/>each<sp/>visited<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">DocStructurePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DocStructurePrinter()<sp/>:<sp/>mDocTraversalDepth(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAcceptingNodeChildTree<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mAcceptingNodeChildTree-&gt;ToString();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitDocumentStart(SharedPtr&lt;Document&gt;<sp/>doc)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>childNodeCount<sp/>=<sp/>doc-&gt;GetChildNodes(NodeType::Any,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndentAndAppendLine(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;[Document<sp/>start]<sp/>Child<sp/>nodes:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>childNodeCount);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDocTraversalDepth++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>the<sp/>visitor<sp/>to<sp/>continue<sp/>visiting<sp/>other<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitDocumentEnd(SharedPtr&lt;Document&gt;<sp/>doc)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDocTraversalDepth--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndentAndAppendLine(u</highlight><highlight class="stringliteral">&quot;[Document<sp/>end]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitSectionStart(SharedPtr&lt;Section&gt;<sp/>section)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>index<sp/>of<sp/>our<sp/>section<sp/>within<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;NodeCollection&gt;<sp/>docSections<sp/>=<sp/>section-&gt;get_Document()-&gt;GetChildNodes(NodeType::Section,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sectionIndex<sp/>=<sp/>docSections-&gt;IndexOf(section);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndentAndAppendLine(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;[Section<sp/>start]<sp/>Section<sp/>index:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>sectionIndex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDocTraversalDepth++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitSectionEnd(SharedPtr&lt;Section&gt;<sp/>section)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDocTraversalDepth--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndentAndAppendLine(u</highlight><highlight class="stringliteral">&quot;[Section<sp/>end]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitBodyStart(SharedPtr&lt;Body&gt;<sp/>body)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paragraphCount<sp/>=<sp/>body-&gt;get_Paragraphs()-&gt;get_Count();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndentAndAppendLine(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;[Body<sp/>start]<sp/>Paragraphs:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>paragraphCount);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDocTraversalDepth++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitBodyEnd(SharedPtr&lt;Body&gt;<sp/>body)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDocTraversalDepth--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndentAndAppendLine(u</highlight><highlight class="stringliteral">&quot;[Body<sp/>end]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitParagraphStart(SharedPtr&lt;Paragraph&gt;<sp/>paragraph)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndentAndAppendLine(u</highlight><highlight class="stringliteral">&quot;[Paragraph<sp/>start]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDocTraversalDepth++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitParagraphEnd(SharedPtr&lt;Paragraph&gt;<sp/>paragraph)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDocTraversalDepth--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndentAndAppendLine(u</highlight><highlight class="stringliteral">&quot;[Paragraph<sp/>end]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitRun(SharedPtr&lt;Run&gt;<sp/>run)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndentAndAppendLine(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;[Run]<sp/>\&quot;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>run-&gt;GetText()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitSubDocument(SharedPtr&lt;SubDocument&gt;<sp/>subDocument)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndentAndAppendLine(u</highlight><highlight class="stringliteral">&quot;[SubDocument]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mDocTraversalDepth;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mAcceptingNodeChildTree;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IndentAndAppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mDocTraversalDepth;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAcceptingNodeChildTree-&gt;Append(u</highlight><highlight class="stringliteral">&quot;|<sp/><sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAcceptingNodeChildTree-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2874" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ae5d108969c269eb7f2f5da4d6669eec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::AcceptAllRevisions</definition>
        <argsstring>()</argsstring>
        <name>AcceptAllRevisions</name>
        <qualifiedname>Aspose::Words::Document::AcceptAllRevisions</qualifiedname>
        <briefdescription>
<para>Accepts all tracked changes in the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to accept all tracking changes in the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edit<sp/>the<sp/>document<sp/>while<sp/>tracking<sp/>changes<sp/>to<sp/>create<sp/>a<sp/>few<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>another<sp/>revision.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StopTrackRevisions();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>iterate<sp/>through<sp/>every<sp/>revision<sp/>and<sp/>accept/reject<sp/>it<sp/>as<sp/>a<sp/>part<sp/>of<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>know<sp/>we<sp/>wish<sp/>to<sp/>accept<sp/>every<sp/>revision,<sp/>we<sp/>can<sp/>do<sp/>it<sp/>more<sp/>straightforwardly<sp/>so<sp/>by<sp/>calling<sp/>this<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AcceptAllRevisions();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>Hello<sp/>again!<sp/>This<sp/>is<sp/>another<sp/>revision.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3361" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a0664bad31f5c57183f5f9ee0fb96cf20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::AppendDocument</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Document &gt; &amp;srcDoc, Aspose::Words::ImportFormatMode importFormatMode)</argsstring>
        <name>AppendDocument</name>
        <qualifiedname>Aspose::Words::Document::AppendDocument</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt; &amp;</type>
          <declname>srcDoc</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949" kindref="member">Aspose::Words::ImportFormatMode</ref></type>
          <declname>importFormatMode</declname>
        </param>
        <briefdescription>
<para>Appends the specified document to the end of this document. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcDoc</parametername>
</parameternamelist>
<parameterdescription>
<para>The document to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>importFormatMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to merge style formatting that clashes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to append a document to the end of another document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srcDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">srcDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;Source<sp/>document<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;Destination<sp/>document<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Append<sp/>the<sp/>source<sp/>document<sp/>to<sp/>the<sp/>destination<sp/>document<sp/>while<sp/>preserving<sp/>its<sp/>formatting,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>save<sp/>the<sp/>source<sp/>document<sp/>to<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;AppendDocument(srcDoc,<sp/><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949a4cf454c612a2ed0c3ee75ac5175497c3" kindref="member" tooltip="Copy all required styles to the destination document, generate unique style names if needed.">ImportFormatMode::KeepSourceFormatting</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.AppendDocument.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to append all the documents in a folder to the end of a template document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(dstDoc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Template<sp/>Document&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a960b44c579bc2f6818d2daaf9e4c16f0" kindref="member" tooltip="The Normal style.">StyleIdentifier::Normal</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Some<sp/>content<sp/>here&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Append<sp/>all<sp/>unencrypted<sp/>documents<sp/>with<sp/>the<sp/>.doc<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>our<sp/>local<sp/>file<sp/>system<sp/>directory<sp/>to<sp/>the<sp/>base<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isDocFile<sp/>=<sp/>[](<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>item)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item.EndsWith(u</highlight><highlight class="stringliteral">&quot;.doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Collections::Generic::List&lt;String&gt;&gt;<sp/>docFiles<sp/>=<sp/><ref refid="class/system.i_o.directory/_1a175e3c7c67d67de4fc93cd54b8fb6f2d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::Directory::GetFiles</ref>(MyDir,<sp/>u</highlight><highlight class="stringliteral">&quot;*.doc&quot;</highlight><highlight class="normal">)-&gt;LINQ_Where(isDocFile)-&gt;LINQ_ToList();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fileName<sp/>:<sp/>docFiles)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;FileFormatInfo&gt;<sp/>info<sp/>=<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a0f7aae337dbe4dee5b3c025faf1ced64" kindref="member" tooltip="Detects and returns the information about a format of a document stored in a disk file.">FileFormatUtil::DetectFileFormat</ref>(fileName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;get_IsEncrypted())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srcDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(fileName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dstDoc-&gt;AppendDocument(srcDoc,<sp/><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949a844c076860bdab3f22de3694b97ed388" kindref="member" tooltip="Use the destination document styles and copy new styles. This is the default option.">ImportFormatMode::UseDestinationStyles</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.AppendAllDocumentsInFolder.doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2930" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ae623d3d217e6fd2cc94c7b43d98edacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::AppendDocument</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Document &gt; &amp;srcDoc, Aspose::Words::ImportFormatMode importFormatMode, const System::SharedPtr&lt; Aspose::Words::ImportFormatOptions &gt; &amp;importFormatOptions)</argsstring>
        <name>AppendDocument</name>
        <qualifiedname>Aspose::Words::Document::AppendDocument</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt; &amp;</type>
          <declname>srcDoc</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949" kindref="member">Aspose::Words::ImportFormatMode</ref></type>
          <declname>importFormatMode</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_import_format_options" kindref="compound">Aspose::Words::ImportFormatOptions</ref> &gt; &amp;</type>
          <declname>importFormatOptions</declname>
        </param>
        <briefdescription>
<para>Appends the specified document to the end of this document. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcDoc</parametername>
</parameternamelist>
<parameterdescription>
<para>The document to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>importFormatMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to merge style formatting that clashes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>importFormatOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>Allows to specify options that affect formatting of a result document.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to manage list style clashes while appending a document. <programlisting><codeline><highlight class="comment">//<sp/>Load<sp/>a<sp/>document<sp/>with<sp/>text<sp/>in<sp/>a<sp/>custom<sp/>style<sp/>and<sp/>clone<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srcDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Custom<sp/>list<sp/>numbering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Document&gt;<sp/>dstDoc<sp/>=<sp/>srcDoc-&gt;Clone();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>now<sp/>have<sp/>two<sp/>documents,<sp/>each<sp/>with<sp/>an<sp/>identical<sp/>style<sp/>named<sp/>&quot;CustomStyle&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Change<sp/>the<sp/>text<sp/>color<sp/>for<sp/>one<sp/>of<sp/>the<sp/>styles<sp/>to<sp/>set<sp/>it<sp/>apart<sp/>from<sp/>the<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;CustomStyle&quot;</highlight><highlight class="normal">)-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1b1f32eecc37467c72684d938f9779a9" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_DarkRed</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>a<sp/>clash<sp/>of<sp/>list<sp/>styles,<sp/>apply<sp/>the<sp/>list<sp/>format<sp/>of<sp/>the<sp/>source<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;KeepSourceNumbering&quot;<sp/>property<sp/>to<sp/>&quot;false&quot;<sp/>to<sp/>not<sp/>import<sp/>any<sp/>list<sp/>numbers<sp/>into<sp/>the<sp/>destination<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;KeepSourceNumbering&quot;<sp/>property<sp/>to<sp/>&quot;true&quot;<sp/>import<sp/>all<sp/>clashing</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>list<sp/>style<sp/>numbering<sp/>with<sp/>the<sp/>same<sp/>appearance<sp/>that<sp/>it<sp/>had<sp/>in<sp/>the<sp/>source<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;ImportFormatOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_KeepSourceNumbering(keepSourceNumbering);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Joining<sp/>two<sp/>documents<sp/>that<sp/>have<sp/>different<sp/>styles<sp/>that<sp/>share<sp/>the<sp/>same<sp/>name<sp/>causes<sp/>a<sp/>style<sp/>clash.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>specify<sp/>an<sp/>import<sp/>format<sp/>mode<sp/>while<sp/>appending<sp/>documents<sp/>to<sp/>resolve<sp/>this<sp/>clash.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;AppendDocument(srcDoc,<sp/><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949a02f5deab9b6eebb660679b3f779b57c2" kindref="member" tooltip="Only copy styles that are different from those in the source document.">ImportFormatMode::KeepDifferentStyles</ref>,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;UpdateListLabels();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.AppendDocumentAndResolveStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to manage list style clashes while inserting a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(dstDoc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2eac3316c9c335ce5fa8638df2fc5d518d4" kindref="member" tooltip="Break between paragraphs.">BreakType::ParagraphBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;get_Lists()-&gt;Add(ListTemplate::NumberDefault);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Lists::List&gt;<sp/>list<sp/>=<sp/>dstDoc-&gt;get_Lists()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>15;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Write(String::Format(u</highlight><highlight class="stringliteral">&quot;List<sp/>Item<sp/>{0}\n&quot;</highlight><highlight class="normal">,<sp/>i));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>attachDoc<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(dstDoc-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>a<sp/>clash<sp/>of<sp/>list<sp/>styles,<sp/>apply<sp/>the<sp/>list<sp/>format<sp/>of<sp/>the<sp/>source<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;KeepSourceNumbering&quot;<sp/>property<sp/>to<sp/>&quot;false&quot;<sp/>to<sp/>not<sp/>import<sp/>any<sp/>list<sp/>numbers<sp/>into<sp/>the<sp/>destination<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;KeepSourceNumbering&quot;<sp/>property<sp/>to<sp/>&quot;true&quot;<sp/>import<sp/>all<sp/>clashing</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>list<sp/>style<sp/>numbering<sp/>with<sp/>the<sp/>same<sp/>appearance<sp/>that<sp/>it<sp/>had<sp/>in<sp/>the<sp/>source<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>importOptions<sp/>=<sp/>MakeObject&lt;ImportFormatOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">importOptions-&gt;set_KeepSourceNumbering(keepSourceNumbering);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertDocument(attachDoc,<sp/><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949a4cf454c612a2ed0c3ee75ac5175497c3" kindref="member" tooltip="Copy all required styles to the destination document, generate unique style names if needed.">ImportFormatMode::KeepSourceFormatting</ref>,<sp/>importOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertDocumentAndResolveStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to manage list style clashes while appending a clone of a document to itself. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srcDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;List<sp/>item.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;List<sp/>item.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>a<sp/>clash<sp/>of<sp/>list<sp/>styles,<sp/>apply<sp/>the<sp/>list<sp/>format<sp/>of<sp/>the<sp/>source<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;KeepSourceNumbering&quot;<sp/>property<sp/>to<sp/>&quot;false&quot;<sp/>to<sp/>not<sp/>import<sp/>any<sp/>list<sp/>numbers<sp/>into<sp/>the<sp/>destination<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;KeepSourceNumbering&quot;<sp/>property<sp/>to<sp/>&quot;true&quot;<sp/>import<sp/>all<sp/>clashing</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>list<sp/>style<sp/>numbering<sp/>with<sp/>the<sp/>same<sp/>appearance<sp/>that<sp/>it<sp/>had<sp/>in<sp/>the<sp/>source<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(dstDoc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;ImportFormatOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_KeepSourceNumbering(keepSourceNumbering);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertDocument(srcDoc,<sp/><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949a4cf454c612a2ed0c3ee75ac5175497c3" kindref="member" tooltip="Copy all required styles to the destination document, generate unique style names if needed.">ImportFormatMode::KeepSourceFormatting</ref>,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;UpdateListLabels();</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3015" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a18a1bc1920b22b3fbe2dc4fde0f4c886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::Cleanup</definition>
        <argsstring>()</argsstring>
        <name>Cleanup</name>
        <qualifiedname>Aspose::Words::Document::Cleanup</qualifiedname>
        <briefdescription>
<para>Cleans unused styles and lists from the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to remove unused custom styles from a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba4ee29ca12c7d126654bd0e5275de6135" kindref="member" tooltip="The style is a list style.">StyleType::List</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyListStyle1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba4ee29ca12c7d126654bd0e5275de6135" kindref="member" tooltip="The style is a list style.">StyleType::List</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyListStyle2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba76a40e4f974fd895a0a2598c1cee28b4" kindref="member" tooltip="The style is a character style.">StyleType::Character</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyParagraphStyle1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba76a40e4f974fd895a0a2598c1cee28b4" kindref="member" tooltip="The style is a character style.">StyleType::Character</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyParagraphStyle2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Combined<sp/>with<sp/>the<sp/>built-in<sp/>styles,<sp/>the<sp/>document<sp/>now<sp/>has<sp/>eight<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>custom<sp/>style<sp/>counts<sp/>as<sp/>&quot;used&quot;<sp/>while<sp/>applied<sp/>to<sp/>some<sp/>part<sp/>of<sp/>the<sp/>document,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>means<sp/>that<sp/>the<sp/>four<sp/>styles<sp/>we<sp/>added<sp/>are<sp/>currently<sp/>unused.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(8,<sp/>doc-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>custom<sp/>character<sp/>style,<sp/>and<sp/>then<sp/>a<sp/>custom<sp/>list<sp/>style.<sp/>Doing<sp/>so<sp/>will<sp/>mark<sp/>the<sp/>styles<sp/>as<sp/>&quot;used&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;MyParagraphStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Lists::List&gt;<sp/>list<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;MyListStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Cleanup();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(6,<sp/>doc-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removing<sp/>every<sp/>node<sp/>that<sp/>a<sp/>custom<sp/>style<sp/>is<sp/>applied<sp/>to<sp/>marks<sp/>it<sp/>as<sp/>&quot;unused&quot;<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Run<sp/>the<sp/>Cleanup<sp/>method<sp/>again<sp/>to<sp/>remove<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Cleanup();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>doc-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4015" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1afcbdacc8ecc7c9e0544c3a571ab8d781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::Cleanup</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::CleanupOptions &gt; &amp;options)</argsstring>
        <name>Cleanup</name>
        <qualifiedname>Aspose::Words::Document::Cleanup</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_cleanup_options" kindref="compound">Aspose::Words::CleanupOptions</ref> &gt; &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Cleans unused styles and lists from the document depending on given <ref refid="class_aspose_1_1_words_1_1_cleanup_options" kindref="compound">CleanupOptions</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to remove all unused custom styles from a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba4ee29ca12c7d126654bd0e5275de6135" kindref="member" tooltip="The style is a list style.">StyleType::List</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyListStyle1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba4ee29ca12c7d126654bd0e5275de6135" kindref="member" tooltip="The style is a list style.">StyleType::List</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyListStyle2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba76a40e4f974fd895a0a2598c1cee28b4" kindref="member" tooltip="The style is a character style.">StyleType::Character</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyParagraphStyle1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba76a40e4f974fd895a0a2598c1cee28b4" kindref="member" tooltip="The style is a character style.">StyleType::Character</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyParagraphStyle2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Combined<sp/>with<sp/>the<sp/>built-in<sp/>styles,<sp/>the<sp/>document<sp/>now<sp/>has<sp/>eight<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>custom<sp/>style<sp/>is<sp/>marked<sp/>as<sp/>&quot;used&quot;<sp/>while<sp/>there<sp/>is<sp/>any<sp/>text<sp/>within<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>formatted<sp/>in<sp/>that<sp/>style.<sp/>This<sp/>means<sp/>that<sp/>the<sp/>4<sp/>styles<sp/>we<sp/>added<sp/>are<sp/>currently<sp/>unused.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(8,<sp/>doc-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>custom<sp/>character<sp/>style,<sp/>and<sp/>then<sp/>a<sp/>custom<sp/>list<sp/>style.<sp/>Doing<sp/>so<sp/>will<sp/>mark<sp/>them<sp/>as<sp/>&quot;used&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;MyParagraphStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Lists::List&gt;<sp/>list<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;MyListStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now,<sp/>there<sp/>is<sp/>one<sp/>unused<sp/>character<sp/>style<sp/>and<sp/>one<sp/>unused<sp/>list<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Cleanup()<sp/>method,<sp/>when<sp/>configured<sp/>with<sp/>a<sp/>CleanupOptions<sp/>object,<sp/>can<sp/>target<sp/>unused<sp/>styles<sp/>and<sp/>remove<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cleanupOptions<sp/>=<sp/>MakeObject&lt;CleanupOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">cleanupOptions-&gt;set_UnusedLists(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">cleanupOptions-&gt;set_UnusedStyles(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">cleanupOptions-&gt;set_UnusedBuiltinStyles(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Cleanup(cleanupOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>doc-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Removing<sp/>every<sp/>node<sp/>that<sp/>a<sp/>custom<sp/>style<sp/>is<sp/>applied<sp/>to<sp/>marks<sp/>it<sp/>as<sp/>&quot;unused&quot;<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rerun<sp/>the<sp/>Cleanup<sp/>method<sp/>to<sp/>remove<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Cleanup(cleanupOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4063" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a1c3dcff6be884eec696d20719353e93a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Document &gt; Aspose::Words::Document::Clone</definition>
        <argsstring>()</argsstring>
        <name>Clone</name>
        <qualifiedname>Aspose::Words::Document::Clone</qualifiedname>
        <briefdescription>
<para>Performs a deep copy of the <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Document</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The cloned document.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to deep clone a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cloning<sp/>will<sp/>produce<sp/>a<sp/>new<sp/>document<sp/>with<sp/>the<sp/>same<sp/>contents<sp/>as<sp/>the<sp/>original,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>with<sp/>a<sp/>unique<sp/>copy<sp/>of<sp/>each<sp/>of<sp/>the<sp/>original<sp/>document&apos;s<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Document&gt;<sp/>clone<sp/>=<sp/>doc-&gt;Clone();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs()-&gt;idx_get(0)-&gt;GetText(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clone-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs()-&gt;idx_get(0)-&gt;get_Text());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_NE(<ref refid="class/system.object_ext/_1a911fa57b654ba73ed1f1fd24389ea94b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::GetHashCode</ref>(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs()-&gt;idx_get(0)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class/system.object_ext/_1a911fa57b654ba73ed1f1fd24389ea94b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::GetHashCode</ref>(clone-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs()-&gt;idx_get(0)));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2693" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a6e1d572ed254b06abc3176dded057f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::Compare</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Document &gt; &amp;document, const System::String &amp;author, System::DateTime dateTime)</argsstring>
        <name>Compare</name>
        <qualifiedname>Aspose::Words::Document::Compare</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt; &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>author</declname>
        </param>
        <param>
          <type><ref refid="class/system.date_time/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime</ref></type>
          <declname>dateTime</declname>
        </param>
        <briefdescription>
<para>Compares this document with another document producing changes as number of edit and format revisions <ref refid="class_aspose_1_1_words_1_1_revision" kindref="compound">Revision</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The following document nodes are not compared at the moment:</para>
<para><itemizedlist>
<listitem><para><ref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag" kindref="compound">StructuredDocumentTag</ref></para>
</listitem><listitem><para>Item3</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Documents must not have revisions before comparison.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>document</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Document</ref> to compare. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>author</parametername>
</parameternamelist>
<parameterdescription>
<para>Initials of the author to use for revisions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dateTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The date and time to use for revisions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to compare documents. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>original<sp/>document.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docEdited);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>edited<sp/>document.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>with<sp/>revisions<sp/>will<sp/>throw<sp/>an<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(docOriginal-&gt;get_Revisions()-&gt;get_Count()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>docEdited-&gt;get_Revisions()-&gt;get_Count()<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;authorName&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>After<sp/>the<sp/>comparison,<sp/>the<sp/>original<sp/>document<sp/>will<sp/>gain<sp/>a<sp/>new<sp/>revision</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>every<sp/>element<sp/>that<sp/>is<sp/>different<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>r<sp/>:<sp/>System::IterateOver(docOriginal-&gt;get_Revisions()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Revision<sp/>type:<sp/>{0},<sp/>on<sp/>a<sp/>node<sp/>of<sp/>type<sp/>\&quot;{1}\&quot;&quot;</highlight><highlight class="normal">,<sp/>r-&gt;get_RevisionType(),<sp/>r-&gt;get_ParentNode()-&gt;get_NodeType())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tChanged<sp/>text:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r-&gt;get_ParentNode()-&gt;GetText()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Accepting<sp/>these<sp/>revisions<sp/>will<sp/>transform<sp/>the<sp/>original<sp/>document<sp/>into<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;get_Revisions()-&gt;AcceptAll();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(docOriginal-&gt;GetText(),<sp/>docEdited-&gt;GetText());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4298" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ad2320fae1d2a5fb7b2f86b433ff37f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::Compare</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Document &gt; &amp;document, const System::String &amp;author, System::DateTime dateTime, const System::SharedPtr&lt; Aspose::Words::Comparing::CompareOptions &gt; &amp;options)</argsstring>
        <name>Compare</name>
        <qualifiedname>Aspose::Words::Document::Compare</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt; &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>author</declname>
        </param>
        <param>
          <type><ref refid="class/system.date_time/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime</ref></type>
          <declname>dateTime</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options" kindref="compound">Aspose::Words::Comparing::CompareOptions</ref> &gt; &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Compares this document with another document producing changes as a number of edit and format revisions <ref refid="class_aspose_1_1_words_1_1_revision" kindref="compound">Revision</ref>. Allows to specify comparison options using <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options" kindref="compound">CompareOptions</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(ComparisonTargetType::New);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4396" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ae09167e3b86291eb8cd83661f4453118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::CopyStylesFromTemplate</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Document &gt; &amp;template_)</argsstring>
        <name>CopyStylesFromTemplate</name>
        <qualifiedname>Aspose::Words::Document::CopyStylesFromTemplate</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt; &amp;</type>
          <declname>template_</declname>
        </param>
        <briefdescription>
<para>Copies styles from the specified template to a document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to copies styles from the template to a document via <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Document</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>template_<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">target-&gt;CopyStylesFromTemplate(template_);</highlight></codeline>
</programlisting></para>
<para>Shows how to copy styles from one document to another. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>a<sp/>document,<sp/>and<sp/>then<sp/>add<sp/>styles<sp/>that<sp/>we<sp/>will<sp/>copy<sp/>to<sp/>another<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>template_<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>style<sp/>=<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">_-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;TemplateStyle1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Times<sp/>New<sp/>Roman&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1aaa7db2a67618ecbea3394680a1ddcb13" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Navy</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">style<sp/>=<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">_-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;TemplateStyle2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a3dbef70ba6a944b66ff4c5deb8be4a80" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_DeepSkyBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">style<sp/>=<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">_-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;TemplateStyle3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a3f285f2231daf44757dbc419eccfcd15" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_RoyalBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(7,<sp/>template_-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>document<sp/>which<sp/>we<sp/>will<sp/>copy<sp/>the<sp/>styles<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>style<sp/>with<sp/>the<sp/>same<sp/>name<sp/>as<sp/>a<sp/>style<sp/>from<sp/>the<sp/>template<sp/>document<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>target<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">style<sp/>=<sp/>target-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;TemplateStyle3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(5,<sp/>target-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>calling<sp/>the<sp/>method<sp/>to<sp/>copy<sp/>all<sp/>the<sp/>styles<sp/>from<sp/>one<sp/>document<sp/>to<sp/>another.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Passing<sp/>the<sp/>template<sp/>document<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">target-&gt;CopyStylesFromTemplate(template_);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copying<sp/>styles<sp/>adds<sp/>all<sp/>styles<sp/>from<sp/>the<sp/>template<sp/>document<sp/>to<sp/>the<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>overwrites<sp/>existing<sp/>styles<sp/>with<sp/>the<sp/>same<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(7,<sp/>target-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">,<sp/>target-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;TemplateStyle3&quot;</highlight><highlight class="normal">)-&gt;get_Font()-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1a3f285f2231daf44757dbc419eccfcd15" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_RoyalBlue</ref>().ToArgb(),<sp/>target-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;TemplateStyle3&quot;</highlight><highlight class="normal">)-&gt;get_Font()-&gt;get_Color().ToArgb());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Passing<sp/>the<sp/>local<sp/>system<sp/>filename<sp/>of<sp/>a<sp/>template<sp/>document:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">target-&gt;CopyStylesFromTemplate(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(21,<sp/>target-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4506" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a5aedc7e3204184f61ecebd925dc01281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::CopyStylesFromTemplate</definition>
        <argsstring>(const System::String &amp;template_)</argsstring>
        <name>CopyStylesFromTemplate</name>
        <qualifiedname>Aspose::Words::Document::CopyStylesFromTemplate</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>template_</declname>
        </param>
        <briefdescription>
<para>Copies styles from the specified template to a document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to copy styles from one document to another. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>a<sp/>document,<sp/>and<sp/>then<sp/>add<sp/>styles<sp/>that<sp/>we<sp/>will<sp/>copy<sp/>to<sp/>another<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>template_<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>style<sp/>=<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">_-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;TemplateStyle1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Times<sp/>New<sp/>Roman&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1aaa7db2a67618ecbea3394680a1ddcb13" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Navy</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">style<sp/>=<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">_-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;TemplateStyle2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a3dbef70ba6a944b66ff4c5deb8be4a80" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_DeepSkyBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">style<sp/>=<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">_-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;TemplateStyle3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a3f285f2231daf44757dbc419eccfcd15" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_RoyalBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(7,<sp/>template_-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>document<sp/>which<sp/>we<sp/>will<sp/>copy<sp/>the<sp/>styles<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>style<sp/>with<sp/>the<sp/>same<sp/>name<sp/>as<sp/>a<sp/>style<sp/>from<sp/>the<sp/>template<sp/>document<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>target<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">style<sp/>=<sp/>target-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;TemplateStyle3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(5,<sp/>target-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>calling<sp/>the<sp/>method<sp/>to<sp/>copy<sp/>all<sp/>the<sp/>styles<sp/>from<sp/>one<sp/>document<sp/>to<sp/>another.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Passing<sp/>the<sp/>template<sp/>document<sp/>object:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">target-&gt;CopyStylesFromTemplate(template_);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copying<sp/>styles<sp/>adds<sp/>all<sp/>styles<sp/>from<sp/>the<sp/>template<sp/>document<sp/>to<sp/>the<sp/>target</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>overwrites<sp/>existing<sp/>styles<sp/>with<sp/>the<sp/>same<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(7,<sp/>target-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">,<sp/>target-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;TemplateStyle3&quot;</highlight><highlight class="normal">)-&gt;get_Font()-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1a3f285f2231daf44757dbc419eccfcd15" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_RoyalBlue</ref>().ToArgb(),<sp/>target-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;TemplateStyle3&quot;</highlight><highlight class="normal">)-&gt;get_Font()-&gt;get_Color().ToArgb());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Passing<sp/>the<sp/>local<sp/>system<sp/>filename<sp/>of<sp/>a<sp/>template<sp/>document:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">target-&gt;CopyStylesFromTemplate(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(21,<sp/>target-&gt;get_Styles()-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4447" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a105f0181e5db6416ec31845da4da024a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::EnsureMinimum</definition>
        <argsstring>()</argsstring>
        <name>EnsureMinimum</name>
        <qualifiedname>Aspose::Words::Document::EnsureMinimum</qualifiedname>
        <briefdescription>
<para>If the document contains no sections, creates one section with one paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to ensure that a document contains the minimal set of nodes required for editing its contents. <programlisting><codeline><highlight class="comment">//<sp/>A<sp/>newly<sp/>created<sp/>document<sp/>contains<sp/>one<sp/>child<sp/>Section,<sp/>which<sp/>includes<sp/>one<sp/>child<sp/>Body<sp/>and<sp/>one<sp/>child<sp/>Paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>edit<sp/>the<sp/>document<sp/>body&apos;s<sp/>contents<sp/>by<sp/>adding<sp/>nodes<sp/>such<sp/>as<sp/>Runs<sp/>or<sp/>inline<sp/>Shapes<sp/>to<sp/>that<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>nodes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad2c24d59e0baff4d0155fbdf62590867" kindref="member" tooltip="A Section object that corresponds to one section in a Word document. A Section node can have Body and...">NodeType::Section</ref>,<sp/>nodes-&gt;idx_get(0)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>nodes-&gt;idx_get(0)-&gt;get_ParentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aac101b32dda4448cf13a93fe283dddd8" kindref="member" tooltip="A Body object that contains the main text of a section (main text story). A Body node can have Paragr...">NodeType::Body</ref>,<sp/>nodes-&gt;idx_get(1)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(nodes-&gt;idx_get(0),<sp/>nodes-&gt;idx_get(1)-&gt;get_ParentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>nodes-&gt;idx_get(2)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(nodes-&gt;idx_get(1),<sp/>nodes-&gt;idx_get(2)-&gt;get_ParentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>minimal<sp/>set<sp/>of<sp/>nodes<sp/>that<sp/>we<sp/>need<sp/>to<sp/>be<sp/>able<sp/>to<sp/>edit<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>no<sp/>longer<sp/>be<sp/>able<sp/>to<sp/>edit<sp/>the<sp/>document<sp/>if<sp/>we<sp/>remove<sp/>any<sp/>of<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>document<sp/>has<sp/>at<sp/>least<sp/>those<sp/>three<sp/>nodes<sp/>so<sp/>we<sp/>can<sp/>edit<sp/>it<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad2c24d59e0baff4d0155fbdf62590867" kindref="member" tooltip="A Section object that corresponds to one section in a Word document. A Section node can have Body and...">NodeType::Section</ref>,<sp/>nodes-&gt;idx_get(0)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aac101b32dda4448cf13a93fe283dddd8" kindref="member" tooltip="A Body object that contains the main text of a section (main text story). A Body node can have Paragr...">NodeType::Body</ref>,<sp/>nodes-&gt;idx_get(1)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>nodes-&gt;idx_get(2)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Paragraph&gt;(nodes-&gt;idx_get(2)))-&gt;get_Runs()-&gt;Add(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3334" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aea7e6f4139e5381cd94203d87d854141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::ExpandTableStylesToDirectFormatting</definition>
        <argsstring>()</argsstring>
        <name>ExpandTableStylesToDirectFormatting</name>
        <qualifiedname>Aspose::Words::Document::ExpandTableStylesToDirectFormatting</qualifiedname>
        <briefdescription>
<para>Converts formatting specified in table styles into direct formatting on tables in the document. </para>
        </briefdescription>
        <detaileddescription>
<para>This method exists because this version of Aspose.Words provides only limited support for table styles (see below). This method might be useful when you load a DOCX or WordprocessingML document that contains tables formatted with table styles and you need to query formatting of tables, cells, paragraphs or text.</para>
<para>This version of Aspose.Words provides limited support for table styles as follows:</para>
<para><itemizedlist>
<listitem><para>Table styles defined in DOCX or WordprocessingML documents are preserved as table styles when saving the document as DOCX or WordprocessingML.</para>
</listitem><listitem><para>Table styles defined in DOCX or WordprocessingML documents are automatically converted to direct formatting on tables when saving the document into any other format, rendering or printing.</para>
</listitem><listitem><para>Table styles defined in DOC documents are preserved as table styles when saving the document as DOC only.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply the properties of a table&apos;s style directly to the table&apos;s elements. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;set_RowStripe(3);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;set_CellSpacing(5);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a3ec909697b271549e8163b4ff6631b70" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AntiqueWhite</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>concerns<sp/>table<sp/>style<sp/>properties<sp/>such<sp/>as<sp/>the<sp/>ones<sp/>we<sp/>set<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;ExpandTableStylesToDirectFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.TableStyleToDirectFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3974" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a5bbd9bb841ffe95decffa1700f928b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Document &gt; Aspose::Words::Document::ExtractPages</definition>
        <argsstring>(int32_t index, int32_t count)</argsstring>
        <name>ExtractPages</name>
        <qualifiedname>Aspose::Words::Document::ExtractPages</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Document</ref> object representing specified range of pages. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The zero-based index of the first page to extract. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of pages to be extracted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get specified range of pages from the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>doc-&gt;ExtractPages(0,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.ExtractPages.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4746" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ac525b4a1f1d73951263e84f893e3bd21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Document::get_AttachedTemplate</definition>
        <argsstring>()</argsstring>
        <name>get_AttachedTemplate</name>
        <qualifiedname>Aspose::Words::Document::get_AttachedTemplate</qualifiedname>
        <briefdescription>
<para>Gets or sets the full path of the template attached to the document. </para>
        </briefdescription>
        <detaileddescription>
<para>Empty string means the document is attached to the Normal template.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>System::ArgumentNullException</parametername>
</parameternamelist>
<parameterdescription>
<para>Throws if you attempt to set to a null value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_properties_1_1_built_in_document_properties_1a8c92b68822ecf7d511ebc6f37eb65d43" kindref="member">Aspose::Words::Properties::BuiltInDocumentProperties::get_Template</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set a default template for documents that do not have attached templates. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable<sp/>automatic<sp/>style<sp/>updating,<sp/>but<sp/>do<sp/>not<sp/>attach<sp/>a<sp/>template<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_AutomaticallyUpdateStyles(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>doc-&gt;get_AttachedTemplate());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>there<sp/>is<sp/>no<sp/>template<sp/>document,<sp/>the<sp/>document<sp/>had<sp/>nowhere<sp/>to<sp/>track<sp/>style<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>SaveOptions<sp/>object<sp/>to<sp/>automatically<sp/>set<sp/>a<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>document<sp/>that<sp/>we<sp/>are<sp/>saving<sp/>does<sp/>not<sp/>have<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;SaveOptions&gt;<sp/>options<sp/>=<sp/>SaveOptions::CreateSaveOptions(u</highlight><highlight class="stringliteral">&quot;Document.DefaultTemplate.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_DefaultTemplate(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Business<sp/>brochure.dotx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.DefaultTemplate.docx&quot;</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="292" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a5b932b9d0eb8bca26c5edb6dc5930dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_AutomaticallyUpdateStyles</definition>
        <argsstring>()</argsstring>
        <name>get_AutomaticallyUpdateStyles</name>
        <qualifiedname>Aspose::Words::Document::get_AutomaticallyUpdateStyles</qualifiedname>
        <briefdescription>
<para>Gets or sets a flag indicating whether the styles in the document are updated to match the styles in the attached template each time the document is opened in MS Word. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to attach a template to a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Microsoft<sp/>Word<sp/>documents<sp/>by<sp/>default<sp/>come<sp/>with<sp/>an<sp/>attached<sp/>template<sp/>called<sp/>&quot;Normal.dotm&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>default<sp/>template<sp/>for<sp/>blank<sp/>Aspose.Words<sp/>documents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>doc-&gt;get_AttachedTemplate());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Attach<sp/>a<sp/>template,<sp/>then<sp/>set<sp/>the<sp/>flag<sp/>to<sp/>apply<sp/>style<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>within<sp/>the<sp/>template<sp/>to<sp/>styles<sp/>in<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_AttachedTemplate(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Business<sp/>brochure.dotx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_AutomaticallyUpdateStyles(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.AutomaticallyUpdateStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to set a default template for documents that do not have attached templates. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable<sp/>automatic<sp/>style<sp/>updating,<sp/>but<sp/>do<sp/>not<sp/>attach<sp/>a<sp/>template<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_AutomaticallyUpdateStyles(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>doc-&gt;get_AttachedTemplate());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>there<sp/>is<sp/>no<sp/>template<sp/>document,<sp/>the<sp/>document<sp/>had<sp/>nowhere<sp/>to<sp/>track<sp/>style<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>SaveOptions<sp/>object<sp/>to<sp/>automatically<sp/>set<sp/>a<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>document<sp/>that<sp/>we<sp/>are<sp/>saving<sp/>does<sp/>not<sp/>have<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;SaveOptions&gt;<sp/>options<sp/>=<sp/>SaveOptions::CreateSaveOptions(u</highlight><highlight class="stringliteral">&quot;Document.DefaultTemplate.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_DefaultTemplate(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Business<sp/>brochure.dotx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.DefaultTemplate.docx&quot;</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="335" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a86baaf34be1f79ea482b1f393f8f4bed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_properties_1_1_built_in_document_properties" kindref="compound">Aspose::Words::Properties::BuiltInDocumentProperties</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Properties::BuiltInDocumentProperties &gt; Aspose::Words::Document::get_BuiltInDocumentProperties</definition>
        <argsstring>() const</argsstring>
        <name>get_BuiltInDocumentProperties</name>
        <qualifiedname>Aspose::Words::Document::get_BuiltInDocumentProperties</qualifiedname>
        <briefdescription>
<para>Returns a collection that represents all the built-in document properties of the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with built-in document properties. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Properties.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Document&quot;<sp/>object<sp/>contains<sp/>some<sp/>of<sp/>its<sp/>metadata<sp/>in<sp/>its<sp/>members.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Document<sp/>filename:\n\t<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>doc-&gt;get_OriginalFileName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>also<sp/>stores<sp/>metadata<sp/>in<sp/>its<sp/>built-in<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>built-in<sp/>property<sp/>is<sp/>a<sp/>member<sp/>of<sp/>the<sp/>document&apos;s<sp/>&quot;BuiltInDocumentProperties&quot;<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Built-in<sp/>Properties:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>docProperty<sp/>:<sp/>System::IterateOver(doc-&gt;get_BuiltInDocumentProperties()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>docProperty-&gt;get_Name()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\tType:\t{0}&quot;</highlight><highlight class="normal">,<sp/>docProperty-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>properties<sp/>may<sp/>store<sp/>multiple<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class/system.object_ext/_1a49cadf4152a1be9ca40712f579e660a6" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::Is</ref>&lt;<ref refid="class/system.collections.generic.i_collection/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::ICollection</ref>&lt;SharedPtr&lt;System::Object&gt;&gt;&gt;(docProperty-&gt;get_Value()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>value<sp/>:<sp/>System::IterateOver(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;<ref refid="class/system.collections.generic.i_collection/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::ICollection</ref>&lt;SharedPtr&lt;System::Object&gt;&gt;&gt;(docProperty-&gt;get_Value())))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tValue:\t\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tValue:\t\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>docProperty-&gt;get_Value()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="633" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a88669ace70adba52a04efd111a46b957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_settings_1_1_compatibility_options" kindref="compound">Aspose::Words::Settings::CompatibilityOptions</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Settings::CompatibilityOptions &gt; Aspose::Words::Document::get_CompatibilityOptions</definition>
        <argsstring>()</argsstring>
        <name>get_CompatibilityOptions</name>
        <qualifiedname>Aspose::Words::Document::get_CompatibilityOptions</qualifiedname>
        <briefdescription>
<para>Provides access to document compatibility options (that is, the user preferences entered on the <bold>Compatibility</bold> tab of the <bold>Options</bold> dialog in Word). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1014" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a7b3e4a1afbc0a5ddc10a3901a0cf3078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_saving_1a060e41f8a4c148d5e55502900c3c4ba6" kindref="member">Aspose::Words::Saving::OoxmlCompliance</ref></type>
        <definition>Aspose::Words::Saving::OoxmlCompliance Aspose::Words::Document::get_Compliance</definition>
        <argsstring>()</argsstring>
        <name>get_Compliance</name>
        <qualifiedname>Aspose::Words::Document::get_Compliance</qualifiedname>
        <briefdescription>
<para>Gets the OOXML compliance version determined from the loaded document content. Makes sense only for OOXML documents. </para>
        </briefdescription>
        <detaileddescription>
<para>If you created a new blank document or load non OOXML document returns the <ref refid="namespace_aspose_1_1_words_1_1_saving_1a060e41f8a4c148d5e55502900c3c4ba6a821952cd9df4567bf7a9f1d2ff3b4f40" kindref="member">Ecma376_2006</ref> value.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to read a loaded document&apos;s Open Office XML compliance version. <programlisting><codeline><highlight class="comment">//<sp/>The<sp/>compliance<sp/>version<sp/>varies<sp/>between<sp/>documents<sp/>created<sp/>by<sp/>different<sp/>versions<sp/>of<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(doc-&gt;get_Compliance(),<sp/>OoxmlCompliance::Ecma376_2006);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(doc-&gt;get_Compliance(),<sp/>OoxmlCompliance::Iso29500_2008_Transitional);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1661" column="47"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aa32b0d92748ee5c77365f05c75f7a30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_properties_1_1_custom_document_properties" kindref="compound">Aspose::Words::Properties::CustomDocumentProperties</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Properties::CustomDocumentProperties &gt; Aspose::Words::Document::get_CustomDocumentProperties</definition>
        <argsstring>()</argsstring>
        <name>get_CustomDocumentProperties</name>
        <qualifiedname>Aspose::Words::Document::get_CustomDocumentProperties</qualifiedname>
        <briefdescription>
<para>Returns a collection that represents all the custom document properties of the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with built-in document properties. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Properties.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Document&quot;<sp/>object<sp/>contains<sp/>some<sp/>of<sp/>its<sp/>metadata<sp/>in<sp/>its<sp/>members.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Document<sp/>filename:\n\t<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>doc-&gt;get_OriginalFileName()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>also<sp/>stores<sp/>metadata<sp/>in<sp/>its<sp/>built-in<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>built-in<sp/>property<sp/>is<sp/>a<sp/>member<sp/>of<sp/>the<sp/>document&apos;s<sp/>&quot;BuiltInDocumentProperties&quot;<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Built-in<sp/>Properties:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>docProperty<sp/>:<sp/>System::IterateOver(doc-&gt;get_BuiltInDocumentProperties()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>docProperty-&gt;get_Name()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\tType:\t{0}&quot;</highlight><highlight class="normal">,<sp/>docProperty-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>properties<sp/>may<sp/>store<sp/>multiple<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class/system.object_ext/_1a49cadf4152a1be9ca40712f579e660a6" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::Is</ref>&lt;<ref refid="class/system.collections.generic.i_collection/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::ICollection</ref>&lt;SharedPtr&lt;System::Object&gt;&gt;&gt;(docProperty-&gt;get_Value()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>value<sp/>:<sp/>System::IterateOver(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System::DynamicCast_noexcept&lt;<ref refid="class/system.collections.generic.i_collection/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::ICollection</ref>&lt;SharedPtr&lt;System::Object&gt;&gt;&gt;(docProperty-&gt;get_Value())))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tValue:\t\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>value<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tValue:\t\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>docProperty-&gt;get_Value()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="672" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a353bad6dd6d1b17cf577096f347986f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_markup_1_1_custom_xml_part_collection" kindref="compound">Aspose::Words::Markup::CustomXmlPartCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Markup::CustomXmlPartCollection &gt; Aspose::Words::Document::get_CustomXmlParts</definition>
        <argsstring>() const</argsstring>
        <name>get_CustomXmlParts</name>
        <qualifiedname>Aspose::Words::Document::get_CustomXmlParts</qualifiedname>
        <briefdescription>
<para>Gets or sets the collection of Custom XML Data Storage Parts. </para>
        </briefdescription>
        <detaileddescription>
<para>Aspose.Words loads and saves Custom XML Parts into OOXML and DOC documents only.</para>
<para>This property cannot be <computeroutput>null</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_markup_1_1_custom_xml_part" kindref="compound">Aspose::Words::Markup::CustomXmlPart</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a structured document tag with custom XML data. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Construct<sp/>an<sp/>XML<sp/>part<sp/>that<sp/>contains<sp/>data<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>document&apos;s<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>enable<sp/>the<sp/>&quot;Developer&quot;<sp/>tab<sp/>in<sp/>Microsoft<sp/>Word,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>find<sp/>elements<sp/>from<sp/>this<sp/>collection<sp/>in<sp/>the<sp/>&quot;XML<sp/>Mapping<sp/>Pane&quot;,<sp/>along<sp/>with<sp/>a<sp/>few<sp/>default<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>xmlPartId<sp/>=<sp/><ref refid="class/system.guid/_1a33465ce6eef642b741d2307309e36202" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Guid::NewGuid</ref>().ToString(u</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>xmlPartContent<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;root&gt;&lt;text&gt;Hello<sp/>world!&lt;/text&gt;&lt;/root&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CustomXmlPart&gt;<sp/>xmlPart<sp/>=<sp/>doc-&gt;get_CustomXmlParts()-&gt;Add(xmlPartId,<sp/>xmlPartContent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.text.encoding/_1ae1508feb411c49a70249109d1caddb9c" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Text::Encoding::get_ASCII</ref>()-&gt;GetBytes(xmlPartContent),<sp/>xmlPart-&gt;get_Data());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(xmlPartId,<sp/>xmlPart-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>to<sp/>refer<sp/>to<sp/>XML<sp/>parts.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>an<sp/>index<sp/>in<sp/>the<sp/>custom<sp/>XML<sp/>part<sp/>collection:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(xmlPart,<sp/>doc-&gt;get_CustomXmlParts()-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>GUID:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(xmlPart,<sp/>doc-&gt;get_CustomXmlParts()-&gt;GetById(xmlPartId));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>an<sp/>XML<sp/>schema<sp/>association.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">xmlPart-&gt;get_Schemas()-&gt;Add(u</highlight><highlight class="stringliteral">&quot;http://www.w3.org/2001/XMLSchema&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clone<sp/>a<sp/>part,<sp/>and<sp/>then<sp/>insert<sp/>it<sp/>into<sp/>the<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CustomXmlPart&gt;<sp/>xmlPartClone<sp/>=<sp/>xmlPart-&gt;Clone();</highlight></codeline>
<codeline><highlight class="normal">xmlPartClone-&gt;set_Id(<ref refid="class/system.guid/_1a33465ce6eef642b741d2307309e36202" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Guid::NewGuid</ref>().<ref refid="class/system.object/_1a5f519d7ae99b64426cc20862bd6211fa" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">ToString</ref>(u</highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_CustomXmlParts()-&gt;Add(xmlPartClone);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_CustomXmlParts()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>the<sp/>collection<sp/>and<sp/>print<sp/>the<sp/>contents<sp/>of<sp/>each<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;CustomXmlPart&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>doc-&gt;get_CustomXmlParts()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;XML<sp/>part<sp/>index<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>ID:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current()-&gt;get_Id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tContent:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class/system.text.encoding/_1a95985d0da959aa35a89574de5fb4bfd8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Text::Encoding::get_UTF8</ref>()-&gt;GetString(enumerator-&gt;get_Current()-&gt;get_Data())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;RemoveAt&quot;<sp/>method<sp/>to<sp/>remove<sp/>the<sp/>cloned<sp/>part<sp/>by<sp/>index.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_CustomXmlParts()-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_CustomXmlParts()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clone<sp/>the<sp/>XML<sp/>parts<sp/>collection,<sp/>and<sp/>then<sp/>use<sp/>the<sp/>&quot;Clear&quot;<sp/>method<sp/>to<sp/>remove<sp/>all<sp/>its<sp/>elements<sp/>at<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CustomXmlPartCollection&gt;<sp/>customXmlParts<sp/>=<sp/>doc-&gt;get_CustomXmlParts()-&gt;Clone();</highlight></codeline>
<codeline><highlight class="normal">customXmlParts-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>structured<sp/>document<sp/>tag<sp/>that<sp/>will<sp/>display<sp/>our<sp/>part&apos;s<sp/>contents<sp/>and<sp/>insert<sp/>it<sp/>into<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tag<sp/>=<sp/>MakeObject&lt;StructuredDocumentTag&gt;(doc,<sp/>SdtType::PlainText,<sp/>MarkupLevel::Block);</highlight></codeline>
<codeline><highlight class="normal">tag-&gt;get_XmlMapping()-&gt;SetMapping(xmlPart,<sp/>u</highlight><highlight class="stringliteral">&quot;/root[1]/text[1]&quot;</highlight><highlight class="normal">,<sp/>String::Empty);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendChild(tag);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;StructuredDocumentTag.CustomXml.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1339" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab3f6a1ab5fe5f8427dfb8641ad6a87c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Document::get_DefaultTabStop</definition>
        <argsstring>()</argsstring>
        <name>get_DefaultTabStop</name>
        <qualifiedname>Aspose::Words::Document::get_DefaultTabStop</qualifiedname>
        <briefdescription>
<para>Gets or sets the interval (in points) between the default tab stops. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_tab_stop_collection" kindref="compound">Aspose::Words::TabStopCollection</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_tab_stop" kindref="compound">Aspose::Words::TabStop</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set a custom interval for tab stop positions. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>tab<sp/>stops<sp/>to<sp/>appear<sp/>every<sp/>72<sp/>points<sp/>(1<sp/>inch).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;set_DefaultTabStop(72);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>tab<sp/>character<sp/>snaps<sp/>the<sp/>text<sp/>after<sp/>it<sp/>to<sp/>the<sp/>next<sp/>closest<sp/>tab<sp/>stop<sp/>position.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acebc17d56f6ec4212793c0ab7aae4f41" kindref="member" tooltip="Tab character: &quot;\x0009&quot; or &quot;\t&quot;.">ControlChar::Tab</ref>()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;World!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a202c901d2b0f8964d3b1ba630b771a6e" kindref="member" tooltip="Tab character: (char)9 or &quot;\t&quot;.">ControlChar::TabChar</ref><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;World!&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1217" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a1c804a0f41cf247951679cd840a98223" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_digital_signatures_1_1_digital_signature_collection" kindref="compound">Aspose::Words::DigitalSignatures::DigitalSignatureCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::DigitalSignatures::DigitalSignatureCollection &gt; Aspose::Words::Document::get_DigitalSignatures</definition>
        <argsstring>() const</argsstring>
        <name>get_DigitalSignatures</name>
        <qualifiedname>Aspose::Words::Document::get_DigitalSignatures</qualifiedname>
        <briefdescription>
<para>Gets the collection of digital signatures for this document and their validation results. </para>
        </briefdescription>
        <detaileddescription>
<para>This collection contains digital signatures that were loaded from the original document. These digital signatures will not be saved when you save this <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Document</ref> object into a file or stream because saving or converting will produce a document that is different from the original and the original digital signatures will no longer be valid.</para>
<para>This collection is never null. If the document is not signed, it will contain zero elements.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to validate and display information about each signature in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Digitally<sp/>signed.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>signature<sp/>:<sp/>doc-&gt;get_DigitalSignatures())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(signature-&gt;get_IsValid()<sp/>?<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Valid&quot;</highlight><highlight class="normal">)<sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Invalid&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>signature:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tReason:\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signature-&gt;get_Comments()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\tType:\t{0}&quot;</highlight><highlight class="normal">,<sp/>signature-&gt;get_SignatureType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tSign<sp/>time:\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signature-&gt;get_SignTime()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tSubject<sp/>name:\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signature-&gt;get_CertificateHolder()-&gt;get_Certificate()-&gt;get_SubjectName()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tIssuer<sp/>name:\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signature-&gt;get_CertificateHolder()-&gt;get_Certificate()-&gt;get_IssuerName()-&gt;get_Name()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to sign documents with X.509 certificates. <programlisting><codeline><highlight class="comment">//<sp/>Verify<sp/>that<sp/>a<sp/>document<sp/>is<sp/>not<sp/>signed.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(<ref refid="class_aspose_1_1_words_1_1_file_format_util_1a0f7aae337dbe4dee5b3c025faf1ced64" kindref="member" tooltip="Detects and returns the information about a format of a document stored in a disk file.">FileFormatUtil::DetectFileFormat</ref>(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">)-&gt;get_HasDigitalSignature());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>CertificateHolder<sp/>object<sp/>from<sp/>a<sp/>PKCS12<sp/>file,<sp/>which<sp/>we<sp/>will<sp/>use<sp/>to<sp/>sign<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CertificateHolder&gt;<sp/>certificateHolder<sp/>=<sp/>CertificateHolder::Create(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;morzal.pfx&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;aw&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>saving<sp/>a<sp/>signed<sp/>copy<sp/>of<sp/>a<sp/>document<sp/>to<sp/>the<sp/>local<sp/>file<sp/>system:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/>Designate<sp/>a<sp/>document<sp/>by<sp/>a<sp/>local<sp/>system<sp/>filename<sp/>and<sp/>save<sp/>a<sp/>signed<sp/>copy<sp/>at<sp/>a<sp/>location<sp/>specified<sp/>by<sp/>another<sp/>filename.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>signOptions<sp/>=<sp/>MakeObject&lt;SignOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">signOptions-&gt;set_SignTime(<ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">DigitalSignatureUtil::Sign(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">,<sp/>ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.DigitalSignature.docx&quot;</highlight><highlight class="normal">,<sp/>certificateHolder,<sp/>signOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(<ref refid="class_aspose_1_1_words_1_1_file_format_util_1a0f7aae337dbe4dee5b3c025faf1ced64" kindref="member" tooltip="Detects and returns the information about a format of a document stored in a disk file.">FileFormatUtil::DetectFileFormat</ref>(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.DigitalSignature.docx&quot;</highlight><highlight class="normal">)-&gt;get_HasDigitalSignature());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/>Take<sp/>a<sp/>document<sp/>from<sp/>a<sp/>stream<sp/>and<sp/>save<sp/>a<sp/>signed<sp/>copy<sp/>to<sp/>another<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>inDoc<sp/>=<sp/>MakeObject&lt;System::IO::FileStream&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Open);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outDoc<sp/>=<sp/>MakeObject&lt;System::IO::FileStream&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.DigitalSignature.docx&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Create);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DigitalSignatureUtil::Sign(inDoc,<sp/>outDoc,<sp/>certificateHolder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(<ref refid="class_aspose_1_1_words_1_1_file_format_util_1a0f7aae337dbe4dee5b3c025faf1ced64" kindref="member" tooltip="Detects and returns the information about a format of a document stored in a disk file.">FileFormatUtil::DetectFileFormat</ref>(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.DigitalSignature.docx&quot;</highlight><highlight class="normal">)-&gt;get_HasDigitalSignature());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>verify<sp/>that<sp/>all<sp/>of<sp/>the<sp/>document&apos;s<sp/>digital<sp/>signatures<sp/>are<sp/>valid<sp/>and<sp/>check<sp/>their<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>signedDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.DigitalSignature.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;DigitalSignatureCollection&gt;<sp/>digitalSignatureCollection<sp/>=<sp/>signedDoc-&gt;get_DigitalSignatures();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(digitalSignatureCollection-&gt;get_IsValid());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>digitalSignatureCollection-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(DigitalSignatureType::XmlDsig,<sp/>digitalSignatureCollection-&gt;idx_get(0)-&gt;get_SignatureType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;CN=Morzal.Me&quot;</highlight><highlight class="normal">,<sp/>signedDoc-&gt;get_DigitalSignatures()-&gt;idx_get(0)-&gt;get_IssuerName());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;CN=Morzal.Me&quot;</highlight><highlight class="normal">,<sp/>signedDoc-&gt;get_DigitalSignatures()-&gt;idx_get(0)-&gt;get_SubjectName());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1728" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aa0143d63816a30e5bff964c14cb9760d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_notes_1_1_endnote_options" kindref="compound">Aspose::Words::Notes::EndnoteOptions</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Notes::EndnoteOptions &gt; Aspose::Words::Document::get_EndnoteOptions</definition>
        <argsstring>()</argsstring>
        <name>get_EndnoteOptions</name>
        <qualifiedname>Aspose::Words::Document::get_EndnoteOptions</qualifiedname>
        <briefdescription>
<para>Provides options that control numbering and positioning of endnotes in this document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to select a different place where the document collects and displays its endnotes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>endnote<sp/>is<sp/>a<sp/>way<sp/>to<sp/>attach<sp/>a<sp/>reference<sp/>or<sp/>a<sp/>side<sp/>comment<sp/>to<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>interfere<sp/>with<sp/>the<sp/>main<sp/>body<sp/>text&apos;s<sp/>flow.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserting<sp/>an<sp/>endnote<sp/>adds<sp/>a<sp/>small<sp/>superscript<sp/>reference<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>main<sp/>body<sp/>text<sp/>where<sp/>we<sp/>insert<sp/>the<sp/>endnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>endnote<sp/>also<sp/>creates<sp/>an<sp/>entry<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document,<sp/>consisting<sp/>of<sp/>a<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>matches<sp/>the<sp/>reference<sp/>symbol<sp/>in<sp/>the<sp/>main<sp/>body<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>reference<sp/>text<sp/>that<sp/>we<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertEndnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>second<sp/>section.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>&quot;Position&quot;<sp/>property<sp/>to<sp/>determine<sp/>where<sp/>the<sp/>document<sp/>will<sp/>place<sp/>all<sp/>its<sp/>endnotes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>set<sp/>the<sp/>value<sp/>of<sp/>the<sp/>&quot;Position&quot;<sp/>property<sp/>to<sp/>&quot;EndnotePosition.EndOfDocument&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>every<sp/>footnote<sp/>will<sp/>show<sp/>up<sp/>in<sp/>a<sp/>collection<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document.<sp/>This<sp/>is<sp/>the<sp/>default<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>set<sp/>the<sp/>value<sp/>of<sp/>the<sp/>&quot;Position&quot;<sp/>property<sp/>to<sp/>&quot;EndnotePosition.EndOfSection&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>every<sp/>footnote<sp/>will<sp/>show<sp/>up<sp/>in<sp/>a<sp/>collection<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>section<sp/>whose<sp/>text<sp/>contains<sp/>the<sp/>endnote&apos;s<sp/>reference<sp/>mark.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_EndnoteOptions()-&gt;set_Position(endnotePosition);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.PositionEndnote.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to change the number style of footnote/endnote reference marks. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnotes<sp/>and<sp/>endnotes<sp/>are<sp/>a<sp/>way<sp/>to<sp/>attach<sp/>a<sp/>reference<sp/>or<sp/>a<sp/>side<sp/>comment<sp/>to<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>interfere<sp/>with<sp/>the<sp/>main<sp/>body<sp/>text&apos;s<sp/>flow.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserting<sp/>a<sp/>footnote/endnote<sp/>adds<sp/>a<sp/>small<sp/>superscript<sp/>reference<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>main<sp/>body<sp/>text<sp/>where<sp/>we<sp/>insert<sp/>the<sp/>footnote/endnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>footnote/endnote<sp/>also<sp/>creates<sp/>an<sp/>entry,<sp/>which<sp/>consists<sp/>of<sp/>a<sp/>symbol<sp/>that<sp/>matches<sp/>the<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>symbol<sp/>in<sp/>the<sp/>main<sp/>body<sp/>text.<sp/>The<sp/>reference<sp/>text<sp/>that<sp/>we<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertEndnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnote<sp/>entries,<sp/>by<sp/>default,<sp/>show<sp/>up<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>each<sp/>page<sp/>that<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>reference<sp/>symbols,<sp/>and<sp/>endnotes<sp/>show<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>3.&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Custom<sp/>footnote<sp/>reference<sp/>mark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>3.&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Custom<sp/>endnote<sp/>reference<sp/>mark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>the<sp/>reference<sp/>symbol<sp/>for<sp/>each<sp/>footnote<sp/>and<sp/>endnote<sp/>is<sp/>its<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>among<sp/>all<sp/>the<sp/>document&apos;s<sp/>footnotes/endnotes.<sp/>Each<sp/>document<sp/>maintains<sp/>separate<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>footnotes<sp/>and<sp/>for<sp/>endnotes.<sp/>By<sp/>default,<sp/>footnotes<sp/>display<sp/>their<sp/>numbers<sp/>using<sp/>Arabic<sp/>numerals,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>endnotes<sp/>display<sp/>their<sp/>numbers<sp/>in<sp/>lowercase<sp/>Roman<sp/>numerals.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89da272ccb8592bafde0baf1dedce0fd3ac2" kindref="member" tooltip="Arabic numbering (1, 2, 3, ...)">NumberStyle::Arabic</ref>,<sp/>doc-&gt;get_FootnoteOptions()-&gt;get_NumberStyle());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89da039ae374b575c2cf4e150c0cc148d9bc" kindref="member" tooltip="Lower case Roman (i, ii, iii, ...)">NumberStyle::LowercaseRoman</ref>,<sp/>doc-&gt;get_EndnoteOptions()-&gt;get_NumberStyle());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>&quot;NumberStyle&quot;<sp/>property<sp/>to<sp/>apply<sp/>custom<sp/>numbering<sp/>styles<sp/>to<sp/>footnotes<sp/>and<sp/>endnotes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>footnotes/endnotes<sp/>with<sp/>custom<sp/>reference<sp/>marks.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FootnoteOptions()-&gt;set_NumberStyle(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89da3c04ee10e6af5c1dd2255e5bd5c078e9" kindref="member" tooltip="Upper case Roman (I, II, III, ...)">NumberStyle::UppercaseRoman</ref>);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_EndnoteOptions()-&gt;set_NumberStyle(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89daf49c2b9bee0060f6a031039aab3cb831" kindref="member" tooltip="Upper case Letter (A, B, C, ...)">NumberStyle::UppercaseLetter</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.RefMarkNumberStyle.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to restart footnote/endnote numbering at certain places in the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnotes<sp/>and<sp/>endnotes<sp/>are<sp/>a<sp/>way<sp/>to<sp/>attach<sp/>a<sp/>reference<sp/>or<sp/>a<sp/>side<sp/>comment<sp/>to<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>interfere<sp/>with<sp/>the<sp/>main<sp/>body<sp/>text&apos;s<sp/>flow.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserting<sp/>a<sp/>footnote/endnote<sp/>adds<sp/>a<sp/>small<sp/>superscript<sp/>reference<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>main<sp/>body<sp/>text<sp/>where<sp/>we<sp/>insert<sp/>the<sp/>footnote/endnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>footnote/endnote<sp/>also<sp/>creates<sp/>an<sp/>entry,<sp/>which<sp/>consists<sp/>of<sp/>a<sp/>symbol<sp/>that<sp/>matches<sp/>the<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>symbol<sp/>in<sp/>the<sp/>main<sp/>body<sp/>text.<sp/>The<sp/>reference<sp/>text<sp/>that<sp/>we<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertEndnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnote<sp/>entries,<sp/>by<sp/>default,<sp/>show<sp/>up<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>each<sp/>page<sp/>that<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>reference<sp/>symbols,<sp/>and<sp/>endnotes<sp/>show<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>4.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>4.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>4.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>4.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>the<sp/>reference<sp/>symbol<sp/>for<sp/>each<sp/>footnote<sp/>and<sp/>endnote<sp/>is<sp/>its<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>among<sp/>all<sp/>the<sp/>document&apos;s<sp/>footnotes/endnotes.<sp/>Each<sp/>document<sp/>maintains<sp/>separate<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>footnotes<sp/>and<sp/>endnotes<sp/>and<sp/>does<sp/>not<sp/>restart<sp/>these<sp/>counts<sp/>at<sp/>any<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(doc-&gt;get_FootnoteOptions()-&gt;get_RestartRule(),<sp/>FootnoteNumberingRule::Default);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FootnoteNumberingRule::Default,<sp/>FootnoteNumberingRule::Continuous);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>&quot;RestartRule&quot;<sp/>property<sp/>to<sp/>get<sp/>the<sp/>document<sp/>to<sp/>restart</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>footnote/endnote<sp/>counts<sp/>at<sp/>a<sp/>new<sp/>page<sp/>or<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FootnoteOptions()-&gt;set_RestartRule(FootnoteNumberingRule::RestartPage);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_EndnoteOptions()-&gt;set_RestartRule(FootnoteNumberingRule::RestartSection);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.NumberingRule.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to set a number at which the document begins the footnote/endnote count. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnotes<sp/>and<sp/>endnotes<sp/>are<sp/>a<sp/>way<sp/>to<sp/>attach<sp/>a<sp/>reference<sp/>or<sp/>a<sp/>side<sp/>comment<sp/>to<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>interfere<sp/>with<sp/>the<sp/>main<sp/>body<sp/>text&apos;s<sp/>flow.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserting<sp/>a<sp/>footnote/endnote<sp/>adds<sp/>a<sp/>small<sp/>superscript<sp/>reference<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>main<sp/>body<sp/>text<sp/>where<sp/>we<sp/>insert<sp/>the<sp/>footnote/endnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>footnote/endnote<sp/>also<sp/>creates<sp/>an<sp/>entry,<sp/>which<sp/>consists<sp/>of<sp/>a<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>matches<sp/>the<sp/>reference<sp/>symbol<sp/>in<sp/>the<sp/>main<sp/>body<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>reference<sp/>text<sp/>that<sp/>we<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertEndnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnote<sp/>entries,<sp/>by<sp/>default,<sp/>show<sp/>up<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>each<sp/>page<sp/>that<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>reference<sp/>symbols,<sp/>and<sp/>endnotes<sp/>show<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>the<sp/>reference<sp/>symbol<sp/>for<sp/>each<sp/>footnote<sp/>and<sp/>endnote<sp/>is<sp/>its<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>among<sp/>all<sp/>the<sp/>document&apos;s<sp/>footnotes/endnotes.<sp/>Each<sp/>document<sp/>maintains<sp/>separate<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>footnotes<sp/>and<sp/>for<sp/>endnotes,<sp/>which<sp/>both<sp/>begin<sp/>at<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FootnoteOptions()-&gt;get_StartNumber());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_EndnoteOptions()-&gt;get_StartNumber());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>&quot;StartNumber&quot;<sp/>property<sp/>to<sp/>get<sp/>the<sp/>document<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>begin<sp/>a<sp/>footnote<sp/>or<sp/>endnote<sp/>count<sp/>at<sp/>a<sp/>different<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_EndnoteOptions()-&gt;set_NumberStyle(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89da272ccb8592bafde0baf1dedce0fd3ac2" kindref="member" tooltip="Arabic numbering (1, 2, 3, ...)">NumberStyle::Arabic</ref>);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_EndnoteOptions()-&gt;set_StartNumber(50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.StartNumber.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2330" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a4d8c10c788824d87eb57f77bc294a35e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field_options" kindref="compound">Aspose::Words::Fields::FieldOptions</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fields::FieldOptions &gt; Aspose::Words::Document::get_FieldOptions</definition>
        <argsstring>()</argsstring>
        <name>get_FieldOptions</name>
        <qualifiedname>Aspose::Words::Document::get_FieldOptions</qualifiedname>
        <briefdescription>
<para>Gets a <bold>FieldOptions</bold> object that represents options to control field handling in the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2333" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a0c6a5fbba7435b1c8f0029235545480a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_section" kindref="compound">Aspose::Words::Section</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Section &gt; Aspose::Words::Document::get_FirstSection</definition>
        <argsstring>()</argsstring>
        <name>get_FirstSection</name>
        <qualifiedname>Aspose::Words::Document::get_FirstSection</qualifiedname>
        <briefdescription>
<para>Gets the first section in the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to replace text in a document&apos;s footer. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Footer.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;HeaderFooterCollection&gt;<sp/>headersFooters<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_HeadersFooters();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;HeaderFooter&gt;<sp/>footer<sp/>=<sp/>headersFooters-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69af8e178a8382a14e6a14bb9f08e7d6a86" kindref="member" tooltip="Primary footer, also used for odd numbered pages.">HeaderFooterType::FooterPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;FindReplaceOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_MatchCase(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_FindWholeWordsOnly(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentYear<sp/>=<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>().get_Year();</highlight></codeline>
<codeline><highlight class="normal">footer-&gt;get_Range()-&gt;Replace(u</highlight><highlight class="stringliteral">&quot;(C)<sp/>2006<sp/>Aspose<sp/>Pty<sp/>Ltd.&quot;</highlight><highlight class="normal">,<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Copyright<sp/>(C)<sp/>{0}<sp/>by<sp/>Aspose<sp/>Pty<sp/>Ltd.&quot;</highlight><highlight class="normal">,<sp/>currentYear),<sp/>options);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;HeaderFooter.ReplaceText.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to create a new section with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>blank<sp/>document<sp/>contains<sp/>one<sp/>section<sp/>by<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>contains<sp/>child<sp/>nodes<sp/>that<sp/>we<sp/>can<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>document<sp/>builder<sp/>to<sp/>add<sp/>text<sp/>to<sp/>the<sp/>first<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>second<sp/>section<sp/>by<sp/>inserting<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>section<sp/>has<sp/>its<sp/>own<sp/>page<sp/>setup<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>split<sp/>the<sp/>text<sp/>in<sp/>the<sp/>second<sp/>section<sp/>into<sp/>two<sp/>columns.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>text<sp/>in<sp/>the<sp/>first<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_LastSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Column<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2eaa25e2f84973d0cc3ec4560e03e85cb2e" kindref="member" tooltip="Explicit column break.">BreakType::ColumnBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_LastSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Section.Create.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to iterate through the children of a composite node. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Primary<sp/>header&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69af8e178a8382a14e6a14bb9f08e7d6a86" kindref="member" tooltip="Primary footer, also used for odd numbered pages.">HeaderFooterType::FooterPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Primary<sp/>footer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Section&gt;<sp/>section<sp/>=<sp/>doc-&gt;get_FirstSection();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>Section<sp/>is<sp/>a<sp/>composite<sp/>node<sp/>and<sp/>can<sp/>contain<sp/>child<sp/>nodes,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>only<sp/>if<sp/>those<sp/>child<sp/>nodes<sp/>are<sp/>of<sp/>a<sp/>&quot;Body&quot;<sp/>or<sp/>&quot;HeaderFooter&quot;<sp/>node<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>node<sp/>:<sp/>System::IterateOver(section))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(node-&gt;get_NodeType())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aac101b32dda4448cf13a93fe283dddd8" kindref="member" tooltip="A Body object that contains the main text of a section (main text story). A Body node can have Paragr...">NodeType::Body</ref>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>body<sp/>=<sp/>System::DynamicCast&lt;Body&gt;(node);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Body:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>body-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a6808239090702c608c5b3caf879821bb" kindref="member" tooltip="A HeaderFooter object that contains text of a particular header or footer inside a section....">NodeType::HeaderFooter</ref>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>headerFooter<sp/>=<sp/>System::DynamicCast&lt;HeaderFooter&gt;(node);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;HeaderFooter<sp/>type:<sp/>{0}:&quot;</highlight><highlight class="normal">,<sp/>headerFooter-&gt;get_HeaderFooterType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>headerFooter-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="class/system.exception_wrapper_3_01_details___exception_01_4/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Exception</ref>(u</highlight><highlight class="stringliteral">&quot;Unexpected<sp/>node<sp/>type<sp/>in<sp/>a<sp/>section.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="906" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ae14f8d8796557559e973fae7ab88ac8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fonts_1_1_font_settings" kindref="compound">Aspose::Words::Fonts::FontSettings</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fonts::FontSettings &gt; Aspose::Words::Document::get_FontSettings</definition>
        <argsstring>() const</argsstring>
        <name>get_FontSettings</name>
        <qualifiedname>Aspose::Words::Document::get_FontSettings</qualifiedname>
        <briefdescription>
<para>Gets or sets document font settings. </para>
        </briefdescription>
        <detaileddescription>
<para>This property allows to specify font settings per document. If set to null, default static font settings <ref refid="class_aspose_1_1_words_1_1_fonts_1_1_font_settings_1a90e0da0bb7e1ce1654777aaf3cc5f757" kindref="member">DefaultInstance</ref> will be used.</para>
<para>The default value is null.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how set font substitution rules. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Amethysta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;The<sp/>quick<sp/>brown<sp/>fox<sp/>jumps<sp/>over<sp/>the<sp/>lazy<sp/>dog.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ArrayPtr&lt;SharedPtr&lt;FontSourceBase&gt;&gt;<sp/>fontSources<sp/>=<sp/>FontSettings::get_DefaultInstance()-&gt;GetFontsSources();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>font<sp/>sources<sp/>contain<sp/>the<sp/>first<sp/>font<sp/>that<sp/>the<sp/>document<sp/>uses.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>fontSources-&gt;get_Length());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(fontSources[0]-&gt;GetAvailableFonts()-&gt;LINQ_Any([](SharedPtr&lt;PhysicalFontInfo&gt;<sp/>f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;get_FullFontName()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>font,<sp/>&quot;Amethysta&quot;,<sp/>is<sp/>unavailable.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(fontSources[0]-&gt;GetAvailableFonts()-&gt;LINQ_Any([](SharedPtr&lt;PhysicalFontInfo&gt;<sp/>f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;get_FullFontName()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;Amethysta&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>configure<sp/>a<sp/>font<sp/>substitution<sp/>table<sp/>which<sp/>determines</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>fonts<sp/>Aspose.Words<sp/>will<sp/>use<sp/>as<sp/>substitutes<sp/>for<sp/>unavailable<sp/>fonts.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>two<sp/>substitution<sp/>fonts<sp/>for<sp/>&quot;Amethysta&quot;:<sp/>&quot;Arvo&quot;,<sp/>and<sp/>&quot;Courier<sp/>New&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>first<sp/>substitute<sp/>is<sp/>unavailable,<sp/>Aspose.Words<sp/>attempts<sp/>to<sp/>use<sp/>the<sp/>second<sp/>substitute,<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_FontSettings(MakeObject&lt;FontSettings&gt;());</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FontSettings()-&gt;get_SubstitutionSettings()-&gt;get_TableSubstitution()-&gt;SetSubstitutes(u</highlight><highlight class="stringliteral">&quot;Amethysta&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MakeArray&lt;String&gt;({u</highlight><highlight class="stringliteral">&quot;Arvo&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;Amethysta&quot;<sp/>is<sp/>unavailable,<sp/>and<sp/>the<sp/>substitution<sp/>rule<sp/>states<sp/>that<sp/>the<sp/>first<sp/>font<sp/>to<sp/>use<sp/>as<sp/>a<sp/>substitute<sp/>is<sp/>&quot;Arvo&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(fontSources[0]-&gt;GetAvailableFonts()-&gt;LINQ_Any([](SharedPtr&lt;PhysicalFontInfo&gt;<sp/>f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;get_FullFontName()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;Arvo&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;Arvo&quot;<sp/>is<sp/>also<sp/>unavailable,<sp/>but<sp/>&quot;Courier<sp/>New&quot;<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(fontSources[0]-&gt;GetAvailableFonts()-&gt;LINQ_Any([](SharedPtr&lt;PhysicalFontInfo&gt;<sp/>f)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f-&gt;get_FullFontName()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>document<sp/>will<sp/>display<sp/>the<sp/>text<sp/>that<sp/>uses<sp/>the<sp/>&quot;Amethysta&quot;<sp/>font<sp/>formatted<sp/>with<sp/>&quot;Courier<sp/>New&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;FontSettings.TableSubstitution.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1775" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a4c4af54c416d93f9f9e5cbc4525b96d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_notes_1_1_footnote_options" kindref="compound">Aspose::Words::Notes::FootnoteOptions</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Notes::FootnoteOptions &gt; Aspose::Words::Document::get_FootnoteOptions</definition>
        <argsstring>()</argsstring>
        <name>get_FootnoteOptions</name>
        <qualifiedname>Aspose::Words::Document::get_FootnoteOptions</qualifiedname>
        <briefdescription>
<para>Provides options that control numbering and positioning of footnotes in this document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to select a different place where the document collects and displays its footnotes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>footnote<sp/>is<sp/>a<sp/>way<sp/>to<sp/>attach<sp/>a<sp/>reference<sp/>or<sp/>a<sp/>side<sp/>comment<sp/>to<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>interfere<sp/>with<sp/>the<sp/>main<sp/>body<sp/>text&apos;s<sp/>flow.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserting<sp/>a<sp/>footnote<sp/>adds<sp/>a<sp/>small<sp/>superscript<sp/>reference<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>main<sp/>body<sp/>text<sp/>where<sp/>we<sp/>insert<sp/>the<sp/>footnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>footnote<sp/>also<sp/>creates<sp/>an<sp/>entry<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>page,<sp/>consisting<sp/>of<sp/>a<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>matches<sp/>the<sp/>reference<sp/>symbol<sp/>in<sp/>the<sp/>main<sp/>body<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>reference<sp/>text<sp/>that<sp/>we<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertFootnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>&quot;Position&quot;<sp/>property<sp/>to<sp/>determine<sp/>where<sp/>the<sp/>document<sp/>will<sp/>place<sp/>all<sp/>its<sp/>footnotes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>set<sp/>the<sp/>value<sp/>of<sp/>the<sp/>&quot;Position&quot;<sp/>property<sp/>to<sp/>&quot;FootnotePosition.BottomOfPage&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>every<sp/>footnote<sp/>will<sp/>show<sp/>up<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>page<sp/>that<sp/>contains<sp/>its<sp/>reference<sp/>mark.<sp/>This<sp/>is<sp/>the<sp/>default<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>set<sp/>the<sp/>value<sp/>of<sp/>the<sp/>&quot;Position&quot;<sp/>property<sp/>to<sp/>&quot;FootnotePosition.BeneathText&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>every<sp/>footnote<sp/>will<sp/>show<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>page&apos;s<sp/>text<sp/>that<sp/>contains<sp/>its<sp/>reference<sp/>mark.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FootnoteOptions()-&gt;set_Position(footnotePosition);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.PositionFootnote.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to change the number style of footnote/endnote reference marks. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnotes<sp/>and<sp/>endnotes<sp/>are<sp/>a<sp/>way<sp/>to<sp/>attach<sp/>a<sp/>reference<sp/>or<sp/>a<sp/>side<sp/>comment<sp/>to<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>interfere<sp/>with<sp/>the<sp/>main<sp/>body<sp/>text&apos;s<sp/>flow.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserting<sp/>a<sp/>footnote/endnote<sp/>adds<sp/>a<sp/>small<sp/>superscript<sp/>reference<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>main<sp/>body<sp/>text<sp/>where<sp/>we<sp/>insert<sp/>the<sp/>footnote/endnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>footnote/endnote<sp/>also<sp/>creates<sp/>an<sp/>entry,<sp/>which<sp/>consists<sp/>of<sp/>a<sp/>symbol<sp/>that<sp/>matches<sp/>the<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>symbol<sp/>in<sp/>the<sp/>main<sp/>body<sp/>text.<sp/>The<sp/>reference<sp/>text<sp/>that<sp/>we<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertEndnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnote<sp/>entries,<sp/>by<sp/>default,<sp/>show<sp/>up<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>each<sp/>page<sp/>that<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>reference<sp/>symbols,<sp/>and<sp/>endnotes<sp/>show<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>3.&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Custom<sp/>footnote<sp/>reference<sp/>mark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>3.&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Custom<sp/>endnote<sp/>reference<sp/>mark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>the<sp/>reference<sp/>symbol<sp/>for<sp/>each<sp/>footnote<sp/>and<sp/>endnote<sp/>is<sp/>its<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>among<sp/>all<sp/>the<sp/>document&apos;s<sp/>footnotes/endnotes.<sp/>Each<sp/>document<sp/>maintains<sp/>separate<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>footnotes<sp/>and<sp/>for<sp/>endnotes.<sp/>By<sp/>default,<sp/>footnotes<sp/>display<sp/>their<sp/>numbers<sp/>using<sp/>Arabic<sp/>numerals,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>endnotes<sp/>display<sp/>their<sp/>numbers<sp/>in<sp/>lowercase<sp/>Roman<sp/>numerals.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89da272ccb8592bafde0baf1dedce0fd3ac2" kindref="member" tooltip="Arabic numbering (1, 2, 3, ...)">NumberStyle::Arabic</ref>,<sp/>doc-&gt;get_FootnoteOptions()-&gt;get_NumberStyle());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89da039ae374b575c2cf4e150c0cc148d9bc" kindref="member" tooltip="Lower case Roman (i, ii, iii, ...)">NumberStyle::LowercaseRoman</ref>,<sp/>doc-&gt;get_EndnoteOptions()-&gt;get_NumberStyle());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>&quot;NumberStyle&quot;<sp/>property<sp/>to<sp/>apply<sp/>custom<sp/>numbering<sp/>styles<sp/>to<sp/>footnotes<sp/>and<sp/>endnotes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>footnotes/endnotes<sp/>with<sp/>custom<sp/>reference<sp/>marks.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FootnoteOptions()-&gt;set_NumberStyle(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89da3c04ee10e6af5c1dd2255e5bd5c078e9" kindref="member" tooltip="Upper case Roman (I, II, III, ...)">NumberStyle::UppercaseRoman</ref>);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_EndnoteOptions()-&gt;set_NumberStyle(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89daf49c2b9bee0060f6a031039aab3cb831" kindref="member" tooltip="Upper case Letter (A, B, C, ...)">NumberStyle::UppercaseLetter</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.RefMarkNumberStyle.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to restart footnote/endnote numbering at certain places in the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnotes<sp/>and<sp/>endnotes<sp/>are<sp/>a<sp/>way<sp/>to<sp/>attach<sp/>a<sp/>reference<sp/>or<sp/>a<sp/>side<sp/>comment<sp/>to<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>interfere<sp/>with<sp/>the<sp/>main<sp/>body<sp/>text&apos;s<sp/>flow.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserting<sp/>a<sp/>footnote/endnote<sp/>adds<sp/>a<sp/>small<sp/>superscript<sp/>reference<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>main<sp/>body<sp/>text<sp/>where<sp/>we<sp/>insert<sp/>the<sp/>footnote/endnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>footnote/endnote<sp/>also<sp/>creates<sp/>an<sp/>entry,<sp/>which<sp/>consists<sp/>of<sp/>a<sp/>symbol<sp/>that<sp/>matches<sp/>the<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>symbol<sp/>in<sp/>the<sp/>main<sp/>body<sp/>text.<sp/>The<sp/>reference<sp/>text<sp/>that<sp/>we<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertEndnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnote<sp/>entries,<sp/>by<sp/>default,<sp/>show<sp/>up<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>each<sp/>page<sp/>that<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>reference<sp/>symbols,<sp/>and<sp/>endnotes<sp/>show<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>4.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>4.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>4.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>4.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>the<sp/>reference<sp/>symbol<sp/>for<sp/>each<sp/>footnote<sp/>and<sp/>endnote<sp/>is<sp/>its<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>among<sp/>all<sp/>the<sp/>document&apos;s<sp/>footnotes/endnotes.<sp/>Each<sp/>document<sp/>maintains<sp/>separate<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>footnotes<sp/>and<sp/>endnotes<sp/>and<sp/>does<sp/>not<sp/>restart<sp/>these<sp/>counts<sp/>at<sp/>any<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(doc-&gt;get_FootnoteOptions()-&gt;get_RestartRule(),<sp/>FootnoteNumberingRule::Default);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FootnoteNumberingRule::Default,<sp/>FootnoteNumberingRule::Continuous);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>&quot;RestartRule&quot;<sp/>property<sp/>to<sp/>get<sp/>the<sp/>document<sp/>to<sp/>restart</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>footnote/endnote<sp/>counts<sp/>at<sp/>a<sp/>new<sp/>page<sp/>or<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FootnoteOptions()-&gt;set_RestartRule(FootnoteNumberingRule::RestartPage);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_EndnoteOptions()-&gt;set_RestartRule(FootnoteNumberingRule::RestartSection);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.NumberingRule.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to set a number at which the document begins the footnote/endnote count. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnotes<sp/>and<sp/>endnotes<sp/>are<sp/>a<sp/>way<sp/>to<sp/>attach<sp/>a<sp/>reference<sp/>or<sp/>a<sp/>side<sp/>comment<sp/>to<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>interfere<sp/>with<sp/>the<sp/>main<sp/>body<sp/>text&apos;s<sp/>flow.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserting<sp/>a<sp/>footnote/endnote<sp/>adds<sp/>a<sp/>small<sp/>superscript<sp/>reference<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>main<sp/>body<sp/>text<sp/>where<sp/>we<sp/>insert<sp/>the<sp/>footnote/endnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>footnote/endnote<sp/>also<sp/>creates<sp/>an<sp/>entry,<sp/>which<sp/>consists<sp/>of<sp/>a<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>matches<sp/>the<sp/>reference<sp/>symbol<sp/>in<sp/>the<sp/>main<sp/>body<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>reference<sp/>text<sp/>that<sp/>we<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertEndnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnote<sp/>entries,<sp/>by<sp/>default,<sp/>show<sp/>up<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>each<sp/>page<sp/>that<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>reference<sp/>symbols,<sp/>and<sp/>endnotes<sp/>show<sp/>up<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>the<sp/>reference<sp/>symbol<sp/>for<sp/>each<sp/>footnote<sp/>and<sp/>endnote<sp/>is<sp/>its<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>among<sp/>all<sp/>the<sp/>document&apos;s<sp/>footnotes/endnotes.<sp/>Each<sp/>document<sp/>maintains<sp/>separate<sp/>counts</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>footnotes<sp/>and<sp/>for<sp/>endnotes,<sp/>which<sp/>both<sp/>begin<sp/>at<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FootnoteOptions()-&gt;get_StartNumber());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_EndnoteOptions()-&gt;get_StartNumber());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>&quot;StartNumber&quot;<sp/>property<sp/>to<sp/>get<sp/>the<sp/>document<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>begin<sp/>a<sp/>footnote<sp/>or<sp/>endnote<sp/>count<sp/>at<sp/>a<sp/>different<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_EndnoteOptions()-&gt;set_NumberStyle(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89da272ccb8592bafde0baf1dedce0fd3ac2" kindref="member" tooltip="Arabic numbering (1, 2, 3, ...)">NumberStyle::Arabic</ref>);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_EndnoteOptions()-&gt;set_StartNumber(50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.StartNumber.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2161" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a5d2b8cc5f540e1a733a72fd31fa67bb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_framesets_1_1_frameset" kindref="compound">Aspose::Words::Framesets::Frameset</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Framesets::Frameset &gt; Aspose::Words::Document::get_Frameset</definition>
        <argsstring>() const</argsstring>
        <name>get_Frameset</name>
        <qualifiedname>Aspose::Words::Document::get_Frameset</qualifiedname>
        <briefdescription>
<para>Returns a <ref refid="class_aspose_1_1_words_1_1_document_1a5d2b8cc5f540e1a733a72fd31fa67bb8" kindref="member">Frameset</ref> instance if this document represents a frames page. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to access frames on-page. <programlisting><codeline><highlight class="comment">//<sp/>Document<sp/>contains<sp/>several<sp/>frames<sp/>with<sp/>links<sp/>to<sp/>other<sp/>documents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Frameset.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>check<sp/>the<sp/>default<sp/>URL<sp/>(a<sp/>web<sp/>page<sp/>URL<sp/>or<sp/>local<sp/>document)<sp/>or<sp/>if<sp/>the<sp/>frame<sp/>is<sp/>an<sp/>external<sp/>resource.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;https://file-examples-com.github.io/uploads/2017/02/file-sample_100kB.docx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Frameset()-&gt;get_ChildFramesets()-&gt;idx_get(0)-&gt;get_ChildFramesets()-&gt;idx_get(0)-&gt;get_FrameDefaultUrl());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_Frameset()-&gt;get_ChildFramesets()-&gt;idx_get(0)-&gt;get_ChildFramesets()-&gt;idx_get(0)-&gt;get_IsFrameLinkToFile());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Frameset()-&gt;get_ChildFramesets()-&gt;idx_get(1)-&gt;get_FrameDefaultUrl());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_Frameset()-&gt;get_ChildFramesets()-&gt;idx_get(1)-&gt;get_IsFrameLinkToFile());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Change<sp/>properties<sp/>for<sp/>one<sp/>of<sp/>our<sp/>frames.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Frameset()-&gt;get_ChildFramesets()-&gt;idx_get(0)-&gt;get_ChildFramesets()-&gt;idx_get(0)-&gt;set_FrameDefaultUrl(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;https://github.com/aspose-words/Aspose.Words-for-.NET/blob/master/Examples/Data/Absolute%20position%20tab.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Frameset()-&gt;get_ChildFramesets()-&gt;idx_get(0)-&gt;get_ChildFramesets()-&gt;idx_get(0)-&gt;set_IsFrameLinkToFile(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1802" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a752df20b10d4e733957abf7ab630bd21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_building_blocks_1_1_glossary_document" kindref="compound">Aspose::Words::BuildingBlocks::GlossaryDocument</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::BuildingBlocks::GlossaryDocument &gt; Aspose::Words::Document::get_GlossaryDocument</definition>
        <argsstring>() const</argsstring>
        <name>get_GlossaryDocument</name>
        <qualifiedname>Aspose::Words::Document::get_GlossaryDocument</qualifiedname>
        <briefdescription>
<para>Gets or sets the glossary document within this document or template. A glossary document is a storage for AutoText, AutoCorrect and Building Block entries defined in a document. </para>
        </briefdescription>
        <detaileddescription>
<para>This property returns <computeroutput>null</computeroutput> if the document does not have a glossary document.</para>
<para>You can add a glossary document to a document by creating a <ref refid="class_aspose_1_1_words_1_1_building_blocks_1_1_glossary_document" kindref="compound">GlossaryDocument</ref> object and assigning to this property.</para>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_building_blocks_1_1_glossary_document" kindref="compound">Aspose::Words::BuildingBlocks::GlossaryDocument</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to add a custom building block to a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CreateAndInsert()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>document&apos;s<sp/>glossary<sp/>document<sp/>stores<sp/>building<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>glossaryDoc<sp/>=<sp/>MakeObject&lt;GlossaryDocument&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;set_GlossaryDocument(glossaryDoc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>building<sp/>block,<sp/>name<sp/>it,<sp/>and<sp/>then<sp/>add<sp/>it<sp/>to<sp/>the<sp/>glossary<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>block<sp/>=<sp/>MakeObject&lt;BuildingBlock&gt;(glossaryDoc);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Custom<sp/>Block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>glossaryDoc-&gt;AppendChild(block);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>new<sp/>building<sp/>block<sp/>GUIDs<sp/>have<sp/>the<sp/>same<sp/>zero<sp/>value<sp/>by<sp/>default,<sp/>and<sp/>we<sp/>can<sp/>give<sp/>them<sp/>a<sp/>new<sp/>unique<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;00000000-0000-0000-0000-000000000000&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.object_ext/_1a02a47581b14b298ef9da890fb37918da" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::ToString</ref>(block-&gt;get_Guid()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;set_Guid(<ref refid="class/system.guid/_1a33465ce6eef642b741d2307309e36202" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Guid::NewGuid</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>properties<sp/>categorize<sp/>building<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>menu<sp/>we<sp/>can<sp/>access<sp/>in<sp/>Microsoft<sp/>Word<sp/>via<sp/>&quot;Insert&quot;<sp/>-&gt;<sp/>&quot;Quick<sp/>Parts&quot;<sp/>-&gt;<sp/>&quot;Building<sp/>Blocks<sp/>Organizer&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;(Empty<sp/>Category)&quot;</highlight><highlight class="normal">,<sp/>block-&gt;get_Category());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(BuildingBlockType::None,<sp/>block-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(BuildingBlockGallery::All,<sp/>block-&gt;get_Gallery());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(BuildingBlockBehavior::Content,<sp/>block-&gt;get_Behavior());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Before<sp/>we<sp/>can<sp/>add<sp/>this<sp/>building<sp/>block<sp/>to<sp/>our<sp/>document,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>give<sp/>it<sp/>some<sp/>contents,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>we<sp/>will<sp/>do<sp/>using<sp/>a<sp/>document<sp/>visitor.<sp/>This<sp/>visitor<sp/>will<sp/>also<sp/>set<sp/>a<sp/>category,<sp/>gallery,<sp/>and<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExBuildingBlocks::BuildingBlockVisitor&gt;(glossaryDoc);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>access<sp/>the<sp/>block<sp/>that<sp/>we<sp/>just<sp/>made<sp/>from<sp/>the<sp/>glossary<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;BuildingBlock&gt;<sp/>customBlock<sp/>=<sp/>glossaryDoc-&gt;GetBuildingBlock(BuildingBlockGallery::QuickParts,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>custom<sp/>building<sp/>blocks&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Custom<sp/>Block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>block<sp/>itself<sp/>is<sp/>a<sp/>section<sp/>that<sp/>contains<sp/>the<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(String::Format(u</highlight><highlight class="stringliteral">&quot;Text<sp/>inside<sp/>{0}\f&quot;</highlight><highlight class="normal">,<sp/>customBlock-&gt;get_Name()),<sp/>customBlock-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetText());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(customBlock-&gt;get_FirstSection(),<sp/>customBlock-&gt;get_LastSection());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;void()&gt;<sp/>parseGuid<sp/>=<sp/>[&amp;customBlock]()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class/system.guid/_1a514508d9dd63f7eeb65ae305493f2411" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Guid::Parse</ref>(<ref refid="class/system.object_ext/_1a02a47581b14b298ef9da890fb37918da" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::ToString</ref>(customBlock-&gt;get_Guid()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>we<sp/>can<sp/>insert<sp/>it<sp/>into<sp/>the<sp/>document<sp/>as<sp/>a<sp/>new<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;AppendChild(doc-&gt;ImportNode(customBlock-&gt;get_FirstSection(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>find<sp/>it<sp/>in<sp/>Microsoft<sp/>Word&apos;s<sp/>Building<sp/>Blocks<sp/>Organizer<sp/>and<sp/>place<sp/>it<sp/>manually.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;BuildingBlocks.CreateAndInsert.dotx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">BuildingBlockVisitor<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>BuildingBlockVisitor(SharedPtr&lt;GlossaryDocument&gt;<sp/>ownerGlossaryDoc)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mGlossaryDoc<sp/>=<sp/>ownerGlossaryDoc;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitBuildingBlockStart(SharedPtr&lt;BuildingBlock&gt;<sp/>block)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>building<sp/>block<sp/>as<sp/>a<sp/>quick<sp/>part,<sp/>and<sp/>add<sp/>properties<sp/>used<sp/>by<sp/>Building<sp/>Blocks<sp/>Organizer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;set_Behavior(BuildingBlockBehavior::Paragraph);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;set_Category(u</highlight><highlight class="stringliteral">&quot;My<sp/>custom<sp/>building<sp/>blocks&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;set_Description(u</highlight><highlight class="stringliteral">&quot;Using<sp/>this<sp/>block<sp/>in<sp/>the<sp/>Quick<sp/>Parts<sp/>section<sp/>of<sp/>word<sp/>will<sp/>place<sp/>its<sp/>contents<sp/>at<sp/>the<sp/>cursor.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;set_Gallery(BuildingBlockGallery::QuickParts);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>section<sp/>with<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inserting<sp/>the<sp/>block<sp/>into<sp/>the<sp/>document<sp/>will<sp/>append<sp/>this<sp/>section<sp/>with<sp/>its<sp/>child<sp/>nodes<sp/>at<sp/>the<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>section<sp/>=<sp/>MakeObject&lt;Section&gt;(mGlossaryDoc);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;AppendChild(section);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;get_FirstSection()-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(mGlossaryDoc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Text<sp/>inside<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>block-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitBuildingBlockEnd(SharedPtr&lt;BuildingBlock&gt;<sp/>block)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mBuilder-&gt;Append(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Visited<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>block-&gt;get_Name()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mBuilder;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;GlossaryDocument&gt;<sp/>mGlossaryDoc;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1580" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a80fbc7f3f2a576cc8de6bb8f69954ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_GrammarChecked</definition>
        <argsstring>()</argsstring>
        <name>get_GrammarChecked</name>
        <qualifiedname>Aspose::Words::Document::get_GrammarChecked</qualifiedname>
        <briefdescription>
<para>Returns <bold>true</bold> if the document has been checked for grammar. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set spelling or grammar verifying. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>string<sp/>with<sp/>spelling<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs()-&gt;Add(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;The<sp/>speeling<sp/>in<sp/>this<sp/>documentz<sp/>is<sp/>all<sp/>broked.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Spelling/Grammar<sp/>check<sp/>start<sp/>if<sp/>we<sp/>set<sp/>properties<sp/>to<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>see<sp/>all<sp/>errors<sp/>in<sp/>Microsoft<sp/>Word<sp/>via<sp/>Review<sp/>-&gt;<sp/>Spelling<sp/>&amp;<sp/>Grammar.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>Microsoft<sp/>Word<sp/>does<sp/>not<sp/>start<sp/>grammar/spell<sp/>check<sp/>automatically<sp/>for<sp/>DOC<sp/>and<sp/>RTF<sp/>document<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_SpellingChecked(checkSpellingGrammar);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_GrammarChecked(checkSpellingGrammar);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.SpellingOrGrammar.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="548" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aed9efa15f5a75b746d9a8997ea2821fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_HasMacros</definition>
        <argsstring>()</argsstring>
        <name>get_HasMacros</name>
        <qualifiedname>Aspose::Words::Document::get_HasMacros</qualifiedname>
        <briefdescription>
<para>Returns <bold>true</bold> if the document has a VBA project (macros). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_1ab5c29ec7b74e5397562f1bd237db68a0" kindref="member">Aspose::Words::Document::RemoveMacros</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use MACROBUTTON fields to allow us to run a document&apos;s macros by clicking. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Macro.docm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_HasMacros());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>MACROBUTTON<sp/>field,<sp/>and<sp/>reference<sp/>one<sp/>of<sp/>the<sp/>document&apos;s<sp/>macros<sp/>by<sp/>name<sp/>in<sp/>the<sp/>MacroName<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldMacroButton&gt;(builder-&gt;InsertField(FieldType::FieldMacroButton,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_MacroName(u</highlight><highlight class="stringliteral">&quot;MyMacro&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_DisplayText(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Double<sp/>click<sp/>to<sp/>run<sp/>macro:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>field-&gt;get_MacroName());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;<sp/>MACROBUTTON<sp/><sp/>MyMacro<sp/>Double<sp/>click<sp/>to<sp/>run<sp/>macro:<sp/>MyMacro&quot;</highlight><highlight class="normal">,<sp/>field-&gt;GetFieldCode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>property<sp/>to<sp/>reference<sp/>&quot;ViewZoom200&quot;,<sp/>a<sp/>macro<sp/>that<sp/>ships<sp/>with<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>find<sp/>all<sp/>other<sp/>macros<sp/>via<sp/>View<sp/>-&gt;<sp/>Macros<sp/>(dropdown)<sp/>-&gt;<sp/>View<sp/>Macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>that<sp/>menu,<sp/>select<sp/>&quot;Word<sp/>Commands&quot;<sp/>from<sp/>the<sp/>&quot;Macros<sp/>in:&quot;<sp/>drop<sp/>down.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>our<sp/>document<sp/>contains<sp/>a<sp/>custom<sp/>macro<sp/>with<sp/>the<sp/>same<sp/>name<sp/>as<sp/>a<sp/>stock<sp/>macro,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>our<sp/>macro<sp/>will<sp/>be<sp/>the<sp/>one<sp/>that<sp/>the<sp/>MACROBUTTON<sp/>field<sp/>runs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal">field<sp/>=<sp/>System::DynamicCast&lt;FieldMacroButton&gt;(builder-&gt;InsertField(FieldType::FieldMacroButton,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_MacroName(u</highlight><highlight class="stringliteral">&quot;ViewZoom200&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_DisplayText(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Run<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>field-&gt;get_MacroName());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;<sp/>MACROBUTTON<sp/><sp/>ViewZoom200<sp/>Run<sp/>ViewZoom200&quot;</highlight><highlight class="normal">,<sp/>field-&gt;GetFieldCode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>document<sp/>as<sp/>a<sp/>macro-enabled<sp/>document<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Field.MACROBUTTON.docm&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1168" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a338b823b285cdb10a412c1c6253d9581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_HasRevisions</definition>
        <argsstring>()</argsstring>
        <name>get_HasRevisions</name>
        <qualifiedname>Aspose::Words::Document::get_HasRevisions</qualifiedname>
        <briefdescription>
<para>Returns <bold>true</bold> if the document has any tracked changes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with revisions in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normal<sp/>editing<sp/>of<sp/>the<sp/>document<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_HasRevisions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>register<sp/>our<sp/>edits<sp/>as<sp/>revisions,<sp/>we<sp/>need<sp/>to<sp/>declare<sp/>an<sp/>author,<sp/>and<sp/>then<sp/>start<sp/>tracking<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_HasRevisions());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>corresponds<sp/>to<sp/>the<sp/>&quot;Review&quot;<sp/>-&gt;<sp/>&quot;Tracking&quot;<sp/>-&gt;<sp/>&quot;Track<sp/>Changes&quot;<sp/>option<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;StartTrackRevisions&quot;<sp/>method<sp/>does<sp/>not<sp/>affect<sp/>its<sp/>value,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>document<sp/>is<sp/>tracking<sp/>revisions<sp/>programmatically<sp/>despite<sp/>it<sp/>having<sp/>a<sp/>value<sp/>of<sp/>&quot;false&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>open<sp/>this<sp/>document<sp/>using<sp/>Microsoft<sp/>Word,<sp/>it<sp/>will<sp/>not<sp/>be<sp/>tracking<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_TrackRevisions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>added<sp/>text<sp/>using<sp/>the<sp/>document<sp/>builder,<sp/>so<sp/>the<sp/>first<sp/>revision<sp/>is<sp/>an<sp/>insertion-type<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Revision&gt;<sp/>revision<sp/>=<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>revision-&gt;get_Author());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.<sp/>&quot;</highlight><highlight class="normal">,<sp/>revision-&gt;get_ParentNode()-&gt;GetText());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a43309065c8be1f20fae8bd689084cc2ba3e8592679127932ad5203da071625c5d" kindref="member" tooltip="New content was inserted in the document.">RevisionType::Insertion</ref>,<sp/>revision-&gt;get_RevisionType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(revision-&gt;get_DateTime().get_Date(),<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>().get_Date());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_Revisions()-&gt;get_Groups()-&gt;idx_get(0),<sp/>revision-&gt;get_Group());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>a<sp/>run<sp/>to<sp/>create<sp/>a<sp/>deletion-type<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs()-&gt;idx_get(0)-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>a<sp/>new<sp/>revision<sp/>places<sp/>it<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>revision<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a43309065c8be1f20fae8bd689084cc2baa1998652b01bdc9e7128734efb804780" kindref="member" tooltip="Content was removed from the document.">RevisionType::Deletion</ref>,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_RevisionType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>revisions<sp/>show<sp/>up<sp/>in<sp/>the<sp/>document<sp/>body<sp/>even<sp/>before<sp/>we<sp/>accept/reject<sp/>the<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rejecting<sp/>the<sp/>revision<sp/>will<sp/>remove<sp/>its<sp/>nodes<sp/>from<sp/>the<sp/>body.<sp/>Conversely,<sp/>nodes<sp/>that<sp/>make<sp/>up<sp/>delete<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>linger<sp/>in<sp/>the<sp/>document<sp/>until<sp/>we<sp/>accept<sp/>the<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision.<sp/>This<sp/>is<sp/>revision<sp/>#1.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Accepting<sp/>the<sp/>delete<sp/>revision<sp/>will<sp/>remove<sp/>its<sp/>parent<sp/>node<sp/>from<sp/>the<sp/>paragraph<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>remove<sp/>the<sp/>collection&apos;s<sp/>revision<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;Accept();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now<sp/>move<sp/>the<sp/>node<sp/>to<sp/>create<sp/>a<sp/>moving<sp/>revision<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>node<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(1);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>endNode<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(1)-&gt;get_NextSibling();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>referenceNode<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>endNode)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>nextNode<sp/>=<sp/>node-&gt;get_NextSibling();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;InsertBefore(node,<sp/>referenceNode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>nextNode;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a43309065c8be1f20fae8bd689084cc2badefe967ad0373b2274fc298f19125ca7" kindref="member" tooltip="Content was moved in the document.">RevisionType::Moving</ref>,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_RevisionType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(8,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#2.\rThis<sp/>is<sp/>revision<sp/>#1.<sp/>\rThis<sp/>is<sp/>revision<sp/>#2.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>moving<sp/>revision<sp/>is<sp/>now<sp/>at<sp/>index<sp/>1.<sp/>Reject<sp/>the<sp/>revision<sp/>to<sp/>discard<sp/>its<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Revisions()-&gt;idx_get(1)-&gt;Reject();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(6,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.<sp/>\rThis<sp/>is<sp/>revision<sp/>#2.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1131" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1afb59ebbd3fd468bf7a79bc3b8e4cecff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_settings_1_1_hyphenation_options" kindref="compound">Aspose::Words::Settings::HyphenationOptions</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Settings::HyphenationOptions &gt; Aspose::Words::Document::get_HyphenationOptions</definition>
        <argsstring>()</argsstring>
        <name>get_HyphenationOptions</name>
        <qualifiedname>Aspose::Words::Document::get_HyphenationOptions</qualifiedname>
        <briefdescription>
<para>Provides access to document hyphenation options. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to configure automatic hyphenation. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_HyphenationOptions()-&gt;set_AutoHyphenation(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_HyphenationOptions()-&gt;set_ConsecutiveHyphenLimit(2);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_HyphenationOptions()-&gt;set_HyphenationZone(720);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_HyphenationOptions()-&gt;set_HyphenateCaps(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.HyphenationOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1049" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a25116b82afb3aacf8d1b1ae811d0ae60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_section" kindref="compound">Aspose::Words::Section</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Section &gt; Aspose::Words::Document::get_LastSection</definition>
        <argsstring>()</argsstring>
        <name>get_LastSection</name>
        <qualifiedname>Aspose::Words::Document::get_LastSection</qualifiedname>
        <briefdescription>
<para>Gets the last section in the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a new section with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>blank<sp/>document<sp/>contains<sp/>one<sp/>section<sp/>by<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>contains<sp/>child<sp/>nodes<sp/>that<sp/>we<sp/>can<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>document<sp/>builder<sp/>to<sp/>add<sp/>text<sp/>to<sp/>the<sp/>first<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>second<sp/>section<sp/>by<sp/>inserting<sp/>a<sp/>section<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>section<sp/>has<sp/>its<sp/>own<sp/>page<sp/>setup<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>split<sp/>the<sp/>text<sp/>in<sp/>the<sp/>second<sp/>section<sp/>into<sp/>two<sp/>columns.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>text<sp/>in<sp/>the<sp/>first<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_LastSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Column<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2eaa25e2f84973d0cc3ec4560e03e85cb2e" kindref="member" tooltip="Explicit column break.">BreakType::ColumnBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Column<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_FirstSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_LastSection()-&gt;get_PageSetup()-&gt;get_TextColumns()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Section.Create.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="942" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aa74679decc7e2844c5904e2068053dcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_options" kindref="compound">Aspose::Words::Layout::LayoutOptions</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Layout::LayoutOptions &gt; Aspose::Words::Document::get_LayoutOptions</definition>
        <argsstring>() const</argsstring>
        <name>get_LayoutOptions</name>
        <qualifiedname>Aspose::Words::Document::get_LayoutOptions</qualifiedname>
        <briefdescription>
<para>Gets a <bold>LayoutOptions</bold> object that represents options to control the layout process of this document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to alter the appearance of revisions in a rendered output document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>revision,<sp/>then<sp/>change<sp/>the<sp/>color<sp/>of<sp/>all<sp/>revisions<sp/>to<sp/>green.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>not<sp/>a<sp/>revision.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>revision.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StopTrackRevisions();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>not<sp/>a<sp/>revision.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>bar<sp/>that<sp/>appears<sp/>to<sp/>the<sp/>left<sp/>of<sp/>every<sp/>revised<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_LayoutOptions()-&gt;get_RevisionOptions()-&gt;set_InsertedTextColor(RevisionColor::BrightGreen);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_LayoutOptions()-&gt;get_RevisionOptions()-&gt;set_ShowRevisionBars(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.LayoutOptionsRevisions.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to hide text in a rendered output document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>hidden<sp/>text,<sp/>then<sp/>specify<sp/>whether<sp/>we<sp/>wish<sp/>to<sp/>omit<sp/>it<sp/>from<sp/>a<sp/>rendered<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>not<sp/>hidden.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Hidden(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>hidden.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_LayoutOptions()-&gt;set_ShowHiddenText(showHiddenText);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.LayoutOptionsHiddenText.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to show paragraph marks in a rendered output document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>some<sp/>paragraphs,<sp/>then<sp/>enable<sp/>paragraph<sp/>marks<sp/>to<sp/>show<sp/>the<sp/>ends<sp/>of<sp/>paragraphs</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>a<sp/>pilcrow<sp/>(¶)<sp/>symbol<sp/>when<sp/>we<sp/>render<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_LayoutOptions()-&gt;set_ShowParagraphMarks(showParagraphMarks);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.LayoutOptionsParagraphMarks.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1968" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aca65fc869b20b2b9cf303af49e4b6a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_mail_merging_1_1_mail_merge" kindref="compound">Aspose::Words::MailMerging::MailMerge</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::MailMerging::MailMerge &gt; Aspose::Words::Document::get_MailMerge</definition>
        <argsstring>()</argsstring>
        <name>get_MailMerge</name>
        <qualifiedname>Aspose::Words::Document::get_MailMerge</qualifiedname>
        <briefdescription>
<para>Returns a <bold>MailMerge</bold> object that represents the mail merge functionality for the document. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="675" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a44041c02207cc181209d4138cd288a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_settings_1_1_mail_merge_settings" kindref="compound">Aspose::Words::Settings::MailMergeSettings</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Settings::MailMergeSettings &gt; Aspose::Words::Document::get_MailMergeSettings</definition>
        <argsstring>()</argsstring>
        <name>get_MailMergeSettings</name>
        <qualifiedname>Aspose::Words::Document::get_MailMergeSettings</qualifiedname>
        <briefdescription>
<para>Gets or sets the object that contains all of the mail merge information for a document. </para>
        </briefdescription>
        <detaileddescription>
<para>You can use this object to specify a mail merge data source for a document and this information (along with the available data fields) will appear in Microsoft Word when the user opens this document. Or you can use this object to query mail merge settings that the user has specified in Microsoft Word for this document.</para>
<para>This object is never null. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1024" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a1036b39c37ce18728c892adc7ae5f64a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379" kindref="member">Aspose::Words::NodeType</ref></type>
        <definition>Aspose::Words::NodeType Aspose::Words::Document::get_NodeType</definition>
        <argsstring>() const override</argsstring>
        <name>get_NodeType</name>
        <qualifiedname>Aspose::Words::Document::get_NodeType</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_node_1a7f80e8d96b7a072fca14157b25ae025e">get_NodeType</reimplements>
        <briefdescription>
<para>Returns <bold>NodeType.Document</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to traverse a composite node&apos;s tree of child nodes. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecurseChildren()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>node<sp/>that<sp/>can<sp/>contain<sp/>child<sp/>nodes,<sp/>such<sp/>as<sp/>the<sp/>document<sp/>itself,<sp/>is<sp/>composite.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc-&gt;get_IsComposite());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>recursive<sp/>function<sp/>that<sp/>will<sp/>go<sp/>through<sp/>and<sp/>print<sp/>all<sp/>the<sp/>child<sp/>nodes<sp/>of<sp/>a<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseAllNodes(doc,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseAllNodes(SharedPtr&lt;CompositeNode&gt;<sp/>parentNode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>childNode<sp/>=<sp/>parentNode-&gt;get_FirstChild();<sp/>childNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>childNode<sp/>=<sp/>childNode-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>depth))<sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(childNode-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurse<sp/>into<sp/>the<sp/>node<sp/>if<sp/>it<sp/>is<sp/>a<sp/>composite<sp/>node.<sp/>Otherwise,<sp/>print<sp/>its<sp/>contents<sp/>if<sp/>it<sp/>is<sp/>an<sp/>inline<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childNode-&gt;get_IsComposite())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseAllNodes(System::DynamicCast&lt;CompositeNode&gt;(childNode),<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(System::ObjectExt::Is&lt;Inline&gt;(childNode))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>childNode-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="597" column="32"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aeef5a15bccc35879b033ffd7dba7fdc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Document::get_OriginalFileName</definition>
        <argsstring>() const</argsstring>
        <name>get_OriginalFileName</name>
        <qualifiedname>Aspose::Words::Document::get_OriginalFileName</qualifiedname>
        <briefdescription>
<para>Gets the original file name of the document. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns null if the document was loaded from a stream or created blank.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to retrieve details of a document&apos;s load operation. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_OriginalFileName());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5fddddb463c824cf3fe353ce1bcd8f52a21c22cc98b22ad080d57e7d8d847d8cb" kindref="member" tooltip="Office Open XML WordprocessingML Document (macro-free).">LoadFormat::Docx</ref>,<sp/>doc-&gt;get_OriginalLoadFormat());</highlight></codeline>
</programlisting></para>
<para>Shows how to use the <ref refid="class_aspose_1_1_words_1_1_file_format_util" kindref="compound">FileFormatUtil</ref> methods to detect the format of a document. <programlisting><codeline><highlight class="comment">//<sp/>Load<sp/>a<sp/>document<sp/>from<sp/>a<sp/>file<sp/>that<sp/>is<sp/>missing<sp/>a<sp/>file<sp/>extension,<sp/>and<sp/>then<sp/>detect<sp/>its<sp/>file<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::FileStream&gt;<sp/>docStream<sp/>=<sp/><ref refid="class/system.i_o.file/_1acf0c889be242fb4723b33e96e9377423" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::File::OpenRead</ref>(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Word<sp/>document<sp/>with<sp/>missing<sp/>file<sp/>extension&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;FileFormatInfo&gt;<sp/>info<sp/>=<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a0f7aae337dbe4dee5b3c025faf1ced64" kindref="member" tooltip="Detects and returns the information about a format of a document stored in a disk file.">FileFormatUtil::DetectFileFormat</ref>(docStream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5fddddb463c824cf3fe353ce1bcd8f52" kindref="member" tooltip="Indicates the format of the document that is to be loaded.">LoadFormat</ref><sp/>loadFormat<sp/>=<sp/>info-&gt;get_LoadFormat();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5fddddb463c824cf3fe353ce1bcd8f52a7a48ae1b7387f8a8159c488fbd850021" kindref="member" tooltip="Microsoft Word 95 or Word 97 - 2003 Document.">LoadFormat::Doc</ref>,<sp/>loadFormat);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>methods<sp/>of<sp/>converting<sp/>a<sp/>LoadFormat<sp/>to<sp/>its<sp/>corresponding<sp/>SaveFormat.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Get<sp/>the<sp/>file<sp/>extension<sp/>string<sp/>for<sp/>the<sp/>LoadFormat,<sp/>then<sp/>get<sp/>the<sp/>corresponding<sp/>SaveFormat<sp/>from<sp/>that<sp/>string:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>fileExtension<sp/>=<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1aba6da22af8fec18907850767caff988c" kindref="member" tooltip="Converts a load format enumerated value into a file extension. The returned extension is a lower-case...">FileFormatUtil::LoadFormatToExtension</ref>(loadFormat);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847" kindref="member" tooltip="Indicates the format in which the document is saved.">SaveFormat</ref><sp/>saveFormat<sp/>=<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a0a0bd3abea01c42528bf00caa65b646d" kindref="member" tooltip="Converts a file name extension into a SaveFormat value.">FileFormatUtil::ExtensionToSaveFormat</ref>(fileExtension);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Convert<sp/>the<sp/>LoadFormat<sp/>directly<sp/>to<sp/>its<sp/>SaveFormat:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>saveFormat<sp/>=<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a7bd69632eb62cc7f3622fc434041d2ae" kindref="member" tooltip="Converts a LoadFormat value to a SaveFormat value if possible.">FileFormatUtil::LoadFormatToSaveFormat</ref>(loadFormat);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>a<sp/>document<sp/>from<sp/>the<sp/>stream,<sp/>and<sp/>then<sp/>save<sp/>it<sp/>to<sp/>the<sp/>automatically<sp/>detected<sp/>file<sp/>extension.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(docStream);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;.doc&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a25fa8cb83c9d031cc931d95b101df2da" kindref="member" tooltip="Converts a save format enumerated value into a file extension. The returned extension is a lower-case...">FileFormatUtil::SaveFormatToExtension</ref>(saveFormat));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;File.SaveToDetectedFileFormat&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a25fa8cb83c9d031cc931d95b101df2da" kindref="member" tooltip="Converts a save format enumerated value into a file extension. The returned extension is a lower-case...">FileFormatUtil::SaveFormatToExtension</ref>(saveFormat));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1625" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a68527b2162f3e618703fd4b60ffa278f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a5fddddb463c824cf3fe353ce1bcd8f52" kindref="member">Aspose::Words::LoadFormat</ref></type>
        <definition>Aspose::Words::LoadFormat Aspose::Words::Document::get_OriginalLoadFormat</definition>
        <argsstring>() const</argsstring>
        <name>get_OriginalLoadFormat</name>
        <qualifiedname>Aspose::Words::Document::get_OriginalLoadFormat</qualifiedname>
        <briefdescription>
<para>Gets the format of the original document that was loaded into this object. </para>
        </briefdescription>
        <detaileddescription>
<para>If you created a new blank document, returns the <ref refid="namespace_aspose_1_1_words_1a5fddddb463c824cf3fe353ce1bcd8f52a7a48ae1b7387f8a8159c488fbd850021" kindref="member">Doc</ref> value.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to retrieve details of a document&apos;s load operation. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_OriginalFileName());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5fddddb463c824cf3fe353ce1bcd8f52a21c22cc98b22ad080d57e7d8d847d8cb" kindref="member" tooltip="Office Open XML WordprocessingML Document (macro-free).">LoadFormat::Docx</ref>,<sp/>doc-&gt;get_OriginalLoadFormat());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1640" column="34"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aa4bd258086953e8086307ad9b2422589" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_markup_1_1_custom_part_collection" kindref="compound">Aspose::Words::Markup::CustomPartCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Markup::CustomPartCollection &gt; Aspose::Words::Document::get_PackageCustomParts</definition>
        <argsstring>() const</argsstring>
        <name>get_PackageCustomParts</name>
        <qualifiedname>Aspose::Words::Document::get_PackageCustomParts</qualifiedname>
        <briefdescription>
<para>Gets or sets the collection of custom parts (arbitrary content) that are linked to the OOXML package using &quot;unknown relationships&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para>Do not confuse these custom parts with Custom XML Data. If you need to access Custom XML parts, use the <ref refid="class_aspose_1_1_words_1_1_document_1a353bad6dd6d1b17cf577096f347986f9" kindref="member">CustomXmlParts</ref> property.</para>
<para>This collection contains OOXML parts whose parent is the OOXML package and they targets are of an &quot;unknown relationship&quot;. For more information see <ref refid="class_aspose_1_1_words_1_1_markup_1_1_custom_part" kindref="compound">CustomPart</ref>.</para>
<para>Aspose.Words loads and saves custom parts into OOXML documents only.</para>
<para>This property cannot be <computeroutput>null</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_markup_1_1_custom_part" kindref="compound">Aspose::Words::Markup::CustomPart</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to access a document&apos;s arbitrary custom parts collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Custom<sp/>parts<sp/>OOXML<sp/>package.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_PackageCustomParts()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clone<sp/>the<sp/>second<sp/>part,<sp/>then<sp/>add<sp/>the<sp/>clone<sp/>to<sp/>the<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CustomPart&gt;<sp/>clonedPart<sp/>=<sp/>doc-&gt;get_PackageCustomParts()-&gt;idx_get(1)-&gt;Clone();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_PackageCustomParts()-&gt;Add(clonedPart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_PackageCustomParts()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>and<sp/>print<sp/>every<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;CustomPart&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>doc-&gt;get_PackageCustomParts()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Part<sp/>index<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tName:\t\t\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current()-&gt;get_Name()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tContent<sp/>type:\t\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current()-&gt;get_ContentType()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tRelationship<sp/>type:\t&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current()-&gt;get_RelationshipType()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(enumerator-&gt;get_Current()-&gt;get_IsExternal()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>u</highlight><highlight class="stringliteral">&quot;\tSourced<sp/>from<sp/>outside<sp/>the<sp/>document&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\tStored<sp/>within<sp/>the<sp/>document,<sp/>length:<sp/>{0}<sp/>bytes&quot;</highlight><highlight class="normal">,<sp/>enumerator-&gt;get_Current()-&gt;get_Data()-&gt;get_Length()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>remove<sp/>elements<sp/>from<sp/>this<sp/>collection<sp/>individually,<sp/>or<sp/>all<sp/>at<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_PackageCustomParts()-&gt;RemoveAt(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_PackageCustomParts()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_PackageCustomParts()-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;get_PackageCustomParts()-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1399" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a4f1f0527992cb5c45e107ade292d9a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Document::get_PageCount</definition>
        <argsstring>()</argsstring>
        <name>get_PageCount</name>
        <qualifiedname>Aspose::Words::Document::get_PageCount</qualifiedname>
        <briefdescription>
<para>Gets the number of pages in the document as calculated by the most recent page layout operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_1a2ae9aa4c9a98097a803676fc8153857a" kindref="member">Aspose::Words::Document::UpdatePageLayout</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to count the number of pages in the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Page<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Page<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Page<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>the<sp/>expected<sp/>page<sp/>count<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;get_PageCount());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Getting<sp/>the<sp/>PageCount<sp/>property<sp/>invoked<sp/>the<sp/>document&apos;s<sp/>page<sp/>layout<sp/>to<sp/>calculate<sp/>the<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>operation<sp/>will<sp/>not<sp/>need<sp/>to<sp/>be<sp/>re-done<sp/>when<sp/>rendering<sp/>the<sp/>document<sp/>to<sp/>a<sp/>fixed<sp/>page<sp/>save<sp/>format,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>such<sp/>as<sp/>.pdf.<sp/>So<sp/>you<sp/>can<sp/>save<sp/>some<sp/>time,<sp/>especially<sp/>with<sp/>more<sp/>complex<sp/>documents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.GetPageCount.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1829" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a2ad3809cbc7e1de43275171e89369570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60" kindref="member">Aspose::Words::ProtectionType</ref></type>
        <definition>Aspose::Words::ProtectionType Aspose::Words::Document::get_ProtectionType</definition>
        <argsstring>()</argsstring>
        <name>get_ProtectionType</name>
        <qualifiedname>Aspose::Words::Document::get_ProtectionType</qualifiedname>
        <briefdescription>
<para>Gets the currently active document protection type. </para>
        </briefdescription>
        <detaileddescription>
<para>This property allows to retrieve the currently set document protection type. To change the document protection type use the <ref refid="" kindref="compound">Protect()</ref> and <ref refid="class_aspose_1_1_words_1_1_document_1a7ab24b0f997f82af1a208ac9d5066059" kindref="member">Unprotect</ref> methods.</para>
<para>When a document is protected, the user can make only limited changes, such as adding annotations, making revisions, or completing a form.</para>
<para>Note that document protection is different from write protection. Write protection is specified using the <ref refid="class_aspose_1_1_words_1_1_document_1acc42596e7c64471f4ebc56d75d2001e7" kindref="member">WriteProtection</ref></para>
<para><simplesect kind="see"><para>Aspose::Words::Document::Protect(Aspose::Words::ProtectionType, System::String) </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_1a7ab24b0f997f82af1a208ac9d5066059" kindref="member">Aspose::Words::Document::Unprotect</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_1acc42596e7c64471f4ebc56d75d2001e7" kindref="member">Aspose::Words::Document::get_WriteProtection</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to protect and unprotect a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;password&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>open<sp/>this<sp/>document<sp/>with<sp/>Microsoft<sp/>Word<sp/>intending<sp/>to<sp/>edit<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>apply<sp/>the<sp/>password<sp/>to<sp/>get<sp/>through<sp/>the<sp/>protection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.Protect.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>protection<sp/>only<sp/>applies<sp/>to<sp/>Microsoft<sp/>Word<sp/>users<sp/>opening<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>not<sp/>encrypted<sp/>the<sp/>document<sp/>in<sp/>any<sp/>way,<sp/>and<sp/>we<sp/>do<sp/>not<sp/>need<sp/>the<sp/>password<sp/>to<sp/>open<sp/>and<sp/>edit<sp/>it<sp/>programmatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>protectedDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.Protect.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>protectedDoc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(protectedDoc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>added<sp/>to<sp/>a<sp/>protected<sp/>document.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>removing<sp/>protection<sp/>from<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/>With<sp/>no<sp/>password:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a18f2c901a0893097e2ef30ac53f4086a" kindref="member" tooltip="The document is not protected.">ProtectionType::NoProtection</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;NewPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect(u</highlight><highlight class="stringliteral">&quot;WrongPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/>With<sp/>the<sp/>correct<sp/>password:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect(u</highlight><highlight class="stringliteral">&quot;NewPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a18f2c901a0893097e2ef30ac53f4086a" kindref="member" tooltip="The document is not protected.">ProtectionType::NoProtection</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="734" column="38"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a9173c5aa2e4c664da0aa13a10b6957c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_RemovePersonalInformation</definition>
        <argsstring>()</argsstring>
        <name>get_RemovePersonalInformation</name>
        <qualifiedname>Aspose::Words::Document::get_RemovePersonalInformation</qualifiedname>
        <briefdescription>
<para>Gets or sets a flag indicating that Microsoft Word will remove all user information from comments, revisions and document properties upon saving the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to enable the removal of personal information during a manual save. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>some<sp/>content<sp/>with<sp/>personal<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_BuiltInDocumentProperties()-&gt;set_Author(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_BuiltInDocumentProperties()-&gt;set_Company(u</highlight><highlight class="stringliteral">&quot;Placeholder<sp/>Inc.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Author(),<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StopTrackRevisions();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>is<sp/>equivalent<sp/>to<sp/>File<sp/>-&gt;<sp/>Options<sp/>-&gt;<sp/>Trust<sp/>Center<sp/>-&gt;<sp/>Trust<sp/>Center<sp/>Settings...<sp/>-&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Privacy<sp/>Options<sp/>-&gt;<sp/>&quot;Remove<sp/>personal<sp/>information<sp/>from<sp/>file<sp/>properties<sp/>on<sp/>save&quot;<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_RemovePersonalInformation(saveWithoutPersonalInfo);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>option<sp/>will<sp/>not<sp/>take<sp/>effect<sp/>during<sp/>a<sp/>save<sp/>operation<sp/>made<sp/>using<sp/>Aspose.Words.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Personal<sp/>data<sp/>will<sp/>be<sp/>removed<sp/>from<sp/>our<sp/>document<sp/>with<sp/>the<sp/>flag<sp/>set<sp/>when<sp/>we<sp/>save<sp/>it<sp/>manually<sp/>using<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.RemovePersonalInformation.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.RemovePersonalInformation.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(saveWithoutPersonalInfo,<sp/>doc-&gt;get_RemovePersonalInformation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Author());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Placeholder<sp/>Inc.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Company());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_Author());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2367" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a1badf7f19275367a7a3087a5d31c2d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_revision_collection" kindref="compound">Aspose::Words::RevisionCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::RevisionCollection &gt; Aspose::Words::Document::get_Revisions</definition>
        <argsstring>()</argsstring>
        <name>get_Revisions</name>
        <qualifiedname>Aspose::Words::Document::get_Revisions</qualifiedname>
        <briefdescription>
<para>Gets a collection of revisions (tracked changes) that exist in this document. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned collection is a &quot;live&quot; collection, which means if you remove parts of a document that contain revisions, the deleted revisions will automatically disappear from this collection.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with revisions in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normal<sp/>editing<sp/>of<sp/>the<sp/>document<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_HasRevisions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>register<sp/>our<sp/>edits<sp/>as<sp/>revisions,<sp/>we<sp/>need<sp/>to<sp/>declare<sp/>an<sp/>author,<sp/>and<sp/>then<sp/>start<sp/>tracking<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_HasRevisions());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>corresponds<sp/>to<sp/>the<sp/>&quot;Review&quot;<sp/>-&gt;<sp/>&quot;Tracking&quot;<sp/>-&gt;<sp/>&quot;Track<sp/>Changes&quot;<sp/>option<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;StartTrackRevisions&quot;<sp/>method<sp/>does<sp/>not<sp/>affect<sp/>its<sp/>value,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>document<sp/>is<sp/>tracking<sp/>revisions<sp/>programmatically<sp/>despite<sp/>it<sp/>having<sp/>a<sp/>value<sp/>of<sp/>&quot;false&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>open<sp/>this<sp/>document<sp/>using<sp/>Microsoft<sp/>Word,<sp/>it<sp/>will<sp/>not<sp/>be<sp/>tracking<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_TrackRevisions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>added<sp/>text<sp/>using<sp/>the<sp/>document<sp/>builder,<sp/>so<sp/>the<sp/>first<sp/>revision<sp/>is<sp/>an<sp/>insertion-type<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Revision&gt;<sp/>revision<sp/>=<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>revision-&gt;get_Author());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.<sp/>&quot;</highlight><highlight class="normal">,<sp/>revision-&gt;get_ParentNode()-&gt;GetText());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a43309065c8be1f20fae8bd689084cc2ba3e8592679127932ad5203da071625c5d" kindref="member" tooltip="New content was inserted in the document.">RevisionType::Insertion</ref>,<sp/>revision-&gt;get_RevisionType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(revision-&gt;get_DateTime().get_Date(),<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>().get_Date());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_Revisions()-&gt;get_Groups()-&gt;idx_get(0),<sp/>revision-&gt;get_Group());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>a<sp/>run<sp/>to<sp/>create<sp/>a<sp/>deletion-type<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs()-&gt;idx_get(0)-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>a<sp/>new<sp/>revision<sp/>places<sp/>it<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>revision<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a43309065c8be1f20fae8bd689084cc2baa1998652b01bdc9e7128734efb804780" kindref="member" tooltip="Content was removed from the document.">RevisionType::Deletion</ref>,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_RevisionType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>revisions<sp/>show<sp/>up<sp/>in<sp/>the<sp/>document<sp/>body<sp/>even<sp/>before<sp/>we<sp/>accept/reject<sp/>the<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rejecting<sp/>the<sp/>revision<sp/>will<sp/>remove<sp/>its<sp/>nodes<sp/>from<sp/>the<sp/>body.<sp/>Conversely,<sp/>nodes<sp/>that<sp/>make<sp/>up<sp/>delete<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>linger<sp/>in<sp/>the<sp/>document<sp/>until<sp/>we<sp/>accept<sp/>the<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision.<sp/>This<sp/>is<sp/>revision<sp/>#1.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Accepting<sp/>the<sp/>delete<sp/>revision<sp/>will<sp/>remove<sp/>its<sp/>parent<sp/>node<sp/>from<sp/>the<sp/>paragraph<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>remove<sp/>the<sp/>collection&apos;s<sp/>revision<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;Accept();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now<sp/>move<sp/>the<sp/>node<sp/>to<sp/>create<sp/>a<sp/>moving<sp/>revision<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>node<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(1);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>endNode<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(1)-&gt;get_NextSibling();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>referenceNode<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>endNode)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>nextNode<sp/>=<sp/>node-&gt;get_NextSibling();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;InsertBefore(node,<sp/>referenceNode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>nextNode;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a43309065c8be1f20fae8bd689084cc2badefe967ad0373b2274fc298f19125ca7" kindref="member" tooltip="Content was moved in the document.">RevisionType::Moving</ref>,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_RevisionType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(8,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#2.\rThis<sp/>is<sp/>revision<sp/>#1.<sp/>\rThis<sp/>is<sp/>revision<sp/>#2.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>moving<sp/>revision<sp/>is<sp/>now<sp/>at<sp/>index<sp/>1.<sp/>Reject<sp/>the<sp/>revision<sp/>to<sp/>discard<sp/>its<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Revisions()-&gt;idx_get(1)-&gt;Reject();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(6,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.<sp/>\rThis<sp/>is<sp/>revision<sp/>#2.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1914" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a2b2e4e5c02b2bf0c3bb44fdeab8eeea6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a264654053f0e32d63afba2c2e63c8ff0" kindref="member">Aspose::Words::RevisionsView</ref></type>
        <definition>Aspose::Words::RevisionsView Aspose::Words::Document::get_RevisionsView</definition>
        <argsstring>() const</argsstring>
        <name>get_RevisionsView</name>
        <qualifiedname>Aspose::Words::Document::get_RevisionsView</qualifiedname>
        <briefdescription>
<para>Gets or sets a value indicating whether to work with the original or revised version of a document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to switch between the revised and the original view of a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revisions<sp/>at<sp/>list<sp/>levels.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateListLabels();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphCollection&gt;<sp/>paragraphs<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;1.&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(0)-&gt;get_ListLabel()-&gt;get_LabelString());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;a.&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(1)-&gt;get_ListLabel()-&gt;get_LabelString());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>paragraphs-&gt;idx_get(2)-&gt;get_ListLabel()-&gt;get_LabelString());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>View<sp/>the<sp/>document<sp/>object<sp/>as<sp/>if<sp/>all<sp/>the<sp/>revisions<sp/>are<sp/>accepted.<sp/>Currently<sp/>supports<sp/>list<sp/>labels.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_RevisionsView(<ref refid="namespace_aspose_1_1_words_1a264654053f0e32d63afba2c2e63c8ff0abeae421a14a34f831c113f61323d1ab3" kindref="member" tooltip="Specifies revised version of a document.">RevisionsView::Final</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>paragraphs-&gt;idx_get(0)-&gt;get_ListLabel()-&gt;get_LabelString());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;1.&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(1)-&gt;get_ListLabel()-&gt;get_LabelString());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;a.&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(2)-&gt;get_ListLabel()-&gt;get_LabelString());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1991" column="37"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a489cd0a20fb9eda72c8384425ff9f698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_section_collection" kindref="compound">Aspose::Words::SectionCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::SectionCollection &gt; Aspose::Words::Document::get_Sections</definition>
        <argsstring>()</argsstring>
        <name>get_Sections</name>
        <qualifiedname>Aspose::Words::Document::get_Sections</qualifiedname>
        <briefdescription>
<para>Returns a collection that represents all sections in the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to specify how a new section separates itself from the previous. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>in<sp/>section<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Section<sp/>break<sp/>types<sp/>determine<sp/>how<sp/>a<sp/>new<sp/>section<sp/>separates<sp/>itself<sp/>from<sp/>the<sp/>previous<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>five<sp/>types<sp/>of<sp/>section<sp/>breaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Starts<sp/>the<sp/>next<sp/>section<sp/>on<sp/>a<sp/>new<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>in<sp/>section<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a0caffb600fa144ea6826390ec3dc9a47a30c38ed106d7d71b9a1ce0534ea1befd" kindref="member" tooltip="The section starts from a new page.">SectionStart::NewPage</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_SectionStart());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Starts<sp/>the<sp/>next<sp/>section<sp/>on<sp/>the<sp/>current<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea56cc9953f74fd357fdedaa380d9e7068" kindref="member" tooltip="Specifies start of new section on the same page as the previous section.">BreakType::SectionBreakContinuous</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>in<sp/>section<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a0caffb600fa144ea6826390ec3dc9a47a535863a82f163709557e59e2eb8139a7" kindref="member" tooltip="The new section starts on the same page as the previous section.">SectionStart::Continuous</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(2)-&gt;get_PageSetup()-&gt;get_SectionStart());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Starts<sp/>the<sp/>next<sp/>section<sp/>on<sp/>a<sp/>new<sp/>even<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2eaed73dc1bc28ff770598bf4a0c94b4741" kindref="member" tooltip="Specifies start of new section on a new even page.">BreakType::SectionBreakEvenPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>in<sp/>section<sp/>4.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a0caffb600fa144ea6826390ec3dc9a47a1a9e8e41d7ac5194a92f9ef8c2587d97" kindref="member" tooltip="The section starts on a new even page.">SectionStart::EvenPage</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(3)-&gt;get_PageSetup()-&gt;get_SectionStart());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>Starts<sp/>the<sp/>next<sp/>section<sp/>on<sp/>a<sp/>new<sp/>odd<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ead56ccaeb9649d625a04709b39b92ba05" kindref="member" tooltip="Specifies start of new section on a odd page.">BreakType::SectionBreakOddPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>in<sp/>section<sp/>5.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a0caffb600fa144ea6826390ec3dc9a47a657a427dfacdf8fda9e1cdafa484475a" kindref="member" tooltip="The section starts on a new odd page.">SectionStart::OddPage</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(4)-&gt;get_PageSetup()-&gt;get_SectionStart());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>5<sp/>-<sp/><sp/>Starts<sp/>the<sp/>next<sp/>section<sp/>on<sp/>a<sp/>new<sp/>column:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;TextColumnCollection&gt;<sp/>columns<sp/>=<sp/>builder-&gt;get_PageSetup()-&gt;get_TextColumns();</highlight></codeline>
<codeline><highlight class="normal">columns-&gt;SetCount(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2eabbb881baca30e9f3edb9e92e0f1620db" kindref="member" tooltip="Specifies start of new section in the new column.">BreakType::SectionBreakNewColumn</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>in<sp/>section<sp/>6.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a0caffb600fa144ea6826390ec3dc9a47a4c3f263d1830af7854af9ddaea15b551" kindref="member" tooltip="The section starts from a new column.">SectionStart::NewColumn</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(5)-&gt;get_PageSetup()-&gt;get_SectionStart());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;PageSetup.SetSectionStart.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to add and remove sections in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1\x000c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;Section<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Delete<sp/>the<sp/>first<sp/>section<sp/>from<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Sections()-&gt;RemoveAt(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Append<sp/>a<sp/>copy<sp/>of<sp/>what<sp/>is<sp/>now<sp/>the<sp/>first<sp/>section<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lastSectionIdx<sp/>=<sp/>doc-&gt;get_Sections()-&gt;get_Count()<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Section&gt;<sp/>newSection<sp/>=<sp/>doc-&gt;get_Sections()-&gt;idx_get(lastSectionIdx)-&gt;Clone();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Sections()-&gt;Add(newSection);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2\x000c&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;Section<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="811" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a8eb7701da98cd4f870387e00c08ab3b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_ShadeFormData</definition>
        <argsstring>()</argsstring>
        <name>get_ShadeFormData</name>
        <qualifiedname>Aspose::Words::Document::get_ShadeFormData</qualifiedname>
        <briefdescription>
<para>Specifies whether to turn on the gray shading on form fields. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply gray shading to form fields. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTextInput(u</highlight><highlight class="stringliteral">&quot;My<sp/>form<sp/>field&quot;</highlight><highlight class="normal">,<sp/>TextFormFieldType::Regular,<sp/>u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Text<sp/>contents<sp/>of<sp/>form<sp/>field,<sp/>which<sp/>are<sp/>shaded<sp/>in<sp/>grey<sp/>by<sp/>default.&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>turn<sp/>the<sp/>grey<sp/>shading<sp/>off,<sp/>so<sp/>the<sp/>bookmarked<sp/>text<sp/>will<sp/>blend<sp/>in<sp/>with<sp/>the<sp/>other<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_ShadeFormData(useGreyShading);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.ShadeFormData.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="356" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab35bc946857f1631f86e9d010f72dc4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_ShowGrammaticalErrors</definition>
        <argsstring>()</argsstring>
        <name>get_ShowGrammaticalErrors</name>
        <qualifiedname>Aspose::Words::Document::get_ShowGrammaticalErrors</qualifiedname>
        <briefdescription>
<para>Specifies whether to display grammar errors in this document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to show/hide errors in the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>two<sp/>sentences<sp/>with<sp/>mistakes<sp/>that<sp/>would<sp/>be<sp/>picked<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>spelling<sp/>and<sp/>grammar<sp/>checkers<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>a<sp/>speling<sp/>error<sp/>in<sp/>this<sp/>sentence.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Their<sp/>is<sp/>a<sp/>grammatical<sp/>error<sp/>in<sp/>this<sp/>sentence.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>these<sp/>options<sp/>are<sp/>enabled,<sp/>then<sp/>spelling<sp/>errors<sp/>will<sp/>be<sp/>underlined</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>output<sp/>document<sp/>by<sp/>a<sp/>jagged<sp/>red<sp/>line,<sp/>and<sp/>a<sp/>double<sp/>blue<sp/>line<sp/>will<sp/>highlight<sp/>grammatical<sp/>mistakes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_ShowGrammaticalErrors(showErrors);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_ShowSpellingErrors(showErrors);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.SpellingAndGrammarErrors.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="474" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a6b2f5745261281d7f42b830f2fc63a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_ShowSpellingErrors</definition>
        <argsstring>()</argsstring>
        <name>get_ShowSpellingErrors</name>
        <qualifiedname>Aspose::Words::Document::get_ShowSpellingErrors</qualifiedname>
        <briefdescription>
<para>Specifies whether to display spelling errors in this document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to show/hide errors in the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>two<sp/>sentences<sp/>with<sp/>mistakes<sp/>that<sp/>would<sp/>be<sp/>picked<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>spelling<sp/>and<sp/>grammar<sp/>checkers<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>a<sp/>speling<sp/>error<sp/>in<sp/>this<sp/>sentence.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Their<sp/>is<sp/>a<sp/>grammatical<sp/>error<sp/>in<sp/>this<sp/>sentence.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>these<sp/>options<sp/>are<sp/>enabled,<sp/>then<sp/>spelling<sp/>errors<sp/>will<sp/>be<sp/>underlined</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>output<sp/>document<sp/>by<sp/>a<sp/>jagged<sp/>red<sp/>line,<sp/>and<sp/>a<sp/>double<sp/>blue<sp/>line<sp/>will<sp/>highlight<sp/>grammatical<sp/>mistakes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_ShowGrammaticalErrors(showErrors);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_ShowSpellingErrors(showErrors);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.SpellingAndGrammarErrors.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="500" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab9a1e4a4ac922d81898c79e1fb045221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_SpellingChecked</definition>
        <argsstring>()</argsstring>
        <name>get_SpellingChecked</name>
        <qualifiedname>Aspose::Words::Document::get_SpellingChecked</qualifiedname>
        <briefdescription>
<para>Returns <bold>true</bold> if the document has been checked for spelling. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set spelling or grammar verifying. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>string<sp/>with<sp/>spelling<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs()-&gt;Add(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;The<sp/>speeling<sp/>in<sp/>this<sp/>documentz<sp/>is<sp/>all<sp/>broked.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Spelling/Grammar<sp/>check<sp/>start<sp/>if<sp/>we<sp/>set<sp/>properties<sp/>to<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>see<sp/>all<sp/>errors<sp/>in<sp/>Microsoft<sp/>Word<sp/>via<sp/>Review<sp/>-&gt;<sp/>Spelling<sp/>&amp;<sp/>Grammar.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>Microsoft<sp/>Word<sp/>does<sp/>not<sp/>start<sp/>grammar/spell<sp/>check<sp/>automatically<sp/>for<sp/>DOC<sp/>and<sp/>RTF<sp/>document<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_SpellingChecked(checkSpellingGrammar);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;set_GrammarChecked(checkSpellingGrammar);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.SpellingOrGrammar.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="524" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1adde5eb96a541e573dae09851515135bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_themes_1_1_theme" kindref="compound">Aspose::Words::Themes::Theme</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Themes::Theme &gt; Aspose::Words::Document::get_Theme</definition>
        <argsstring>()</argsstring>
        <name>get_Theme</name>
        <qualifiedname>Aspose::Words::Document::get_Theme</qualifiedname>
        <briefdescription>
<para>Gets the <ref refid="class_aspose_1_1_words_1_1_document_1adde5eb96a541e573dae09851515135bb" kindref="member">Theme</ref> object for this document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set custom colors and fonts for themes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Theme<sp/>colors.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Theme&quot;<sp/>object<sp/>gives<sp/>us<sp/>access<sp/>to<sp/>the<sp/>document<sp/>theme,<sp/>a<sp/>source<sp/>of<sp/>default<sp/>fonts<sp/>and<sp/>colors.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Theme&gt;<sp/>theme<sp/>=<sp/>doc-&gt;get_Theme();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>styles,<sp/>such<sp/>as<sp/>&quot;Heading<sp/>1&quot;<sp/>and<sp/>&quot;Subtitle&quot;,<sp/>will<sp/>inherit<sp/>these<sp/>fonts.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">theme-&gt;get_MajorFonts()-&gt;set_Latin(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">theme-&gt;get_MinorFonts()-&gt;set_Latin(u</highlight><highlight class="stringliteral">&quot;Agency<sp/>FB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Other<sp/>languages<sp/>may<sp/>also<sp/>have<sp/>their<sp/>custom<sp/>fonts<sp/>in<sp/>this<sp/>theme.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>theme-&gt;get_MajorFonts()-&gt;get_ComplexScript());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>theme-&gt;get_MajorFonts()-&gt;get_EastAsian());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>theme-&gt;get_MinorFonts()-&gt;get_ComplexScript());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>theme-&gt;get_MinorFonts()-&gt;get_EastAsian());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Colors&quot;<sp/>property<sp/>contains<sp/>the<sp/>color<sp/>palette<sp/>from<sp/>Microsoft<sp/>Word,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>appears<sp/>when<sp/>changing<sp/>shading<sp/>or<sp/>font<sp/>color.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>custom<sp/>colors<sp/>to<sp/>the<sp/>color<sp/>palette<sp/>so<sp/>we<sp/>have<sp/>easy<sp/>access<sp/>to<sp/>them<sp/>in<sp/>Microsoft<sp/>Word</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>we,<sp/>for<sp/>example,<sp/>change<sp/>the<sp/>font<sp/>color<sp/>via<sp/>&quot;Home&quot;<sp/>-&gt;<sp/>&quot;Font&quot;<sp/>-&gt;<sp/>&quot;Font<sp/>Color&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>insert<sp/>a<sp/>shape,<sp/>and<sp/>then<sp/>set<sp/>a<sp/>color<sp/>for<sp/>it<sp/>via<sp/>&quot;Shape<sp/>Format&quot;<sp/>-&gt;<sp/>&quot;Shape<sp/>Styles&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ThemeColors&gt;<sp/>colors<sp/>=<sp/>theme-&gt;get_Colors();</highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Dark1(<ref refid="class/system.drawing.color/_1a864cc00e5460c2335617672f69fac93a" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_MidnightBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Light1(<ref refid="class/system.drawing.color/_1a93d2ece18ad133fa5762a7d82078ceb8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_PaleGreen</ref>());</highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Dark2(<ref refid="class/system.drawing.color/_1a905903236d781fe3cffe1fa7cd425f28" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Indigo</ref>());</highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Light2(<ref refid="class/system.drawing.color/_1ae16dac89ce528275b76be2d29364c707" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Khaki</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Accent1(<ref refid="class/system.drawing.color/_1ad919cab7e7551108ec999af829407a7f" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_OrangeRed</ref>());</highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Accent2(<ref refid="class/system.drawing.color/_1a3b99013db35f14f1ede42c93a2543596" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightSalmon</ref>());</highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Accent3(<ref refid="class/system.drawing.color/_1ab0895ee04ac7572b810a3c0f97544c55" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Yellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Accent4(<ref refid="class/system.drawing.color/_1a9816ed430c997c426d4bb04587c87035" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Gold</ref>());</highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Accent5(<ref refid="class/system.drawing.color/_1aced32cfd62349b57cb954473c5dcd472" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_BlueViolet</ref>());</highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Accent6(<ref refid="class/system.drawing.color/_1a0820d463c307e24e534f8f723ce9e087" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_DarkViolet</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>custom<sp/>colors<sp/>to<sp/>hyperlinks<sp/>in<sp/>their<sp/>clicked<sp/>and<sp/>un-clicked<sp/>states.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_Hyperlink(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">colors-&gt;set_FollowedHyperlink(<ref refid="class/system.drawing.color/_1aa9f270d5e00c371d120b993cc715551c" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Gray</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Themes.CustomColorsAndFonts.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1267" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab658ac44514c4e24e5e6cfe142648b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::get_TrackRevisions</definition>
        <argsstring>()</argsstring>
        <name>get_TrackRevisions</name>
        <qualifiedname>Aspose::Words::Document::get_TrackRevisions</qualifiedname>
        <briefdescription>
<para><bold>True</bold> if changes are tracked when this document is edited in Microsoft Word. </para>
        </briefdescription>
        <detaileddescription>
<para>Setting this option only instructs Microsoft Word whether the track changes is turned on or off. This property has no effect on changes to the document that you make programmatically via Aspose.Words.</para>
<para>If you want to automatically track changes as they are made programmatically by <ref refid="namespace_aspose_1_1_words" kindref="compound">Aspose.Words</ref> to this document use the <ref refid="" kindref="compound">StartTrackRevisions()</ref> method.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with revisions in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Normal<sp/>editing<sp/>of<sp/>the<sp/>document<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_HasRevisions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>register<sp/>our<sp/>edits<sp/>as<sp/>revisions,<sp/>we<sp/>need<sp/>to<sp/>declare<sp/>an<sp/>author,<sp/>and<sp/>then<sp/>start<sp/>tracking<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_HasRevisions());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>corresponds<sp/>to<sp/>the<sp/>&quot;Review&quot;<sp/>-&gt;<sp/>&quot;Tracking&quot;<sp/>-&gt;<sp/>&quot;Track<sp/>Changes&quot;<sp/>option<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;StartTrackRevisions&quot;<sp/>method<sp/>does<sp/>not<sp/>affect<sp/>its<sp/>value,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>document<sp/>is<sp/>tracking<sp/>revisions<sp/>programmatically<sp/>despite<sp/>it<sp/>having<sp/>a<sp/>value<sp/>of<sp/>&quot;false&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>open<sp/>this<sp/>document<sp/>using<sp/>Microsoft<sp/>Word,<sp/>it<sp/>will<sp/>not<sp/>be<sp/>tracking<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_TrackRevisions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>added<sp/>text<sp/>using<sp/>the<sp/>document<sp/>builder,<sp/>so<sp/>the<sp/>first<sp/>revision<sp/>is<sp/>an<sp/>insertion-type<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Revision&gt;<sp/>revision<sp/>=<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>revision-&gt;get_Author());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.<sp/>&quot;</highlight><highlight class="normal">,<sp/>revision-&gt;get_ParentNode()-&gt;GetText());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a43309065c8be1f20fae8bd689084cc2ba3e8592679127932ad5203da071625c5d" kindref="member" tooltip="New content was inserted in the document.">RevisionType::Insertion</ref>,<sp/>revision-&gt;get_RevisionType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(revision-&gt;get_DateTime().get_Date(),<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>().get_Date());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_Revisions()-&gt;get_Groups()-&gt;idx_get(0),<sp/>revision-&gt;get_Group());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>a<sp/>run<sp/>to<sp/>create<sp/>a<sp/>deletion-type<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs()-&gt;idx_get(0)-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>a<sp/>new<sp/>revision<sp/>places<sp/>it<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>revision<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a43309065c8be1f20fae8bd689084cc2baa1998652b01bdc9e7128734efb804780" kindref="member" tooltip="Content was removed from the document.">RevisionType::Deletion</ref>,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_RevisionType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>revisions<sp/>show<sp/>up<sp/>in<sp/>the<sp/>document<sp/>body<sp/>even<sp/>before<sp/>we<sp/>accept/reject<sp/>the<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rejecting<sp/>the<sp/>revision<sp/>will<sp/>remove<sp/>its<sp/>nodes<sp/>from<sp/>the<sp/>body.<sp/>Conversely,<sp/>nodes<sp/>that<sp/>make<sp/>up<sp/>delete<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>linger<sp/>in<sp/>the<sp/>document<sp/>until<sp/>we<sp/>accept<sp/>the<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision.<sp/>This<sp/>is<sp/>revision<sp/>#1.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Accepting<sp/>the<sp/>delete<sp/>revision<sp/>will<sp/>remove<sp/>its<sp/>parent<sp/>node<sp/>from<sp/>the<sp/>paragraph<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>remove<sp/>the<sp/>collection&apos;s<sp/>revision<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;Accept();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Now<sp/>move<sp/>the<sp/>node<sp/>to<sp/>create<sp/>a<sp/>moving<sp/>revision<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>node<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(1);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>endNode<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(1)-&gt;get_NextSibling();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>referenceNode<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>endNode)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>nextNode<sp/>=<sp/>node-&gt;get_NextSibling();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;InsertBefore(node,<sp/>referenceNode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>nextNode;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a43309065c8be1f20fae8bd689084cc2badefe967ad0373b2274fc298f19125ca7" kindref="member" tooltip="Content was moved in the document.">RevisionType::Moving</ref>,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_RevisionType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(8,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#2.\rThis<sp/>is<sp/>revision<sp/>#1.<sp/>\rThis<sp/>is<sp/>revision<sp/>#2.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>moving<sp/>revision<sp/>is<sp/>now<sp/>at<sp/>index<sp/>1.<sp/>Reject<sp/>the<sp/>revision<sp/>to<sp/>discard<sp/>its<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Revisions()-&gt;idx_get(1)-&gt;Reject();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(6,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>revision<sp/>#1.<sp/>\rThis<sp/>is<sp/>revision<sp/>#2.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="448" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a17278ccc2503040020f45df3f76a2158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_variable_collection" kindref="compound">Aspose::Words::VariableCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::VariableCollection &gt; Aspose::Words::Document::get_Variables</definition>
        <argsstring>()</argsstring>
        <name>get_Variables</name>
        <qualifiedname>Aspose::Words::Document::get_Variables</qualifiedname>
        <briefdescription>
<para>Returns the collection of variables added to a document or template. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document&apos;s variable collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VariableCollection&gt;<sp/>variables<sp/>=<sp/>doc-&gt;get_Variables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>document<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>key/value<sp/>pair<sp/>variables,<sp/>which<sp/>we<sp/>can<sp/>add<sp/>items<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>variables-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>display<sp/>the<sp/>values<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>document<sp/>body<sp/>using<sp/>DOCVARIABLE<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldDocVariable&gt;(builder-&gt;InsertField(FieldType::FieldDocVariable,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_VariableName(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigning<sp/>values<sp/>to<sp/>existing<sp/>keys<sp/>will<sp/>update<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>then<sp/>have<sp/>to<sp/>update<sp/>DOCVARIABLE<sp/>fields<sp/>to<sp/>ensure<sp/>they<sp/>display<sp/>an<sp/>up-to-date<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>document<sp/>variables<sp/>with<sp/>a<sp/>certain<sp/>name<sp/>or<sp/>value<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;LINQ_Any([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v.get_Value()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>collection<sp/>of<sp/>variables<sp/>automatically<sp/>sorts<sp/>variables<sp/>alphabetically<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;String,<sp/>String&gt;&gt;&gt;<sp/>enumerator<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Variables()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>removing<sp/>document<sp/>variables<sp/>from<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Remove(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Clear<sp/>the<sp/>whole<sp/>collection<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1473" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ac36f0ef0873c734d83ac0928217082d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_vba_1_1_vba_project" kindref="compound">Aspose::Words::Vba::VbaProject</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Vba::VbaProject &gt; Aspose::Words::Document::get_VbaProject</definition>
        <argsstring>() const</argsstring>
        <name>get_VbaProject</name>
        <qualifiedname>Aspose::Words::Document::get_VbaProject</qualifiedname>
        <briefdescription>
<para>Gets or sets a <ref refid="class_aspose_1_1_words_1_1_document_1ac36f0ef0873c734d83ac0928217082d8" kindref="member">VbaProject</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to access a document&apos;s VBA project information. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;VBA<sp/>project.docm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>VBA<sp/>project<sp/>contains<sp/>a<sp/>collection<sp/>of<sp/>VBA<sp/>modules.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VbaProject&gt;<sp/>vbaProject<sp/>=<sp/>doc-&gt;get_VbaProject();</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(vbaProject-&gt;get_IsSigned()<sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Project<sp/>name:<sp/>{0}<sp/>signed;<sp/>Project<sp/>code<sp/>page:<sp/>{1};<sp/>Modules<sp/>count:<sp/>{2}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vbaProject-&gt;get_Name(),<sp/>vbaProject-&gt;get_CodePage(),<sp/>vbaProject-&gt;get_Modules()-&gt;LINQ_Count())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;Project<sp/>name:<sp/>{0}<sp/>not<sp/>signed;<sp/>Project<sp/>code<sp/>page:<sp/>{1};<sp/>Modules<sp/>count:<sp/>{2}\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vbaProject-&gt;get_Name(),<sp/>vbaProject-&gt;get_CodePage(),<sp/>vbaProject-&gt;get_Modules()-&gt;LINQ_Count()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VbaModuleCollection&gt;<sp/>vbaModules<sp/>=<sp/>doc-&gt;get_VbaProject()-&gt;get_Modules();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(vbaModules-&gt;LINQ_Count(),<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>module_<sp/>:<sp/>vbaModules)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Module<sp/>name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>module_-&gt;get_Name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;\nModule<sp/>code:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>module_-&gt;get_SourceCode()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>new<sp/>source<sp/>code<sp/>for<sp/>VBA<sp/>module.<sp/>You<sp/>can<sp/>access<sp/>VBA<sp/>modules<sp/>in<sp/>the<sp/>collection<sp/>either<sp/>by<sp/>index<sp/>or<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vbaModules-&gt;idx_get(0)-&gt;set_SourceCode(u</highlight><highlight class="stringliteral">&quot;Your<sp/>VBA<sp/>code...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">vbaModules-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Module1&quot;</highlight><highlight class="normal">)-&gt;set_SourceCode(u</highlight><highlight class="stringliteral">&quot;Your<sp/>VBA<sp/>code...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>a<sp/>module<sp/>from<sp/>the<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vbaModules-&gt;Remove(vbaModules-&gt;idx_get(2));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2404" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ae0f8bfdce08294e0a244f1c04c64aeaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Document::get_VersionsCount</definition>
        <argsstring>()</argsstring>
        <name>get_VersionsCount</name>
        <qualifiedname>Aspose::Words::Document::get_VersionsCount</qualifiedname>
        <briefdescription>
<para>Gets the number of document versions that was stored in the DOC document. </para>
        </briefdescription>
        <detaileddescription>
<para>Versions in Microsoft Word are accessed via the File/Versions menu. Microsoft Word supports versions only for DOC files.</para>
<para>This property allows to detect if there were document versions stored in this document before it was opened in Aspose.Words. Aspose.Words provides no other support for document versions. If you save this document using Aspose.Words, the document will be saved without versions.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with the versions count feature of older Microsoft Word documents. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Versions.doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>read<sp/>this<sp/>property<sp/>of<sp/>a<sp/>document,<sp/>but<sp/>we<sp/>cannot<sp/>preserve<sp/>it<sp/>while<sp/>saving.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>doc-&gt;get_VersionsCount());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.VersionsCount.doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.VersionsCount.doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;get_VersionsCount());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1196" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aee86ddf4cc74a7a8521b393e637aae87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_settings_1_1_view_options" kindref="compound">Aspose::Words::Settings::ViewOptions</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Settings::ViewOptions &gt; Aspose::Words::Document::get_ViewOptions</definition>
        <argsstring>()</argsstring>
        <name>get_ViewOptions</name>
        <qualifiedname>Aspose::Words::Document::get_ViewOptions</qualifiedname>
        <briefdescription>
<para>Provides options to control how the document is displayed in Microsoft Word. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set a custom zoom factor, which older versions of Microsoft Word will apply to a document upon loading. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_ViewOptions()-&gt;set_ViewType(ViewType::PageLayout);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_ViewOptions()-&gt;set_ZoomPercent(50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ZoomType::Custom,<sp/>doc-&gt;get_ViewOptions()-&gt;get_ZoomType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(ZoomType::None,<sp/>doc-&gt;get_ViewOptions()-&gt;get_ZoomType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ViewOptions.SetZoomPercentage.doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to set a custom zoom type, which older versions of Microsoft Word will apply to a document upon loading. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;ZoomType&quot;<sp/>property<sp/>to<sp/>&quot;ZoomType.PageWidth&quot;<sp/>to<sp/>get<sp/>Microsoft<sp/>Word</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>automatically<sp/>zoom<sp/>the<sp/>document<sp/>to<sp/>fit<sp/>the<sp/>width<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;ZoomType&quot;<sp/>property<sp/>to<sp/>&quot;ZoomType.FullPage&quot;<sp/>to<sp/>get<sp/>Microsoft<sp/>Word</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>automatically<sp/>zoom<sp/>the<sp/>document<sp/>to<sp/>make<sp/>the<sp/>entire<sp/>first<sp/>page<sp/>visible.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;ZoomType&quot;<sp/>property<sp/>to<sp/>&quot;ZoomType.TextFit&quot;<sp/>to<sp/>get<sp/>Microsoft<sp/>Word</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>automatically<sp/>zoom<sp/>the<sp/>document<sp/>to<sp/>fit<sp/>the<sp/>inner<sp/>text<sp/>margins<sp/>of<sp/>the<sp/>first<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_ViewOptions()-&gt;set_ZoomType(zoomType);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ViewOptions.SetZoomType.doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="979" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a60fc92c066874b68aa18423e347755e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_watermark" kindref="compound">Aspose::Words::Watermark</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Watermark &gt; Aspose::Words::Document::get_Watermark</definition>
        <argsstring>()</argsstring>
        <name>get_Watermark</name>
        <qualifiedname>Aspose::Words::Document::get_Watermark</qualifiedname>
        <briefdescription>
<para>Provides access to the document watermark. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1171" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a2c1645e76afd38ec4a11277c0b882a5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_web_extensions_1_1_task_pane_collection" kindref="compound">Aspose::Words::WebExtensions::TaskPaneCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::WebExtensions::TaskPaneCollection &gt; Aspose::Words::Document::get_WebExtensionTaskPanes</definition>
        <argsstring>() const</argsstring>
        <name>get_WebExtensionTaskPanes</name>
        <qualifiedname>Aspose::Words::Document::get_WebExtensionTaskPanes</qualifiedname>
        <briefdescription>
<para>Returns a collection that represents a list of task pane add-ins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="636" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1acc42596e7c64471f4ebc56d75d2001e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_settings_1_1_write_protection" kindref="compound">Aspose::Words::Settings::WriteProtection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Settings::WriteProtection &gt; Aspose::Words::Document::get_WriteProtection</definition>
        <argsstring>()</argsstring>
        <name>get_WriteProtection</name>
        <qualifiedname>Aspose::Words::Document::get_WriteProtection</qualifiedname>
        <briefdescription>
<para>Provides access to the document write protection options. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to protect a document with a password. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>document<sp/>is<sp/>protected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enter<sp/>a<sp/>password<sp/>up<sp/>to<sp/>15<sp/>characters<sp/>in<sp/>length,<sp/>and<sp/>then<sp/>verify<sp/>the<sp/>document&apos;s<sp/>protection<sp/>status.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_WriteProtection()-&gt;SetPassword(u</highlight><highlight class="stringliteral">&quot;MyPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_WriteProtection()-&gt;set_ReadOnlyRecommended(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_WriteProtection()-&gt;get_IsWriteProtected());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_WriteProtection()-&gt;ValidatePassword(u</highlight><highlight class="stringliteral">&quot;MyPassword&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Protection<sp/>does<sp/>not<sp/>prevent<sp/>the<sp/>document<sp/>from<sp/>being<sp/>edited<sp/>programmatically,<sp/>nor<sp/>does<sp/>it<sp/>encrypt<sp/>the<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.WriteProtection.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.WriteProtection.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_WriteProtection()-&gt;get_IsWriteProtected());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Writing<sp/>text<sp/>in<sp/>a<sp/>protected<sp/>document.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>document<sp/>is<sp/>protected.&quot;</highlight><highlight class="normal">)<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;\rWriting<sp/>text<sp/>in<sp/>a<sp/>protected<sp/>document.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1010" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1afb483f0120b0022298bfa4a9d2aabb34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_rendering_1_1_page_info" kindref="compound">Aspose::Words::Rendering::PageInfo</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Rendering::PageInfo &gt; Aspose::Words::Document::GetPageInfo</definition>
        <argsstring>(int32_t pageIndex)</argsstring>
        <name>GetPageInfo</name>
        <qualifiedname>Aspose::Words::Document::GetPageInfo</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>pageIndex</declname>
        </param>
        <briefdescription>
<para>Gets the page size, orientation and other information about a page that might be useful for printing or rendering. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pageIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The 0-based page index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4673" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab31d00d0f0c0154f793d5373364a7d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Document::JoinRunsWithSameFormatting</definition>
        <argsstring>()</argsstring>
        <name>JoinRunsWithSameFormatting</name>
        <qualifiedname>Aspose::Words::Document::JoinRunsWithSameFormatting</qualifiedname>
        <briefdescription>
<para>Joins runs with same formatting in all paragraphs of the document. </para>
        </briefdescription>
        <detaileddescription>
<para>This is an optimization method. Some documents contain adjacent runs with same formatting. Usually this occurs if a document was intensively edited manually. You can reduce the document size and speed up further processing by joining these runs.</para>
<para>The operation checks every <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Paragraph</ref> node in the document for adjacent <ref refid="class_aspose_1_1_words_1_1_run" kindref="compound">Run</ref> nodes having identical properties. It ignores unique identifiers used to track editing sessions of run creation and modification. First run in every joining sequence accumulates all text. Remaining runs are deleted from the document.</para>
<para><simplesect kind="return"><para>Number of joins performed. When <bold>N</bold> adjacent runs are being joined they count as <bold>N - 1</bold> joins.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to join runs in a document to reduce unneeded runs. <programlisting><codeline><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>adjacent<sp/>runs<sp/>of<sp/>text<sp/>with<sp/>identical<sp/>formatting,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>commonly<sp/>occurs<sp/>if<sp/>we<sp/>edit<sp/>the<sp/>same<sp/>paragraph<sp/>multiple<sp/>times<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>any<sp/>number<sp/>of<sp/>these<sp/>runs<sp/>are<sp/>adjacent<sp/>with<sp/>identical<sp/>formatting,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>document<sp/>may<sp/>be<sp/>simplified.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(317,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Combine<sp/>such<sp/>runs<sp/>with<sp/>this<sp/>method<sp/>and<sp/>verify<sp/>the<sp/>number<sp/>of<sp/>run<sp/>joins<sp/>that<sp/>will<sp/>take<sp/>place.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(121,<sp/>doc-&gt;JoinRunsWithSameFormatting());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>joins<sp/>and<sp/>the<sp/>number<sp/>of<sp/>runs<sp/>we<sp/>have<sp/>after<sp/>the<sp/>join</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>add<sp/>up<sp/>the<sp/>number<sp/>of<sp/>runs<sp/>we<sp/>had<sp/>initially.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(196,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3929" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a151fe4f9d74d7828560ef0dc46876f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::NormalizeFieldTypes</definition>
        <argsstring>()</argsstring>
        <name>NormalizeFieldTypes</name>
        <qualifiedname>Aspose::Words::Document::NormalizeFieldTypes</qualifiedname>
        <briefdescription>
<para>Changes field type values <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field_char_1a1766753378fd78bcd49bb034c3ab8f05" kindref="member">FieldType</ref> of <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field_start" kindref="compound">FieldStart</ref>, <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field_separator" kindref="compound">FieldSeparator</ref>, <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field_end" kindref="compound">FieldEnd</ref> in the whole document so that they correspond to the field types contained in the field codes. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this method after document changes that affect field types.</para>
<para>To change field type values in a specific part of the document use <ref refid="class_aspose_1_1_words_1_1_range_1af8f33ef265c065717acf13445a4f8c61" kindref="member">NormalizeFieldTypes</ref>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to get the keep a field&apos;s type up to date with its field code. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Field&gt;<sp/>field<sp/>=<sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;DATE&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Aspose.Words<sp/>automatically<sp/>detects<sp/>field<sp/>types<sp/>based<sp/>on<sp/>field<sp/>codes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FieldType::FieldDate,<sp/>field-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Manually<sp/>change<sp/>the<sp/>raw<sp/>text<sp/>of<sp/>the<sp/>field,<sp/>which<sp/>determines<sp/>the<sp/>field<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fieldText<sp/>=<sp/>System::DynamicCast&lt;Run&gt;(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal">fieldText-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;PAGE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>field<sp/>code<sp/>has<sp/>changed<sp/>this<sp/>field<sp/>to<sp/>one<sp/>of<sp/>a<sp/>different<sp/>type,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>the<sp/>field&apos;s<sp/>type<sp/>properties<sp/>still<sp/>display<sp/>the<sp/>old<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;PAGE&quot;</highlight><highlight class="normal">,<sp/>field-&gt;GetFieldCode());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FieldType::FieldDate,<sp/>field-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FieldType::FieldDate,<sp/>field-&gt;get_Start()-&gt;get_FieldType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FieldType::FieldDate,<sp/>field-&gt;get_Separator()-&gt;get_FieldType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FieldType::FieldDate,<sp/>field-&gt;get_End()-&gt;get_FieldType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Update<sp/>those<sp/>properties<sp/>with<sp/>this<sp/>method<sp/>to<sp/>display<sp/>current<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;NormalizeFieldTypes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FieldType::FieldPage,<sp/>field-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FieldType::FieldPage,<sp/>field-&gt;get_Start()-&gt;get_FieldType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FieldType::FieldPage,<sp/>field-&gt;get_Separator()-&gt;get_FieldType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FieldType::FieldPage,<sp/>field-&gt;get_End()-&gt;get_FieldType());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3895" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a8dd295a3c204d939e115e463d98c89af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::Protect</definition>
        <argsstring>(Aspose::Words::ProtectionType type)</argsstring>
        <name>Protect</name>
        <qualifiedname>Aspose::Words::Document::Protect</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60" kindref="member">Aspose::Words::ProtectionType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Protects the document from changes without changing the existing password or assigns a random password. </para>
        </briefdescription>
        <detaileddescription>
<para>When a document is protected, the user can make only limited changes, such as adding annotations, making revisions, or completing a form.</para>
<para>When you protect a document, and the document already has a protection password, the existing protection password is not changed.</para>
<para>When you protect a document, and the document does not have a protection password, this method assigns a random password that makes it impossible to unprotect the document in Microsoft Word, but you still can unprotect the document in Aspose.Words as it does not require a password when unprotecting.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the protection type for the document.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to turn off protection for a section. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1.<sp/>Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2.<sp/>Hello<sp/>again!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>text<sp/>here:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTextInput(u</highlight><highlight class="stringliteral">&quot;TextInput1&quot;</highlight><highlight class="normal">,<sp/>TextFormFieldType::Regular,<sp/>u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Placeholder<sp/>text&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>write<sp/>protection<sp/>to<sp/>every<sp/>section<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a963e26d56f1b265432d7c9d01a099b8e" kindref="member" tooltip="User can only enter data in the form fields in the document.">ProtectionType::AllowOnlyFormFields</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Turn<sp/>off<sp/>write<sp/>protection<sp/>for<sp/>the<sp/>first<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Sections()-&gt;idx_get(0)-&gt;set_ProtectedForForms(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>output<sp/>document,<sp/>we<sp/>will<sp/>be<sp/>able<sp/>to<sp/>edit<sp/>the<sp/>first<sp/>section<sp/>freely,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>will<sp/>only<sp/>be<sp/>able<sp/>to<sp/>edit<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>form<sp/>field<sp/>in<sp/>the<sp/>second<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Section.Protect.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3402" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a234f6ede113343b8103348ffab0d5523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::Protect</definition>
        <argsstring>(Aspose::Words::ProtectionType type, const System::String &amp;password)</argsstring>
        <name>Protect</name>
        <qualifiedname>Aspose::Words::Document::Protect</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60" kindref="member">Aspose::Words::ProtectionType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Protects the document from changes and optionally sets a protection password. </para>
        </briefdescription>
        <detaileddescription>
<para>When a document is protected, the user can make only limited changes, such as adding annotations, making revisions, or completing a form.</para>
<para>Note that document protection is different from write protection. Write protection is specified using the <ref refid="class_aspose_1_1_words_1_1_document_1acc42596e7c64471f4ebc56d75d2001e7" kindref="member">WriteProtection</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the protection type for the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The password to protect the document with. Specify null or empty string if you want to protect the document without a password.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to protect and unprotect a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;password&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>open<sp/>this<sp/>document<sp/>with<sp/>Microsoft<sp/>Word<sp/>intending<sp/>to<sp/>edit<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>apply<sp/>the<sp/>password<sp/>to<sp/>get<sp/>through<sp/>the<sp/>protection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.Protect.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>protection<sp/>only<sp/>applies<sp/>to<sp/>Microsoft<sp/>Word<sp/>users<sp/>opening<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>not<sp/>encrypted<sp/>the<sp/>document<sp/>in<sp/>any<sp/>way,<sp/>and<sp/>we<sp/>do<sp/>not<sp/>need<sp/>the<sp/>password<sp/>to<sp/>open<sp/>and<sp/>edit<sp/>it<sp/>programmatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>protectedDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.Protect.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>protectedDoc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(protectedDoc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>added<sp/>to<sp/>a<sp/>protected<sp/>document.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>removing<sp/>protection<sp/>from<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/>With<sp/>no<sp/>password:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a18f2c901a0893097e2ef30ac53f4086a" kindref="member" tooltip="The document is not protected.">ProtectionType::NoProtection</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;NewPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect(u</highlight><highlight class="stringliteral">&quot;WrongPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/>With<sp/>the<sp/>correct<sp/>password:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect(u</highlight><highlight class="stringliteral">&quot;NewPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a18f2c901a0893097e2ef30ac53f4086a" kindref="member" tooltip="The document is not protected.">ProtectionType::NoProtection</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3457" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab46b7dacff28c1550c9d3a04a7bb74ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::RemoveExternalSchemaReferences</definition>
        <argsstring>()</argsstring>
        <name>RemoveExternalSchemaReferences</name>
        <qualifiedname>Aspose::Words::Document::RemoveExternalSchemaReferences</qualifiedname>
        <briefdescription>
<para>Removes external XML schema references from this document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to remove all external XML schema references from a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;External<sp/>XML<sp/>schema.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;RemoveExternalSchemaReferences();</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4075" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab5c29ec7b74e5397562f1bd237db68a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::RemoveMacros</definition>
        <argsstring>()</argsstring>
        <name>RemoveMacros</name>
        <qualifiedname>Aspose::Words::Document::RemoveMacros</qualifiedname>
        <briefdescription>
<para>Removes all macros (the VBA project) as well as toolbars and command customizations from the document. </para>
        </briefdescription>
        <detaileddescription>
<para>By removing all macros from a document you can ensure the document contains no macro viruses.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to remove all macros from a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Macro.docm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_HasMacros());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Project&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_VbaProject()-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>document&apos;s<sp/>VBA<sp/>project,<sp/>along<sp/>with<sp/>all<sp/>its<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;RemoveMacros();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_HasMacros());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_VbaProject()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3709" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a6579630d88c98c3aa93f97d1493a616e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.size_f/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::SizeF</ref></type>
        <definition>System::Drawing::SizeF Aspose::Words::Document::RenderToScale</definition>
        <argsstring>(int32_t pageIndex, const System::SharedPtr&lt; System::Drawing::Graphics &gt; &amp;graphics, float x, float y, float scale)</argsstring>
        <name>RenderToScale</name>
        <qualifiedname>Aspose::Words::Document::RenderToScale</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>pageIndex</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.drawing.graphics/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Graphics</ref> &gt; &amp;</type>
          <declname>graphics</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Renders a document page into a object to a specified scale. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pageIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The 0-based page index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>The object where to render to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The X coordinate (in world units) of the top left corner of the rendered page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The Y coordinate (in world units) of the top left corner of the rendered page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>The scale for rendering the page (1.0 is 100%).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The width and height (in world units) of the rendered page.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to the individual pages of a document to graphics to create one image with thumbnails of all pages. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>and<sp/>columns<sp/>that<sp/>we<sp/>will<sp/>fill<sp/>with<sp/>thumbnails.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thumbColumns<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainder;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thumbRows<sp/>=<sp/><ref refid="struct/system.math/_1aff248738977649f48e4d9872d5a33944" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Math::DivRem</ref>(doc-&gt;get_PageCount(),<sp/>thumbColumns,<sp/>remainder);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remainder<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>thumbRows++;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Scale<sp/>the<sp/>thumbnails<sp/>relative<sp/>to<sp/>the<sp/>size<sp/>of<sp/>the<sp/>first<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>0.25f;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class/system.drawing.size/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Size</ref><sp/>thumbSize<sp/>=<sp/>doc-&gt;GetPageInfo(0)-&gt;GetSizeInPixels(scale,<sp/>96.0f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>size<sp/>of<sp/>the<sp/>image<sp/>that<sp/>will<sp/>contain<sp/>all<sp/>the<sp/>thumbnails.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgWidth<sp/>=<sp/>thumbSize.get_Width()<sp/>*<sp/>thumbColumns;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imgHeight<sp/>=<sp/>thumbSize.get_Height()<sp/>*<sp/>thumbRows;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>img<sp/>=<sp/>MakeObject&lt;System::Drawing::Bitmap&gt;(imgWidth,<sp/>imgHeight);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Graphics&gt;<sp/>gr<sp/>=<sp/><ref refid="class/system.drawing.graphics/_1aab918f2742ed5ad597185511505e6763" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Graphics::FromImage</ref>(img);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;set_TextRenderingHint(System::Drawing::Text::TextRenderingHint::AntiAliasGridFit);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>background,<sp/>which<sp/>is<sp/>transparent<sp/>by<sp/>default,<sp/>in<sp/>white.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;FillRectangle(MakeObject&lt;System::Drawing::SolidBrush&gt;(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>()),<sp/>0,<sp/>0,<sp/>imgWidth,<sp/>imgHeight);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pageIndex<sp/>=<sp/>0;<sp/>pageIndex<sp/>&lt;<sp/>doc-&gt;get_PageCount();<sp/>pageIndex++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>columnIdx;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rowIdx<sp/>=<sp/><ref refid="struct/system.math/_1aff248738977649f48e4d9872d5a33944" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Math::DivRem</ref>(pageIndex,<sp/>thumbColumns,<sp/>columnIdx);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Specify<sp/>where<sp/>we<sp/>want<sp/>the<sp/>thumbnail<sp/>to<sp/>appear.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thumbLeft<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(columnIdx<sp/>*<sp/>thumbSize.get_Width());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thumbTop<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rowIdx<sp/>*<sp/>thumbSize.get_Height());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>a<sp/>page<sp/>as<sp/>a<sp/>thumbnail,<sp/>and<sp/>then<sp/>frame<sp/>it<sp/>in<sp/>a<sp/>rectangle<sp/>of<sp/>the<sp/>same<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.size_f/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::SizeF</ref><sp/>size<sp/>=<sp/>doc-&gt;RenderToScale(pageIndex,<sp/>gr,<sp/>thumbLeft,<sp/>thumbTop,<sp/>scale);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;DrawRectangle(<ref refid="class/system.drawing.pens/_1acfaf22d7faedbf9df79a330ec74a7f21" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Pens::get_Black</ref>(),<sp/>thumbLeft,<sp/>thumbTop,<sp/>size.get_Width(),<sp/>size.get_Height());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>img-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.Thumbnails.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4603" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ac277d37bb9d1a4307635dfca68314d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Aspose::Words::Document::RenderToSize</definition>
        <argsstring>(int32_t pageIndex, const System::SharedPtr&lt; System::Drawing::Graphics &gt; &amp;graphics, float x, float y, float width, float height)</argsstring>
        <name>RenderToSize</name>
        <qualifiedname>Aspose::Words::Document::RenderToSize</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>pageIndex</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.drawing.graphics/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Graphics</ref> &gt; &amp;</type>
          <declname>graphics</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Renders a document page into a object to a specified size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pageIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The 0-based page index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>graphics</parametername>
</parameternamelist>
<parameterdescription>
<para>The object where to render to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The X coordinate (in world units) of the top left corner of the rendered page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The Y coordinate (in world units) of the top left corner of the rendered page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width (in world units) that can be occupied by the rendered page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum height (in world units) that can be occupied by the rendered page.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The scale that was automatically calculated for the rendered page to fit the specified size.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to render a document to a bitmap at a specified location and size. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bmp<sp/>=<sp/>MakeObject&lt;System::Drawing::Bitmap&gt;(700,<sp/>700);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Graphics&gt;<sp/>gr<sp/>=<sp/><ref refid="class/system.drawing.graphics/_1aab918f2742ed5ad597185511505e6763" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Graphics::FromImage</ref>(bmp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;set_TextRenderingHint(System::Drawing::Text::TextRenderingHint::AntiAliasGridFit);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;PageUnit&quot;<sp/>property<sp/>to<sp/>&quot;GraphicsUnit.Inch&quot;<sp/>to<sp/>use<sp/>inches<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measurement<sp/>unit<sp/>for<sp/>any<sp/>transformations<sp/>and<sp/>dimensions<sp/>that<sp/>we<sp/>will<sp/>define.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;set_PageUnit(System::Drawing::GraphicsUnit::Inch);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>the<sp/>output<sp/>0.5&quot;<sp/>from<sp/>the<sp/>edge.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;TranslateTransform(0.5f,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rotate<sp/>the<sp/>output<sp/>by<sp/>10<sp/>degrees.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;RotateTransform(10.0f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>a<sp/>3&quot;x3&quot;<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;DrawRectangle(MakeObject&lt;System::Drawing::Pen&gt;(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>(),<sp/>3.f<sp/>/<sp/>72.f),<sp/>0.f,<sp/>0.f,<sp/>3.f,<sp/>3.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw<sp/>the<sp/>first<sp/>page<sp/>of<sp/>our<sp/>document<sp/>with<sp/>the<sp/>same<sp/>dimensions<sp/>and<sp/>transformation<sp/>as<sp/>the<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>rectangle<sp/>will<sp/>frame<sp/>the<sp/>first<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>returnedScale<sp/>=<sp/>doc-&gt;RenderToSize(0,<sp/>gr,<sp/>0.f,<sp/>0.f,<sp/>3.f,<sp/>3.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>scaling<sp/>factor<sp/>that<sp/>the<sp/>RenderToSize<sp/>method<sp/>applied<sp/>to<sp/>the<sp/>first<sp/>page<sp/>to<sp/>fit<sp/>the<sp/>specified<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_NEAR(0.2566f,<sp/>returnedScale,<sp/>0.0001f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;PageUnit&quot;<sp/>property<sp/>to<sp/>&quot;GraphicsUnit.Millimeter&quot;<sp/>to<sp/>use<sp/>millimeters<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measurement<sp/>unit<sp/>for<sp/>any<sp/>transformations<sp/>and<sp/>dimensions<sp/>that<sp/>we<sp/>will<sp/>define.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;set_PageUnit(System::Drawing::GraphicsUnit::Millimeter);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>transformations<sp/>that<sp/>we<sp/>used<sp/>from<sp/>the<sp/>previous<sp/>rendering.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;ResetTransform();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>another<sp/>set<sp/>of<sp/>transformations.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;TranslateTransform(10.0f,<sp/>10.0f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;ScaleTransform(0.5f,<sp/>0.5f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;set_PageScale(2.f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>another<sp/>rectangle<sp/>and<sp/>use<sp/>it<sp/>to<sp/>frame<sp/>another<sp/>page<sp/>from<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gr-&gt;DrawRectangle(MakeObject&lt;System::Drawing::Pen&gt;(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>(),<sp/>1.0f),<sp/>90,<sp/>10,<sp/>50,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;RenderToSize(1,<sp/>gr,<sp/>90.0f,<sp/>10.0f,<sp/>50.0f,<sp/>100.0f);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmp-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.RenderToSize.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4668" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a2aa1ba6e67ed6a5c613bd3be21463503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_output_parameters" kindref="compound">Aspose::Words::Saving::SaveOutputParameters</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Saving::SaveOutputParameters &gt; Aspose::Words::Document::Save</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream, Aspose::Words::SaveFormat saveFormat)</argsstring>
        <name>Save</name>
        <qualifiedname>Aspose::Words::Document::Save</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847" kindref="member">Aspose::Words::SaveFormat</ref></type>
          <declname>saveFormat</declname>
        </param>
        <briefdescription>
<para>Saves the document to a stream using the specified format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream where to save the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>saveFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>The format in which to save the document.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Additional information that you can optionally use.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to save a document to an image via stream, and then read the image from that stream. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Times<sp/>New<sp/>Roman&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream<sp/>=<sp/>MakeObject&lt;System::IO::MemoryStream&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(stream,<sp/><ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a021d8346462df53d4272607b0f41a8d8" kindref="member" tooltip="Renders a page of the document and saves it as a BMP file.">SaveFormat::Bmp</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stream-&gt;set_Position(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>stream<sp/>back<sp/>into<sp/>an<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a422c9ba7c9a4a7964e7cc7a39f64faff" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromStream</ref>(stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.imaging.image_format/_1a94d5e75cba769c1474ccf268d7f134b7" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Imaging::ImageFormat::get_Bmp</ref>(),<sp/>image-&gt;get_RawFormat());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(816,<sp/>image-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(1056,<sp/>image-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to save a document to a stream. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstStream<sp/>=<sp/>MakeObject&lt;System::IO::MemoryStream&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(dstStream,<sp/><ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a21c22cc98b22ad080d57e7d8d847d8cb" kindref="member" tooltip="Saves the document as an Office Open XML WordprocessingML Document (macro-free).">SaveFormat::Docx</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>stream<sp/>contains<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!\r\rHello<sp/>Word!\r\r\rHello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>MakeObject&lt;Document&gt;(dstStream)-&gt;<ref refid="class_aspose_1_1_words_1_1_composite_node_1a08b4d2cc617495b60d85a550422e2d8f" kindref="member" tooltip="Gets the text of this node and of all its children.">GetText</ref>().<ref refid="namespace_aspose_1_1_words_1_1_loading_1ab22ce91e1a7d391cf58c639966af3fdca1fc5884251ca9f20a4fd5f79a458f94f" kindref="member">Trim</ref>());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3261" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1afdfbc7cdd39a1c90ac436970be2b4b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_output_parameters" kindref="compound">Aspose::Words::Saving::SaveOutputParameters</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Saving::SaveOutputParameters &gt; Aspose::Words::Document::Save</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream, const System::SharedPtr&lt; Aspose::Words::Saving::SaveOptions &gt; &amp;saveOptions)</argsstring>
        <name>Save</name>
        <qualifiedname>Aspose::Words::Document::Save</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_options" kindref="compound">Aspose::Words::Saving::SaveOptions</ref> &gt; &amp;</type>
          <declname>saveOptions</declname>
        </param>
        <briefdescription>
<para>Saves the document to a stream using the specified save options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream where to save the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>saveOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the options that control how the document is saved. Can be null. If this is null, the document will be saved in the binary DOC format.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Additional information that you can optionally use.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to convert only some of the pages in a document to PDF. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=<sp/><ref refid="class/system.i_o.file/_1a4ae2fe9ccdd95b23c3aa07177a6f325e" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::IO::File::Create</ref>(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;PdfSaveOptions.OnePage.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>&quot;PdfSaveOptions&quot;<sp/>object<sp/>that<sp/>we<sp/>can<sp/>pass<sp/>to<sp/>the<sp/>document&apos;s<sp/>&quot;Save&quot;<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>modify<sp/>how<sp/>that<sp/>method<sp/>converts<sp/>the<sp/>document<sp/>to<sp/>.PDF.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;PdfSaveOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;PageIndex&quot;<sp/>to<sp/>&quot;1&quot;<sp/>to<sp/>render<sp/>a<sp/>portion<sp/>of<sp/>the<sp/>document<sp/>starting<sp/>from<sp/>the<sp/>second<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>options-&gt;set_PageSet(MakeObject&lt;PageSet&gt;(1));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>document<sp/>will<sp/>contain<sp/>one<sp/>page<sp/>starting<sp/>from<sp/>page<sp/>two,<sp/>which<sp/>will<sp/>only<sp/>contain<sp/>the<sp/>second<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(stream,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3297" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a6c5bcc810b81d977725fa2b054713ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_output_parameters" kindref="compound">Aspose::Words::Saving::SaveOutputParameters</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Saving::SaveOutputParameters &gt; Aspose::Words::Document::Save</definition>
        <argsstring>(const System::String &amp;fileName)</argsstring>
        <name>Save</name>
        <qualifiedname>Aspose::Words::Document::Save</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Saves the document to a file. Automatically determines the save format from the extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name for the document. If a document with the specified file name already exists, the existing document is overwritten.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Additional information that you can optionally use.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to open a document and convert it to .PDF. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.ConvertToPdf.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3032" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1af0fd16b170f15e8913fe7548546bb463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_output_parameters" kindref="compound">Aspose::Words::Saving::SaveOutputParameters</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Saving::SaveOutputParameters &gt; Aspose::Words::Document::Save</definition>
        <argsstring>(const System::String &amp;fileName, Aspose::Words::SaveFormat saveFormat)</argsstring>
        <name>Save</name>
        <qualifiedname>Aspose::Words::Document::Save</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847" kindref="member">Aspose::Words::SaveFormat</ref></type>
          <declname>saveFormat</declname>
        </param>
        <briefdescription>
<para>Saves the document to a file in the specified format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name for the document. If a document with the specified file name already exists, the existing document is overwritten. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>saveFormat</parametername>
</parameternamelist>
<parameterdescription>
<para>The format in which to save the document.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Additional information that you can optionally use.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to convert from DOCX to HTML format. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.ConvertToHtml.html&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a3135f4019bee015e2d1ae7f77f9f3f64" kindref="member" tooltip="Saves the document in the HTML format.">SaveFormat::Html</ref>);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3050" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a33f07622e3c1fa0a6f72e85f40408154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_output_parameters" kindref="compound">Aspose::Words::Saving::SaveOutputParameters</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Saving::SaveOutputParameters &gt; Aspose::Words::Document::Save</definition>
        <argsstring>(const System::String &amp;fileName, const System::SharedPtr&lt; Aspose::Words::Saving::SaveOptions &gt; &amp;saveOptions)</argsstring>
        <name>Save</name>
        <qualifiedname>Aspose::Words::Document::Save</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_options" kindref="compound">Aspose::Words::Saving::SaveOptions</ref> &gt; &amp;</type>
          <declname>saveOptions</declname>
        </param>
        <briefdescription>
<para>Saves the document to a file using the specified save options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name for the document. If a document with the specified file name already exists, the existing document is overwritten. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>saveOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the options that control how the document is saved. Can be null.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Additional information that you can optionally use.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to improve the quality of a rendered document with SaveOptions. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(60);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Some<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;SaveOptions&gt;<sp/>options<sp/>=<sp/>MakeObject&lt;Aspose::Words::Saving::ImageSaveOptions&gt;(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a5023eac1d7fffa77b37c0e6797c97773" kindref="member" tooltip="Renders a page of the document and saves it as a JPEG file.">SaveFormat::Jpeg</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.ImageSaveOptions.Default.jpg&quot;</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_UseAntiAliasing(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_UseHighQualityRendering(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.ImageSaveOptions.HighQuality.jpg&quot;</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
</programlisting></para>
<para>Shows how to render one page from a document to a JPEG image. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>&quot;ImageSaveOptions&quot;<sp/>object<sp/>which<sp/>we<sp/>can<sp/>pass<sp/>to<sp/>the<sp/>document&apos;s<sp/>&quot;Save&quot;<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>modify<sp/>the<sp/>way<sp/>in<sp/>which<sp/>that<sp/>method<sp/>renders<sp/>the<sp/>document<sp/>into<sp/>an<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;ImageSaveOptions&gt;(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a5023eac1d7fffa77b37c0e6797c97773" kindref="member" tooltip="Renders a page of the document and saves it as a JPEG file.">SaveFormat::Jpeg</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;PageSet&quot;<sp/>to<sp/>&quot;1&quot;<sp/>to<sp/>select<sp/>the<sp/>second<sp/>page<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>zero-based<sp/>index<sp/>to<sp/>start<sp/>rendering<sp/>the<sp/>document<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_PageSet(MakeObject&lt;PageSet&gt;(1));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>save<sp/>the<sp/>document<sp/>to<sp/>the<sp/>JPEG<sp/>format,<sp/>Aspose.Words<sp/>only<sp/>renders<sp/>one<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>image<sp/>will<sp/>contain<sp/>one<sp/>page<sp/>starting<sp/>from<sp/>page<sp/>two,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>just<sp/>be<sp/>the<sp/>second<sp/>page<sp/>of<sp/>the<sp/>original<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ImageSaveOptions.OnePage.jpg&quot;</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
</programlisting></para>
<para>Shows how to render every page of a document to a separate TIFF image. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>&quot;ImageSaveOptions&quot;<sp/>object<sp/>which<sp/>we<sp/>can<sp/>pass<sp/>to<sp/>the<sp/>document&apos;s<sp/>&quot;Save&quot;<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>modify<sp/>the<sp/>way<sp/>in<sp/>which<sp/>that<sp/>method<sp/>renders<sp/>the<sp/>document<sp/>into<sp/>an<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;ImageSaveOptions&gt;(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a72ab34b91787bd01f445189e04fef4ce" kindref="member" tooltip="Renders a page or pages of the document and saves them into a single or multipage TIFF file.">SaveFormat::Tiff</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>doc-&gt;get_PageCount();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;PageSet&quot;<sp/>property<sp/>to<sp/>the<sp/>number<sp/>of<sp/>the<sp/>first<sp/>page<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>to<sp/>start<sp/>rendering<sp/>the<sp/>document<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>options-&gt;set_PageSet(MakeObject&lt;PageSet&gt;(i));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;ImageSaveOptions.PageByPage.{0}.tiff&quot;</highlight><highlight class="normal">,<sp/>i<sp/>+<sp/>1),<sp/>options);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to configure compression while saving a document as a JPEG. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>&quot;ImageSaveOptions&quot;<sp/>object<sp/>which<sp/>we<sp/>can<sp/>pass<sp/>to<sp/>the<sp/>document&apos;s<sp/>&quot;Save&quot;<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>modify<sp/>the<sp/>way<sp/>in<sp/>which<sp/>that<sp/>method<sp/>renders<sp/>the<sp/>document<sp/>into<sp/>an<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imageOptions<sp/>=<sp/>MakeObject&lt;ImageSaveOptions&gt;(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a5023eac1d7fffa77b37c0e6797c97773" kindref="member" tooltip="Renders a page of the document and saves it as a JPEG file.">SaveFormat::Jpeg</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;JpegQuality&quot;<sp/>property<sp/>to<sp/>&quot;10&quot;<sp/>to<sp/>use<sp/>stronger<sp/>compression<sp/>when<sp/>rendering<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>reduce<sp/>the<sp/>file<sp/>size<sp/>of<sp/>the<sp/>document,<sp/>but<sp/>the<sp/>image<sp/>will<sp/>display<sp/>more<sp/>prominent<sp/>compression<sp/>artifacts.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageOptions-&gt;set_JpegQuality(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ImageSaveOptions.JpegQuality.HighCompression.jpg&quot;</highlight><highlight class="normal">,<sp/>imageOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_GE(20000,<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ImageSaveOptions.JpegQuality.HighCompression.jpg&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;JpegQuality&quot;<sp/>property<sp/>to<sp/>&quot;100&quot;<sp/>to<sp/>use<sp/>weaker<sp/>compression<sp/>when<sp/>rending<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>improve<sp/>the<sp/>quality<sp/>of<sp/>the<sp/>image<sp/>at<sp/>the<sp/>cost<sp/>of<sp/>an<sp/>increased<sp/>file<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">imageOptions-&gt;set_JpegQuality(100);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ImageSaveOptions.JpegQuality.HighQuality.jpg&quot;</highlight><highlight class="normal">,<sp/>imageOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_LT(60000,<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ImageSaveOptions.JpegQuality.HighQuality.jpg&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
</programlisting></para>
<para>Shows how to convert a whole document to PDF with three levels in the document outline. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>headings<sp/>of<sp/>levels<sp/>1<sp/>to<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_ParagraphFormat()-&gt;get_IsHeading());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a5c20c643b1731618a5eddb7660b10a3e" kindref="member" tooltip="The Heading 3 style.">StyleIdentifier::Heading3</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a1418e44fe2e519f30b903c1fbf263097" kindref="member" tooltip="The Heading 4 style.">StyleIdentifier::Heading4</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2.2.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2.2.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34ada414e449ed54b2fb5c358b5213b7b4a" kindref="member" tooltip="The Heading 5 style.">StyleIdentifier::Heading5</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2.2.2.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2.2.2.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>&quot;PdfSaveOptions&quot;<sp/>object<sp/>that<sp/>we<sp/>can<sp/>pass<sp/>to<sp/>the<sp/>document&apos;s<sp/>&quot;Save&quot;<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>modify<sp/>how<sp/>that<sp/>method<sp/>converts<sp/>the<sp/>document<sp/>to<sp/>.PDF.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;PdfSaveOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>PDF<sp/>document<sp/>will<sp/>contain<sp/>an<sp/>outline,<sp/>which<sp/>is<sp/>a<sp/>table<sp/>of<sp/>contents<sp/>that<sp/>lists<sp/>headings<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clicking<sp/>on<sp/>an<sp/>entry<sp/>in<sp/>this<sp/>outline<sp/>will<sp/>take<sp/>us<sp/>to<sp/>the<sp/>location<sp/>of<sp/>its<sp/>respective<sp/>heading.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;HeadingsOutlineLevels&quot;<sp/>property<sp/>to<sp/>&quot;4&quot;<sp/>to<sp/>exclude<sp/>all<sp/>headings<sp/>whose<sp/>levels<sp/>are<sp/>above<sp/>4<sp/>from<sp/>the<sp/>outline.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">options-&gt;get_OutlineOptions()-&gt;set_HeadingsOutlineLevels(4);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>outline<sp/>entry<sp/>has<sp/>subsequent<sp/>entries<sp/>of<sp/>a<sp/>higher<sp/>level<sp/>inbetween<sp/>itself<sp/>and<sp/>the<sp/>next<sp/>entry<sp/>of<sp/>the<sp/>same<sp/>or<sp/>lower<sp/>level,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>arrow<sp/>will<sp/>appear<sp/>to<sp/>the<sp/>left<sp/>of<sp/>the<sp/>entry.<sp/>This<sp/>entry<sp/>is<sp/>the<sp/>&quot;owner&quot;<sp/>of<sp/>several<sp/>such<sp/>&quot;sub-entries&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>our<sp/>document,<sp/>the<sp/>outline<sp/>entries<sp/>from<sp/>the<sp/>5th<sp/>heading<sp/>level<sp/>are<sp/>sub-entries<sp/>of<sp/>the<sp/>second<sp/>4th<sp/>level<sp/>outline<sp/>entry,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>4th<sp/>and<sp/>5th<sp/>heading<sp/>level<sp/>entries<sp/>are<sp/>sub-entries<sp/>of<sp/>the<sp/>second<sp/>3rd<sp/>level<sp/>entry,<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>outline,<sp/>we<sp/>can<sp/>click<sp/>on<sp/>the<sp/>arrow<sp/>of<sp/>the<sp/>&quot;owner&quot;<sp/>entry<sp/>to<sp/>collapse/expand<sp/>all<sp/>its<sp/>sub-entries.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;ExpandedOutlineLevels&quot;<sp/>property<sp/>to<sp/>&quot;2&quot;<sp/>to<sp/>automatically<sp/>expand<sp/>all<sp/>heading<sp/>level<sp/>2<sp/>and<sp/>lower<sp/>outline<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>collapse<sp/>all<sp/>level<sp/>and<sp/>3<sp/>and<sp/>higher<sp/>entries<sp/>when<sp/>we<sp/>open<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">options-&gt;get_OutlineOptions()-&gt;set_ExpandedOutlineLevels(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;PdfSaveOptions.ExpandedOutlineLevels.pdf&quot;</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3211" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a68d70145372c1fe8d8e9309bd01b4be8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_output_parameters" kindref="compound">Aspose::Words::Saving::SaveOutputParameters</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Saving::SaveOutputParameters &gt; Aspose::Words::Document::Save</definition>
        <argsstring>(std::basic_ostream&lt; CharType, Traits &gt; &amp;stream, Aspose::Words::SaveFormat saveFormat)</argsstring>
        <name>Save</name>
        <qualifiedname>Aspose::Words::Document::Save</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; CharType, Traits &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847" kindref="member">Aspose::Words::SaveFormat</ref></type>
          <declname>saveFormat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4752" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4752" bodyend="4756"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a1a2112500916cab1ff0f9d9d3e8b3453" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_output_parameters" kindref="compound">Aspose::Words::Saving::SaveOutputParameters</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Saving::SaveOutputParameters &gt; Aspose::Words::Document::Save</definition>
        <argsstring>(std::basic_ostream&lt; CharType, Traits &gt; &amp;stream, System::SharedPtr&lt; Aspose::Words::Saving::SaveOptions &gt; saveOptions)</argsstring>
        <name>Save</name>
        <qualifiedname>Aspose::Words::Document::Save</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; CharType, Traits &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_options" kindref="compound">Aspose::Words::Saving::SaveOptions</ref> &gt;</type>
          <declname>saveOptions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4759" column="23" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="4759" bodyend="4763"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a3eed99ce2f750747930a73c9c27b3dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_AttachedTemplate</definition>
        <argsstring>(const System::String &amp;value)</argsstring>
        <name>set_AttachedTemplate</name>
        <qualifiedname>Aspose::Words::Document::set_AttachedTemplate</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1ac525b4a1f1d73951263e84f893e3bd21" kindref="member">Aspose::Words::Document::get_AttachedTemplate</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="295" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ac43ee3ad90e88d6fd6309e91c083e015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_AutomaticallyUpdateStyles</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_AutomaticallyUpdateStyles</name>
        <qualifiedname>Aspose::Words::Document::set_AutomaticallyUpdateStyles</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1a5b932b9d0eb8bca26c5edb6dc5930dab" kindref="member">Aspose::Words::Document::get_AutomaticallyUpdateStyles</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="338" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a9fe90841c5cf4be703201ea751c23961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_CustomXmlParts</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Markup::CustomXmlPartCollection &gt; &amp;value)</argsstring>
        <name>set_CustomXmlParts</name>
        <qualifiedname>Aspose::Words::Document::set_CustomXmlParts</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_markup_1_1_custom_xml_part_collection" kindref="compound">Aspose::Words::Markup::CustomXmlPartCollection</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1a353bad6dd6d1b17cf577096f347986f9" kindref="member">Aspose::Words::Document::get_CustomXmlParts</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1342" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a65cdf79a3c18d93870ba1a5d6a776e80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_DefaultTabStop</definition>
        <argsstring>(double value)</argsstring>
        <name>set_DefaultTabStop</name>
        <qualifiedname>Aspose::Words::Document::set_DefaultTabStop</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1ab3f6a1ab5fe5f8427dfb8641ad6a87c3" kindref="member">Aspose::Words::Document::get_DefaultTabStop</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1220" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a3fc773f63dd6cf4b437379e4a564e0fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_FontSettings</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Fonts::FontSettings &gt; &amp;value)</argsstring>
        <name>set_FontSettings</name>
        <qualifiedname>Aspose::Words::Document::set_FontSettings</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fonts_1_1_font_settings" kindref="compound">Aspose::Words::Fonts::FontSettings</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1ae14f8d8796557559e973fae7ab88ac8d" kindref="member">Aspose::Words::Document::get_FontSettings</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1778" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a5d62312a382e974fcda6d3ebfa0b9f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_GlossaryDocument</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::BuildingBlocks::GlossaryDocument &gt; &amp;value)</argsstring>
        <name>set_GlossaryDocument</name>
        <qualifiedname>Aspose::Words::Document::set_GlossaryDocument</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_building_blocks_1_1_glossary_document" kindref="compound">Aspose::Words::BuildingBlocks::GlossaryDocument</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1a752df20b10d4e733957abf7ab630bd21" kindref="member">Aspose::Words::Document::get_GlossaryDocument</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1583" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a2e6ef04943289097ab4064e2a389ce6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_GrammarChecked</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_GrammarChecked</name>
        <qualifiedname>Aspose::Words::Document::set_GrammarChecked</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1a80fbc7f3f2a576cc8de6bb8f69954ab7" kindref="member">Aspose::Words::Document::get_GrammarChecked</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="551" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a93cbefe0a77a5df52fbd73d3a8c02544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_MailMergeSettings</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Settings::MailMergeSettings &gt; &amp;value)</argsstring>
        <name>set_MailMergeSettings</name>
        <qualifiedname>Aspose::Words::Document::set_MailMergeSettings</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_settings_1_1_mail_merge_settings" kindref="compound">Aspose::Words::Settings::MailMergeSettings</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1a44041c02207cc181209d4138cd288a57" kindref="member">Aspose::Words::Document::get_MailMergeSettings</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1027" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ad93f0cd1c0f13b74c3d9d96ceb7f6efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_PackageCustomParts</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Markup::CustomPartCollection &gt; &amp;value)</argsstring>
        <name>set_PackageCustomParts</name>
        <qualifiedname>Aspose::Words::Document::set_PackageCustomParts</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_markup_1_1_custom_part_collection" kindref="compound">Aspose::Words::Markup::CustomPartCollection</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1aa4bd258086953e8086307ad9b2422589" kindref="member">Aspose::Words::Document::get_PackageCustomParts</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1402" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ad00bdfd95755399f2e94b7a591d54428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_RemovePersonalInformation</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_RemovePersonalInformation</name>
        <qualifiedname>Aspose::Words::Document::set_RemovePersonalInformation</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1a9173c5aa2e4c664da0aa13a10b6957c6" kindref="member">Aspose::Words::Document::get_RemovePersonalInformation</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2370" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a8f4eb024a66d4335e040174d00c11a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_RevisionsView</definition>
        <argsstring>(Aspose::Words::RevisionsView value)</argsstring>
        <name>set_RevisionsView</name>
        <qualifiedname>Aspose::Words::Document::set_RevisionsView</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a264654053f0e32d63afba2c2e63c8ff0" kindref="member">Aspose::Words::RevisionsView</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1a2b2e4e5c02b2bf0c3bb44fdeab8eeea6" kindref="member">Aspose::Words::Document::get_RevisionsView</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="1994" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a44ba9ab392199fa1d20632d606bc37e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_ShadeFormData</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_ShadeFormData</name>
        <qualifiedname>Aspose::Words::Document::set_ShadeFormData</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1a8eb7701da98cd4f870387e00c08ab3b8" kindref="member">Aspose::Words::Document::get_ShadeFormData</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="359" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a93e8da1c15e996d2d11457a40e05e53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_ShowGrammaticalErrors</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_ShowGrammaticalErrors</name>
        <qualifiedname>Aspose::Words::Document::set_ShowGrammaticalErrors</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1ab35bc946857f1631f86e9d010f72dc4f" kindref="member">Aspose::Words::Document::get_ShowGrammaticalErrors</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="477" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a1de0bf93dd1432f51028aad1b543429d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_ShowSpellingErrors</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_ShowSpellingErrors</name>
        <qualifiedname>Aspose::Words::Document::set_ShowSpellingErrors</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1a6b2f5745261281d7f42b830f2fc63a8c" kindref="member">Aspose::Words::Document::get_ShowSpellingErrors</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="503" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a23a668472b0ee8c4a9ce7860f5ddbf9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_SpellingChecked</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_SpellingChecked</name>
        <qualifiedname>Aspose::Words::Document::set_SpellingChecked</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1ab9a1e4a4ac922d81898c79e1fb045221" kindref="member">Aspose::Words::Document::get_SpellingChecked</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="527" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab18436f335cff354e30a1570e6f7cd64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_TrackRevisions</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_TrackRevisions</name>
        <qualifiedname>Aspose::Words::Document::set_TrackRevisions</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1ab658ac44514c4e24e5e6cfe142648b85" kindref="member">Aspose::Words::Document::get_TrackRevisions</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="451" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ade9862c9e6bd052f67a68cb08be7fd0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::set_VbaProject</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Vba::VbaProject &gt; &amp;value)</argsstring>
        <name>set_VbaProject</name>
        <qualifiedname>Aspose::Words::Document::set_VbaProject</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_vba_1_1_vba_project" kindref="compound">Aspose::Words::Vba::VbaProject</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_1ac36f0ef0873c734d83ac0928217082d8" kindref="member">Aspose::Words::Document::get_VbaProject</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="2407" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a6d3c889f5389488105697e493a5a16b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::StartTrackRevisions</definition>
        <argsstring>(const System::String &amp;author)</argsstring>
        <name>StartTrackRevisions</name>
        <qualifiedname>Aspose::Words::Document::StartTrackRevisions</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>author</declname>
        </param>
        <briefdescription>
<para>Starts automatically marking all further changes you make to the document programmatically as revision changes. </para>
        </briefdescription>
        <detaileddescription>
<para>If you call this method and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.</para>
<para>Currently Aspose.Words supports tracking of node insertions and deletions only. Formatting changes are not recorded as revisions.</para>
<para>Automatic tracking of changes is supported both when modifying this document through node manipulations as well as when using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref></para>
<para>This method does not change the <ref refid="class_aspose_1_1_words_1_1_document_1ab658ac44514c4e24e5e6cfe142648b85" kindref="member">TrackRevisions</ref> option and does not use its value for the purposes of revision tracking.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>author</parametername>
</parameternamelist>
<parameterdescription>
<para>Initials of the author to use for revisions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_1ae56038652fb479eb9cd7f5917655f9f7" kindref="member">Aspose::Words::Document::StopTrackRevisions</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to track revisions while editing a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Editing<sp/>a<sp/>document<sp/>usually<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision<sp/>until<sp/>we<sp/>begin<sp/>tracking<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_Runs()-&gt;idx_get(0)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_Runs()-&gt;idx_get(1)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_Author());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_LE((<ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>()<sp/>-<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_DateTime()).get_Milliseconds(),<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stop<sp/>tracking<sp/>revisions<sp/>to<sp/>not<sp/>count<sp/>any<sp/>future<sp/>edits<sp/>as<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StopTrackRevisions();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_Runs()-&gt;idx_get(2)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creating<sp/>revisions<sp/>gives<sp/>them<sp/>a<sp/>date<sp/>and<sp/>time<sp/>of<sp/>the<sp/>operation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>disable<sp/>this<sp/>by<sp/>passing<sp/>DateTime.MinValue<sp/>when<sp/>we<sp/>start<sp/>tracking<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aeef4d112dc206c5ed17bad01917b26c4" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::MinValue</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(1)-&gt;get_Author());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.date_time/_1aeef4d112dc206c5ed17bad01917b26c4" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::MinValue</ref>,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(1)-&gt;get_DateTime());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>accept/reject<sp/>these<sp/>revisions<sp/>programmatically</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>calling<sp/>methods<sp/>such<sp/>as<sp/>Document.AcceptAllRevisions,<sp/>or<sp/>each<sp/>revision&apos;s<sp/>Accept<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>Microsoft<sp/>Word,<sp/>we<sp/>can<sp/>process<sp/>them<sp/>manually<sp/>via<sp/>&quot;Review&quot;<sp/>-&gt;<sp/>&quot;Changes&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.StartTrackRevisions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4202" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aeff3d08f7cb96b15d6f339fe0dde7672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::StartTrackRevisions</definition>
        <argsstring>(const System::String &amp;author, System::DateTime dateTime)</argsstring>
        <name>StartTrackRevisions</name>
        <qualifiedname>Aspose::Words::Document::StartTrackRevisions</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>author</declname>
        </param>
        <param>
          <type><ref refid="class/system.date_time/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime</ref></type>
          <declname>dateTime</declname>
        </param>
        <briefdescription>
<para>Starts automatically marking all further changes you make to the document programmatically as revision changes. </para>
        </briefdescription>
        <detaileddescription>
<para>If you call this method and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.</para>
<para>Currently Aspose.Words supports tracking of node insertions and deletions only. Formatting changes are not recorded as revisions.</para>
<para>Automatic tracking of changes is supported both when modifying this document through node manipulations as well as when using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref></para>
<para>This method does not change the <ref refid="class_aspose_1_1_words_1_1_document_1ab658ac44514c4e24e5e6cfe142648b85" kindref="member">TrackRevisions</ref> option and does not use its value for the purposes of revision tracking.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>author</parametername>
</parameternamelist>
<parameterdescription>
<para>Initials of the author to use for revisions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dateTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The date and time to use for revisions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_1ae56038652fb479eb9cd7f5917655f9f7" kindref="member">Aspose::Words::Document::StopTrackRevisions</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to track revisions while editing a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Editing<sp/>a<sp/>document<sp/>usually<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision<sp/>until<sp/>we<sp/>begin<sp/>tracking<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_Runs()-&gt;idx_get(0)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_Runs()-&gt;idx_get(1)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_Author());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_LE((<ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>()<sp/>-<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_DateTime()).get_Milliseconds(),<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stop<sp/>tracking<sp/>revisions<sp/>to<sp/>not<sp/>count<sp/>any<sp/>future<sp/>edits<sp/>as<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StopTrackRevisions();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_Runs()-&gt;idx_get(2)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creating<sp/>revisions<sp/>gives<sp/>them<sp/>a<sp/>date<sp/>and<sp/>time<sp/>of<sp/>the<sp/>operation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>disable<sp/>this<sp/>by<sp/>passing<sp/>DateTime.MinValue<sp/>when<sp/>we<sp/>start<sp/>tracking<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aeef4d112dc206c5ed17bad01917b26c4" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::MinValue</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(1)-&gt;get_Author());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.date_time/_1aeef4d112dc206c5ed17bad01917b26c4" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::MinValue</ref>,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(1)-&gt;get_DateTime());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>accept/reject<sp/>these<sp/>revisions<sp/>programmatically</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>calling<sp/>methods<sp/>such<sp/>as<sp/>Document.AcceptAllRevisions,<sp/>or<sp/>each<sp/>revision&apos;s<sp/>Accept<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>Microsoft<sp/>Word,<sp/>we<sp/>can<sp/>process<sp/>them<sp/>manually<sp/>via<sp/>&quot;Review&quot;<sp/>-&gt;<sp/>&quot;Changes&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.StartTrackRevisions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4139" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ae56038652fb479eb9cd7f5917655f9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::StopTrackRevisions</definition>
        <argsstring>()</argsstring>
        <name>StopTrackRevisions</name>
        <qualifiedname>Aspose::Words::Document::StopTrackRevisions</qualifiedname>
        <briefdescription>
<para>Stops automatic marking of document changes as revisions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Aspose::Words::Document::StartTrackRevisions(System::String, System::DateTime)</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to track revisions while editing a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Editing<sp/>a<sp/>document<sp/>usually<sp/>does<sp/>not<sp/>count<sp/>as<sp/>a<sp/>revision<sp/>until<sp/>we<sp/>begin<sp/>tracking<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_Runs()-&gt;idx_get(0)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_Runs()-&gt;idx_get(1)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_Author());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_LE((<ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>()<sp/>-<sp/>doc-&gt;get_Revisions()-&gt;idx_get(0)-&gt;get_DateTime()).get_Milliseconds(),<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stop<sp/>tracking<sp/>revisions<sp/>to<sp/>not<sp/>count<sp/>any<sp/>future<sp/>edits<sp/>as<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StopTrackRevisions();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_Runs()-&gt;idx_get(2)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creating<sp/>revisions<sp/>gives<sp/>them<sp/>a<sp/>date<sp/>and<sp/>time<sp/>of<sp/>the<sp/>operation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>disable<sp/>this<sp/>by<sp/>passing<sp/>DateTime.MinValue<sp/>when<sp/>we<sp/>start<sp/>tracking<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;StartTrackRevisions(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aeef4d112dc206c5ed17bad01917b26c4" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::MinValue</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(1)-&gt;get_Author());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.date_time/_1aeef4d112dc206c5ed17bad01917b26c4" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::MinValue</ref>,<sp/>doc-&gt;get_Revisions()-&gt;idx_get(1)-&gt;get_DateTime());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>accept/reject<sp/>these<sp/>revisions<sp/>programmatically</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>calling<sp/>methods<sp/>such<sp/>as<sp/>Document.AcceptAllRevisions,<sp/>or<sp/>each<sp/>revision&apos;s<sp/>Accept<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>Microsoft<sp/>Word,<sp/>we<sp/>can<sp/>process<sp/>them<sp/>manually<sp/>via<sp/>&quot;Review&quot;<sp/>-&gt;<sp/>&quot;Changes&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.StartTrackRevisions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4251" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ac30ad488b91a1e7dc45933e6601aeebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::UnlinkFields</definition>
        <argsstring>()</argsstring>
        <name>UnlinkFields</name>
        <qualifiedname>Aspose::Words::Document::UnlinkFields</qualifiedname>
        <briefdescription>
<para>Unlinks fields in the whole document. </para>
        </briefdescription>
        <detaileddescription>
<para>Replaces all the fields in the whole document with their most recent results.</para>
<para>To unlink fields in a specific part of the document use <ref refid="class_aspose_1_1_words_1_1_range_1a31e4383ab2a89e2d086ffeb22d5da4fc" kindref="member">UnlinkFields</ref>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to unlink all fields in the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Linked<sp/>fields.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UnlinkFields();</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3854" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a7ab24b0f997f82af1a208ac9d5066059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::Unprotect</definition>
        <argsstring>()</argsstring>
        <name>Unprotect</name>
        <qualifiedname>Aspose::Words::Document::Unprotect</qualifiedname>
        <briefdescription>
<para>Removes protection from the document regardless of the password. </para>
        </briefdescription>
        <detaileddescription>
<para>This method unprotects the document even if it has a protection password.</para>
<para>Note that document protection is different from write protection. Write protection is specified using the <ref refid="class_aspose_1_1_words_1_1_document_1acc42596e7c64471f4ebc56d75d2001e7" kindref="member">WriteProtection</ref>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to protect and unprotect a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;password&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>open<sp/>this<sp/>document<sp/>with<sp/>Microsoft<sp/>Word<sp/>intending<sp/>to<sp/>edit<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>apply<sp/>the<sp/>password<sp/>to<sp/>get<sp/>through<sp/>the<sp/>protection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.Protect.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>protection<sp/>only<sp/>applies<sp/>to<sp/>Microsoft<sp/>Word<sp/>users<sp/>opening<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>not<sp/>encrypted<sp/>the<sp/>document<sp/>in<sp/>any<sp/>way,<sp/>and<sp/>we<sp/>do<sp/>not<sp/>need<sp/>the<sp/>password<sp/>to<sp/>open<sp/>and<sp/>edit<sp/>it<sp/>programmatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>protectedDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.Protect.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>protectedDoc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(protectedDoc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>added<sp/>to<sp/>a<sp/>protected<sp/>document.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>removing<sp/>protection<sp/>from<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/>With<sp/>no<sp/>password:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a18f2c901a0893097e2ef30ac53f4086a" kindref="member" tooltip="The document is not protected.">ProtectionType::NoProtection</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;NewPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect(u</highlight><highlight class="stringliteral">&quot;WrongPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/>With<sp/>the<sp/>correct<sp/>password:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect(u</highlight><highlight class="stringliteral">&quot;NewPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a18f2c901a0893097e2ef30ac53f4086a" kindref="member" tooltip="The document is not protected.">ProtectionType::NoProtection</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3507" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a53275fe99a7f7769f695d1fa0104bf8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Document::Unprotect</definition>
        <argsstring>(const System::String &amp;password)</argsstring>
        <name>Unprotect</name>
        <qualifiedname>Aspose::Words::Document::Unprotect</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>password</declname>
        </param>
        <briefdescription>
<para>Removes protection from the document if a correct password is specified. </para>
        </briefdescription>
        <detaileddescription>
<para>This method unprotects the document only if a correct password is specified.</para>
<para>Note that document protection is different from write protection. Write protection is specified using the <ref refid="class_aspose_1_1_words_1_1_document_1acc42596e7c64471f4ebc56d75d2001e7" kindref="member">WriteProtection</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>The password to unprotect the document with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if a correct password was specified and the document was unprotected.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to protect and unprotect a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;password&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>open<sp/>this<sp/>document<sp/>with<sp/>Microsoft<sp/>Word<sp/>intending<sp/>to<sp/>edit<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>apply<sp/>the<sp/>password<sp/>to<sp/>get<sp/>through<sp/>the<sp/>protection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.Protect.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>protection<sp/>only<sp/>applies<sp/>to<sp/>Microsoft<sp/>Word<sp/>users<sp/>opening<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>not<sp/>encrypted<sp/>the<sp/>document<sp/>in<sp/>any<sp/>way,<sp/>and<sp/>we<sp/>do<sp/>not<sp/>need<sp/>the<sp/>password<sp/>to<sp/>open<sp/>and<sp/>edit<sp/>it<sp/>programmatically.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>protectedDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.Protect.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>protectedDoc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(protectedDoc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>added<sp/>to<sp/>a<sp/>protected<sp/>document.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>removing<sp/>protection<sp/>from<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/>With<sp/>no<sp/>password:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a18f2c901a0893097e2ef30ac53f4086a" kindref="member" tooltip="The document is not protected.">ProtectionType::NoProtection</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;NewPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect(u</highlight><highlight class="stringliteral">&quot;WrongPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/>With<sp/>the<sp/>correct<sp/>password:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Unprotect(u</highlight><highlight class="stringliteral">&quot;NewPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a18f2c901a0893097e2ef30ac53f4086a" kindref="member" tooltip="The document is not protected.">ProtectionType::NoProtection</ref>,<sp/>doc-&gt;get_ProtectionType());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3561" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a9c2187d845fae7a8dd8a6a5241d69d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::UpdateFields</definition>
        <argsstring>()</argsstring>
        <name>UpdateFields</name>
        <qualifiedname>Aspose::Words::Document::UpdateFields</qualifiedname>
        <briefdescription>
<para>Updates the values of fields in the whole document. </para>
        </briefdescription>
        <detaileddescription>
<para>When you open, modify and then save a document, Aspose.Words does not update fields automatically, it keeps them intact. Therefore, you would usually want to call this method before saving if you have modified the document programmatically and want to make sure the proper (calculated) field values appear in the saved document.</para>
<para>There is no need to update fields after executing a mail merge because mail merge is a kind of field update and automatically updates all fields in the document.</para>
<para>This method does not update all field types. For the detailed list of supported field types, see the Programmers Guide.</para>
<para>This method does not update fields that are related to the page layout algorithms (e.g. PAGE, PAGES, PAGEREF). The page layout-related fields are updated when you render a document or call <ref refid="class_aspose_1_1_words_1_1_document_1a2ae9aa4c9a98097a803676fc8153857a" kindref="member">UpdatePageLayout</ref>.</para>
<para>Use the <ref refid="class_aspose_1_1_words_1_1_document_1a151fe4f9d74d7828560ef0dc46876f5e" kindref="member">NormalizeFieldTypes</ref> method before fields updating if there were document changes that affected field types.</para>
<para>To update fields in a specific part of the document use <ref refid="class_aspose_1_1_words_1_1_range_1a94623d3ee19092b7739961dfcca7f4c6" kindref="member">UpdateFields</ref>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a Table of contents (TOC) into a document using heading styles as entries. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>table<sp/>of<sp/>contents<sp/>for<sp/>the<sp/>first<sp/>page<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>table<sp/>to<sp/>pick<sp/>up<sp/>paragraphs<sp/>with<sp/>headings<sp/>of<sp/>levels<sp/>1<sp/>to<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>set<sp/>its<sp/>entries<sp/>to<sp/>be<sp/>hyperlinks<sp/>that<sp/>will<sp/>take<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>location<sp/>of<sp/>the<sp/>heading<sp/>when<sp/>left-clicked<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTableOfContents(u</highlight><highlight class="stringliteral">&quot;\\o<sp/>\&quot;1-3\&quot;<sp/>\\h<sp/>\\z<sp/>\\u&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Populate<sp/>the<sp/>table<sp/>of<sp/>contents<sp/>by<sp/>adding<sp/>paragraphs<sp/>with<sp/>heading<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>such<sp/>heading<sp/>with<sp/>a<sp/>level<sp/>between<sp/>1<sp/>and<sp/>3<sp/>will<sp/>create<sp/>an<sp/>entry<sp/>in<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a5c20c643b1731618a5eddb7660b10a3e" kindref="member" tooltip="The Heading 3 style.">StyleIdentifier::Heading3</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a1418e44fe2e519f30b903c1fbf263097" kindref="member" tooltip="The Heading 4 style.">StyleIdentifier::Heading4</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>table<sp/>of<sp/>contents<sp/>is<sp/>a<sp/>field<sp/>of<sp/>a<sp/>type<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>updated<sp/>to<sp/>show<sp/>an<sp/>up-to-date<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertToc.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows to use the QUOTE field. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>QUOTE<sp/>field,<sp/>which<sp/>will<sp/>display<sp/>the<sp/>value<sp/>of<sp/>its<sp/>Text<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldQuote&gt;(builder-&gt;InsertField(FieldType::FieldQuote,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;\&quot;Quoted<sp/>text\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;<sp/>QUOTE<sp/><sp/>\&quot;\\\&quot;Quoted<sp/>text\\\&quot;\&quot;&quot;</highlight><highlight class="normal">,<sp/>field-&gt;GetFieldCode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>QUOTE<sp/>field<sp/>and<sp/>nest<sp/>a<sp/>DATE<sp/>field<sp/>inside<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>fields<sp/>update<sp/>their<sp/>value<sp/>to<sp/>the<sp/>current<sp/>date<sp/>every<sp/>time<sp/>we<sp/>open<sp/>the<sp/>document<sp/>using<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Nesting<sp/>the<sp/>DATE<sp/>field<sp/>inside<sp/>the<sp/>QUOTE<sp/>field<sp/>like<sp/>this<sp/>will<sp/>freeze<sp/>its<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>date<sp/>when<sp/>we<sp/>created<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;\nDocument<sp/>creation<sp/>date:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field<sp/>=<sp/>System::DynamicCast&lt;FieldQuote&gt;(builder-&gt;InsertField(FieldType::FieldQuote,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(field-&gt;get_Separator());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(FieldType::FieldDate,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;<sp/>QUOTE<sp/>\u0013<sp/>DATE<sp/>\u0014&quot;</highlight><highlight class="normal">)<sp/>+<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>().get_Date().ToShortDateString()<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;\u0015&quot;</highlight><highlight class="normal">,<sp/>field-&gt;GetFieldCode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Update<sp/>all<sp/>the<sp/>fields<sp/>to<sp/>display<sp/>their<sp/>correct<sp/>results.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;\&quot;Quoted<sp/>text\&quot;&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Field.QUOTE.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to set user details, and display them using fields. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>UserInformation<sp/>object<sp/>and<sp/>set<sp/>it<sp/>as<sp/>the<sp/>data<sp/>source<sp/>for<sp/>fields<sp/>that<sp/>display<sp/>user<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>userInformation<sp/>=<sp/>MakeObject&lt;UserInformation&gt;();</highlight></codeline>
<codeline><highlight class="normal">userInformation-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">userInformation-&gt;set_Initials(u</highlight><highlight class="stringliteral">&quot;J.<sp/>D.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">userInformation-&gt;set_Address(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>Street&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FieldOptions()-&gt;set_CurrentUser(userInformation);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>USERNAME,<sp/>USERINITIALS,<sp/>and<sp/>USERADDRESS<sp/>fields,<sp/>which<sp/>display<sp/>values<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>respective<sp/>properties<sp/>of<sp/>the<sp/>UserInformation<sp/>object<sp/>that<sp/>we<sp/>have<sp/>created<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(userInformation-&gt;get_Name(),<sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>USERNAME<sp/>&quot;</highlight><highlight class="normal">)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(userInformation-&gt;get_Initials(),<sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>USERINITIALS<sp/>&quot;</highlight><highlight class="normal">)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(userInformation-&gt;get_Address(),<sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>USERADDRESS<sp/>&quot;</highlight><highlight class="normal">)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>field<sp/>options<sp/>object<sp/>also<sp/>has<sp/>a<sp/>static<sp/>default<sp/>user<sp/>that<sp/>fields<sp/>from<sp/>all<sp/>documents<sp/>can<sp/>refer<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">UserInformation::get_DefaultUser()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Default<sp/>User&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">UserInformation::get_DefaultUser()-&gt;set_Initials(u</highlight><highlight class="stringliteral">&quot;D.<sp/>U.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">UserInformation::get_DefaultUser()-&gt;set_Address(u</highlight><highlight class="stringliteral">&quot;One<sp/>Microsoft<sp/>Way&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FieldOptions()-&gt;set_CurrentUser(UserInformation::get_DefaultUser());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Default<sp/>User&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>USERNAME<sp/>&quot;</highlight><highlight class="normal">)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;D.<sp/>U.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>USERINITIALS<sp/>&quot;</highlight><highlight class="normal">)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;One<sp/>Microsoft<sp/>Way&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>USERADDRESS<sp/>&quot;</highlight><highlight class="normal">)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;FieldOptions.CurrentUser.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3838" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aa021259c912c6e0a2e3d5d872ac6125d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::UpdateListLabels</definition>
        <argsstring>()</argsstring>
        <name>UpdateListLabels</name>
        <qualifiedname>Aspose::Words::Document::UpdateListLabels</qualifiedname>
        <briefdescription>
<para>Updates list labels for all list items in the document. </para>
        </briefdescription>
        <detaileddescription>
<para>This method updates list label properties such as <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a96b368c97331dfaa772988e2e993f1c8" kindref="member">LabelValue</ref> and <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a136366777b5e2876358fdb64f72af197" kindref="member">LabelString</ref> for each <ref refid="class_aspose_1_1_words_1_1_paragraph_1a6a4e97c2d59055e287229dd6af8e242f" kindref="member">ListLabel</ref> object in the document.</para>
<para>Also, this method is sometimes implicitly called when updating fields in the document. This is required because some fields that may reference list numbers (such as TOC or REF) need them be up-to-date.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to extract the list labels of all paragraphs that are list items. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateListLabels();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>paras<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Find<sp/>if<sp/>we<sp/>have<sp/>the<sp/>paragraph<sp/>list.<sp/>In<sp/>our<sp/>document,<sp/>our<sp/>list<sp/>uses<sp/>plain<sp/>Arabic<sp/>numbers,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>start<sp/>at<sp/>three<sp/>and<sp/>ends<sp/>at<sp/>six.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>paragraph<sp/>:<sp/>System::IterateOver(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paras-&gt;LINQ_OfType&lt;SharedPtr&lt;Paragraph&gt;&gt;()-&gt;LINQ_Where([](SharedPtr&lt;Paragraph&gt;<sp/>p)<sp/>{<sp/>return<sp/>p-&gt;get_ListFormat()-&gt;get_IsListItem();<sp/>})))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;List<sp/>item<sp/>paragraph<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paras-&gt;IndexOf(paragraph)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>text<sp/>we<sp/>get<sp/>when<sp/>getting<sp/>when<sp/>we<sp/>output<sp/>this<sp/>node<sp/>to<sp/>text<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>text<sp/>output<sp/>will<sp/>omit<sp/>list<sp/>labels.<sp/>Trim<sp/>any<sp/>paragraph<sp/>formatting<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>paragraphText<sp/>=<sp/>paragraph-&gt;ToString(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a9dffbf69ffba8bc38bc4e01abf4b1675" kindref="member" tooltip="Saves the document in the plain text format.">SaveFormat::Text</ref>).Trim();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tExported<sp/>Text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paragraphText<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;ListLabel&gt;<sp/>label<sp/>=<sp/>paragraph-&gt;get_ListLabel();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>the<sp/>position<sp/>of<sp/>the<sp/>paragraph<sp/>in<sp/>the<sp/>current<sp/>level<sp/>of<sp/>the<sp/>list.<sp/>If<sp/>we<sp/>have<sp/>a<sp/>list<sp/>with<sp/>multiple<sp/>levels,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>tell<sp/>us<sp/>what<sp/>position<sp/>it<sp/>is<sp/>on<sp/>that<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tNumerical<sp/>Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label-&gt;get_LabelValue()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Combine<sp/>them<sp/>together<sp/>to<sp/>include<sp/>the<sp/>list<sp/>label<sp/>with<sp/>the<sp/>text<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tList<sp/>label<sp/>combined<sp/>with<sp/>text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label-&gt;get_LabelString()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paragraphText<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3688" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a2ae9aa4c9a98097a803676fc8153857a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::UpdatePageLayout</definition>
        <argsstring>()</argsstring>
        <name>UpdatePageLayout</name>
        <qualifiedname>Aspose::Words::Document::UpdatePageLayout</qualifiedname>
        <briefdescription>
<para>Rebuilds the page layout of the document. </para>
        </briefdescription>
        <detaileddescription>
<para>This method formats a document into pages and updates the page number related fields in the document such as PAGE, PAGES, PAGEREF and REF. The up-to-date page layout information is required for a correct rendering of the document to fixed-page formats.</para>
<para>This method is automatically invoked when you first convert a document to PDF, XPS, image or print it. However, if you modify the document after rendering and then attempt to render it again - Aspose.Words will not update the page layout automatically. In this case you should call <ref refid="class_aspose_1_1_words_1_1_document_1a2ae9aa4c9a98097a803676fc8153857a" kindref="member">UpdatePageLayout</ref> before rendering again.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows when to recalculate the page layout of the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Saving<sp/>a<sp/>document<sp/>to<sp/>PDF,<sp/>to<sp/>an<sp/>image,<sp/>or<sp/>printing<sp/>for<sp/>the<sp/>first<sp/>time<sp/>will<sp/>automatically</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>cache<sp/>the<sp/>layout<sp/>of<sp/>the<sp/>document<sp/>within<sp/>its<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.UpdatePageLayout.1.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modify<sp/>the<sp/>document<sp/>in<sp/>some<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">)-&gt;get_Font()-&gt;set_Size(6);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Sections()-&gt;idx_get(0)-&gt;get_PageSetup()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1ae2ae8bf76a0ae07d1d85df205d98af0ba815dff01257e5ef182b25d4c1ef0a7a0" kindref="member" tooltip="Landscape page orientation (wide and short).">Orientation::Landscape</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>current<sp/>version<sp/>of<sp/>Aspose.Words,<sp/>modifying<sp/>the<sp/>document<sp/>does<sp/>not<sp/>automatically<sp/>rebuild</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>cached<sp/>page<sp/>layout.<sp/>If<sp/>we<sp/>wish<sp/>for<sp/>the<sp/>cached<sp/>layout</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>stay<sp/>up<sp/>to<sp/>date,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>update<sp/>it<sp/>manually.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdatePageLayout();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.UpdatePageLayout.2.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4540" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a77b8fa23d9fce51067a0c6d3caf2eeae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::UpdateTableLayout</definition>
        <argsstring>()</argsstring>
        <name>UpdateTableLayout</name>
        <qualifiedname>Aspose::Words::Document::UpdateTableLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3647" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ab8c282239fc91ebb5ce83c82440917b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::UpdateThumbnail</definition>
        <argsstring>()</argsstring>
        <name>UpdateThumbnail</name>
        <qualifiedname>Aspose::Words::Document::UpdateThumbnail</qualifiedname>
        <briefdescription>
<para>Updates <ref refid="class_aspose_1_1_words_1_1_properties_1_1_built_in_document_properties_1aa79b25f9c348bd6ccdd8dac1fc64dc66" kindref="member">Thumbnail</ref> of the document using default options. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to update a document&apos;s thumbnail. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>setting<sp/>a<sp/>thumbnail<sp/>image<sp/>when<sp/>saving<sp/>a<sp/>document<sp/>to<sp/>.epub.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Use<sp/>the<sp/>document&apos;s<sp/>first<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateThumbnail();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.UpdateThumbnail.FirstPage.epub&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Use<sp/>the<sp/>first<sp/>image<sp/>found<sp/>in<sp/>the<sp/>document:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;ThumbnailGeneratingOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_ThumbnailSize(<ref refid="class/system.drawing.size/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Size</ref>(400,<sp/>400));</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_GenerateFromFirstPage(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateThumbnail(options);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.UpdateThumbnail.FirstImage.epub&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4729" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1ace1767a6c37f2240d0b9793938c26cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::UpdateThumbnail</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Rendering::ThumbnailGeneratingOptions &gt; &amp;options)</argsstring>
        <name>UpdateThumbnail</name>
        <qualifiedname>Aspose::Words::Document::UpdateThumbnail</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_rendering_1_1_thumbnail_generating_options" kindref="compound">Aspose::Words::Rendering::ThumbnailGeneratingOptions</ref> &gt; &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Updates <ref refid="class_aspose_1_1_words_1_1_properties_1_1_built_in_document_properties_1aa79b25f9c348bd6ccdd8dac1fc64dc66" kindref="member">Thumbnail</ref> of the document according to the specified options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>The generating options to use.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to update a document&apos;s thumbnail. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>setting<sp/>a<sp/>thumbnail<sp/>image<sp/>when<sp/>saving<sp/>a<sp/>document<sp/>to<sp/>.epub.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Use<sp/>the<sp/>document&apos;s<sp/>first<sp/>page:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateThumbnail();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.UpdateThumbnail.FirstPage.epub&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Use<sp/>the<sp/>first<sp/>image<sp/>found<sp/>in<sp/>the<sp/>document:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;ThumbnailGeneratingOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_ThumbnailSize(<ref refid="class/system.drawing.size/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Size</ref>(400,<sp/>400));</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_GenerateFromFirstPage(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateThumbnail(options);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.UpdateThumbnail.FirstImage.epub&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="4702" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1a1828e1ccbb5d7936fd248401b0c8deee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::UpdateWordCount</definition>
        <argsstring>()</argsstring>
        <name>UpdateWordCount</name>
        <qualifiedname>Aspose::Words::Document::UpdateWordCount</qualifiedname>
        <briefdescription>
<para>Updates word count properties of the document. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>UpdateWordCount</bold> recalculates and updates Characters, <ref refid="namespace_aspose_1_1_words" kindref="compound">Words</ref> and Paragraphs properties in the <ref refid="class_aspose_1_1_words_1_1_document_1a86baaf34be1f79ea482b1f393f8f4bed" kindref="member">BuiltInDocumentProperties</ref> collection of the <bold>Document</bold>.</para>
<para>Note that <bold>UpdateWordCount</bold> does not update number of lines and pages properties. Use the <ref refid="class_aspose_1_1_words_1_1_document_1a1828e1ccbb5d7936fd248401b0c8deee" kindref="member">UpdateWordCount</ref> overload and pass True value as a parameter to do that.</para>
<para>When you use an evaluation version, the evaluation watermark will also be included in the word count.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to update all list labels in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Ut<sp/>enim<sp/>ad<sp/>minim<sp/>veniam,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;quis<sp/>nostrud<sp/>exercitation<sp/>ullamco<sp/>laboris<sp/>nisi<sp/>ut<sp/>aliquip<sp/>ex<sp/>ea<sp/>commodo<sp/>consequat.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Aspose.Words<sp/>does<sp/>not<sp/>track<sp/>document<sp/>metrics<sp/>like<sp/>these<sp/>in<sp/>real<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Characters());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Words());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Paragraphs());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Lines());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>get<sp/>accurate<sp/>values<sp/>for<sp/>three<sp/>of<sp/>these<sp/>properties,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>update<sp/>them<sp/>manually.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateWordCount();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(196,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Characters());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(36,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Words());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Paragraphs());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>line<sp/>count,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>call<sp/>a<sp/>specific<sp/>overload<sp/>of<sp/>the<sp/>updating<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Lines());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateWordCount(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Lines());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3605" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_1aa331c277dc98198115a7119bf6b60c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Document::UpdateWordCount</definition>
        <argsstring>(bool updateLinesCount)</argsstring>
        <name>UpdateWordCount</name>
        <qualifiedname>Aspose::Words::Document::UpdateWordCount</qualifiedname>
        <param>
          <type>bool</type>
          <declname>updateLinesCount</declname>
        </param>
        <briefdescription>
<para>Updates word count properties of the document, optionally updates <ref refid="class_aspose_1_1_words_1_1_properties_1_1_built_in_document_properties_1aec961e8cdd47a13a054d8da6765870da" kindref="member">Lines</ref> property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>updateLinesCount</parametername>
</parameternamelist>
<parameterdescription>
<para>True if number of lines in the document shall be calculated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to update all list labels in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Ut<sp/>enim<sp/>ad<sp/>minim<sp/>veniam,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;quis<sp/>nostrud<sp/>exercitation<sp/>ullamco<sp/>laboris<sp/>nisi<sp/>ut<sp/>aliquip<sp/>ex<sp/>ea<sp/>commodo<sp/>consequat.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Aspose.Words<sp/>does<sp/>not<sp/>track<sp/>document<sp/>metrics<sp/>like<sp/>these<sp/>in<sp/>real<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Characters());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Words());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Paragraphs());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Lines());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>get<sp/>accurate<sp/>values<sp/>for<sp/>three<sp/>of<sp/>these<sp/>properties,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>update<sp/>them<sp/>manually.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateWordCount();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(196,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Characters());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(36,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Words());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Paragraphs());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>line<sp/>count,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>call<sp/>a<sp/>specific<sp/>overload<sp/>of<sp/>the<sp/>updating<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Lines());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateWordCount(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(4,<sp/>doc-&gt;get_BuiltInDocumentProperties()-&gt;get_Lines());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Document.h" line="3642" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a Word document. To learn more, visit the <ulink url="https://docs.aspose.com/words/net/working-with-document/">Working with Document</ulink> documentation article. </para>
    </briefdescription>
    <detaileddescription>
<para>The <bold>Document</bold> is a central object in the Aspose.Words library.</para>
<para>To load an existing document in any of the <ref refid="namespace_aspose_1_1_words_1a5fddddb463c824cf3fe353ce1bcd8f52" kindref="member">LoadFormat</ref> formats, pass a file name or a stream into one of the <bold>Document</bold> constructors. To create a blank document, call the constructor without parameters.</para>
<para>Use one of the Save method overloads to save the document in any of the <ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847" kindref="member">SaveFormat</ref> formats.</para>
<para>To draw document pages directly onto a <bold>Graphics</bold> object use <ref refid="" kindref="compound">RenderToScale()</ref> or <ref refid="" kindref="compound">RenderToSize()</ref> method.</para>
<para>To print the document, use one of the <ref refid="" kindref="compound">Print()</ref> methods.</para>
<para><ref refid="class_aspose_1_1_words_1_1_document_1aca65fc869b20b2b9cf303af49e4b6a37" kindref="member">MailMerge</ref> is the <ref refid="namespace_aspose_1_1_words" kindref="compound">Aspose.Words</ref>&apos;s reporting engine that allows to populate reports designed in Microsoft Word with data from various data sources quickly and easily. The data can be from a or an array of values. <bold>MailMerge</bold> will go through the records found in the data source and insert them into mail merge fields in the document growing it as necessary.</para>
<para><bold>Document</bold> stores document-wide information such as <ref refid="class_aspose_1_1_words_1_1_document_base_1a3bdb631c789b3d26f1626d08c09439ce" kindref="member">Styles</ref>, <ref refid="class_aspose_1_1_words_1_1_document_1a86baaf34be1f79ea482b1f393f8f4bed" kindref="member">BuiltInDocumentProperties</ref>, <ref refid="class_aspose_1_1_words_1_1_document_1aa32b0d92748ee5c77365f05c75f7a30f" kindref="member">CustomDocumentProperties</ref>, lists and macros. Most of these objects are accessible via the corresponding properties of the <bold>Document</bold>.</para>
<para>The <bold>Document</bold> is a root node of a tree that contains all other nodes of the document. The tree is a Composite design pattern and in many ways similar to XmlDocument. The content of the document can be manipulated freely programmatically:</para>
<para><itemizedlist>
<listitem><para>The nodes of the document can be accessed via typed collections, for example <ref refid="class_aspose_1_1_words_1_1_document_1a489cd0a20fb9eda72c8384425ff9f698" kindref="member">Sections</ref>, <ref refid="class_aspose_1_1_words_1_1_paragraph_collection" kindref="compound">ParagraphCollection</ref> etc.</para>
</listitem><listitem><para>The nodes of the document can be selected by their node type using <ref refid="class_aspose_1_1_words_1_1_composite_node_1ae1fc746cc70cea4c9ab30caf39aec146" kindref="member">GetChildNodes()</ref> or using an XPath query with <ref refid="" kindref="compound">SelectNodes()</ref> or <ref refid="" kindref="compound">SelectSingleNode()</ref>.</para>
</listitem><listitem><para>Content nodes can be added or removed from anywhere in the document using <ref refid="" kindref="compound">InsertBefore()</ref>, <ref refid="" kindref="compound">InsertAfter()</ref>, <ref refid="" kindref="compound">RemoveChild()</ref> and other methods provided by the base class <ref refid="class_aspose_1_1_words_1_1_composite_node" kindref="compound">CompositeNode</ref>.</para>
</listitem><listitem><para>The formatting attributes of each node can be changed via the properties of that node.</para>
</listitem></itemizedlist>
</para>
<para>Consider using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref> that simplifies the task of programmatically creating or populating the document tree.</para>
<para>The <bold>Document</bold> can contain only <ref refid="class_aspose_1_1_words_1_1_section" kindref="compound">Section</ref> objects.</para>
<para>In Microsoft Word, a valid document needs to have at least one section. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>Aspose::Words::CompositeNode</label>
        <link refid="class_aspose_1_1_words_1_1_composite_node"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Aspose::Words::Document</label>
        <link refid="class_aspose_1_1_words_1_1_document"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::DocumentBase</label>
        <link refid="class_aspose_1_1_words_1_1_document_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Aspose::Words::INodeCollection</label>
      </node>
      <node id="8">
        <label>Aspose::Words::ISectionAttrSource</label>
      </node>
      <node id="9">
        <label>Aspose::Words::IWatermarkProvider</label>
      </node>
      <node id="4">
        <label>Aspose::Words::Node</label>
        <link refid="class_aspose_1_1_words_1_1_node"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Node &gt; &gt;</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>Aspose::Words::CompositeNode</label>
        <link refid="class_aspose_1_1_words_1_1_composite_node"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Aspose::Words::Document</label>
        <link refid="class_aspose_1_1_words_1_1_document"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::DocumentBase</label>
        <link refid="class_aspose_1_1_words_1_1_document_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Aspose::Words::INodeCollection</label>
      </node>
      <node id="8">
        <label>Aspose::Words::ISectionAttrSource</label>
      </node>
      <node id="9">
        <label>Aspose::Words::IWatermarkProvider</label>
      </node>
      <node id="4">
        <label>Aspose::Words::Node</label>
        <link refid="class_aspose_1_1_words_1_1_node"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Node &gt; &gt;</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Document.h" line="250" column="1" bodyfile="Aspose.Words.Cpp/Document.h" bodystart="251" bodyend="4852"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_document_1a7a66c78afffcee340863e16ecdec53f9" prot="public" virt="virtual"><scope>Aspose::Words::Document</scope><name>Accept</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae5d108969c269eb7f2f5da4d6669eec3" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>AcceptAllRevisions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ac9763bb68caeca4f51ce24f73d7140a1" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>AcceptEnd</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ad6f3daaa9c3bfa29a5f00304877a8da7" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>AcceptStart</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a4d74ddb488f09ec7cfebed4116fd7d84" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Add</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1af74bc4213aebbe5fd01d2fc0f08b2bec" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>AppendChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a0664bad31f5c57183f5f9ee0fb96cf20" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>AppendDocument</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae623d3d217e6fd2cc94c7b43d98edacd" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>AppendDocument</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ac1c0943a733a99df6b380a377647c908" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a6dc5524c6ba99106230cc27cc652b9d6" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>BaseType1</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1af3d3ba8dc31e7abcd87df7b06977ae16" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>BaseType2</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ac87413341e0f60289ca2c07c62ccb5e7" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>CanInsert</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a18a1bc1920b22b3fbe2dc4fde0f4c886" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Cleanup</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1afcbdacc8ecc7c9e0544c3a571ab8d781" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Cleanup</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a1c3dcff6be884eec696d20719353e93a" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab986ab248ec51590b122a8e2212bb0c4" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a81dedd9b241b09760112b5e5068f1daa" prot="public" virt="non-virtual" ambiguityscope="Aspose::Words::Node::"><scope>Aspose::Words::Document</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a6e1d572ed254b06abc3176dded057f3a" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Compare</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ad2320fae1d2a5fb7b2f86b433ff37f59" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Compare</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a5aedc7e3204184f61ecebd925dc01281" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>CopyStylesFromTemplate</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae09167e3b86291eb8cd83661f4453118" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>CopyStylesFromTemplate</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a212d4bb489f785fabaad35fc3209ef04" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>CppMemberwiseClone</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a6eca964618aa7c205058fba5eb8e3906" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae7936daa25f43f9c3d1ac8a9503a8d38" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ad861f07ffe2130db8170a023847cffe0" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a01adcf205a17dd24e7589d2d0e7a1bc0" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a565291841e9747bbe94aa73d439bce53" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ad362998510a0c4509829b5ea320be421" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a72de20fce9b39c8e6ab895da0c662658" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a105f0181e5db6416ec31845da4da024a" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>EnsureMinimum</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aea7e6f4139e5381cd94203d87d854141" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>ExpandTableStylesToDirectFormatting</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a5bbd9bb841ffe95decffa1700f928b5a" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>ExtractPages</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a653744bcaabbbf51e3f8a101dcd9b054" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Get</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ac525b4a1f1d73951263e84f893e3bd21" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_AttachedTemplate</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a5b932b9d0eb8bca26c5edb6dc5930dab" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_AutomaticallyUpdateStyles</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a0c7a428de73691d226c5b9a139165a88" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_BackgroundShape</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a86baaf34be1f79ea482b1f393f8f4bed" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_BuiltInDocumentProperties</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a98d9935dcf818989566431ab3b75bbed" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_ChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a88669ace70adba52a04efd111a46b957" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_CompatibilityOptions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a7b3e4a1afbc0a5ddc10a3901a0cf3078" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Compliance</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a801d3d549eb73e216df5b7a64d9e1c68" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Count</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aa32b0d92748ee5c77365f05c75f7a30f" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_CustomDocumentProperties</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a941120df17372b25f9a7127a9d9b3816" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_CustomNodeId</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a353bad6dd6d1b17cf577096f347986f9" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_CustomXmlParts</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab3f6a1ab5fe5f8427dfb8641ad6a87c3" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_DefaultTabStop</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a1c804a0f41cf247951679cd840a98223" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_DigitalSignatures</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a441771321c6cf18cfa933980eed032c5" prot="public" virt="virtual"><scope>Aspose::Words::Document</scope><name>get_Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aa0143d63816a30e5bff964c14cb9760d" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_EndnoteOptions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a4d8c10c788824d87eb57f77bc294a35e" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_FieldOptions</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a052d0e4560975f6c19c77bf19d82eedf" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_FirstChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a0c6a5fbba7435b1c8f0029235545480a" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_FirstSection</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a68377fd35d6e3d7463bb9fc79423e382" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_FontInfos</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a4dca8f888715dcee7900b5a7b824633f" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>get_FontProvider</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae14f8d8796557559e973fae7ab88ac8d" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_FontSettings</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a4c4af54c416d93f9f9e5cbc4525b96d6" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_FootnoteOptions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a5d2b8cc5f540e1a733a72fd31fa67bb8" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Frameset</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a752df20b10d4e733957abf7ab630bd21" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_GlossaryDocument</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a80fbc7f3f2a576cc8de6bb8f69954ab7" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_GrammarChecked</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a4b939686e9a6a245a31cf392d202316d" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_HasChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aed9efa15f5a75b746d9a8997ea2821fa" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_HasMacros</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a338b823b285cdb10a412c1c6253d9581" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_HasRevisions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1afb59ebbd3fd468bf7a79bc3b8e4cecff" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_HyphenationOptions</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a96cf2dd90a284fe9939d1d90780d2d4b" prot="public" virt="virtual"><scope>Aspose::Words::Document</scope><name>get_IsComposite</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a1248f8762f5a08362e859ee14f288b2f" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>get_IsMoveRevisionsTracked</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae2d0929768372defce5408c9b7f232a2" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>get_IsTrackRevisionsEnabled</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a58fae512d8549219b7c3a17ef2d46439" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_LastChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a25116b82afb3aacf8d1b1ae811d0ae60" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_LastSection</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aa74679decc7e2844c5904e2068053dcd" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_LayoutOptions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1af534377636a3e0931e27cb1c8582f341" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Lists</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aca65fc869b20b2b9cf303af49e4b6a37" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_MailMerge</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a44041c02207cc181209d4138cd288a57" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_MailMergeSettings</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a938ff32d060619d89ecefdf57984abf8" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_NextSibling</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a404420853b8f2d57a82c9d224d901680" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_NodeChangingCallback</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a1036b39c37ce18728c892adc7ae5f64a" prot="public" virt="virtual"><scope>Aspose::Words::Document</scope><name>get_NodeType</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aeef5a15bccc35879b033ffd7dba7fdc4" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_OriginalFileName</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a68527b2162f3e618703fd4b60ffa278f" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_OriginalLoadFormat</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aa4bd258086953e8086307ad9b2422589" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_PackageCustomParts</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1afcc74ff9466bb2b12d14203046f2f469" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_PageColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a4f1f0527992cb5c45e107ade292d9a8b" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_PageCount</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ab9e608488885c65a2a165dea6645d15e" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_ParentNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a6013fe75e5859c54d12a87f9b97fa7f3" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_PreviousSibling</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a2ad3809cbc7e1de43275171e89369570" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_ProtectionType</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0f8077bf80409ba331148095b95bc3e5" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Range</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a9173c5aa2e4c664da0aa13a10b6957c6" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_RemovePersonalInformation</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a480297d6129fde4bd3654835f803256f" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_ResourceLoadingCallback</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a1badf7f19275367a7a3087a5d31c2d5a" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Revisions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a2b2e4e5c02b2bf0c3bb44fdeab8eeea6" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_RevisionsView</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a489cd0a20fb9eda72c8384425ff9f698" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Sections</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a8eb7701da98cd4f870387e00c08ab3b8" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_ShadeFormData</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab35bc946857f1631f86e9d010f72dc4f" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_ShowGrammaticalErrors</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a6b2f5745261281d7f42b830f2fc63a8c" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_ShowSpellingErrors</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab9a1e4a4ac922d81898c79e1fb045221" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_SpellingChecked</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a3bdb631c789b3d26f1626d08c09439ce" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Styles</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1adde5eb96a541e573dae09851515135bb" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Theme</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab658ac44514c4e24e5e6cfe142648b85" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_TrackRevisions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a17278ccc2503040020f45df3f76a2158" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Variables</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ac36f0ef0873c734d83ac0928217082d8" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_VbaProject</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae0f8bfdce08294e0a244f1c04c64aeaa" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_VersionsCount</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aee86ddf4cc74a7a8521b393e637aae87" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_ViewOptions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1ad3d0e41dc067032ca0c0dcb098704927" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_WarningCallback</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a60fc92c066874b68aa18423e347755e5" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_Watermark</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a2c1645e76afd38ec4a11277c0b882a5a" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_WebExtensionTaskPanes</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1acc42596e7c64471f4ebc56d75d2001e7" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>get_WriteProtection</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a951706cfa681573e79a56204a2029e9e" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>GetAncestor</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ae19991f4d5aa7ccb60ce6d7207495f1c" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>GetAncestorOf</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a6d961b080681f8dc6ee551c6c0ce44da" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>GetChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1ae1fc746cc70cea4c9ab30caf39aec146" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>GetChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a6d3cc4280067e07fd504c11e6c968419" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>GetEnumerator</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1afb483f0120b0022298bfa4a9d2aabb34" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>GetPageInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a08b4d2cc617495b60d85a550422e2d8f" prot="public" virt="virtual"><scope>Aspose::Words::Document</scope><name>GetText</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a42196707041d4b0c37ff1b827210c12c" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>ImportNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a1564b5b9026eba96010b5452b9df53d7" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>ImportNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1ac0cfce6ca5295fe714f5da1e8e244d9e" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>IndexOf</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a2b6e91eabfc75b02062ae6714cd95ec2" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>InsertAfter</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a247cedb3f1fe5474c87f5b5fa0dcd995" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>InsertBefore</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab31d00d0f0c0154f793d5373364a7d51" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>JoinRunsWithSameFormatting</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ad6c3fbf3d49058cf443eaa8632bef657" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae2000d17ded10e58c00c6273891ebba1" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a403a9c3c218261faf03d2f13617804b7" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField10</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aeb7c610ccd794c9db1cca5c4ed3fdc25" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField11</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a1fc7e75179ef4022b4f7522085901c22" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField12</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1afddc7ace73328277888808c58747088f" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField13</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae319fcd829b2a436e5b9a5a410fb9716" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField14</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a073a0a92d3367cc5d4bb15778c314c00" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField15</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aec43fd60b686b0393b87510eaecda45b" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField16</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a4f47f4e45a65dcccf41f1701dc5b4423" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField17</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a0728fd00528e35dfd2eb180f965e7aec" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField18</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a02c37c8c8ad36d95e3ae367eea523702" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField19</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a86fe38d9c932a7ab76e3aa2b1e5392fa" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a80d2d720921ff40c554c2f58d1b5d4d9" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField20</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1af5e3e7ea13d301a0bd68e5bf2a3afcea" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField21</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1afc485540f6c682c8064832c9c1a02340" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField22</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aea0a5741bf56102f2772bed99162a7da" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField23</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a61a95a8cca5b6c2f097372d52863c41a" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField24</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a9cb57e3caf1e78cc86ce26e318d95299" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField25</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a8dc9e6fa45ebf23337494f89e7c6539c" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField26</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a5b869f27bbce01696ae6955166694ab0" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField27</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a7571707848904e94dcca475b609d8e7a" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField28</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1afebe9bc60ea7b819a370dcbe635a6a2d" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField29</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a8afa3d1b8aba5ef834133e8f77843f67" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField3</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a3fa116762431fe8868dd403eb571efe2" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField30</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a663f778a99115889ff59d3a177cd485b" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField31</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a5f42c6aaea5cb03073ade82b1aea9210" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField32</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a7854fe3903338792b11cb8b932abd1a6" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField33</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aef2e082d512caf2e2b3ca6cb1c947a6c" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField34</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a7366bef72b84a9b9d25c10fe967a53da" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField35</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a966050b199c2249d4a610e17b163a9ad" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField36</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1adf106948356d2b84ec035986127d723e" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField37</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a222a3f495102ba68657eecb4c79ecebe" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField38</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1acde5655cf71058f0ba545732d88520c9" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField39</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a80ad4433ed4e8536b967936175242b86" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField4</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a57be7b52b9b9707ee687600be916da6c" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField40</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a53979311bc90039fc5afac4322702150" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField41</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a5934c902181378dc9017571238991091" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField42</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab7491b6970fc095e1b4dc10f0023dba0" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField43</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab1f7b4d4e2ff25fbcc630474fcb01055" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField44</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a5f20fbbdc6426a9387a824343242cf59" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField45</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a3d547fb49bc9212a271757b41e211921" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField46</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a94cf425a8a256322cfc9a226c35e911d" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField47</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a4613b034d290939f8aebd8582806063e" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField48</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ada83b406e12bfec87374ed04f94431ba" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField49</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1afce20b5865ac42bf5decb868301840e5" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField5</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a0612c82373c50af0d283ed6efd5529f9" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField6</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a36baaf61abffaace8d0cf189d52bb4a6" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField7</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a017ee8122877d599060ae5f023fd8d03" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField8</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ad01a7b44f8c5ae5e8def766810c11610" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>mField9</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a4f6979e06a5914aeb37a9cb8448658a6" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>NextPreOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>NodeTypeToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a151fe4f9d74d7828560ef0dc46876f5e" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>NormalizeFieldTypes</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1abae3ff6d970ba209cf4eb1c539b205ee" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>PrependChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af40f9573daf950d978d211d3e75c6a95" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>PreviousPreOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a8dd295a3c204d939e115e463d98c89af" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Protect</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a234f6ede113343b8103348ffab0d5523" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Protect</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae4bac0ca985ed43bf6d477e1093419ba" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Remove</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a4afce861f4df13714988e44419374f21" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>RemoveAllChildren</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a28888dd687866f66b3bb221e63b5063c" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>RemoveChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab46b7dacff28c1550c9d3a04a7bb74ea" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>RemoveExternalSchemaReferences</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab5c29ec7b74e5397562f1bd237db68a0" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>RemoveMacros</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a5a00bfd5d2e04d5752d96e226a3f5849" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>RemoveSmartTags</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a6579630d88c98c3aa93f97d1493a616e" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>RenderToScale</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ac277d37bb9d1a4307635dfca68314d18" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>RenderToSize</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a5100f5cbede8a2ce1cecb444ee78699b" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>ResumeTrackRevisions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aa3626f86fa256e8df3093e4659fab595" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a6c5bcc810b81d977725fa2b054713ccc" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Save</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1af0fd16b170f15e8913fe7548546bb463" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Save</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a33f07622e3c1fa0a6f72e85f40408154" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Save</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a2aa1ba6e67ed6a5c613bd3be21463503" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Save</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1afdfbc7cdd39a1c90ac436970be2b4b33" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Save</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a68d70145372c1fe8d8e9309bd01b4be8" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Save</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a1a2112500916cab1ff0f9d9d3e8b3453" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Save</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a553923ba5225bd3d28f1960b72b45f4f" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>SelectNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1aa2eb340deba06c3dcb7cc29dfeca5a99" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>SelectSingleNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a3eed99ce2f750747930a73c9c27b3dda" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_AttachedTemplate</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ac43ee3ad90e88d6fd6309e91c083e015" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_AutomaticallyUpdateStyles</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1ad89985b7b8abc7795b7e977033968602" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_BackgroundShape</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0d412cc05de7836acb92332e55eea267" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_CustomNodeId</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a9fe90841c5cf4be703201ea751c23961" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_CustomXmlParts</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a65cdf79a3c18d93870ba1a5d6a776e80" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_DefaultTabStop</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a3fc773f63dd6cf4b437379e4a564e0fb" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_FontSettings</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a5d62312a382e974fcda6d3ebfa0b9f7d" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_GlossaryDocument</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a2e6ef04943289097ab4064e2a389ce6d" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_GrammarChecked</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a93cbefe0a77a5df52fbd73d3a8c02544" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_MailMergeSettings</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a2442ec8190e0cf0f87aa7627522d235a" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_NodeChangingCallback</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ad93f0cd1c0f13b74c3d9d96ceb7f6efa" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_PackageCustomParts</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a6bf7a597da2ec53efec60966499019d5" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_PageColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ad00bdfd95755399f2e94b7a591d54428" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_RemovePersonalInformation</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1a48b22d91766815ca07a9a69cb27ec48b" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_ResourceLoadingCallback</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a8f4eb024a66d4335e040174d00c11a98" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_RevisionsView</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a44ba9ab392199fa1d20632d606bc37e2" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_ShadeFormData</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a93e8da1c15e996d2d11457a40e05e53f" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_ShowGrammaticalErrors</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a1de0bf93dd1432f51028aad1b543429d" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_ShowSpellingErrors</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a23a668472b0ee8c4a9ce7860f5ddbf9d" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_SpellingChecked</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab18436f335cff354e30a1570e6f7cd64" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_TrackRevisions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ade9862c9e6bd052f67a68cb08be7fd0c" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_VbaProject</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_base_1afcb6bef94003eea3cfc548e115e32b0c" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>set_WarningCallback</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a29e186f28a68773c7c7679079c77d827" prot="public" virt="virtual"><scope>Aspose::Words::Document</scope><name>SetTemplateWeakPtr</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aeff3d08f7cb96b15d6f339fe0dde7672" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>StartTrackRevisions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a6d3c889f5389488105697e493a5a16b9" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>StartTrackRevisions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ae56038652fb479eb9cd7f5917655f9f7" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>StopTrackRevisions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a650b299ce55575764d81a15be16392d0" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>SuspendTrackRevisions</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1af559cfbcfd39027db279ee3c9d74e54f" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a93fd65fccde2f954ac96a90dd28e9ae4" prot="private" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af7aa71ab5f185ee2463406dab7727595" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>ToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ad18f64c5586b84a071957824b24426a2" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>ToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ac30ad488b91a1e7dc45933e6601aeebc" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>UnlinkFields</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a7ab24b0f997f82af1a208ac9d5066059" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Unprotect</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a53275fe99a7f7769f695d1fa0104bf8f" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>Unprotect</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a9c2187d845fae7a8dd8a6a5241d69d25" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>UpdateFields</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aa021259c912c6e0a2e3d5d872ac6125d" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>UpdateListLabels</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a2ae9aa4c9a98097a803676fc8153857a" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>UpdatePageLayout</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a77b8fa23d9fce51067a0c6d3caf2eeae" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>UpdateTableLayout</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ace1767a6c37f2240d0b9793938c26cd0" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>UpdateThumbnail</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab8c282239fc91ebb5ce83c82440917b1" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>UpdateThumbnail</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a1828e1ccbb5d7936fd248401b0c8deee" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>UpdateWordCount</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1aa331c277dc98198115a7119bf6b60c3d" prot="public" virt="non-virtual"><scope>Aspose::Words::Document</scope><name>UpdateWordCount</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1ab5da7cae36658dfd65df8ab33f301e53" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>WriteDocToHttResponse</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_1a30f90f6fd9a4f71d25302518ef379c86" prot="private" virt="virtual"><scope>Aspose::Words::Document</scope><name>~Document</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
