<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::Layout::LayoutEnumerator</compoundname>
    <basecompoundref refid="class/system.object/" prot="public" virt="non-virtual">System::Object</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">System::Details::EnumeratorBasedIterator&lt; System::SharedPtr&lt; System::Object &gt; &gt;</basecompoundref>
    <basecompoundref prot="private" virt="non-virtual">System::Details::IteratorPointerUpdater&lt; System::SharedPtr&lt; System::Object &gt;, false &gt;</basecompoundref>
    <includes refid="_layout_enumerator_8h" local="no">Aspose.Words.Cpp/Layout/LayoutEnumerator.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a40047f7390a31acb888fa11418a79f78" prot="private" static="no">
        <type><ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref></type>
        <definition>typedef System::Object Aspose::Words::Layout::LayoutEnumerator::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="202" column="28" bodyfile="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a55b0f06d23a7ada8a672f480d223bda3" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator" kindref="compound">LayoutEnumerator</ref></type>
        <definition>typedef LayoutEnumerator Aspose::Words::Layout::LayoutEnumerator::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="201" column="30" bodyfile="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a109808ec88dc8d4f708e4972303fd0c4" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">BaseType</ref> &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType&gt; Aspose::Words::Layout::LayoutEnumerator::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="204" column="37" bodyfile="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a5c8c19f175c39bc5fad8efa00081b842" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Layout::LayoutEnumerator::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="2665" column="23" bodyfile="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" bodystart="2665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a536487fd4650a5beac2e1d43035eb2a1" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Layout::LayoutEnumerator::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="2666" column="23" bodyfile="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" bodystart="2666" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a4a3d89faf6667c58abe129ebf68df1ae" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Layout::LayoutEnumerator::CODEPORTING_ENUMERATOR_ITERATOR_METHODS_DECLARATION</definition>
        <argsstring>(CODEPORTING_ARGS(System::SharedPtr&lt; System::Object &gt;),)</argsstring>
        <name>CODEPORTING_ENUMERATOR_ITERATOR_METHODS_DECLARATION</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::CODEPORTING_ENUMERATOR_ITERATOR_METHODS_DECLARATION</qualifiedname>
        <param>
          <type>CODEPORTING_ARGS(<ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="206" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1ab3f3ad6af7c9c13d11f1193cb234b22c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Layout::LayoutEnumerator::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="205" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1abea44398e889177cd15ee865857ff7cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Layout::LayoutEnumerator::LayoutEnumerator</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Document &gt; &amp;document)</argsstring>
        <name>LayoutEnumerator</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::LayoutEnumerator</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt; &amp;</type>
          <declname>document</declname>
        </param>
        <briefdescription>
<para>Initializes new instance of this class. </para>
        </briefdescription>
        <detaileddescription>
<para>If page layout model of the document hasn&apos;t been built the enumerator calls <ref refid="class_aspose_1_1_words_1_1_document_1a2ae9aa4c9a98097a803676fc8153857a" kindref="member">UpdatePageLayout</ref> to build it.</para>
<para>Whenever document is updated and new page layout model is created, a new enumerator must be used to access it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>document</parametername>
</parameternamelist>
<parameterdescription>
<para>A document whose page layout model to enumerate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="1312" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a3c97a3387ccb995c402ce628d44066c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt; &amp;</type>
        <definition>const System::SharedPtr&lt; System::Object &gt; &amp; Aspose::Words::Layout::LayoutEnumerator::get_Current</definition>
        <argsstring>() const</argsstring>
        <name>get_Current</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::get_Current</qualifiedname>
        <briefdescription>
<para>Gets or sets current position in the page layout model. This property returns an opaque object which corresponds to the current layout entity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to see the the ranges of pages that a node spans. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutCollector<sp/>=<sp/>MakeObject&lt;LayoutCollector&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>&quot;GetNumPagesSpanned&quot;<sp/>method<sp/>to<sp/>count<sp/>how<sp/>many<sp/>pages<sp/>the<sp/>content<sp/>of<sp/>our<sp/>document<sp/>spans.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>document<sp/>is<sp/>empty,<sp/>that<sp/>number<sp/>of<sp/>pages<sp/>is<sp/>currently<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>layoutCollector-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>layoutCollector-&gt;GetNumPagesSpanned(doc));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Populate<sp/>the<sp/>document<sp/>with<sp/>5<sp/>pages<sp/>of<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2eaed73dc1bc28ff770598bf4a0c94b4741" kindref="member" tooltip="Specifies start of new section on a new even page.">BreakType::SectionBreakEvenPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Before<sp/>the<sp/>layout<sp/>collector,<sp/>we<sp/>need<sp/>to<sp/>call<sp/>the<sp/>&quot;UpdatePageLayout&quot;<sp/>method<sp/>to<sp/>give<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>accurate<sp/>figure<sp/>for<sp/>any<sp/>layout-related<sp/>metric,<sp/>such<sp/>as<sp/>the<sp/>page<sp/>count.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>layoutCollector-&gt;GetNumPagesSpanned(doc));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">layoutCollector-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdatePageLayout();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(5,<sp/>layoutCollector-&gt;GetNumPagesSpanned(doc));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>see<sp/>the<sp/>numbers<sp/>of<sp/>the<sp/>start<sp/>and<sp/>end<sp/>pages<sp/>of<sp/>any<sp/>node<sp/>and<sp/>their<sp/>overall<sp/>page<sp/>spans.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>nodes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>node<sp/>:<sp/>System::IterateOver(nodes))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;-&gt;<sp/><sp/>NodeType.{0}:<sp/>&quot;</highlight><highlight class="normal">,<sp/>node-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(String::Format(u</highlight><highlight class="stringliteral">&quot;\tStarts<sp/>on<sp/>page<sp/>{0},<sp/>ends<sp/>on<sp/>page<sp/>{1},&quot;</highlight><highlight class="normal">,<sp/>layoutCollector-&gt;GetStartPageIndex(node),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutCollector-&gt;GetEndPageIndex(node))<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;<sp/>spanning<sp/>{0}<sp/>pages.&quot;</highlight><highlight class="normal">,<sp/>layoutCollector-&gt;GetNumPagesSpanned(node)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>iterate<sp/>over<sp/>the<sp/>layout<sp/>entities<sp/>using<sp/>a<sp/>LayoutEnumerator.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>LayoutEnumerator<sp/>can<sp/>traverse<sp/>the<sp/>collection<sp/>of<sp/>layout<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>apply<sp/>it<sp/>to<sp/>any<sp/>node&apos;s<sp/>corresponding<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">layoutEnumerator-&gt;set_Current(layoutCollector-&gt;GetEntity(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;¶&quot;</highlight><highlight class="normal">,<sp/>layoutEnumerator-&gt;get_Text());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="1007" column="32"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a6b720439a53afe25ffb641f54e96336e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Document &gt; Aspose::Words::Layout::LayoutEnumerator::get_Document</definition>
        <argsstring>() const</argsstring>
        <name>get_Document</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::get_Document</qualifiedname>
        <briefdescription>
<para>Gets document this instance enumerates. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="1158" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Layout::LayoutEnumerator::get_Kind</definition>
        <argsstring>()</argsstring>
        <name>get_Kind</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::get_Kind</qualifiedname>
        <briefdescription>
<para>Gets the kind of the current entity. This can be an empty string but never null. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="652" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1adda93456d13bd72f22dc92f846770144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Layout::LayoutEnumerator::get_PageIndex</definition>
        <argsstring>()</argsstring>
        <name>get_PageIndex</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::get_PageIndex</qualifiedname>
        <briefdescription>
<para>Gets the 1-based index of a page which contains the current entity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="948" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a395458b4d750ebdceac195e84830dbd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref></type>
        <definition>System::Drawing::RectangleF Aspose::Words::Layout::LayoutEnumerator::get_Rectangle</definition>
        <argsstring>()</argsstring>
        <name>get_Rectangle</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::get_Rectangle</qualifiedname>
        <briefdescription>
<para>Returns the bounding rectangle of the current entity relative to the page top left corner (in points). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="504" column="36"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a0132f2abde41d1dc1089413404270b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Layout::LayoutEnumerator::get_Text</definition>
        <argsstring>()</argsstring>
        <name>get_Text</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::get_Text</qualifiedname>
        <briefdescription>
<para>Gets text of the current span entity. Throws for other entity types. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="800" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2" kindref="member">Aspose::Words::Layout::LayoutEntityType</ref></type>
        <definition>Aspose::Words::Layout::LayoutEntityType Aspose::Words::Layout::LayoutEnumerator::get_Type</definition>
        <argsstring>()</argsstring>
        <name>get_Type</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::get_Type</qualifiedname>
        <briefdescription>
<para>Gets the type of the current entity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="356" column="48"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a4f2bb1dc11e102718a98bd54eb694b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt; System::Object &gt; Aspose::Words::Layout::LayoutEnumerator::idx_get</definition>
        <argsstring>(const System::String &amp;key)</argsstring>
        <name>idx_get</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::idx_get</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Gets a named property of the entity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>A name of the property (case-sensitive).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Null if property is not available, otherwise value of the property. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="2659" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1af216718dc9bf5d064c3498944a126696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Layout::LayoutEnumerator::MoveFirstChild</definition>
        <argsstring>()</argsstring>
        <name>MoveFirstChild</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::MoveFirstChild</qualifiedname>
        <briefdescription>
<para>Moves to the first child entity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="2206" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1adc22f216580f6e117ed28db90a28eac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Layout::LayoutEnumerator::MoveLastChild</definition>
        <argsstring>()</argsstring>
        <name>MoveLastChild</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::MoveLastChild</qualifiedname>
        <briefdescription>
<para>Moves to the last child entity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="2354" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1afbd4cdab66279a9f8c286d6d768e5232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Layout::LayoutEnumerator::MoveNext</definition>
        <argsstring>()</argsstring>
        <name>MoveNext</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::MoveNext</qualifiedname>
        <briefdescription>
<para>Moves to the next sibling entity in visual order. When iterating lines of a paragraph broken across pages this method will not move to the next page but rather move to the next entity on the same page. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="1610" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a31c3aa9cc8b1e0e4a38eb261275937af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Layout::LayoutEnumerator::MoveNextLogical</definition>
        <argsstring>()</argsstring>
        <name>MoveNextLogical</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::MoveNextLogical</qualifiedname>
        <briefdescription>
<para>Moves to the next sibling entity in a logical order. When iterating lines of a paragraph broken across pages this method will move to the next line even if it resides on another page. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="1760" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a50ae7fe163aaa05cc43df776505cfbf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Layout::LayoutEnumerator::MoveParent</definition>
        <argsstring>()</argsstring>
        <name>MoveParent</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::MoveParent</qualifiedname>
        <briefdescription>
<para>Moves to the parent entity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="2502" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a3255218e500f5e1fa420f1d3f14a68ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Layout::LayoutEnumerator::MoveParent</definition>
        <argsstring>(Aspose::Words::Layout::LayoutEntityType types)</argsstring>
        <name>MoveParent</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::MoveParent</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2" kindref="member">Aspose::Words::Layout::LayoutEntityType</ref></type>
          <declname>types</declname>
        </param>
        <briefdescription>
<para>Moves to the parent entity of the specified type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>types</parametername>
</parameternamelist>
<parameterdescription>
<para>The parent entity type to move to. Use bitwise-OR to specify multiple parent types.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="2652" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1adef8371afda339c5cb1c2c9799490751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Layout::LayoutEnumerator::MovePrevious</definition>
        <argsstring>()</argsstring>
        <name>MovePrevious</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::MovePrevious</qualifiedname>
        <briefdescription>
<para>Moves to the previous sibling entity. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="1908" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1aae744e96bd298f763353b0f19dd37d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Layout::LayoutEnumerator::MovePreviousLogical</definition>
        <argsstring>()</argsstring>
        <name>MovePreviousLogical</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::MovePreviousLogical</qualifiedname>
        <briefdescription>
<para>Moves to the previous sibling entity in a logical order. When iterating lines of a paragraph broken across pages this method will move to the previous line even if it resides on another page. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="2058" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1af66acd7063a86c8f1e8dd451b4928638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Layout::LayoutEnumerator::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::Reset</qualifiedname>
        <briefdescription>
<para>Moves the enumerator to the first page of the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="1460" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a2ef76eb5707fbaa50e9b7cb15d256506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Layout::LayoutEnumerator::set_Current</definition>
        <argsstring>(const System::SharedPtr&lt; System::Object &gt; &amp;value)</argsstring>
        <name>set_Current</name>
        <qualifiedname>Aspose::Words::Layout::LayoutEnumerator::set_Current</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a3c97a3387ccb995c402ce628d44066c3" kindref="member">Aspose::Words::Layout::LayoutEnumerator::get_Current</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="1010" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Enumerates page layout entities of a document. You can use this class to walk over the page layout model. Available properties are type, geometry, text and page index where entity is rendered, as well as overall structure and relationships. Use combination of <ref refid="" kindref="compound">GetEntity()</ref> and <ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a3c97a3387ccb995c402ce628d44066c3" kindref="member">Current</ref> move to the entity which corresponds to a document node. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows ways of traversing a document&apos;s layout entities. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LayoutEnumerator_()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>that<sp/>contains<sp/>a<sp/>variety<sp/>of<sp/>layout<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Layout<sp/>entities<sp/>are<sp/>pages,<sp/>cells,<sp/>rows,<sp/>lines,<sp/>and<sp/>other<sp/>objects<sp/>included<sp/>in<sp/>the<sp/>LayoutEntityType<sp/>enum.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>layout<sp/>entity<sp/>has<sp/>a<sp/>rectangular<sp/>space<sp/>that<sp/>it<sp/>occupies<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Layout<sp/>entities.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>enumerator<sp/>that<sp/>can<sp/>traverse<sp/>these<sp/>entities<sp/>like<sp/>a<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutEnumerator<sp/>=<sp/>MakeObject&lt;LayoutEnumerator&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(doc,<sp/>layoutEnumerator-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="Represents page of a document. Page may have Column, HeaderFooter and Comment child entities.">LayoutEntityType::Page</ref>,<sp/>layoutEnumerator-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(layoutEnumerator-&gt;get_Text(),<sp/><ref refid="class/system.exception_wrapper/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::InvalidOperationException</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>call<sp/>this<sp/>method<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>enumerator<sp/>will<sp/>be<sp/>at<sp/>the<sp/>first<sp/>layout<sp/>entity.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;Reset();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>orders<sp/>that<sp/>determine<sp/>how<sp/>the<sp/>layout<sp/>enumerator<sp/>continues<sp/>traversing<sp/>layout<sp/>entities</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>it<sp/>encounters<sp/>entities<sp/>that<sp/>span<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>In<sp/>visual<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>layout<sp/>takes<sp/>precedence,<sp/>and<sp/>we<sp/>move<sp/>to<sp/>other<sp/>child<sp/>elements<sp/>on<sp/>this<sp/>page<sp/>and<sp/>avoid<sp/>the<sp/>ones<sp/>on<sp/>the<sp/>next.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>enumerator<sp/>is<sp/>now<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>collection.<sp/>We<sp/>can<sp/>traverse<sp/>the<sp/>layout<sp/>entities<sp/>backwards<sp/>to<sp/>go<sp/>back<sp/>to<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>separated:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>In<sp/>logical<sp/>order:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>moving<sp/>through<sp/>an<sp/>entity&apos;s<sp/>children<sp/>that<sp/>span<sp/>multiple<sp/>pages,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>enumerator<sp/>will<sp/>move<sp/>between<sp/>pages<sp/>to<sp/>traverse<sp/>all<sp/>the<sp/>child<sp/>entities.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>first<sp/>to<sp/>last,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Traversing<sp/>from<sp/>last<sp/>to<sp/>first,<sp/>elements<sp/>between<sp/>pages<sp/>mixed:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNext());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackward(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackward(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePrevious());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutForwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveFirstChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutForwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveNextLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseLayoutBackwardLogical(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintCurrentEntity(layoutEnumerator,<sp/>depth);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MoveLastChild())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseLayoutBackwardLogical(layoutEnumerator,<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layoutEnumerator-&gt;MoveParent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;MovePreviousLogical());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintCurrentEntity(SharedPtr&lt;LayoutEnumerator&gt;<sp/>layoutEnumerator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>tabs(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>indent);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(layoutEnumerator-&gt;get_Kind()<sp/>==<sp/>String::Empty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type:<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;get_Type())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>::<ref refid="namespace_aspose_1_1_words_1_1_layout_1adb5f76ea5244567304b83f53d4477351a520d0db389f362bf79ef56ca0af3dcab" kindref="member" tooltip="Renders insert and delete revisions inline, format revisions in balloons.">Format</ref>(u</highlight><highlight class="stringliteral">&quot;{0}-&gt;<sp/>Entity<sp/>type<sp/>&amp;<sp/>kind:<sp/>{1},<sp/>{2}&quot;</highlight><highlight class="normal">,<sp/>tabs,<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" kindref="member" tooltip="Gets the type of the current entity.">get_Type</ref>(),<sp/>layoutEnumerator-&gt;<ref refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" kindref="member" tooltip="Gets the kind of the current entity. This can be an empty string but never null.">get_Kind</ref>()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>spans<sp/>can<sp/>contain<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(layoutEnumerator-&gt;get_Type()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1_1_layout_1ab12c91b683cec496da3a374d490769a2a9ce62112cff8eb735d9270c2e285b000" kindref="member" tooltip="Represents one or more characters in a line. This include special characters like field start/end mar...">LayoutEntityType::Span</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Span<sp/>contents:<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_Text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref><sp/>leRect<sp/>=<sp/>layoutEnumerator-&gt;get_Rectangle();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Rectangle<sp/>dimensions<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Width()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Height()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>X=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_X()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Y=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>leRect.get_Y()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>tabs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>Page<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>layoutEnumerator-&gt;get_PageIndex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Aspose::Words::Layout::LayoutEnumerator</label>
        <link refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="private-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>System::Details::EnumeratorBasedIterator&lt; System::SharedPtr&lt; System::Object &gt; &gt;</label>
      </node>
      <node id="4">
        <label>System::Details::IteratorPointerUpdater&lt; System::SharedPtr&lt; System::Object &gt;, false &gt;</label>
      </node>
      <node id="2">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Aspose::Words::Layout::LayoutEnumerator</label>
        <link refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="private-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>System::Details::EnumeratorBasedIterator&lt; System::SharedPtr&lt; System::Object &gt; &gt;</label>
      </node>
      <node id="4">
        <label>System::Details::IteratorPointerUpdater&lt; System::SharedPtr&lt; System::Object &gt;, false &gt;</label>
      </node>
      <node id="2">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" line="199" column="1" bodyfile="Aspose.Words.Cpp/Layout/LayoutEnumerator.h" bodystart="200" bodyend="2668"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a40047f7390a31acb888fa11418a79f78" prot="private" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a4a3d89faf6667c58abe129ebf68df1ae" prot="private" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>CODEPORTING_ENUMERATOR_ITERATOR_METHODS_DECLARATION</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a3c97a3387ccb995c402ce628d44066c3" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>get_Current</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a6b720439a53afe25ffb641f54e96336e" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>get_Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a9633b90c7ce883a2c6616bfcee34d98e" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>get_Kind</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1adda93456d13bd72f22dc92f846770144" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>get_PageIndex</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a395458b4d750ebdceac195e84830dbd7" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>get_Rectangle</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a0132f2abde41d1dc1089413404270b7f" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>get_Text</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a7a2e542e9e6873faffcf9ab776214f28" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>get_Type</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a4f2bb1dc11e102718a98bd54eb694b8b" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>idx_get</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1abea44398e889177cd15ee865857ff7cc" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>LayoutEnumerator</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a5c8c19f175c39bc5fad8efa00081b842" prot="private" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a536487fd4650a5beac2e1d43035eb2a1" prot="private" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1af216718dc9bf5d064c3498944a126696" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>MoveFirstChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1adc22f216580f6e117ed28db90a28eac5" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>MoveLastChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1afbd4cdab66279a9f8c286d6d768e5232" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>MoveNext</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a31c3aa9cc8b1e0e4a38eb261275937af" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>MoveNextLogical</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a50ae7fe163aaa05cc43df776505cfbf2" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>MoveParent</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a3255218e500f5e1fa420f1d3f14a68ed" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>MoveParent</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1adef8371afda339c5cb1c2c9799490751" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>MovePrevious</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1aae744e96bd298f763353b0f19dd37d71" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>MovePreviousLogical</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1af66acd7063a86c8f1e8dd451b4928638" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>Reset</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1ab3f3ad6af7c9c13d11f1193cb234b22c" prot="private" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a2ef76eb5707fbaa50e9b7cb15d256506" prot="public" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>set_Current</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a55b0f06d23a7ada8a672f480d223bda3" prot="private" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_layout_1_1_layout_enumerator_1a109808ec88dc8d4f708e4972303fd0c4" prot="private" virt="non-virtual"><scope>Aspose::Words::Layout::LayoutEnumerator</scope><name>ThisTypeBaseTypesInfo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
