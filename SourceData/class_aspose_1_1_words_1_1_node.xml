<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_node" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Aspose::Words::Node</compoundname>
    <basecompoundref refid="class/system.object/" prot="public" virt="virtual">System::Object</basecompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_bookmark_end" prot="public" virt="non-virtual">Aspose::Words::BookmarkEnd</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_bookmark_start" prot="public" virt="non-virtual">Aspose::Words::BookmarkStart</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_comment_range_end" prot="public" virt="non-virtual">Aspose::Words::CommentRangeEnd</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_comment_range_start" prot="public" virt="non-virtual">Aspose::Words::CommentRangeStart</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_composite_node" prot="public" virt="non-virtual">Aspose::Words::CompositeNode</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_editable_range_end" prot="public" virt="non-virtual">Aspose::Words::EditableRangeEnd</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_editable_range_start" prot="public" virt="non-virtual">Aspose::Words::EditableRangeStart</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_inline" prot="public" virt="non-virtual">Aspose::Words::Inline</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_end" prot="public" virt="non-virtual">Aspose::Words::Markup::StructuredDocumentTagRangeEnd</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start" prot="public" virt="non-virtual">Aspose::Words::Markup::StructuredDocumentTagRangeStart</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_sub_document" prot="public" virt="non-virtual">Aspose::Words::SubDocument</derivedcompoundref>
    <includes refid="_node_8h" local="no">Aspose.Words.Cpp/Node.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_node_1ad781545a23fdeadd3080c2986f33e804" prot="private" static="no">
        <type><ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref></type>
        <definition>typedef System::Object Aspose::Words::Node::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Node::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="167" column="28" bodyfile="Aspose.Words.Cpp/Node.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_node_1aeb665cb18e2b40f5623050f08935db50" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Node</ref></type>
        <definition>typedef Node Aspose::Words::Node::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Node::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="166" column="18" bodyfile="Aspose.Words.Cpp/Node.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_node_1a90ce7957112a937b978d81648fc58067" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">BaseType</ref> &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType&gt; Aspose::Words::Node::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Node::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="169" column="37" bodyfile="Aspose.Words.Cpp/Node.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_node_1a0cd4a501b37482e2e0f3177d6ae4ce40" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::Node::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Node::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1318" column="21" bodyfile="Aspose.Words.Cpp/Node.h" bodystart="1318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_node_1ad9a03cce6f534373250842a5b43aebe4" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Node::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Node::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1319" column="23" bodyfile="Aspose.Words.Cpp/Node.h" bodystart="1319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_node_1ae103c2f753a747f92ccffe0d6eed5e1a" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::Node::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::Node::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1320" column="21" bodyfile="Aspose.Words.Cpp/Node.h" bodystart="1320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_node_1a6b378c8d895499c525301d2dfa3e4536" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Node::mField3</definition>
        <argsstring></argsstring>
        <name>mField3</name>
        <qualifiedname>Aspose::Words::Node::mField3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1321" column="23" bodyfile="Aspose.Words.Cpp/Node.h" bodystart="1321" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a23ad060943c0846cdcafa99b0e6c133a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Node::Node</definition>
        <argsstring>()</argsstring>
        <name>Node</name>
        <qualifiedname>Aspose::Words::Node::Node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1305" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1ac84a159aca3fdfdcbbeab5ac175bf41e" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::Node::~Node</definition>
        <argsstring>()</argsstring>
        <name>~Node</name>
        <qualifiedname>Aspose::Words::Node::~Node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1314" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a53bf7103c6ec9da7872f99f68ef13ae4" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>virtual System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Node::Clone</definition>
        <argsstring>(bool, System::SharedPtr&lt; Aspose::Words::INodeCloningListener &gt;)</argsstring>
        <name>Clone</name>
        <qualifiedname>Aspose::Words::Node::Clone</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_building_blocks_1_1_building_block_1ad0ccc346f2673f4847663613a27e3b56">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_building_blocks_1_1_glossary_document_1add76237691a18447a1dfa6a4d0512e9c">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_composite_node_1ae90ecec13614a52c3ab6fe645fb88807">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_document_1ab986ab248ec51590b122a8e2212bb0c4">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_document_base_1ae1bb24315d5720565205a15d22cea3c9">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aefff3e73dec8562ed7cf3850596bff1c">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a01ac7ac6c09d006554e242aa38b4dc2d">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_form_field_1a789478f300027ef44d6b719f291d72a3">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_inline_1a7aa21246431fd50e97798b5d3815a0a8">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_inline_story_1a19464681adc0c02f407db053ec0b78d2">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_smart_tag_1a91117b9c6800fb232ce6eab529298c9f">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_1a0e410cd8498ebdf1c4e775115d77877f">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aeeff79336eef852b91b642fe63f448d6">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_math_1_1_office_math_1a6e5cbf309414ff20a2d250039621621f">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_paragraph_1a109280e4ce727a8e750ff451092a502b">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_section_1add1d665e7430c71451425e1cd361f2a0">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_story_1a3bab3624f0cb59cf9e912c6f57620b4f">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_cell_1aca3cb0f5915962c25509ef78a0bb17f1">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_row_1ab676ab212eb220927e5d0d072a39eedd">Clone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_table_1ac55b5ef4166d37784611120c6b0b6f31">Clone</reimplementedby>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::INodeCloningListener &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1308" column="34"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a9358fb4208d077e8411fdf0d4e8553e5" prot="private" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">ThisType</ref> *</type>
        <definition>virtual ThisType * Aspose::Words::Node::CppMemberwiseClone</definition>
        <argsstring>() const =0</argsstring>
        <name>CppMemberwiseClone</name>
        <qualifiedname>Aspose::Words::Node::CppMemberwiseClone</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_absolute_position_tab_1a58e65cdb22566e0b438155c6c9431e9b">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_body_1ab7450df926025b8452e5613108d4061c">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_bookmark_end_1a690a00380e14639deffbf3be1f6ad3f1">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_bookmark_start_1aaac85c2e1967e2ddcde829303b0aeb49">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_building_blocks_1_1_building_block_1a1586c6f1e06d927658b4cc502cf1d15e">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_building_blocks_1_1_glossary_document_1ae2636d1474198c5b15a2c5a3ab194645">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_comment_1a8d07377b25ba1fe20cddbdd887a1d293">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_comment_range_end_1a00172357929406bb40172e6771754c8b">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_comment_range_start_1ab278e9b993a9b3b5beeff1bb867faee8">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_document_1a212d4bb489f785fabaad35fc3209ef04">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_drawing_1_1_group_shape_1a202e55f50fc4aacaec933860409ce7cc">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad82af008e52628b8e35a795c6529bd0e">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_editable_range_end_1a39e008f406e5bbc0491a68a6756f09dc">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_editable_range_start_1a4688b9d85005d77e0f302e7e84ef581d">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_field_end_1add8782264eb8e63f3230cbeffc3ae525">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_field_separator_1a0a5e558dd2a8d9def2109bfe1146bcdd">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_field_start_1a6238ca0699dfec2a9b046bf8af848747">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_form_field_1af9f7d3e6d661250a42ed78457a0809e3">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_header_footer_1afaeda554a20cc764deeb9c53d021c60c">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_smart_tag_1ac7ec59b00b90086c9531399606a977a5">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_1a46bed203ff6959b121cd635196708fe2">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_end_1af667a62fb4188b43924607d25e753b08">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1aa9ce72906a258acc65991375779fe6c0">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_math_1_1_office_math_1a33c1382c6b7c22d5a77bffe2c3c34f05">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_notes_1_1_footnote_1a2e847d140ec1de3eb1104e74ec3a263d">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_paragraph_1a36c59b70d47f93353ca5c55a3bcd63d6">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_run_1aa529b979a268454800d7c9dae6c9d276">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_section_1a7e9732db013b16f536ebfc58152dc21b">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_special_char_1a64f5b08fcf8dce680274bfb41aef3e4c">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_sub_document_1ad886f8f65a28c56051823aa2599359e8">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_cell_1a9c47ad472e0e2f3bdf1dbe4ad5e32f56">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_row_1ac582d2afc110c06fe6eb99c44fa642f8">CppMemberwiseClone</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_table_1aa4a7cfbb9fc5a10c046d4ed768bf1c36">CppMemberwiseClone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1323" column="25"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a52d09768a9bfc1998d36eefe93a37b6b" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>virtual System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Node::GetNodeFromPos</definition>
        <argsstring>(int32_t)</argsstring>
        <name>GetNodeFromPos</name>
        <qualifiedname>Aspose::Words::Node::GetNodeFromPos</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_composite_node_1aa9a29b9508bfecc3e9ce16a2c28b9e02">GetNodeFromPos</reimplementedby>
        <param>
          <type>int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1307" column="34"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1af5248311a814cd9ef62fea574fef2f05" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int32_t</type>
        <definition>virtual int32_t Aspose::Words::Node::GetTextLength</definition>
        <argsstring>()</argsstring>
        <name>GetTextLength</name>
        <qualifiedname>Aspose::Words::Node::GetTextLength</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_composite_node_1a77337f83822b37b5031bf369d14e4f36">GetTextLength</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1312" column="24"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1ac78f2ffd99e6e2b5227d6165502a824b" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void Aspose::Words::Node::GetTextToBuilder</definition>
        <argsstring>(System::SharedPtr&lt; System::Text::StringBuilder &gt;)</argsstring>
        <name>GetTextToBuilder</name>
        <qualifiedname>Aspose::Words::Node::GetTextToBuilder</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_composite_node_1acedd214ff3edaac04f312df1b2312735">GetTextToBuilder</reimplementedby>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.text.string_builder/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Text::StringBuilder</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1310" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a92865b8d3f6e71e21bb267423b1a2d2b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Node::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Node::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="170" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a556472e35a86820cf189f10594933f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Aspose::Words::Node::Accept</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::DocumentVisitor &gt; visitor)=0</argsstring>
        <name>Accept</name>
        <qualifiedname>Aspose::Words::Node::Accept</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_absolute_position_tab_1ae643bae7f9eb7f06d83ed01bc2d538f4">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_body_1a4f54e750c9ca22add5ef8c0f4a223055">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_bookmark_end_1ae0f8a78c9c9a0d37a925e532007b649d">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_bookmark_start_1a919f58d08128efe4216fb1f20d478654">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_building_blocks_1_1_building_block_1ab96d89583f307042df057c22170409d6">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_building_blocks_1_1_glossary_document_1a48ba7895e343555eaedf9234cf28868f">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_comment_1ad47fc2b138f0ed1ab180af02649e170a">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_comment_range_end_1a69cdc343ce1271b892a71386430d91d8">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_comment_range_start_1a2e76e303997f8b92170afafe98452de3">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_document_1a7a66c78afffcee340863e16ecdec53f9">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_drawing_1_1_group_shape_1a12d55012a4b4bd7945faa453a1756cbf">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa48149d924cce2f917b880b7fc801148">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_editable_range_end_1a61a8104c4c0cc2f9a74740c30b91ecdd">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_editable_range_start_1a5e00c4fc700572f9b1805d2689064bcb">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_field_end_1a0a8834f6e6e810a4055949837ca0c4cf">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_field_separator_1a931b32692d58ceb3871b65db9d0906e7">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_field_start_1a59a723c04a00583e99dd50b1d16b5089">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_form_field_1a1cfa629cbed704dd2f0a19b130850511">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_header_footer_1a38aaf77d1b549bea88ec0848c515912c">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_smart_tag_1a568594cfc0eedce9c1dc5740afe78c88">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_1ad0cd9ccc811dacc9451f1ff9e893fbbd">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_end_1a0bc0a4045a0d7578f12107389c5251ee">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ab468f2b66f938d01417aff953e5d8749">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_math_1_1_office_math_1ae4298af0ebd46b7d8efbaad291edc365">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_notes_1_1_footnote_1a73754d6fec636b7f8e35eee1bf8bee21">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_paragraph_1a3167d0c5b77263efa0521894a6874cf7">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_run_1aff214d6a32ac10aea485cae076c6b4d8">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_section_1ad77bda69b3a5a3984deb69212caa2b01">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_special_char_1a182be4ec7effb9b2833f61c60710e472">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_sub_document_1aed7bf36f12e0ad8cdbde677f89f753ea">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_cell_1a1a415d1f08d141bd110fa51a8faf7d74">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_row_1afe14f4753ac5991e4349f941a8b91263">Accept</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_table_1a04a6e5f98cf4aad31e30652040823fae">Accept</reimplementedby>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">Aspose::Words::DocumentVisitor</ref> &gt;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>Accepts a visitor. </para>
        </briefdescription>
        <detaileddescription>
<para>Enumerates over this node and all of its children. Each node calls a corresponding method on <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref>.</para>
<para>For more info see the Visitor design pattern.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visitor</parametername>
</parameternamelist>
<parameterdescription>
<para>The visitor that will visit the nodes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all nodes were visited; false if <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref> stopped the operation before visiting all nodes.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use a <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref> implementation to remove all hidden content from a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RemoveHiddenContentFromDocument()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Hidden<sp/>content.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hiddenContentRemover<sp/>=<sp/>MakeObject&lt;ExFont::RemoveHiddenContentVisitor&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>types<sp/>of<sp/>fields<sp/>which<sp/>can<sp/>accept<sp/>a<sp/>document<sp/>visitor,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>allow<sp/>it<sp/>to<sp/>visit<sp/>the<sp/>accepting<sp/>node,<sp/>and<sp/>then<sp/>traverse<sp/>its<sp/>child<sp/>nodes<sp/>in<sp/>a<sp/>depth-first<sp/>manner.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Paragraph<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>4,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>para-&gt;Accept(hiddenContentRemover);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Table<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Tables()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>table-&gt;Accept(hiddenContentRemover);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Document<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(hiddenContentRemover);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Font.RemoveHiddenContentFromDocument.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">RemoveHiddenContentVisitor<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFieldStart(SharedPtr&lt;FieldStart&gt;<sp/>fieldStart)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fieldStart-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldStart-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFieldEnd(SharedPtr&lt;FieldEnd&gt;<sp/>fieldEnd)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fieldEnd-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldEnd-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFieldSeparator(SharedPtr&lt;FieldSeparator&gt;<sp/>fieldSeparator)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fieldSeparator-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fieldSeparator-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitRun(SharedPtr&lt;Run&gt;<sp/>run)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(run-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitParagraphStart(SharedPtr&lt;Paragraph&gt;<sp/>paragraph)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(paragraph-&gt;get_ParagraphBreakFont()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paragraph-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFormField(SharedPtr&lt;FormField&gt;<sp/>formField)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(formField-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formField-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(groupShape-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupShape-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitCommentStart(SharedPtr&lt;Comment&gt;<sp/>comment)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comment-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitFootnoteStart(SharedPtr&lt;Footnote&gt;<sp/>footnote)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(footnote-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>footnote-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitSpecialChar(SharedPtr&lt;SpecialChar&gt;<sp/>specialChar)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specialChar-&gt;get_Font()-&gt;get_Hidden())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specialChar-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitTableEnd(SharedPtr&lt;Table&gt;<sp/>table)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>content<sp/>inside<sp/>table<sp/>cells<sp/>may<sp/>have<sp/>the<sp/>hidden<sp/>content<sp/>flag,<sp/>but<sp/>the<sp/>tables<sp/>themselves<sp/>cannot.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>table<sp/>had<sp/>nothing<sp/>but<sp/>hidden<sp/>content,<sp/>this<sp/>visitor<sp/>would<sp/>have<sp/>removed<sp/>all<sp/>of<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>there<sp/>would<sp/>be<sp/>no<sp/>child<sp/>nodes<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thus,<sp/>we<sp/>can<sp/>also<sp/>treat<sp/>the<sp/>table<sp/>itself<sp/>as<sp/>hidden<sp/>content<sp/>and<sp/>remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tables<sp/>which<sp/>are<sp/>empty<sp/>but<sp/>do<sp/>not<sp/>have<sp/>hidden<sp/>content<sp/>will<sp/>have<sp/>cells<sp/>with<sp/>empty<sp/>paragraphs<sp/>inside,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>this<sp/>visitor<sp/>will<sp/>not<sp/>remove.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!table-&gt;get_HasChildNodes())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitCellEnd(SharedPtr&lt;Cell&gt;<sp/>cell)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cell-&gt;get_HasChildNodes()<sp/>&amp;&amp;<sp/>cell-&gt;get_ParentNode()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cell-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitRowEnd(SharedPtr&lt;Row&gt;<sp/>row)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!row-&gt;get_HasChildNodes()<sp/>&amp;&amp;<sp/>row-&gt;get_ParentNode()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="839" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a81dedd9b241b09760112b5e5068f1daa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Node::Clone</definition>
        <argsstring>(bool isCloneChildren)</argsstring>
        <name>Clone</name>
        <qualifiedname>Aspose::Words::Node::Clone</qualifiedname>
        <param>
          <type>bool</type>
          <declname>isCloneChildren</declname>
        </param>
        <briefdescription>
<para>Creates a duplicate of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method serves as a copy constructor for nodes. The cloned node has no parent, but belongs to the same document as the original node.</para>
<para>This method always performs a deep copy of the node. The <emphasis>isCloneChildren</emphasis> parameter specifies whether to perform copy all child nodes as well.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isCloneChildren</parametername>
</parameternamelist>
<parameterdescription>
<para>True to recursively clone the subtree under the specified node; false to clone only the node itself.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cloned node.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to clone a composite node. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>para<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>cloning<sp/>a<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>a<sp/>node,<sp/>and<sp/>create<sp/>a<sp/>clone<sp/>of<sp/>each<sp/>of<sp/>its<sp/>child<sp/>nodes<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>cloneWithChildren<sp/>=<sp/>para-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE((System::DynamicCast&lt;CompositeNode&gt;(cloneWithChildren))-&gt;get_HasChildNodes());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">,<sp/>cloneWithChildren-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>a<sp/>node<sp/>just<sp/>by<sp/>itself<sp/>without<sp/>any<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>cloneWithoutChildren<sp/>=<sp/>para-&gt;Clone(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE((System::DynamicCast&lt;CompositeNode&gt;(cloneWithoutChildren))-&gt;get_HasChildNodes());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>cloneWithoutChildren-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="606" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a941120df17372b25f9a7127a9d9b3816" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Node::get_CustomNodeId</definition>
        <argsstring>() const</argsstring>
        <name>get_CustomNodeId</name>
        <qualifiedname>Aspose::Words::Node::get_CustomNodeId</qualifiedname>
        <briefdescription>
<para>Specifies custom node identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Default is zero.</para>
<para>This identifier can be set and used arbitrarily. For example, as a key to get external data.</para>
<para>Important note, specified value is not saved to an output file and exists only during the node lifetime.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to traverse through a composite node&apos;s collection of child nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>two<sp/>runs<sp/>and<sp/>one<sp/>shape<sp/>as<sp/>child<sp/>nodes<sp/>to<sp/>the<sp/>first<sp/>paragraph<sp/>of<sp/>this<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>paragraph<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">paragraph-&gt;AppendChild(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/>ShapeType::Rectangle);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Width(200);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Height(200);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>&apos;CustomNodeId&apos;<sp/>is<sp/>not<sp/>saved<sp/>to<sp/>an<sp/>output<sp/>file<sp/>and<sp/>exists<sp/>only<sp/>during<sp/>the<sp/>node<sp/>lifetime.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_CustomNodeId(100);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(WrapType::Inline);</highlight></codeline>
<codeline><highlight class="normal">paragraph-&gt;AppendChild(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">paragraph-&gt;AppendChild(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>the<sp/>paragraph&apos;s<sp/>collection<sp/>of<sp/>immediate<sp/>children,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>print<sp/>any<sp/>runs<sp/>or<sp/>shapes<sp/>that<sp/>we<sp/>find<sp/>within.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>children<sp/>=<sp/>paragraph-&gt;get_ChildNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>paragraph-&gt;get_ChildNodes()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>child<sp/>:<sp/>System::IterateOver(children))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(child-&gt;get_NodeType())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Run<sp/>contents:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>child-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(child);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Shape:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t{0},<sp/>{1}x{2}&quot;</highlight><highlight class="normal">,<sp/>childShape-&gt;get_ShapeType(),<sp/>childShape-&gt;get_Width(),<sp/>childShape-&gt;get_Height())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(100,<sp/>shape-&gt;get_CustomNodeId());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="567" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a2a69f84e3ccd323199299c999ab32d46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_base" kindref="compound">Aspose::Words::DocumentBase</ref> &gt;</type>
        <definition>virtual System::SharedPtr&lt; Aspose::Words::DocumentBase &gt; Aspose::Words::Node::get_Document</definition>
        <argsstring>() const</argsstring>
        <name>get_Document</name>
        <qualifiedname>Aspose::Words::Node::get_Document</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_document_base_1a441771321c6cf18cfa933980eed032c5">get_Document</reimplementedby>
        <briefdescription>
<para>Gets the document to which this node belongs. </para>
        </briefdescription>
        <detaileddescription>
<para>The node always belongs to a document even if it has just been created and not yet added to the tree, or if it has been removed from the tree.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a node and set its owning document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>MakeObject&lt;Paragraph&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>not<sp/>yet<sp/>appended<sp/>this<sp/>paragraph<sp/>as<sp/>a<sp/>child<sp/>to<sp/>any<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(para-&gt;get_ParentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>node<sp/>is<sp/>an<sp/>appropriate<sp/>child<sp/>node<sp/>type<sp/>of<sp/>another<sp/>composite<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>attach<sp/>it<sp/>as<sp/>a<sp/>child<sp/>only<sp/>if<sp/>both<sp/>nodes<sp/>have<sp/>the<sp/>same<sp/>owner<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>owner<sp/>document<sp/>is<sp/>the<sp/>document<sp/>we<sp/>passed<sp/>to<sp/>the<sp/>node&apos;s<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>not<sp/>attached<sp/>this<sp/>paragraph<sp/>to<sp/>the<sp/>document,<sp/>so<sp/>the<sp/>document<sp/>does<sp/>not<sp/>contain<sp/>its<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(para-&gt;get_Document(),<sp/>doc);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>document<sp/>owns<sp/>this<sp/>paragraph,<sp/>we<sp/>can<sp/>apply<sp/>one<sp/>of<sp/>its<sp/>styles<sp/>to<sp/>the<sp/>paragraph&apos;s<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>this<sp/>node<sp/>to<sp/>the<sp/>document,<sp/>and<sp/>then<sp/>verify<sp/>its<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendChild(para);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body(),<sp/>para-&gt;get_ParentNode());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="349" column="34"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a670ce0649c755bec895c34d7d7b4e46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Aspose::Words::Node::get_IsComposite</definition>
        <argsstring>()</argsstring>
        <name>get_IsComposite</name>
        <qualifiedname>Aspose::Words::Node::get_IsComposite</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_composite_node_1a96cf2dd90a284fe9939d1d90780d2d4b">get_IsComposite</reimplementedby>
        <briefdescription>
<para>Returns true if this node can contain other nodes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to traverse a composite node&apos;s tree of child nodes. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecurseChildren()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>node<sp/>that<sp/>can<sp/>contain<sp/>child<sp/>nodes,<sp/>such<sp/>as<sp/>the<sp/>document<sp/>itself,<sp/>is<sp/>composite.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc-&gt;get_IsComposite());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>recursive<sp/>function<sp/>that<sp/>will<sp/>go<sp/>through<sp/>and<sp/>print<sp/>all<sp/>the<sp/>child<sp/>nodes<sp/>of<sp/>a<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseAllNodes(doc,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseAllNodes(SharedPtr&lt;CompositeNode&gt;<sp/>parentNode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>childNode<sp/>=<sp/>parentNode-&gt;get_FirstChild();<sp/>childNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>childNode<sp/>=<sp/>childNode-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>depth))<sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(childNode-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurse<sp/>into<sp/>the<sp/>node<sp/>if<sp/>it<sp/>is<sp/>a<sp/>composite<sp/>node.<sp/>Otherwise,<sp/>print<sp/>its<sp/>contents<sp/>if<sp/>it<sp/>is<sp/>an<sp/>inline<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childNode-&gt;get_IsComposite())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseAllNodes(System::DynamicCast&lt;CompositeNode&gt;(childNode),<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(System::ObjectExt::Is&lt;Inline&gt;(childNode))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>childNode-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="484" column="21"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a938ff32d060619d89ecefdf57984abf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Node::get_NextSibling</definition>
        <argsstring>()</argsstring>
        <name>get_NextSibling</name>
        <qualifiedname>Aspose::Words::Node::get_NextSibling</qualifiedname>
        <briefdescription>
<para>Gets the node immediately following this node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to traverse a composite node&apos;s tree of child nodes. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecurseChildren()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>node<sp/>that<sp/>can<sp/>contain<sp/>child<sp/>nodes,<sp/>such<sp/>as<sp/>the<sp/>document<sp/>itself,<sp/>is<sp/>composite.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc-&gt;get_IsComposite());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>recursive<sp/>function<sp/>that<sp/>will<sp/>go<sp/>through<sp/>and<sp/>print<sp/>all<sp/>the<sp/>child<sp/>nodes<sp/>of<sp/>a<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseAllNodes(doc,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseAllNodes(SharedPtr&lt;CompositeNode&gt;<sp/>parentNode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>childNode<sp/>=<sp/>parentNode-&gt;get_FirstChild();<sp/>childNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>childNode<sp/>=<sp/>childNode-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>depth))<sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(childNode-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurse<sp/>into<sp/>the<sp/>node<sp/>if<sp/>it<sp/>is<sp/>a<sp/>composite<sp/>node.<sp/>Otherwise,<sp/>print<sp/>its<sp/>contents<sp/>if<sp/>it<sp/>is<sp/>an<sp/>inline<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childNode-&gt;get_IsComposite())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseAllNodes(System::DynamicCast&lt;CompositeNode&gt;(childNode),<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(System::ObjectExt::Is&lt;Inline&gt;(childNode))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>childNode-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to use a node&apos;s NextSibling property to enumerate through its immediate children. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>node<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstChild();<sp/>node<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>node<sp/>=<sp/>node-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>type:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(node-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>contents<sp/>=<sp/>node-&gt;GetText().Trim();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(contents<sp/>==<sp/>String::Empty<sp/>?<sp/>u</highlight><highlight class="stringliteral">&quot;This<sp/>node<sp/>contains<sp/>no<sp/>text&quot;</highlight><highlight class="normal"><sp/>:<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Contents:<sp/>\&quot;{0}\&quot;&quot;</highlight><highlight class="normal">,<sp/>node-&gt;GetText().Trim()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="438" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a7f80e8d96b7a072fca14157b25ae025e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379" kindref="member">Aspose::Words::NodeType</ref></type>
        <definition>virtual Aspose::Words::NodeType Aspose::Words::Node::get_NodeType</definition>
        <argsstring>() const =0</argsstring>
        <name>get_NodeType</name>
        <qualifiedname>Aspose::Words::Node::get_NodeType</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_body_1abc2a40b388a33383035347cb439497a7">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_bookmark_end_1a4cc9c0a64cb16ba2be73c553298a7b85">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_bookmark_start_1a0755af0cf99e210edd4570925a3aec7d">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_building_blocks_1_1_building_block_1ae24368a8daeeb5bdf53f99b4a7607eed">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_building_blocks_1_1_glossary_document_1a394725556867cd79c7a19cb05b7e598e">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_comment_1a84c8ded9c0653860b15ca226116ad155">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_comment_range_end_1a3bdde8e45820bd543134ba89416eb527">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_comment_range_start_1a0a1eb2a3e1befd7900e84c02b1ede76d">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_document_1a1036b39c37ce18728c892adc7ae5f64a">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_drawing_1_1_group_shape_1aa75c1069b5832d88518251fba666e851">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1afa9709336672ea09c6ad6bc4d74d7e93">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_editable_range_end_1a31f6bd13dc6366f32cb92dde70b2c419">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_editable_range_start_1acaea0b40efdeae565e3881024b33f1a0">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_field_end_1a6596ec06ec42af8018a4bed4a5318d96">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_field_separator_1a678ef4a149d8c793fdfa56f6af4ebae3">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_field_start_1a8e0c42751855a0a9f5ad8b8c9cadd517">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_fields_1_1_form_field_1a4a8738047904108dd741d76b3796be99">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_header_footer_1ae8981d8f957b9bf8ffa2b6e0973548bc">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_smart_tag_1a002925124edabb21867725d42f559356">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_1a2d71aa9eb130164841efce2d16d02367">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_end_1a3b0809340791cb15cfb9b4ec66edac15">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start_1ae6e2102696085b39f7c7aa534eccb4b5">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_math_1_1_office_math_1aa413f06a5a9f0f7a8e26653298d73ca8">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_notes_1_1_footnote_1a2d0d0cf8a6a0ebdd32dd42e8022b7893">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_paragraph_1aa51e2b8b4dc3dee29ecc2a93c3ae6123">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_run_1a9bb5f33321aa64fb78b6ea38b21199a8">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_section_1af2613bf2cec8e2bfcc47da21c04153b7">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_special_char_1a6e9df6da5e2fba06885e9cda96156954">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_sub_document_1a51c43c4a2507dbbf074a1b8aaa4f172a">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_cell_1a77f5e658d8e3e637da009ad35842a4a7">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_row_1af78de2ee63460e269a2a12dc4bc35c0e">get_NodeType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_table_1ab2df362f22f65d7d8d84187280589276">get_NodeType</reimplementedby>
        <briefdescription>
<para>Gets the type of this node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to traverse a composite node&apos;s tree of child nodes. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecurseChildren()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>node<sp/>that<sp/>can<sp/>contain<sp/>child<sp/>nodes,<sp/>such<sp/>as<sp/>the<sp/>document<sp/>itself,<sp/>is<sp/>composite.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc-&gt;get_IsComposite());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>recursive<sp/>function<sp/>that<sp/>will<sp/>go<sp/>through<sp/>and<sp/>print<sp/>all<sp/>the<sp/>child<sp/>nodes<sp/>of<sp/>a<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseAllNodes(doc,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseAllNodes(SharedPtr&lt;CompositeNode&gt;<sp/>parentNode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>childNode<sp/>=<sp/>parentNode-&gt;get_FirstChild();<sp/>childNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>childNode<sp/>=<sp/>childNode-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>depth))<sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(childNode-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurse<sp/>into<sp/>the<sp/>node<sp/>if<sp/>it<sp/>is<sp/>a<sp/>composite<sp/>node.<sp/>Otherwise,<sp/>print<sp/>its<sp/>contents<sp/>if<sp/>it<sp/>is<sp/>an<sp/>inline<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childNode-&gt;get_IsComposite())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseAllNodes(System::DynamicCast&lt;CompositeNode&gt;(childNode),<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(System::ObjectExt::Is&lt;Inline&gt;(childNode))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>childNode-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to remove all child nodes of a specific type from a composite node. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Tables.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>curNode<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstChild();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>next<sp/>sibling<sp/>node<sp/>as<sp/>a<sp/>variable<sp/>in<sp/>case<sp/>we<sp/>want<sp/>to<sp/>move<sp/>to<sp/>it<sp/>after<sp/>deleting<sp/>this<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>nextNode<sp/>=<sp/>curNode-&gt;get_NextSibling();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>section<sp/>body<sp/>can<sp/>contain<sp/>Paragraph<sp/>and<sp/>Table<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>node<sp/>is<sp/>a<sp/>Table,<sp/>remove<sp/>it<sp/>from<sp/>the<sp/>parent.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curNode-&gt;get_NodeType()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curNode-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>curNode<sp/>=<sp/>nextNode;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
</programlisting></para>
<para>Shows how to use a node&apos;s NextSibling property to enumerate through its immediate children. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>node<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstChild();<sp/>node<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>node<sp/>=<sp/>node-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>type:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(node-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>contents<sp/>=<sp/>node-&gt;GetText().Trim();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(contents<sp/>==<sp/>String::Empty<sp/>?<sp/>u</highlight><highlight class="stringliteral">&quot;This<sp/>node<sp/>contains<sp/>no<sp/>text&quot;</highlight><highlight class="normal"><sp/>:<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Contents:<sp/>\&quot;{0}\&quot;&quot;</highlight><highlight class="normal">,<sp/>node-&gt;GetText().Trim()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="264" column="40"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1ab9e608488885c65a2a165dea6645d15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_composite_node" kindref="compound">Aspose::Words::CompositeNode</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::CompositeNode &gt; Aspose::Words::Node::get_ParentNode</definition>
        <argsstring>()</argsstring>
        <name>get_ParentNode</name>
        <qualifiedname>Aspose::Words::Node::get_ParentNode</qualifiedname>
        <briefdescription>
<para>Gets the immediate parent of this node. </para>
        </briefdescription>
        <detaileddescription>
<para>If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is null.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to access a node&apos;s parent node. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>para<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Append<sp/>a<sp/>child<sp/>Run<sp/>node<sp/>to<sp/>the<sp/>document&apos;s<sp/>first<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>paragraph<sp/>is<sp/>the<sp/>parent<sp/>node<sp/>of<sp/>the<sp/>run<sp/>node.<sp/>We<sp/>can<sp/>trace<sp/>this<sp/>lineage</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>way<sp/>to<sp/>the<sp/>document<sp/>node,<sp/>which<sp/>is<sp/>the<sp/>root<sp/>of<sp/>the<sp/>document&apos;s<sp/>node<sp/>tree.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(para,<sp/>run-&gt;get_ParentNode());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body(),<sp/>para-&gt;get_ParentNode());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection(),<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_ParentNode());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>doc-&gt;get_FirstSection()-&gt;get_ParentNode());</highlight></codeline>
</programlisting></para>
<para>Shows how to create a node and set its owning document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>MakeObject&lt;Paragraph&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>not<sp/>yet<sp/>appended<sp/>this<sp/>paragraph<sp/>as<sp/>a<sp/>child<sp/>to<sp/>any<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(para-&gt;get_ParentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>node<sp/>is<sp/>an<sp/>appropriate<sp/>child<sp/>node<sp/>type<sp/>of<sp/>another<sp/>composite<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>attach<sp/>it<sp/>as<sp/>a<sp/>child<sp/>only<sp/>if<sp/>both<sp/>nodes<sp/>have<sp/>the<sp/>same<sp/>owner<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>owner<sp/>document<sp/>is<sp/>the<sp/>document<sp/>we<sp/>passed<sp/>to<sp/>the<sp/>node&apos;s<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>not<sp/>attached<sp/>this<sp/>paragraph<sp/>to<sp/>the<sp/>document,<sp/>so<sp/>the<sp/>document<sp/>does<sp/>not<sp/>contain<sp/>its<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(para-&gt;get_Document(),<sp/>doc);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>document<sp/>owns<sp/>this<sp/>paragraph,<sp/>we<sp/>can<sp/>apply<sp/>one<sp/>of<sp/>its<sp/>styles<sp/>to<sp/>the<sp/>paragraph&apos;s<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>this<sp/>node<sp/>to<sp/>the<sp/>document,<sp/>and<sp/>then<sp/>verify<sp/>its<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendChild(para);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body(),<sp/>para-&gt;get_ParentNode());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="315" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a6013fe75e5859c54d12a87f9b97fa7f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Node::get_PreviousSibling</definition>
        <argsstring>()</argsstring>
        <name>get_PreviousSibling</name>
        <qualifiedname>Aspose::Words::Node::get_PreviousSibling</qualifiedname>
        <briefdescription>
<para>Gets the node immediately preceding this node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use of methods of <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Node</ref> and <ref refid="class_aspose_1_1_words_1_1_composite_node" kindref="compound">CompositeNode</ref> to remove a section before the last section in the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea56cc9953f74fd357fdedaa380d9e7068" kindref="member" tooltip="Specifies start of new section on the same page as the previous section.">BreakType::SectionBreakContinuous</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Both<sp/>sections<sp/>are<sp/>siblings<sp/>of<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lastSection<sp/>=<sp/>System::DynamicCast&lt;Section&gt;(doc-&gt;get_LastChild());</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>firstSection<sp/>=<sp/>System::DynamicCast&lt;Section&gt;(lastSection-&gt;get_PreviousSibling());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>a<sp/>section<sp/>based<sp/>on<sp/>its<sp/>sibling<sp/>relationship<sp/>with<sp/>another<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastSection-&gt;get_PreviousSibling()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;RemoveChild(firstSection);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>section<sp/>we<sp/>removed<sp/>was<sp/>the<sp/>first<sp/>one,<sp/>leaving<sp/>the<sp/>document<sp/>with<sp/>only<sp/>the<sp/>second.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2<sp/>text.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="377" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a0f8077bf80409ba331148095b95bc3e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_range" kindref="compound">Aspose::Words::Range</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Range &gt; Aspose::Words::Node::get_Range</definition>
        <argsstring>()</argsstring>
        <name>get_Range</name>
        <qualifiedname>Aspose::Words::Node::get_Range</qualifiedname>
        <briefdescription>
<para>Returns a <bold>Range</bold> object that represents the portion of a document that is contained in this node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to delete all the nodes from a range. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>text<sp/>to<sp/>the<sp/>first<sp/>section<sp/>in<sp/>the<sp/>document,<sp/>and<sp/>then<sp/>add<sp/>another<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea56cc9953f74fd357fdedaa380d9e7068" kindref="member" tooltip="Specifies start of new section on the same page as the previous section.">BreakType::SectionBreakContinuous</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1.<sp/>\fSection<sp/>2.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>first<sp/>section<sp/>entirely<sp/>by<sp/>removing<sp/>all<sp/>the<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>within<sp/>its<sp/>range,<sp/>including<sp/>the<sp/>section<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Sections()-&gt;idx_get(0)-&gt;get_Range()-&gt;Delete();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Sections()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="509" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a951706cfa681573e79a56204a2029e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_composite_node" kindref="compound">Aspose::Words::CompositeNode</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::CompositeNode &gt; Aspose::Words::Node::GetAncestor</definition>
        <argsstring>(Aspose::Words::NodeType ancestorType)</argsstring>
        <name>GetAncestor</name>
        <qualifiedname>Aspose::Words::Node::GetAncestor</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379" kindref="member">Aspose::Words::NodeType</ref></type>
          <declname>ancestorType</declname>
        </param>
        <briefdescription>
<para>Gets the first ancestor of the specified <ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379" kindref="member">NodeType</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ancestorType</parametername>
</parameternamelist>
<parameterdescription>
<para>The node type of the ancestor to retrieve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ancestor of the specified type or null if no ancestor of this type was found.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to find out if a tables are nested. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CalculateDepthOfNestedTables()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Nested<sp/>tables.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;NodeCollection&gt;<sp/>tables<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tables-&gt;get_Count();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>System::DynamicCast&lt;Table&gt;(tables-&gt;idx_get(i));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>out<sp/>if<sp/>any<sp/>cells<sp/>in<sp/>the<sp/>table<sp/>have<sp/>other<sp/>tables<sp/>as<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>GetChildTableCount(table);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Table<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>tables<sp/>directly<sp/>within<sp/>its<sp/>cells&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>out<sp/>if<sp/>the<sp/>table<sp/>is<sp/>nested<sp/>inside<sp/>another<sp/>table,<sp/>and,<sp/>if<sp/>so,<sp/>at<sp/>what<sp/>depth.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tableDepth<sp/>=<sp/>GetNestedDepthOfTable(table);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tableDepth<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Table<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>nested<sp/>inside<sp/>another<sp/>table<sp/>at<sp/>depth<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tableDepth<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Table<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>a<sp/>non<sp/>nested<sp/>table<sp/>(is<sp/>not<sp/>a<sp/>child<sp/>of<sp/>another<sp/>table)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetNestedDepthOfTable(SharedPtr&lt;Table&gt;<sp/>table)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>parent<sp/>=<sp/>table-&gt;GetAncestor(table-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(parent<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depth++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>parent-&gt;GetAncestorOf&lt;SharedPtr&lt;Table&gt;&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>depth;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetChildTableCount(SharedPtr&lt;Table&gt;<sp/>table)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>childTableCount<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>row<sp/>:<sp/>System::IterateOver(table-&gt;get_Rows()-&gt;LINQ_OfType&lt;SharedPtr&lt;Row&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a1a66ab62bfc858b7bcf9e01aa9cd1841" kindref="member" tooltip="A cell of a table row. A Cell node can have Paragraph and Table nodes.">Cell</ref><sp/>:<sp/>System::IterateOver(row-&gt;get_Cells()-&gt;LINQ_OfType&lt;SharedPtr&lt;Cell&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;TableCollection&gt;<sp/>childTables<sp/>=<sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a1a66ab62bfc858b7bcf9e01aa9cd1841" kindref="member" tooltip="A cell of a table row. A Cell node can have Paragraph and Table nodes.">Cell</ref>-&gt;get_Tables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childTables-&gt;get_Count()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>childTableCount++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>childTableCount;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1013" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1ae19991f4d5aa7ccb60ce6d7207495f1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Aspose::Words::Node::GetAncestorOf</definition>
        <argsstring>()</argsstring>
        <name>GetAncestorOf</name>
        <qualifiedname>Aspose::Words::Node::GetAncestorOf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="911" column="7" bodyfile="Aspose.Words.Cpp/Node.h" bodystart="911" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a8fa0ad395d10ff21e0ac404c0e965007" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>virtual System::String Aspose::Words::Node::GetText</definition>
        <argsstring>()</argsstring>
        <name>GetText</name>
        <qualifiedname>Aspose::Words::Node::GetText</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_bookmark_start_1a2f87e56fc07d85010cf41d4684c06b56">GetText</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_composite_node_1a08b4d2cc617495b60d85a550422e2d8f">GetText</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_paragraph_1aeb7a2abcae26ec0412831cb369b9676e">GetText</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_run_1a34f7344fe50ee62801dab323109fabe6">GetText</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_special_char_1a699e9579deaf607e2da76eeb001d2784">GetText</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_tables_1_1_row_1aa430ba5a5be8e6b7a1a8d4351f300ed9">GetText</reimplementedby>
        <briefdescription>
<para>Gets the text of this node and of all its children. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned string includes all control and special characters as described in <ref refid="class_aspose_1_1_words_1_1_control_char" kindref="compound">ControlChar</ref>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use control characters. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>paragraphs<sp/>with<sp/>text<sp/>with<sp/>DocumentBuilder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>the<sp/>document<sp/>to<sp/>text<sp/>form<sp/>reveals<sp/>that<sp/>control<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>represent<sp/>some<sp/>of<sp/>the<sp/>document&apos;s<sp/>structural<sp/>elements,<sp/>such<sp/>as<sp/>page<sp/>breaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Format(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!{0}&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>())<sp/>+<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!{0}&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>())<sp/>+<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1acb505d866b952dc7a4e90668fd39c5d3" kindref="member" tooltip="Page break character: &quot;\x000c&quot; or &quot;\f&quot;. Note it has the same value as SectionBreak.">ControlChar::PageBreak</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;GetText());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>converting<sp/>a<sp/>document<sp/>to<sp/>string<sp/>form,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>omit<sp/>some<sp/>of<sp/>the<sp/>control<sp/>characters<sp/>with<sp/>the<sp/>Trim<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Format(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!{0}&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_control_char_1a0ce20c19940377d0e6b651a71428f4a7" kindref="member" tooltip="Carriage return character: &quot;\x000d&quot; or &quot;\r&quot;. Same as ParagraphBreak.">ControlChar::Cr</ref>())<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting></para>
<para>Shows how to construct an Aspose.Words document by hand. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>blank<sp/>document<sp/>contains<sp/>one<sp/>section,<sp/>one<sp/>body<sp/>and<sp/>one<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>&quot;RemoveAllChildren&quot;<sp/>method<sp/>to<sp/>remove<sp/>all<sp/>those<sp/>nodes,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>end<sp/>up<sp/>with<sp/>a<sp/>document<sp/>node<sp/>with<sp/>no<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>document<sp/>now<sp/>has<sp/>no<sp/>composite<sp/>child<sp/>nodes<sp/>that<sp/>we<sp/>can<sp/>add<sp/>content<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>it,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>repopulate<sp/>its<sp/>node<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>First,<sp/>create<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>root<sp/>document<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>section<sp/>=<sp/>MakeObject&lt;Section&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(section);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>some<sp/>page<sp/>setup<sp/>properties<sp/>for<sp/>the<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">section-&gt;get_PageSetup()-&gt;set_SectionStart(<ref refid="namespace_aspose_1_1_words_1a0caffb600fa144ea6826390ec3dc9a47a30c38ed106d7d71b9a1ce0534ea1befd" kindref="member" tooltip="The section starts from a new page.">SectionStart::NewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">section-&gt;get_PageSetup()-&gt;set_PaperSize(<ref refid="namespace_aspose_1_1_words_1a1a2f6b44133c9bd897dabca36c39ba25a17a53d1a012580ef609b70ef6a25d1f1" kindref="member" tooltip="8.5 x 11 inches.">PaperSize::Letter</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>section<sp/>needs<sp/>a<sp/>body,<sp/>which<sp/>will<sp/>contain<sp/>and<sp/>display<sp/>all<sp/>its<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>page<sp/>between<sp/>the<sp/>section&apos;s<sp/>header<sp/>and<sp/>footer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>body<sp/>=<sp/>MakeObject&lt;Body&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">section-&gt;AppendChild(body);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>paragraph,<sp/>set<sp/>some<sp/>formatting<sp/>properties,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>MakeObject&lt;Paragraph&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">body-&gt;AppendChild(para);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finally,<sp/>add<sp/>some<sp/>content<sp/>to<sp/>do<sp/>the<sp/>document.<sp/>Create<sp/>a<sp/>run,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>its<sp/>appearance<sp/>and<sp/>contents,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Section.CreateManually.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="909" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a4f6979e06a5914aeb37a9cb8448658a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Node::NextPreOrder</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Node &gt; &amp;rootNode)</argsstring>
        <name>NextPreOrder</name>
        <qualifiedname>Aspose::Words::Node::NextPreOrder</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt; &amp;</type>
          <declname>rootNode</declname>
        </param>
        <briefdescription>
<para>Gets next node according to the pre-order tree traversal algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rootNode</parametername>
</parameternamelist>
<parameterdescription>
<para>The top node (limit) of traversal.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Next node in pre-order order. Null if reached the rootNode.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to traverse the document&apos;s node tree using the pre-order traversal algorithm, and delete any encountered shape with an image. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(9,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Count([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/>return<sp/>s-&gt;get_HasImage();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>curNode<sp/>=<sp/>doc;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>nextNode<sp/>=<sp/>curNode-&gt;NextPreOrder(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curNode-&gt;PreviousPreOrder(doc)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>nextNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(curNode,<sp/>nextNode-&gt;PreviousPreOrder(doc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curNode-&gt;get_NodeType()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref><sp/>&amp;&amp;<sp/>(System::DynamicCast&lt;Shape&gt;(curNode))-&gt;get_HasImage())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curNode-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>curNode<sp/>=<sp/>nextNode;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Count([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/>return<sp/>s-&gt;get_HasImage();<sp/>}));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1100" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1af40f9573daf950d978d211d3e75c6a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Node::PreviousPreOrder</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Node &gt; &amp;rootNode)</argsstring>
        <name>PreviousPreOrder</name>
        <qualifiedname>Aspose::Words::Node::PreviousPreOrder</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt; &amp;</type>
          <declname>rootNode</declname>
        </param>
        <briefdescription>
<para>Gets the previous node according to the pre-order tree traversal algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rootNode</parametername>
</parameternamelist>
<parameterdescription>
<para>The top node (limit) of traversal.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous node in pre-order order. Null if reached the rootNode.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to traverse the document&apos;s node tree using the pre-order traversal algorithm, and delete any encountered shape with an image. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(9,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Count([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/>return<sp/>s-&gt;get_HasImage();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>curNode<sp/>=<sp/>doc;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>nextNode<sp/>=<sp/>curNode-&gt;NextPreOrder(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curNode-&gt;PreviousPreOrder(doc)<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>nextNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(curNode,<sp/>nextNode-&gt;PreviousPreOrder(doc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curNode-&gt;get_NodeType()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref><sp/>&amp;&amp;<sp/>(System::DynamicCast&lt;Shape&gt;(curNode))-&gt;get_HasImage())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curNode-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>curNode<sp/>=<sp/>nextNode;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Count([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/>return<sp/>s-&gt;get_HasImage();<sp/>}));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1138" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a75a9cc0fda5ec9c8aaa1c4910af8f28c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Node::Remove</definition>
        <argsstring>()</argsstring>
        <name>Remove</name>
        <qualifiedname>Aspose::Words::Node::Remove</qualifiedname>
        <briefdescription>
<para>Removes itself from the parent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to delete all shapes with images from a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>shapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(9,<sp/>shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Count([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/>return<sp/>s-&gt;get_HasImage();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shape<sp/>:<sp/>System::IterateOver(shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasImage())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Count([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/>return<sp/>s-&gt;get_HasImage();<sp/>}));</highlight></codeline>
</programlisting></para>
<para>Shows how to remove all child nodes of a specific type from a composite node. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Tables.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>curNode<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstChild();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>next<sp/>sibling<sp/>node<sp/>as<sp/>a<sp/>variable<sp/>in<sp/>case<sp/>we<sp/>want<sp/>to<sp/>move<sp/>to<sp/>it<sp/>after<sp/>deleting<sp/>this<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>nextNode<sp/>=<sp/>curNode-&gt;get_NextSibling();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>section<sp/>body<sp/>can<sp/>contain<sp/>Paragraph<sp/>and<sp/>Table<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>node<sp/>is<sp/>a<sp/>Table,<sp/>remove<sp/>it<sp/>from<sp/>the<sp/>parent.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curNode-&gt;get_NodeType()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curNode-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>curNode<sp/>=<sp/>nextNode;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1062" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a0d412cc05de7836acb92332e55eea267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Node::set_CustomNodeId</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>set_CustomNodeId</name>
        <qualifiedname>Aspose::Words::Node::set_CustomNodeId</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_node_1a941120df17372b25f9a7127a9d9b3816" kindref="member">Aspose::Words::Node::get_CustomNodeId</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="570" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1af7aa71ab5f185ee2463406dab7727595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Node::ToString</definition>
        <argsstring>(Aspose::Words::SaveFormat saveFormat)</argsstring>
        <name>ToString</name>
        <qualifiedname>Aspose::Words::Node::ToString</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847" kindref="member">Aspose::Words::SaveFormat</ref></type>
          <declname>saveFormat</declname>
        </param>
        <briefdescription>
<para>Exports the content of the node into a string in the specified format. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The content of the node in the specified format.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows the difference between calling the GetText and ToString methods on a node. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;MERGEFIELD<sp/>Field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetText<sp/>will<sp/>retrieve<sp/>the<sp/>visible<sp/>text<sp/>as<sp/>well<sp/>as<sp/>field<sp/>codes<sp/>and<sp/>special<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;\u0013MERGEFIELD<sp/>Field\u0014«Field»\u0015\u000c&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>ToString<sp/>will<sp/>give<sp/>us<sp/>the<sp/>document&apos;s<sp/>appearance<sp/>if<sp/>saved<sp/>to<sp/>a<sp/>passed<sp/>save<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;«Field»\r\n&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;ToString(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a9dffbf69ffba8bc38bc4e01abf4b1675" kindref="member" tooltip="Saves the document in the plain text format.">SaveFormat::Text</ref>));</highlight></codeline>
</programlisting></para>
<para>Shows how to extract the list labels of all paragraphs that are list items. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateListLabels();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>paras<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Find<sp/>if<sp/>we<sp/>have<sp/>the<sp/>paragraph<sp/>list.<sp/>In<sp/>our<sp/>document,<sp/>our<sp/>list<sp/>uses<sp/>plain<sp/>Arabic<sp/>numbers,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>start<sp/>at<sp/>three<sp/>and<sp/>ends<sp/>at<sp/>six.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>paragraph<sp/>:<sp/>System::IterateOver(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paras-&gt;LINQ_OfType&lt;SharedPtr&lt;Paragraph&gt;&gt;()-&gt;LINQ_Where([](SharedPtr&lt;Paragraph&gt;<sp/>p)<sp/>{<sp/>return<sp/>p-&gt;get_ListFormat()-&gt;get_IsListItem();<sp/>})))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;List<sp/>item<sp/>paragraph<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paras-&gt;IndexOf(paragraph)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>text<sp/>we<sp/>get<sp/>when<sp/>getting<sp/>when<sp/>we<sp/>output<sp/>this<sp/>node<sp/>to<sp/>text<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>text<sp/>output<sp/>will<sp/>omit<sp/>list<sp/>labels.<sp/>Trim<sp/>any<sp/>paragraph<sp/>formatting<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>paragraphText<sp/>=<sp/>paragraph-&gt;ToString(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a9dffbf69ffba8bc38bc4e01abf4b1675" kindref="member" tooltip="Saves the document in the plain text format.">SaveFormat::Text</ref>).Trim();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tExported<sp/>Text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paragraphText<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;ListLabel&gt;<sp/>label<sp/>=<sp/>paragraph-&gt;get_ListLabel();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>the<sp/>position<sp/>of<sp/>the<sp/>paragraph<sp/>in<sp/>the<sp/>current<sp/>level<sp/>of<sp/>the<sp/>list.<sp/>If<sp/>we<sp/>have<sp/>a<sp/>list<sp/>with<sp/>multiple<sp/>levels,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>tell<sp/>us<sp/>what<sp/>position<sp/>it<sp/>is<sp/>on<sp/>that<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tNumerical<sp/>Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label-&gt;get_LabelValue()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Combine<sp/>them<sp/>together<sp/>to<sp/>include<sp/>the<sp/>list<sp/>label<sp/>with<sp/>the<sp/>text<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tList<sp/>label<sp/>combined<sp/>with<sp/>text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label-&gt;get_LabelString()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paragraphText<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Exports the content of a node to String in HTML format. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>node<sp/>=<sp/>doc-&gt;get_LastSection()-&gt;get_Body()-&gt;get_LastParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>call<sp/>the<sp/>ToString<sp/>method<sp/>using<sp/>the<sp/>html<sp/>SaveFormat<sp/>overload,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>converts<sp/>the<sp/>node&apos;s<sp/>contents<sp/>to<sp/>their<sp/>raw<sp/>html<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;&lt;p<sp/>style=\&quot;margin-top:0pt;<sp/>margin-bottom:8pt;<sp/>line-height:108%;<sp/>font-size:12pt\&quot;&gt;&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;&lt;span<sp/>style=\&quot;font-family:&apos;Times<sp/>New<sp/>Roman&apos;\&quot;&gt;Hello<sp/>World!&lt;/span&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;/p&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;ToString(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a3135f4019bee015e2d1ae7f77f9f3f64" kindref="member" tooltip="Saves the document in the HTML format.">SaveFormat::Html</ref>));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>modify<sp/>the<sp/>result<sp/>of<sp/>this<sp/>conversion<sp/>using<sp/>a<sp/>SaveOptions<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>saveOptions<sp/>=<sp/>MakeObject&lt;HtmlSaveOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">saveOptions-&gt;set_ExportRelativeFontSize(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;&lt;p<sp/>style=\&quot;margin-top:0pt;<sp/>margin-bottom:8pt;<sp/>line-height:108%\&quot;&gt;&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;&lt;span<sp/>style=\&quot;font-family:&apos;Times<sp/>New<sp/>Roman&apos;\&quot;&gt;Hello<sp/>World!&lt;/span&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;/p&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;ToString(saveOptions));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1210" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1ad18f64c5586b84a071957824b24426a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Node::ToString</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Saving::SaveOptions &gt; &amp;saveOptions)</argsstring>
        <name>ToString</name>
        <qualifiedname>Aspose::Words::Node::ToString</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_saving_1_1_save_options" kindref="compound">Aspose::Words::Saving::SaveOptions</ref> &gt; &amp;</type>
          <declname>saveOptions</declname>
        </param>
        <briefdescription>
<para>Exports the content of the node into a string using the specified save options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>saveOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the options that control how the node is saved.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The content of the node in the specified format.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Exports the content of a node to String in HTML format. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>node<sp/>=<sp/>doc-&gt;get_LastSection()-&gt;get_Body()-&gt;get_LastParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>call<sp/>the<sp/>ToString<sp/>method<sp/>using<sp/>the<sp/>html<sp/>SaveFormat<sp/>overload,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>converts<sp/>the<sp/>node&apos;s<sp/>contents<sp/>to<sp/>their<sp/>raw<sp/>html<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;&lt;p<sp/>style=\&quot;margin-top:0pt;<sp/>margin-bottom:8pt;<sp/>line-height:108%;<sp/>font-size:12pt\&quot;&gt;&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;&lt;span<sp/>style=\&quot;font-family:&apos;Times<sp/>New<sp/>Roman&apos;\&quot;&gt;Hello<sp/>World!&lt;/span&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;/p&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;ToString(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a3135f4019bee015e2d1ae7f77f9f3f64" kindref="member" tooltip="Saves the document in the HTML format.">SaveFormat::Html</ref>));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>modify<sp/>the<sp/>result<sp/>of<sp/>this<sp/>conversion<sp/>using<sp/>a<sp/>SaveOptions<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>saveOptions<sp/>=<sp/>MakeObject&lt;HtmlSaveOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">saveOptions-&gt;set_ExportRelativeFontSize(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;&lt;p<sp/>style=\&quot;margin-top:0pt;<sp/>margin-bottom:8pt;<sp/>line-height:108%\&quot;&gt;&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;&lt;span<sp/>style=\&quot;font-family:&apos;Times<sp/>New<sp/>Roman&apos;\&quot;&gt;Hello<sp/>World!&lt;/span&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;/p&gt;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;ToString(saveOptions));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1240" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>static System::String Aspose::Words::Node::NodeTypeToString</definition>
        <argsstring>(Aspose::Words::NodeType nodeType)</argsstring>
        <name>NodeTypeToString</name>
        <qualifiedname>Aspose::Words::Node::NodeTypeToString</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379" kindref="member">Aspose::Words::NodeType</ref></type>
          <declname>nodeType</declname>
        </param>
        <briefdescription>
<para>A utility method that converts a node type enum value into a user friendly string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to traverse a composite node&apos;s tree of child nodes. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecurseChildren()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>node<sp/>that<sp/>can<sp/>contain<sp/>child<sp/>nodes,<sp/>such<sp/>as<sp/>the<sp/>document<sp/>itself,<sp/>is<sp/>composite.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc-&gt;get_IsComposite());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>recursive<sp/>function<sp/>that<sp/>will<sp/>go<sp/>through<sp/>and<sp/>print<sp/>all<sp/>the<sp/>child<sp/>nodes<sp/>of<sp/>a<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseAllNodes(doc,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseAllNodes(SharedPtr&lt;CompositeNode&gt;<sp/>parentNode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>childNode<sp/>=<sp/>parentNode-&gt;get_FirstChild();<sp/>childNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>childNode<sp/>=<sp/>childNode-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>depth))<sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(childNode-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurse<sp/>into<sp/>the<sp/>node<sp/>if<sp/>it<sp/>is<sp/>a<sp/>composite<sp/>node.<sp/>Otherwise,<sp/>print<sp/>its<sp/>contents<sp/>if<sp/>it<sp/>is<sp/>an<sp/>inline<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childNode-&gt;get_IsComposite())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseAllNodes(System::DynamicCast&lt;CompositeNode&gt;(childNode),<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(System::ObjectExt::Is&lt;Inline&gt;(childNode))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>childNode-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to use a node&apos;s NextSibling property to enumerate through its immediate children. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>node<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstChild();<sp/>node<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>node<sp/>=<sp/>node-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Node<sp/>type:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(node-&gt;get_NodeType())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>contents<sp/>=<sp/>node-&gt;GetText().Trim();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(contents<sp/>==<sp/>String::Empty<sp/>?<sp/>u</highlight><highlight class="stringliteral">&quot;This<sp/>node<sp/>contains<sp/>no<sp/>text&quot;</highlight><highlight class="normal"><sp/>:<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Contents:<sp/>\&quot;{0}\&quot;&quot;</highlight><highlight class="normal">,<sp/>node-&gt;GetText().Trim()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Node.h" line="1301" column="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all nodes of a Word document. </para>
    </briefdescription>
    <detaileddescription>
<para>A document is represented as a tree of nodes, similar to DOM or XmlDocument.</para>
<para>For more info see the Composite design pattern.</para>
<para>The <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Node</ref> class:</para>
<para><itemizedlist>
<listitem><para>Defines the child node interface.</para>
</listitem><listitem><para>Defines the interface for visiting nodes.</para>
</listitem><listitem><para>Provides default cloning capability.</para>
</listitem><listitem><para>Implements parent node and owner document mechanisms.</para>
</listitem><listitem><para>Implements access to sibling nodes.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to clone a composite node. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>para<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>cloning<sp/>a<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>a<sp/>node,<sp/>and<sp/>create<sp/>a<sp/>clone<sp/>of<sp/>each<sp/>of<sp/>its<sp/>child<sp/>nodes<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>cloneWithChildren<sp/>=<sp/>para-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE((System::DynamicCast&lt;CompositeNode&gt;(cloneWithChildren))-&gt;get_HasChildNodes());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">,<sp/>cloneWithChildren-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>a<sp/>node<sp/>just<sp/>by<sp/>itself<sp/>without<sp/>any<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>cloneWithoutChildren<sp/>=<sp/>para-&gt;Clone(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE((System::DynamicCast&lt;CompositeNode&gt;(cloneWithoutChildren))-&gt;get_HasChildNodes());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(String::Empty,<sp/>cloneWithoutChildren-&gt;GetText().Trim());</highlight></codeline>
</programlisting></para>
<para>Shows how to traverse through a composite node&apos;s collection of child nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>two<sp/>runs<sp/>and<sp/>one<sp/>shape<sp/>as<sp/>child<sp/>nodes<sp/>to<sp/>the<sp/>first<sp/>paragraph<sp/>of<sp/>this<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>paragraph<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">paragraph-&gt;AppendChild(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/>ShapeType::Rectangle);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Width(200);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Height(200);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>&apos;CustomNodeId&apos;<sp/>is<sp/>not<sp/>saved<sp/>to<sp/>an<sp/>output<sp/>file<sp/>and<sp/>exists<sp/>only<sp/>during<sp/>the<sp/>node<sp/>lifetime.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_CustomNodeId(100);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(WrapType::Inline);</highlight></codeline>
<codeline><highlight class="normal">paragraph-&gt;AppendChild(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">paragraph-&gt;AppendChild(MakeObject&lt;Run&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>the<sp/>paragraph&apos;s<sp/>collection<sp/>of<sp/>immediate<sp/>children,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>print<sp/>any<sp/>runs<sp/>or<sp/>shapes<sp/>that<sp/>we<sp/>find<sp/>within.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>children<sp/>=<sp/>paragraph-&gt;get_ChildNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>paragraph-&gt;get_ChildNodes()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>child<sp/>:<sp/>System::IterateOver(children))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(child-&gt;get_NodeType())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Run<sp/>contents:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>child-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childShape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(child);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Shape:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;\t{0},<sp/>{1}x{2}&quot;</highlight><highlight class="normal">,<sp/>childShape-&gt;get_ShapeType(),<sp/>childShape-&gt;get_Width(),<sp/>childShape-&gt;get_Height())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(100,<sp/>shape-&gt;get_CustomNodeId());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to remove all child nodes of a specific type from a composite node. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Tables.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Node&gt;<sp/>curNode<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstChild();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(curNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>next<sp/>sibling<sp/>node<sp/>as<sp/>a<sp/>variable<sp/>in<sp/>case<sp/>we<sp/>want<sp/>to<sp/>move<sp/>to<sp/>it<sp/>after<sp/>deleting<sp/>this<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Node&gt;<sp/>nextNode<sp/>=<sp/>curNode-&gt;get_NextSibling();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>section<sp/>body<sp/>can<sp/>contain<sp/>Paragraph<sp/>and<sp/>Table<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>node<sp/>is<sp/>a<sp/>Table,<sp/>remove<sp/>it<sp/>from<sp/>the<sp/>parent.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curNode-&gt;get_NodeType()<sp/>==<sp/><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curNode-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>curNode<sp/>=<sp/>nextNode;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="34">
        <label>Aspose::Words::AbsolutePositionTab</label>
        <link refid="class_aspose_1_1_words_1_1_absolute_position_tab"/>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>Aspose::Words::Body</label>
        <link refid="class_aspose_1_1_words_1_1_body"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Aspose::Words::BookmarkEnd</label>
        <link refid="class_aspose_1_1_words_1_1_bookmark_end"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Aspose::Words::BookmarkStart</label>
        <link refid="class_aspose_1_1_words_1_1_bookmark_start"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>Aspose::Words::BuildingBlocks::BuildingBlock</label>
        <link refid="class_aspose_1_1_words_1_1_building_blocks_1_1_building_block"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>Aspose::Words::BuildingBlocks::GlossaryDocument</label>
        <link refid="class_aspose_1_1_words_1_1_building_blocks_1_1_glossary_document"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>Aspose::Words::Comment</label>
        <link refid="class_aspose_1_1_words_1_1_comment"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Aspose::Words::CommentRangeEnd</label>
        <link refid="class_aspose_1_1_words_1_1_comment_range_end"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>Aspose::Words::CommentRangeStart</label>
        <link refid="class_aspose_1_1_words_1_1_comment_range_start"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Aspose::Words::CompositeNode</label>
        <link refid="class_aspose_1_1_words_1_1_composite_node"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>Aspose::Words::Document</label>
        <link refid="class_aspose_1_1_words_1_1_document"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>Aspose::Words::DocumentBase</label>
        <link refid="class_aspose_1_1_words_1_1_document_base"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>Aspose::Words::Drawing::GroupShape</label>
        <link refid="class_aspose_1_1_words_1_1_drawing_1_1_group_shape"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>Aspose::Words::Drawing::Shape</label>
        <link refid="class_aspose_1_1_words_1_1_drawing_1_1_shape"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>Aspose::Words::Drawing::ShapeBase</label>
        <link refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>Aspose::Words::EditableRangeEnd</label>
        <link refid="class_aspose_1_1_words_1_1_editable_range_end"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>Aspose::Words::EditableRangeStart</label>
        <link refid="class_aspose_1_1_words_1_1_editable_range_start"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="35">
        <label>Aspose::Words::Fields::FieldChar</label>
        <link refid="class_aspose_1_1_words_1_1_fields_1_1_field_char"/>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>Aspose::Words::Fields::FieldEnd</label>
        <link refid="class_aspose_1_1_words_1_1_fields_1_1_field_end"/>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>Aspose::Words::Fields::FieldSeparator</label>
        <link refid="class_aspose_1_1_words_1_1_fields_1_1_field_separator"/>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>Aspose::Words::Fields::FieldStart</label>
        <link refid="class_aspose_1_1_words_1_1_fields_1_1_field_start"/>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>Aspose::Words::Fields::FormField</label>
        <link refid="class_aspose_1_1_words_1_1_fields_1_1_form_field"/>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>Aspose::Words::HeaderFooter</label>
        <link refid="class_aspose_1_1_words_1_1_header_footer"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>Aspose::Words::Inline</label>
        <link refid="class_aspose_1_1_words_1_1_inline"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>Aspose::Words::InlineStory</label>
        <link refid="class_aspose_1_1_words_1_1_inline_story"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>Aspose::Words::Markup::SmartTag</label>
        <link refid="class_aspose_1_1_words_1_1_markup_1_1_smart_tag"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>Aspose::Words::Markup::StructuredDocumentTag</label>
        <link refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>Aspose::Words::Markup::StructuredDocumentTagRangeEnd</label>
        <link refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_end"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>Aspose::Words::Markup::StructuredDocumentTagRangeStart</label>
        <link refid="class_aspose_1_1_words_1_1_markup_1_1_structured_document_tag_range_start"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>Aspose::Words::Math::OfficeMath</label>
        <link refid="class_aspose_1_1_words_1_1_math_1_1_office_math"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Aspose::Words::Node</label>
        <link refid="class_aspose_1_1_words_1_1_node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>Aspose::Words::Notes::Footnote</label>
        <link refid="class_aspose_1_1_words_1_1_notes_1_1_footnote"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>Aspose::Words::Paragraph</label>
        <link refid="class_aspose_1_1_words_1_1_paragraph"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="32">
        <label>Aspose::Words::Run</label>
        <link refid="class_aspose_1_1_words_1_1_run"/>
        <childnode refid="31" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>Aspose::Words::Section</label>
        <link refid="class_aspose_1_1_words_1_1_section"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>Aspose::Words::SpecialChar</label>
        <link refid="class_aspose_1_1_words_1_1_special_char"/>
        <childnode refid="31" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>Aspose::Words::Story</label>
        <link refid="class_aspose_1_1_words_1_1_story"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>Aspose::Words::SubDocument</label>
        <link refid="class_aspose_1_1_words_1_1_sub_document"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>Aspose::Words::Tables::Cell</label>
        <link refid="class_aspose_1_1_words_1_1_tables_1_1_cell"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>Aspose::Words::Tables::Row</label>
        <link refid="class_aspose_1_1_words_1_1_tables_1_1_row"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>Aspose::Words::Tables::Table</label>
        <link refid="class_aspose_1_1_words_1_1_tables_1_1_table"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Aspose::Words::Node</label>
        <link refid="class_aspose_1_1_words_1_1_node"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Node.h" line="164" column="1" bodyfile="Aspose.Words.Cpp/Node.h" bodystart="165" bodyend="1325"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_node_1a556472e35a86820cf189f10594933f3e" prot="public" virt="pure-virtual"><scope>Aspose::Words::Node</scope><name>Accept</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ad781545a23fdeadd3080c2986f33e804" prot="private" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a81dedd9b241b09760112b5e5068f1daa" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a53bf7103c6ec9da7872f99f68ef13ae4" prot="private" virt="virtual"><scope>Aspose::Words::Node</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a9358fb4208d077e8411fdf0d4e8553e5" prot="private" virt="pure-virtual"><scope>Aspose::Words::Node</scope><name>CppMemberwiseClone</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a941120df17372b25f9a7127a9d9b3816" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>get_CustomNodeId</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a2a69f84e3ccd323199299c999ab32d46" prot="public" virt="virtual"><scope>Aspose::Words::Node</scope><name>get_Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a670ce0649c755bec895c34d7d7b4e46b" prot="public" virt="virtual"><scope>Aspose::Words::Node</scope><name>get_IsComposite</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a938ff32d060619d89ecefdf57984abf8" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>get_NextSibling</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a7f80e8d96b7a072fca14157b25ae025e" prot="public" virt="pure-virtual"><scope>Aspose::Words::Node</scope><name>get_NodeType</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ab9e608488885c65a2a165dea6645d15e" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>get_ParentNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a6013fe75e5859c54d12a87f9b97fa7f3" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>get_PreviousSibling</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0f8077bf80409ba331148095b95bc3e5" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>get_Range</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a951706cfa681573e79a56204a2029e9e" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>GetAncestor</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ae19991f4d5aa7ccb60ce6d7207495f1c" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>GetAncestorOf</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a52d09768a9bfc1998d36eefe93a37b6b" prot="private" virt="virtual"><scope>Aspose::Words::Node</scope><name>GetNodeFromPos</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a8fa0ad395d10ff21e0ac404c0e965007" prot="public" virt="virtual"><scope>Aspose::Words::Node</scope><name>GetText</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af5248311a814cd9ef62fea574fef2f05" prot="private" virt="virtual"><scope>Aspose::Words::Node</scope><name>GetTextLength</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ac78f2ffd99e6e2b5227d6165502a824b" prot="private" virt="virtual"><scope>Aspose::Words::Node</scope><name>GetTextToBuilder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0cd4a501b37482e2e0f3177d6ae4ce40" prot="private" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ad9a03cce6f534373250842a5b43aebe4" prot="private" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ae103c2f753a747f92ccffe0d6eed5e1a" prot="private" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a6b378c8d895499c525301d2dfa3e4536" prot="private" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>mField3</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a4f6979e06a5914aeb37a9cb8448658a6" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>NextPreOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a23ad060943c0846cdcafa99b0e6c133a" prot="private" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>Node</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>NodeTypeToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af40f9573daf950d978d211d3e75c6a95" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>PreviousPreOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a75a9cc0fda5ec9c8aaa1c4910af8f28c" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>Remove</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a92865b8d3f6e71e21bb267423b1a2d2b" prot="private" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0d412cc05de7836acb92332e55eea267" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>set_CustomNodeId</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1aeb665cb18e2b40f5623050f08935db50" prot="private" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a90ce7957112a937b978d81648fc58067" prot="private" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af7aa71ab5f185ee2463406dab7727595" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>ToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ad18f64c5586b84a071957824b24426a2" prot="public" virt="non-virtual"><scope>Aspose::Words::Node</scope><name>ToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ac84a159aca3fdfdcbbeab5ac175bf41e" prot="private" virt="virtual"><scope>Aspose::Words::Node</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
