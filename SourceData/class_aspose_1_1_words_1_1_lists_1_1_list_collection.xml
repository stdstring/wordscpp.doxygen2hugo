<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_lists_1_1_list_collection" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::Lists::ListCollection</compoundname>
    <basecompoundref refid="class/system.collections.generic.i_enumerable/" prot="public" virt="non-virtual">System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Lists::List &gt; &gt;</basecompoundref>
    <includes refid="_list_collection_8h" local="no">Aspose.Words.Cpp/Lists/ListCollection.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a72129b1739a46a6b1a58db7abf2fff72" prot="private" static="no">
        <type><ref refid="class/system.collections.generic.i_enumerable/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::IEnumerable</ref>&lt; <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">Aspose::Words::Lists::List</ref> &gt; &gt;</type>
        <definition>typedef System::Collections::Generic::IEnumerable&lt;System::SharedPtr&lt;Aspose::Words::Lists::List&gt; &gt; Aspose::Words::Lists::ListCollection::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="216" column="55" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a6f412b57553ab05890149a62c20f591c" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection" kindref="compound">ListCollection</ref></type>
        <definition>typedef ListCollection Aspose::Words::Lists::ListCollection::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="215" column="28" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a9625d10310d24c4e290caee55552bc38" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class/system.collections.generic.i_enumerable/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">BaseType</ref> &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType&gt; Aspose::Words::Lists::ListCollection::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="218" column="37" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a14691c595f5aeb0294c842e6f57179b0" prot="public" static="no">
        <type>typename <ref refid="class/system.collections.generic.list/_1a0f284b9cbb583432336a9ce4f0b9c84a" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">iterator_holder_type::const_iterator</ref></type>
        <definition>using Aspose::Words::Lists::ListCollection::const_iterator =  typename iterator_holder_type::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="227" column="5" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ac70ee23ddb418e914e0fb48351d4791f" prot="public" static="no">
        <type>typename <ref refid="class/system.collections.generic.list/_1ab0ac6ed1e49acd56e069fe8614c87f3d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">iterator_holder_type::iterator</ref></type>
        <definition>using Aspose::Words::Lists::ListCollection::iterator =  typename iterator_holder_type::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="225" column="5" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a4ad276f920cacd2cab04d3141903ba1f" prot="public" static="no">
        <type><ref refid="class/system.collections.generic.list/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::List</ref>&lt; <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">Aspose::Words::Lists::List</ref> &gt; &gt;</type>
        <definition>using Aspose::Words::Lists::ListCollection::iterator_holder_type =  System::Collections::Generic::List&lt;System::SharedPtr&lt;Aspose::Words::Lists::List&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>iterator_holder_type</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::iterator_holder_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="223" column="5" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a66a8748763960c1236897b53d9b2fd07" prot="public" static="no">
        <type>typename <ref refid="class/system.collections.generic.i_enumerable/_1a728213db2c392697ade8169f6a54cb8a" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">iterator_holder_type::virtualized_iterator</ref></type>
        <definition>using Aspose::Words::Lists::ListCollection::virtualized_iterator =  typename iterator_holder_type::virtualized_iterator</definition>
        <argsstring></argsstring>
        <name>virtualized_iterator</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::virtualized_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="231" column="5" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a6747c608f8b83b3766d97ade7d46cdbd" prot="public" static="no">
        <type>typename <ref refid="class/system.collections.generic.i_enumerable/_1a3a2f6052e0f1f1182c3694c377f3947a" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">iterator_holder_type::virtualized_iterator_element</ref></type>
        <definition>using Aspose::Words::Lists::ListCollection::virtualized_iterator_element =  typename iterator_holder_type::virtualized_iterator_element</definition>
        <argsstring></argsstring>
        <name>virtualized_iterator_element</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::virtualized_iterator_element</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="229" column="5" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1afa525f5ed60394b53594c34d157422ea" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::Lists::ListCollection::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="701" column="21" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a8ec4bd66e35edc438cb389456a6405cc" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListCollection::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="702" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a1b5bc825d1c41b644e778cd8518dcc5d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListCollection::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="703" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="703" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a2c903fcb06235b117ea41becae48b4cf" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListCollection::mField3</definition>
        <argsstring></argsstring>
        <name>mField3</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::mField3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="704" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a9977f57221ffa726165e027800a3ea24" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListCollection::mField4</definition>
        <argsstring></argsstring>
        <name>mField4</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::mField4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="705" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ac46c9b5080c5c0fdcd0d3c2b89058b66" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Lists::ListCollection::mField5</definition>
        <argsstring></argsstring>
        <name>mField5</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::mField5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="706" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a64822aede115fc2dd96c26d9b2dd9c82" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Lists::ListCollection::mField6</definition>
        <argsstring></argsstring>
        <name>mField6</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::mField6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="707" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ab942f4de1db895639d393fadb54a50fb" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListCollection::mField7</definition>
        <argsstring></argsstring>
        <name>mField7</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::mField7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="708" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="708" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ae6c03f2d4899f05fb84d6de856e57798" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::Lists::ListCollection::~ListCollection</definition>
        <argsstring>()</argsstring>
        <name>~ListCollection</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::~ListCollection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="697" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a3d0f09c0ddb293b6530ff51c886018b2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Lists::ListCollection::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="219" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a2e200b6fd154a19f6a5dfeda6c335d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">Aspose::Words::Lists::List</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Lists::List &gt; Aspose::Words::Lists::ListCollection::Add</definition>
        <argsstring>(Aspose::Words::Lists::ListTemplate listTemplate)</argsstring>
        <name>Add</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::Add</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8" kindref="member">Aspose::Words::Lists::ListTemplate</ref></type>
          <declname>listTemplate</declname>
        </param>
        <briefdescription>
<para>Creates a new list based on a predefined template and adds it to the collection of lists in the document. </para>
        </briefdescription>
        <detaileddescription>
<para>Aspose.Words list templates correspond to the 21 list templates available in the Bullets and Numbering dialog box in Microsoft Word 2003.</para>
<para>All lists created using this method have 9 list levels.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listTemplate</parametername>
</parameternamelist>
<parameterdescription>
<para>The template of the list.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created list.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with list levels. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(builder-&gt;get_ListFormat()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>list<sp/>allows<sp/>us<sp/>to<sp/>organize<sp/>and<sp/>decorate<sp/>sets<sp/>of<sp/>paragraphs<sp/>with<sp/>prefix<sp/>symbols<sp/>and<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>nested<sp/>lists<sp/>by<sp/>increasing<sp/>the<sp/>indent<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>begin<sp/>and<sp/>end<sp/>a<sp/>list<sp/>by<sp/>using<sp/>a<sp/>document<sp/>builder&apos;s<sp/>&quot;ListFormat&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>that<sp/>we<sp/>add<sp/>between<sp/>a<sp/>list&apos;s<sp/>start<sp/>and<sp/>the<sp/>end<sp/>will<sp/>become<sp/>an<sp/>item<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>types<sp/>of<sp/>lists<sp/>that<sp/>we<sp/>can<sp/>create<sp/>using<sp/>a<sp/>document<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>A<sp/>numbered<sp/>list:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Numbered<sp/>lists<sp/>create<sp/>a<sp/>logical<sp/>order<sp/>for<sp/>their<sp/>paragraphs<sp/>by<sp/>numbering<sp/>each<sp/>item.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(doc-&gt;get_Lists()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8ada57879220b36b005040009bf65f236c" kindref="member" tooltip="Default numbered list with 9 levels. Arabic numbering (1., 2., 3., ...) for the first level,...">ListTemplate::NumberDefault</ref>));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_ListFormat()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>setting<sp/>the<sp/>&quot;ListLevelNumber&quot;<sp/>property,<sp/>we<sp/>can<sp/>increase<sp/>the<sp/>list<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>begin<sp/>a<sp/>self-contained<sp/>sub-list<sp/>at<sp/>the<sp/>current<sp/>list<sp/>item.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Microsoft<sp/>Word<sp/>list<sp/>template<sp/>called<sp/>&quot;NumberDefault&quot;<sp/>uses<sp/>numbers<sp/>to<sp/>create<sp/>list<sp/>levels<sp/>for<sp/>the<sp/>first<sp/>list<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deeper<sp/>list<sp/>levels<sp/>use<sp/>letters<sp/>and<sp/>lowercase<sp/>Roman<sp/>numerals.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>9;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;set_ListLevelNumber(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Level<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>i);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>A<sp/>bulleted<sp/>list:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>list<sp/>will<sp/>apply<sp/>an<sp/>indent<sp/>and<sp/>a<sp/>bullet<sp/>symbol<sp/>(&quot;•&quot;)<sp/>before<sp/>each<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deeper<sp/>levels<sp/>of<sp/>this<sp/>list<sp/>will<sp/>use<sp/>different<sp/>symbols,<sp/>such<sp/>as<sp/>&quot;■&quot;<sp/>and<sp/>&quot;○&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(doc-&gt;get_Lists()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8a37308d182b67d940f81ad431fba3f302" kindref="member" tooltip="Default bulleted list with 9 levels. Bullet of the first level is a disc, bullet of the second level ...">ListTemplate::BulletDefault</ref>));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>9;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;set_ListLevelNumber(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Level<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>i);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>disable<sp/>list<sp/>formatting<sp/>to<sp/>not<sp/>format<sp/>any<sp/>subsequent<sp/>paragraphs<sp/>as<sp/>lists<sp/>by<sp/>un-setting<sp/>the<sp/>&quot;List&quot;<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(builder-&gt;get_ListFormat()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.SpecifyListLevel.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to restart numbering in a list by copying a list. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>list<sp/>allows<sp/>us<sp/>to<sp/>organize<sp/>and<sp/>decorate<sp/>sets<sp/>of<sp/>paragraphs<sp/>with<sp/>prefix<sp/>symbols<sp/>and<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>nested<sp/>lists<sp/>by<sp/>increasing<sp/>the<sp/>indent<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>begin<sp/>and<sp/>end<sp/>a<sp/>list<sp/>by<sp/>using<sp/>a<sp/>document<sp/>builder&apos;s<sp/>&quot;ListFormat&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>that<sp/>we<sp/>add<sp/>between<sp/>a<sp/>list&apos;s<sp/>start<sp/>and<sp/>the<sp/>end<sp/>will<sp/>become<sp/>an<sp/>item<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>list<sp/>from<sp/>a<sp/>Microsoft<sp/>Word<sp/>template,<sp/>and<sp/>customize<sp/>its<sp/>first<sp/>list<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list1<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8ae70de0dbccc7e67fa5a06195e265b13b" kindref="member" tooltip="The number of the first level is &quot;1)&quot;. The remaining levels are same as in NumberDefault....">ListTemplate::NumberArabicParenthesis</ref>);</highlight></codeline>
<codeline><highlight class="normal">list1-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal">list1-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1_1_lists_1a4cd5df47cac2445a5ab0b23a415229e2a92b09c7c48c520c3c55e497875da437c" kindref="member" tooltip="This list label is aligned to the right of the number position.">ListLevelAlignment::Right</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>our<sp/>list<sp/>to<sp/>some<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;List<sp/>1<sp/>starts<sp/>below:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>add<sp/>a<sp/>copy<sp/>of<sp/>an<sp/>existing<sp/>list<sp/>to<sp/>the<sp/>document&apos;s<sp/>list<sp/>collection</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>create<sp/>a<sp/>similar<sp/>list<sp/>without<sp/>making<sp/>changes<sp/>to<sp/>the<sp/>original.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list2<sp/>=<sp/>doc-&gt;get_Lists()-&gt;AddCopy(list1);</highlight></codeline>
<codeline><highlight class="normal">list2-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">list2-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;set_StartAt(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>second<sp/>list<sp/>to<sp/>new<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;List<sp/>2<sp/>starts<sp/>below:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list2);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.RestartNumberingUsingListCopy.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to create a list by applying a new list format to a collection of paragraphs. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>paras<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>paras-&gt;LINQ_Count([](SharedPtr&lt;Node&gt;<sp/>n)<sp/>{<sp/>return<sp/>System::DynamicCast&lt;Paragraph&gt;(n)-&gt;get_ListFormat()-&gt;get_IsListItem();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8a788fac7e5bf270f8d32929be779c9a28" kindref="member" tooltip="The number of the first level is &quot;A.&quot;. The remaining levels are same as in NumberDefault....">ListTemplate::NumberUppercaseLetterDot</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>paragraph<sp/>:<sp/>System::IterateOver(paras-&gt;LINQ_OfType&lt;SharedPtr&lt;Paragraph&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>paragraph-&gt;get_ListFormat()-&gt;set_List(list);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>paragraph-&gt;get_ListFormat()-&gt;set_ListLevelNumber(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>paras-&gt;LINQ_Count([](SharedPtr&lt;Node&gt;<sp/>n)<sp/>{<sp/>return<sp/>System::DynamicCast&lt;Paragraph&gt;(n)-&gt;get_ListFormat()-&gt;get_IsListItem();<sp/>}));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="440" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a69ed80f72eeaba3f2abd640a52ee97e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">Aspose::Words::Lists::List</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Lists::List &gt; Aspose::Words::Lists::ListCollection::Add</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Style &gt; &amp;listStyle)</argsstring>
        <name>Add</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::Add</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_style" kindref="compound">Aspose::Words::Style</ref> &gt; &amp;</type>
          <declname>listStyle</declname>
        </param>
        <briefdescription>
<para>Creates a new list that references a list style and adds it to the collection of lists in the document. </para>
        </briefdescription>
        <detaileddescription>
<para>The newly created list references the list style. If you change the properties of the list style, it is reflected in the properties of the list. Vice versa, if you change the properties of the list, it is reflected in the properties of the list style.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listStyle</parametername>
</parameternamelist>
<parameterdescription>
<para>The list style.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created list.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a list style and use it in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>list<sp/>allows<sp/>us<sp/>to<sp/>organize<sp/>and<sp/>decorate<sp/>sets<sp/>of<sp/>paragraphs<sp/>with<sp/>prefix<sp/>symbols<sp/>and<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>nested<sp/>lists<sp/>by<sp/>increasing<sp/>the<sp/>indent<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>begin<sp/>and<sp/>end<sp/>a<sp/>list<sp/>by<sp/>using<sp/>a<sp/>document<sp/>builder&apos;s<sp/>&quot;ListFormat&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>that<sp/>we<sp/>add<sp/>between<sp/>a<sp/>list&apos;s<sp/>start<sp/>and<sp/>the<sp/>end<sp/>will<sp/>become<sp/>an<sp/>item<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>contain<sp/>an<sp/>entire<sp/>List<sp/>object<sp/>within<sp/>a<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>listStyle<sp/>=<sp/>doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba4ee29ca12c7d126654bd0e5275de6135" kindref="member" tooltip="The style is a list style.">StyleType::List</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyListStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list1<sp/>=<sp/>listStyle-&gt;get_List();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(list1-&gt;get_IsListStyleDefinition());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(list1-&gt;get_IsListStyleReference());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(list1-&gt;get_IsMultiLevel());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(listStyle,<sp/>list1-&gt;get_Style());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Change<sp/>the<sp/>appearance<sp/>of<sp/>all<sp/>list<sp/>levels<sp/>in<sp/>our<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>level<sp/>:<sp/>list1-&gt;get_ListLevels())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>level-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Verdana&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>level-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>level-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Using<sp/>list<sp/>style<sp/>first<sp/>time:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>another<sp/>list<sp/>from<sp/>a<sp/>list<sp/>within<sp/>a<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list2<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(listStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(list2-&gt;get_IsListStyleDefinition());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(list2-&gt;get_IsListStyleReference());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(listStyle,<sp/>list2-&gt;get_Style());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>some<sp/>list<sp/>items<sp/>that<sp/>our<sp/>list<sp/>will<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list2);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Using<sp/>list<sp/>style<sp/>second<sp/>time:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>and<sp/>apply<sp/>another<sp/>list<sp/>based<sp/>on<sp/>the<sp/>list<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list3<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(listStyle);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list3);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.CreateAndUseListStyle.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="508" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a91d57daaeb8695635561dcb826cded73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">Aspose::Words::Lists::List</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Lists::List &gt; Aspose::Words::Lists::ListCollection::AddCopy</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Lists::List &gt; &amp;srcList)</argsstring>
        <name>AddCopy</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::AddCopy</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">Aspose::Words::Lists::List</ref> &gt; &amp;</type>
          <declname>srcList</declname>
        </param>
        <briefdescription>
<para>Creates a new list by copying the specified list and adding it to the collection of lists in the document. </para>
        </briefdescription>
        <detaileddescription>
<para>The source list can be from any document. If the source list belongs to a different document, a copy of the list is created and added to the current document.</para>
<para>If the source list is a reference to or a definition of a list style, the newly created list is not related to the original list style.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcList</parametername>
</parameternamelist>
<parameterdescription>
<para>The source list to copy from.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The newly created list.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to restart numbering in a list by copying a list. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>list<sp/>allows<sp/>us<sp/>to<sp/>organize<sp/>and<sp/>decorate<sp/>sets<sp/>of<sp/>paragraphs<sp/>with<sp/>prefix<sp/>symbols<sp/>and<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>nested<sp/>lists<sp/>by<sp/>increasing<sp/>the<sp/>indent<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>begin<sp/>and<sp/>end<sp/>a<sp/>list<sp/>by<sp/>using<sp/>a<sp/>document<sp/>builder&apos;s<sp/>&quot;ListFormat&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>that<sp/>we<sp/>add<sp/>between<sp/>a<sp/>list&apos;s<sp/>start<sp/>and<sp/>the<sp/>end<sp/>will<sp/>become<sp/>an<sp/>item<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>list<sp/>from<sp/>a<sp/>Microsoft<sp/>Word<sp/>template,<sp/>and<sp/>customize<sp/>its<sp/>first<sp/>list<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list1<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8ae70de0dbccc7e67fa5a06195e265b13b" kindref="member" tooltip="The number of the first level is &quot;1)&quot;. The remaining levels are same as in NumberDefault....">ListTemplate::NumberArabicParenthesis</ref>);</highlight></codeline>
<codeline><highlight class="normal">list1-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal">list1-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1_1_lists_1a4cd5df47cac2445a5ab0b23a415229e2a92b09c7c48c520c3c55e497875da437c" kindref="member" tooltip="This list label is aligned to the right of the number position.">ListLevelAlignment::Right</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>our<sp/>list<sp/>to<sp/>some<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;List<sp/>1<sp/>starts<sp/>below:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>add<sp/>a<sp/>copy<sp/>of<sp/>an<sp/>existing<sp/>list<sp/>to<sp/>the<sp/>document&apos;s<sp/>list<sp/>collection</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>create<sp/>a<sp/>similar<sp/>list<sp/>without<sp/>making<sp/>changes<sp/>to<sp/>the<sp/>original.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list2<sp/>=<sp/>doc-&gt;get_Lists()-&gt;AddCopy(list1);</highlight></codeline>
<codeline><highlight class="normal">list2-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">list2-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;set_StartAt(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>second<sp/>list<sp/>to<sp/>new<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;List<sp/>2<sp/>starts<sp/>below:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list2);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.RestartNumberingUsingListCopy.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to create a document with a sample of all the lists from another document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintOutAllLists()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srcDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(dstDoc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>srcList<sp/>:<sp/>srcDoc-&gt;get_Lists())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;List&gt;<sp/>dstList<sp/>=<sp/>dstDoc-&gt;get_Lists()-&gt;AddCopy(srcList);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddListSample(builder,<sp/>dstList);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.PrintOutAllLists.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddListSample(SharedPtr&lt;DocumentBuilder&gt;<sp/>builder,<sp/>SharedPtr&lt;List&gt;<sp/>list)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Sample<sp/>formatting<sp/>of<sp/>list<sp/>with<sp/>ListId:&quot;</highlight><highlight class="normal">)<sp/>+<sp/>list-&gt;get_ListId());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;set_List(list);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>list-&gt;get_ListLevels()-&gt;<ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a69416fc43eb17a116be93ee18b21df45" kindref="member" tooltip="Gets the count of numbered and bulleted lists in the document.">get_Count</ref>();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;set_ListLevelNumber(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Level<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="594" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a593764f59773a18be5f22c5e7ec33d97" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a14691c595f5aeb0294c842e6f57179b0" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Aspose::Words::Lists::ListCollection::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="679" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1aabb332a034ebc116ee9202ac6a3fd4f5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ac70ee23ddb418e914e0fb48351d4791f" kindref="member">iterator</ref></type>
        <definition>iterator Aspose::Words::Lists::ListCollection::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="675" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a69a2cd3a744914cec81b3b501f5c7438" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a14691c595f5aeb0294c842e6f57179b0" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Aspose::Words::Lists::ListCollection::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::cbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="683" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a9da96c18e91ebe7f1c5d462772b08256" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a14691c595f5aeb0294c842e6f57179b0" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Aspose::Words::Lists::ListCollection::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::cend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="685" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a577624b2b98978f9f648b060414d76ed" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a14691c595f5aeb0294c842e6f57179b0" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Aspose::Words::Lists::ListCollection::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="681" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a73f2cb9a25aa09587bcc9ef763687843" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ac70ee23ddb418e914e0fb48351d4791f" kindref="member">iterator</ref></type>
        <definition>iterator Aspose::Words::Lists::ListCollection::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="677" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a69416fc43eb17a116be93ee18b21df45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Lists::ListCollection::get_Count</definition>
        <argsstring>()</argsstring>
        <name>get_Count</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::get_Count</qualifiedname>
        <briefdescription>
<para>Gets the count of numbered and bulleted lists in the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to verify owner document properties of lists. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ListCollection&gt;<sp/>lists<sp/>=<sp/>doc-&gt;get_Lists();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>lists-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list<sp/>=<sp/>lists-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8a37308d182b67d940f81ad431fba3f302" kindref="member" tooltip="Default bulleted list with 9 levels. Bullet of the first level is a disc, bullet of the second level ...">ListTemplate::BulletDefault</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>list-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Current<sp/>list<sp/>count:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>lists-&gt;get_Count())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Is<sp/>the<sp/>first<sp/>document<sp/>list:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(<ref refid="class/system.object_ext/_1aa4971f1f636ffeaca96bd2f017b6f04d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::Equals</ref>(lists-&gt;idx_get(0),<sp/>list)))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;ListId:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>list-&gt;get_ListId())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;List<sp/>is<sp/>the<sp/>same<sp/>by<sp/>ListId:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(<ref refid="class/system.object_ext/_1aa4971f1f636ffeaca96bd2f017b6f04d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::Equals</ref>(lists-&gt;GetListByListId(1),<sp/>list)))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="256" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a9caf2c083e9049c380331a6d6692957a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_base" kindref="compound">Aspose::Words::DocumentBase</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::DocumentBase &gt; Aspose::Words::Lists::ListCollection::get_Document</definition>
        <argsstring>() const</argsstring>
        <name>get_Document</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::get_Document</qualifiedname>
        <briefdescription>
<para>Gets the owner document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to verify owner document properties of lists. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ListCollection&gt;<sp/>lists<sp/>=<sp/>doc-&gt;get_Lists();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>lists-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list<sp/>=<sp/>lists-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8a37308d182b67d940f81ad431fba3f302" kindref="member" tooltip="Default bulleted list with 9 levels. Bullet of the first level is a disc, bullet of the second level ...">ListTemplate::BulletDefault</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>list-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Current<sp/>list<sp/>count:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>lists-&gt;get_Count())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Is<sp/>the<sp/>first<sp/>document<sp/>list:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(<ref refid="class/system.object_ext/_1aa4971f1f636ffeaca96bd2f017b6f04d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::Equals</ref>(lists-&gt;idx_get(0),<sp/>list)))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;ListId:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>list-&gt;get_ListId())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;List<sp/>is<sp/>the<sp/>same<sp/>by<sp/>ListId:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(<ref refid="class/system.object_ext/_1aa4971f1f636ffeaca96bd2f017b6f04d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::Equals</ref>(lists-&gt;GetListByListId(1),<sp/>list)))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="279" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1aba39a4e6866541a5ddb29799f86b929e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.collections.generic.i_enumerator/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::IEnumerator</ref>&lt; <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">Aspose::Words::Lists::List</ref> &gt; &gt; &gt;</type>
        <definition>System::SharedPtr&lt; System::Collections::Generic::IEnumerator&lt; System::SharedPtr&lt; Aspose::Words::Lists::List &gt; &gt; &gt; Aspose::Words::Lists::ListCollection::GetEnumerator</definition>
        <argsstring>() override</argsstring>
        <name>GetEnumerator</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::GetEnumerator</qualifiedname>
        <briefdescription>
<para>Gets the enumerator object that will enumerate lists in the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a document with a sample of all the lists from another document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintOutAllLists()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srcDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(dstDoc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>srcList<sp/>:<sp/>srcDoc-&gt;get_Lists())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;List&gt;<sp/>dstList<sp/>=<sp/>dstDoc-&gt;get_Lists()-&gt;AddCopy(srcList);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddListSample(builder,<sp/>dstList);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.PrintOutAllLists.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddListSample(SharedPtr&lt;DocumentBuilder&gt;<sp/>builder,<sp/>SharedPtr&lt;List&gt;<sp/>list)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Sample<sp/>formatting<sp/>of<sp/>list<sp/>with<sp/>ListId:&quot;</highlight><highlight class="normal">)<sp/>+<sp/>list-&gt;get_ListId());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;set_List(list);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>list-&gt;get_ListLevels()-&gt;<ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a69416fc43eb17a116be93ee18b21df45" kindref="member" tooltip="Gets the count of numbered and bulleted lists in the document.">get_Count</ref>();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;set_ListLevelNumber(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Level<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="317" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ad3edfbdbc7261eca5ebcbbd587e3952a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">Aspose::Words::Lists::List</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Lists::List &gt; Aspose::Words::Lists::ListCollection::GetListByListId</definition>
        <argsstring>(int32_t listId)</argsstring>
        <name>GetListByListId</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::GetListByListId</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>listId</declname>
        </param>
        <briefdescription>
<para>Gets a list by a list identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>You don&apos;t normally need to use this method. Most of the time you apply list formatting to paragraphs just by settings the <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_format_1ab0d0047a81fecf98d4a7ee244d7bbee9" kindref="member">List</ref> property of the <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_format" kindref="compound">ListFormat</ref> object.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listId</parametername>
</parameternamelist>
<parameterdescription>
<para>The list identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns the list object. Returns null if a list with the specified identifier was not found.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to verify owner document properties of lists. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ListCollection&gt;<sp/>lists<sp/>=<sp/>doc-&gt;get_Lists();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>lists-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list<sp/>=<sp/>lists-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8a37308d182b67d940f81ad431fba3f302" kindref="member" tooltip="Default bulleted list with 9 levels. Bullet of the first level is a disc, bullet of the second level ...">ListTemplate::BulletDefault</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>list-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Current<sp/>list<sp/>count:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>lists-&gt;get_Count())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Is<sp/>the<sp/>first<sp/>document<sp/>list:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(<ref refid="class/system.object_ext/_1aa4971f1f636ffeaca96bd2f017b6f04d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::Equals</ref>(lists-&gt;idx_get(0),<sp/>list)))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;ListId:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>list-&gt;get_ListId())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;List<sp/>is<sp/>the<sp/>same<sp/>by<sp/>ListId:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(<ref refid="class/system.object_ext/_1aa4971f1f636ffeaca96bd2f017b6f04d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::Equals</ref>(lists-&gt;GetListByListId(1),<sp/>list)))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="625" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1acacff9504dd9935a908d738cb3492e58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">Aspose::Words::Lists::List</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Lists::List &gt; Aspose::Words::Lists::ListCollection::idx_get</definition>
        <argsstring>(int32_t index)</argsstring>
        <name>idx_get</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::idx_get</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Gets a list by index. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply list formatting of an existing list to a collection of paragraphs. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>paras<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>paras-&gt;LINQ_Count([](SharedPtr&lt;Node&gt;<sp/>n)<sp/>{<sp/>return<sp/>System::DynamicCast&lt;Paragraph&gt;(n)-&gt;get_ListFormat()-&gt;get_IsListItem();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_Lists()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8ada57879220b36b005040009bf65f236c" kindref="member" tooltip="Default numbered list with 9 levels. Arabic numbering (1., 2., 3., ...) for the first level,...">ListTemplate::NumberDefault</ref>);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list<sp/>=<sp/>doc-&gt;get_Lists()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>paragraph<sp/>:<sp/>System::IterateOver(paras-&gt;LINQ_OfType&lt;SharedPtr&lt;Paragraph&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>paragraph-&gt;get_ListFormat()-&gt;set_List(list);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>paragraph-&gt;get_ListFormat()-&gt;set_ListLevelNumber(2);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>paras-&gt;LINQ_Count([](SharedPtr&lt;Node&gt;<sp/>n)<sp/>{<sp/>return<sp/>System::DynamicCast&lt;Paragraph&gt;(n)-&gt;get_ListFormat()-&gt;get_IsListItem();<sp/>}));</highlight></codeline>
</programlisting></para>
<para>Shows how to verify owner document properties of lists. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ListCollection&gt;<sp/>lists<sp/>=<sp/>doc-&gt;get_Lists();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>lists-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list<sp/>=<sp/>lists-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8a37308d182b67d940f81ad431fba3f302" kindref="member" tooltip="Default bulleted list with 9 levels. Bullet of the first level is a disc, bullet of the second level ...">ListTemplate::BulletDefault</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc,<sp/>list-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Current<sp/>list<sp/>count:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>lists-&gt;get_Count())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Is<sp/>the<sp/>first<sp/>document<sp/>list:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(<ref refid="class/system.object_ext/_1aa4971f1f636ffeaca96bd2f017b6f04d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::Equals</ref>(lists-&gt;idx_get(0),<sp/>list)))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;ListId:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>list-&gt;get_ListId())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;List<sp/>is<sp/>the<sp/>same<sp/>by<sp/>ListId:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>(<ref refid="class/system.object_ext/_1aa4971f1f636ffeaca96bd2f017b6f04d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ObjectExt::Equals</ref>(lists-&gt;GetListByListId(1),<sp/>list)))<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="673" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a1cd18d53f4166b08fc2a1b17fe4a9fc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a66a8748763960c1236897b53d9b2fd07" kindref="member">virtualized_iterator</ref> *</type>
        <definition>virtualized_iterator * Aspose::Words::Lists::ListCollection::virtualizeBeginConstIterator</definition>
        <argsstring>() const override</argsstring>
        <name>virtualizeBeginConstIterator</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::virtualizeBeginConstIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="691" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a87fbe5055cd6494a5200414c09c146e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a66a8748763960c1236897b53d9b2fd07" kindref="member">virtualized_iterator</ref> *</type>
        <definition>virtualized_iterator * Aspose::Words::Lists::ListCollection::virtualizeBeginIterator</definition>
        <argsstring>() override</argsstring>
        <name>virtualizeBeginIterator</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::virtualizeBeginIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="687" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ac003546503280169fc60817c236b6d12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a66a8748763960c1236897b53d9b2fd07" kindref="member">virtualized_iterator</ref> *</type>
        <definition>virtualized_iterator * Aspose::Words::Lists::ListCollection::virtualizeEndConstIterator</definition>
        <argsstring>() const override</argsstring>
        <name>virtualizeEndConstIterator</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::virtualizeEndConstIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="693" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1af67fcf4b719cbd2790aa9ebdf3cf9fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a66a8748763960c1236897b53d9b2fd07" kindref="member">virtualized_iterator</ref> *</type>
        <definition>virtualized_iterator * Aspose::Words::Lists::ListCollection::virtualizeEndIterator</definition>
        <argsstring>() override</argsstring>
        <name>virtualizeEndIterator</name>
        <qualifiedname>Aspose::Words::Lists::ListCollection::virtualizeEndIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="689" column="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Stores and manages formatting of bulleted and numbered lists used in a document. </para>
    </briefdescription>
    <detaileddescription>
<para>A list in a Microsoft Word document is a set of list formatting properties. The formatting of the lists is stored in the <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection" kindref="compound">ListCollection</ref> collection separately from the paragraphs of text.</para>
<para>You do not create objects of this class. There is always only one <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection" kindref="compound">ListCollection</ref> object per document and it is accessible via the <ref refid="class_aspose_1_1_words_1_1_document_base_1af534377636a3e0931e27cb1c8582f341" kindref="member">Lists</ref> property.</para>
<para>To create a new list based on a predefined list template or based on a list style, use the <ref refid="" kindref="compound">Add()</ref> method.</para>
<para>To create a new list with formatting identical to an existing list, use the <ref refid="" kindref="compound">AddCopy()</ref> method.</para>
<para>To make a paragraph bulleted or numbered, you need to apply list formatting to a paragraph by assigning a <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">List</ref> object to the <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_format_1ab0d0047a81fecf98d4a7ee244d7bbee9" kindref="member">List</ref> property of <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_format" kindref="compound">ListFormat</ref>.</para>
<para>To remove list formatting from a paragraph, use the <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_format_1a29b4de98987b94ae64a97413e9c30f18" kindref="member">RemoveNumbers</ref> method.</para>
<para>If you know a bit about WordprocessingML, then you might know it defines separate concepts for &quot;list&quot; and &quot;list definition&quot;. This exactly corresponds to how list formatting is stored in a Microsoft Word document at the low level. <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">List</ref> definition is like a &quot;schema&quot; and list is like an instance of a list definition.</para>
<para>To simplify programming model, Aspose.Words hides the distinction between list and list definition in much the same way like Microsoft Word hides this in its user interface. This allows you to concentrate more on how you want your document to look like, rather than building low-level objects to satisfy requirements of the Microsoft Word file format.</para>
<para>It is not possible to delete lists once they are created in the current version of <ref refid="namespace_aspose_1_1_words" kindref="compound">Aspose.Words</ref>. This is similar to Microsoft Word where user does not have explicit control over list definitions.</para>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list" kindref="compound">Aspose::Words::Lists::List</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_level" kindref="compound">Aspose::Words::Lists::ListLevel</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_format" kindref="compound">Aspose::Words::Lists::ListFormat</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with list levels. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(builder-&gt;get_ListFormat()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>list<sp/>allows<sp/>us<sp/>to<sp/>organize<sp/>and<sp/>decorate<sp/>sets<sp/>of<sp/>paragraphs<sp/>with<sp/>prefix<sp/>symbols<sp/>and<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>nested<sp/>lists<sp/>by<sp/>increasing<sp/>the<sp/>indent<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>begin<sp/>and<sp/>end<sp/>a<sp/>list<sp/>by<sp/>using<sp/>a<sp/>document<sp/>builder&apos;s<sp/>&quot;ListFormat&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>that<sp/>we<sp/>add<sp/>between<sp/>a<sp/>list&apos;s<sp/>start<sp/>and<sp/>the<sp/>end<sp/>will<sp/>become<sp/>an<sp/>item<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>types<sp/>of<sp/>lists<sp/>that<sp/>we<sp/>can<sp/>create<sp/>using<sp/>a<sp/>document<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>A<sp/>numbered<sp/>list:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Numbered<sp/>lists<sp/>create<sp/>a<sp/>logical<sp/>order<sp/>for<sp/>their<sp/>paragraphs<sp/>by<sp/>numbering<sp/>each<sp/>item.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(doc-&gt;get_Lists()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8ada57879220b36b005040009bf65f236c" kindref="member" tooltip="Default numbered list with 9 levels. Arabic numbering (1., 2., 3., ...) for the first level,...">ListTemplate::NumberDefault</ref>));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_ListFormat()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>setting<sp/>the<sp/>&quot;ListLevelNumber&quot;<sp/>property,<sp/>we<sp/>can<sp/>increase<sp/>the<sp/>list<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>begin<sp/>a<sp/>self-contained<sp/>sub-list<sp/>at<sp/>the<sp/>current<sp/>list<sp/>item.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Microsoft<sp/>Word<sp/>list<sp/>template<sp/>called<sp/>&quot;NumberDefault&quot;<sp/>uses<sp/>numbers<sp/>to<sp/>create<sp/>list<sp/>levels<sp/>for<sp/>the<sp/>first<sp/>list<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deeper<sp/>list<sp/>levels<sp/>use<sp/>letters<sp/>and<sp/>lowercase<sp/>Roman<sp/>numerals.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>9;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;set_ListLevelNumber(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Level<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>i);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>A<sp/>bulleted<sp/>list:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>list<sp/>will<sp/>apply<sp/>an<sp/>indent<sp/>and<sp/>a<sp/>bullet<sp/>symbol<sp/>(&quot;•&quot;)<sp/>before<sp/>each<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deeper<sp/>levels<sp/>of<sp/>this<sp/>list<sp/>will<sp/>use<sp/>different<sp/>symbols,<sp/>such<sp/>as<sp/>&quot;■&quot;<sp/>and<sp/>&quot;○&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(doc-&gt;get_Lists()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8a37308d182b67d940f81ad431fba3f302" kindref="member" tooltip="Default bulleted list with 9 levels. Bullet of the first level is a disc, bullet of the second level ...">ListTemplate::BulletDefault</ref>));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>9;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;set_ListLevelNumber(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Level<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>i);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>disable<sp/>list<sp/>formatting<sp/>to<sp/>not<sp/>format<sp/>any<sp/>subsequent<sp/>paragraphs<sp/>as<sp/>lists<sp/>by<sp/>un-setting<sp/>the<sp/>&quot;List&quot;<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(builder-&gt;get_ListFormat()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.SpecifyListLevel.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to restart numbering in a list by copying a list. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>list<sp/>allows<sp/>us<sp/>to<sp/>organize<sp/>and<sp/>decorate<sp/>sets<sp/>of<sp/>paragraphs<sp/>with<sp/>prefix<sp/>symbols<sp/>and<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>nested<sp/>lists<sp/>by<sp/>increasing<sp/>the<sp/>indent<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>begin<sp/>and<sp/>end<sp/>a<sp/>list<sp/>by<sp/>using<sp/>a<sp/>document<sp/>builder&apos;s<sp/>&quot;ListFormat&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>that<sp/>we<sp/>add<sp/>between<sp/>a<sp/>list&apos;s<sp/>start<sp/>and<sp/>the<sp/>end<sp/>will<sp/>become<sp/>an<sp/>item<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>list<sp/>from<sp/>a<sp/>Microsoft<sp/>Word<sp/>template,<sp/>and<sp/>customize<sp/>its<sp/>first<sp/>list<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list1<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1_1_lists_1ad0cd260ddef6a328afb1dd7a5cce50d8ae70de0dbccc7e67fa5a06195e265b13b" kindref="member" tooltip="The number of the first level is &quot;1)&quot;. The remaining levels are same as in NumberDefault....">ListTemplate::NumberArabicParenthesis</ref>);</highlight></codeline>
<codeline><highlight class="normal">list1-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal">list1-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1_1_lists_1a4cd5df47cac2445a5ab0b23a415229e2a92b09c7c48c520c3c55e497875da437c" kindref="member" tooltip="This list label is aligned to the right of the number position.">ListLevelAlignment::Right</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>our<sp/>list<sp/>to<sp/>some<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;List<sp/>1<sp/>starts<sp/>below:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>add<sp/>a<sp/>copy<sp/>of<sp/>an<sp/>existing<sp/>list<sp/>to<sp/>the<sp/>document&apos;s<sp/>list<sp/>collection</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>create<sp/>a<sp/>similar<sp/>list<sp/>without<sp/>making<sp/>changes<sp/>to<sp/>the<sp/>original.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>list2<sp/>=<sp/>doc-&gt;get_Lists()-&gt;AddCopy(list1);</highlight></codeline>
<codeline><highlight class="normal">list2-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">list2-&gt;get_ListLevels()-&gt;idx_get(0)-&gt;set_StartAt(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>second<sp/>list<sp/>to<sp/>new<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;List<sp/>2<sp/>starts<sp/>below:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(list2);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Item<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.RestartNumberingUsingListCopy.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to create a document with a sample of all the lists from another document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintOutAllLists()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>srcDoc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(dstDoc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>srcList<sp/>:<sp/>srcDoc-&gt;get_Lists())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;List&gt;<sp/>dstList<sp/>=<sp/>dstDoc-&gt;get_Lists()-&gt;AddCopy(srcList);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddListSample(builder,<sp/>dstList);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.PrintOutAllLists.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddListSample(SharedPtr&lt;DocumentBuilder&gt;<sp/>builder,<sp/>SharedPtr&lt;List&gt;<sp/>list)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Sample<sp/>formatting<sp/>of<sp/>list<sp/>with<sp/>ListId:&quot;</highlight><highlight class="normal">)<sp/>+<sp/>list-&gt;get_ListId());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;set_List(list);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>list-&gt;get_ListLevels()-&gt;<ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a69416fc43eb17a116be93ee18b21df45" kindref="member" tooltip="Gets the count of numbered and bulleted lists in the document.">get_Count</ref>();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;set_ListLevelNumber(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Level<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Aspose::Words::Lists::ListCollection</label>
        <link refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Lists::List &gt; &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Aspose::Words::Lists::ListCollection</label>
        <link refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Lists::List &gt; &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Lists/ListCollection.h" line="213" column="1" bodyfile="Aspose.Words.Cpp/Lists/ListCollection.h" bodystart="214" bodyend="710"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a2e200b6fd154a19f6a5dfeda6c335d60" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>Add</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a69ed80f72eeaba3f2abd640a52ee97e5" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>Add</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a91d57daaeb8695635561dcb826cded73" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>AddCopy</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a72129b1739a46a6b1a58db7abf2fff72" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1aabb332a034ebc116ee9202ac6a3fd4f5" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>begin</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a593764f59773a18be5f22c5e7ec33d97" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>begin</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a69a2cd3a744914cec81b3b501f5c7438" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>cbegin</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a9da96c18e91ebe7f1c5d462772b08256" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>cend</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a14691c595f5aeb0294c842e6f57179b0" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>const_iterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a73f2cb9a25aa09587bcc9ef763687843" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>end</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a577624b2b98978f9f648b060414d76ed" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>end</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a69416fc43eb17a116be93ee18b21df45" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>get_Count</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a9caf2c083e9049c380331a6d6692957a" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>get_Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1aba39a4e6866541a5ddb29799f86b929e" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>GetEnumerator</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ad3edfbdbc7261eca5ebcbbd587e3952a" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>GetListByListId</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1acacff9504dd9935a908d738cb3492e58" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>idx_get</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ac70ee23ddb418e914e0fb48351d4791f" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>iterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a4ad276f920cacd2cab04d3141903ba1f" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>iterator_holder_type</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1afa525f5ed60394b53594c34d157422ea" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a8ec4bd66e35edc438cb389456a6405cc" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a1b5bc825d1c41b644e778cd8518dcc5d" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a2c903fcb06235b117ea41becae48b4cf" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>mField3</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a9977f57221ffa726165e027800a3ea24" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>mField4</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ac46c9b5080c5c0fdcd0d3c2b89058b66" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>mField5</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a64822aede115fc2dd96c26d9b2dd9c82" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>mField6</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ab942f4de1db895639d393fadb54a50fb" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>mField7</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a3d0f09c0ddb293b6530ff51c886018b2" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a6f412b57553ab05890149a62c20f591c" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a9625d10310d24c4e290caee55552bc38" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a1cd18d53f4166b08fc2a1b17fe4a9fc9" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>virtualizeBeginConstIterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a87fbe5055cd6494a5200414c09c146e8" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>virtualizeBeginIterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a66a8748763960c1236897b53d9b2fd07" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>virtualized_iterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1a6747c608f8b83b3766d97ade7d46cdbd" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>virtualized_iterator_element</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ac003546503280169fc60817c236b6d12" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>virtualizeEndConstIterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1af67fcf4b719cbd2790aa9ebdf3cf9fed" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>virtualizeEndIterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_collection_1ae6c03f2d4899f05fb84d6de856e57798" prot="private" virt="virtual"><scope>Aspose::Words::Lists::ListCollection</scope><name>~ListCollection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
