<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::Comparing::CompareOptions</compoundname>
    <basecompoundref refid="class/system.object/" prot="public" virt="non-virtual">System::Object</basecompoundref>
    <includes refid="_compare_options_8h" local="no">Aspose.Words.Cpp/Comparing/CompareOptions.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1acaca6b8c9b0dec5bb2c64a9d2bc2fde7" prot="private" static="no">
        <type><ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref></type>
        <definition>typedef System::Object Aspose::Words::Comparing::CompareOptions::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="121" column="28" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a1accb09b2f7466c05c5b66329b0508b5" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options" kindref="compound">CompareOptions</ref></type>
        <definition>typedef CompareOptions Aspose::Words::Comparing::CompareOptions::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="120" column="28" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a9d5c62ec4981261b4b1df9f2af1c839d" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">BaseType</ref> &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType&gt; Aspose::Words::Comparing::CompareOptions::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="123" column="37" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a11bcaa82a5dc8e7fea813f3767486089" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 1, 1, 1, 1 &gt;::type</type>
        <definition>__TypeStub&lt;1,1,1,1&gt;::type Aspose::Words::Comparing::CompareOptions::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1097" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1097" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a4cc57d4eb03318fecbe7caa2ba83a006" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 1, 1, 1, 1 &gt;::type</type>
        <definition>__TypeStub&lt;1,1,1,1&gt;::type Aspose::Words::Comparing::CompareOptions::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1098" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1098" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a12a4c8034e42aa23ff312cddb99d90d0" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 1, 1, 1, 1 &gt;::type</type>
        <definition>__TypeStub&lt;1,1,1,1&gt;::type Aspose::Words::Comparing::CompareOptions::mField10</definition>
        <argsstring></argsstring>
        <name>mField10</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField10</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1107" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a25136daf22586cd6081e81b195a35181" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 1, 1, 1, 1 &gt;::type</type>
        <definition>__TypeStub&lt;1,1,1,1&gt;::type Aspose::Words::Comparing::CompareOptions::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1099" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ae0ad4af8753265dbe8540faf63e0095c" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 1, 1, 1, 1 &gt;::type</type>
        <definition>__TypeStub&lt;1,1,1,1&gt;::type Aspose::Words::Comparing::CompareOptions::mField3</definition>
        <argsstring></argsstring>
        <name>mField3</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1100" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ae174810faf210543070e8c8a507d5162" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 1, 1, 1, 1 &gt;::type</type>
        <definition>__TypeStub&lt;1,1,1,1&gt;::type Aspose::Words::Comparing::CompareOptions::mField4</definition>
        <argsstring></argsstring>
        <name>mField4</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1101" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a2ac1b24d4ac61bb6b9a6380b0d12f8f1" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 1, 1, 1, 1 &gt;::type</type>
        <definition>__TypeStub&lt;1,1,1,1&gt;::type Aspose::Words::Comparing::CompareOptions::mField5</definition>
        <argsstring></argsstring>
        <name>mField5</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1102" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a63255476c8ba751660d779467b9a77fa" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 1, 1, 1, 1 &gt;::type</type>
        <definition>__TypeStub&lt;1,1,1,1&gt;::type Aspose::Words::Comparing::CompareOptions::mField6</definition>
        <argsstring></argsstring>
        <name>mField6</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1103" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ae6cfac6f60aa6e0bf6267879818f6729" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 1, 1, 1, 1 &gt;::type</type>
        <definition>__TypeStub&lt;1,1,1,1&gt;::type Aspose::Words::Comparing::CompareOptions::mField7</definition>
        <argsstring></argsstring>
        <name>mField7</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1104" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a53de447c00eb3dac84cb689e0e9ca91d" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Comparing::CompareOptions::mField8</definition>
        <argsstring></argsstring>
        <name>mField8</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1105" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a34769e039abdcc66c44171b33bc97dba" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::Comparing::CompareOptions::mField9</definition>
        <argsstring></argsstring>
        <name>mField9</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::mField9</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1106" column="23" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="1106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a495956892270e43dfc9750cbe153b9a0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Comparing::CompareOptions::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="124" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a72c42152451c064b6278da9a61f2c8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Comparing::CompareOptions::CompareOptions</definition>
        <argsstring>()</argsstring>
        <name>CompareOptions</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::CompareOptions</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1091" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ad9e6f9a1d7b2628b34c2b045eacd71ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_comparing_1a95c350b22d53d90016451949934ab44c" kindref="member">Aspose::Words::Comparing::Granularity</ref></type>
        <definition>Aspose::Words::Comparing::Granularity Aspose::Words::Comparing::CompareOptions::get_Granularity</definition>
        <argsstring>() const</argsstring>
        <name>get_Granularity</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_Granularity</qualifiedname>
        <briefdescription>
<para>Specifies whether changes are tracked by character or by word. Default value is <ref refid="namespace_aspose_1_1_words_1_1_comparing_1a95c350b22d53d90016451949934ab44cade272e12691eadc454e67832c5d489e5" kindref="member">WordLevel</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows to specify a granularity while comparing documents. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docA<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builderA<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docA);</highlight></codeline>
<codeline><highlight class="normal">builderA-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Alpha<sp/>Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docB<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builderB<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docB);</highlight></codeline>
<codeline><highlight class="normal">builderB-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Lorems<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet<sp/>consectetur<sp/>-<sp/>\&quot;adipiscing\&quot;<sp/>elit&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>whether<sp/>changes<sp/>are<sp/>tracking</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>character<sp/>(&apos;Granularity.CharLevel&apos;),<sp/>or<sp/>by<sp/>word<sp/>(&apos;Granularity.WordLevel&apos;).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Granularity(granularity);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docA-&gt;Compare(docB,<sp/>u</highlight><highlight class="stringliteral">&quot;author&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>document&apos;s<sp/>collection<sp/>of<sp/>revision<sp/>groups<sp/>contains<sp/>all<sp/>the<sp/>differences<sp/>between<sp/>documents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;RevisionGroupCollection&gt;<sp/>groups<sp/>=<sp/>docA-&gt;get_Revisions()-&gt;get_Groups();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(5,<sp/>groups-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1062" column="46"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a6188d789091518a7dc164c815c4449ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Comparing::CompareOptions::get_IgnoreCaseChanges</definition>
        <argsstring>() const</argsstring>
        <name>get_IgnoreCaseChanges</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_IgnoreCaseChanges</qualifiedname>
        <briefdescription>
<para>True indicates that documents comparison is case insensitive. By default comparison is case sensitive. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="224" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a8120312f72c1b3ea721139e9e5a151e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Comparing::CompareOptions::get_IgnoreComments</definition>
        <argsstring>() const</argsstring>
        <name>get_IgnoreComments</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_IgnoreComments</qualifiedname>
        <briefdescription>
<para>Specifies whether to compare differences in comments. By default comments are not ignored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="628" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1aa91095ca357f6ae8346b81baa14427f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Comparing::CompareOptions::get_IgnoreDmlUniqueId</definition>
        <argsstring>() const</argsstring>
        <name>get_IgnoreDmlUniqueId</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_IgnoreDmlUniqueId</qualifiedname>
        <briefdescription>
<para>Specifies whether to ignore difference in DrawingML unique Id. Default value is <bold>false</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to compare documents ignoring DML unique ID. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docA<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DML<sp/>unique<sp/>ID<sp/>original.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docB<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DML<sp/>unique<sp/>ID<sp/>compare.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>Aspose.Words<sp/>do<sp/>not<sp/>ignore<sp/>DML&apos;s<sp/>unique<sp/>ID,<sp/>and<sp/>the<sp/>revisions<sp/>count<sp/>was<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>ignoring<sp/>DML&apos;s<sp/>unique<sp/>ID,<sp/>and<sp/>revisions<sp/>count<sp/>were<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreDmlUniqueId(isIgnoreDmlUniqueId);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docA-&gt;Compare(docB,<sp/>u</highlight><highlight class="stringliteral">&quot;Aspose.Words&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(isIgnoreDmlUniqueId<sp/>?<sp/>0<sp/>:<sp/>2,<sp/>docA-&gt;get_Revisions()-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1086" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a08c79b5664f61cf451f87a12fb27b0f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Comparing::CompareOptions::get_IgnoreFields</definition>
        <argsstring>() const</argsstring>
        <name>get_IgnoreFields</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_IgnoreFields</qualifiedname>
        <briefdescription>
<para>Specifies whether to compare differences in fields. By default fields are not ignored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="426" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a74f081c1558e1332eecf8ad7c76c512c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Comparing::CompareOptions::get_IgnoreFootnotes</definition>
        <argsstring>() const</argsstring>
        <name>get_IgnoreFootnotes</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_IgnoreFootnotes</qualifiedname>
        <briefdescription>
<para>Specifies whether to compare differences in footnotes and endnotes. By default footnotes are not ignored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="527" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ab3f9fe13ef77e0b32090456c951ce5b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Comparing::CompareOptions::get_IgnoreFormatting</definition>
        <argsstring>() const</argsstring>
        <name>get_IgnoreFormatting</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_IgnoreFormatting</qualifiedname>
        <briefdescription>
<para>True indicates that formatting is ignored. By default document formatting is not ignored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="830" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1acd3c6e27c5e265df2bbc51b177025bc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Comparing::CompareOptions::get_IgnoreHeadersAndFooters</definition>
        <argsstring>() const</argsstring>
        <name>get_IgnoreHeadersAndFooters</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_IgnoreHeadersAndFooters</qualifiedname>
        <briefdescription>
<para>True indicates that headers and footers content is ignored. By default headers and footers are not ignored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="931" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ad9d99d7b9eb14cc316a877bf6b30b0d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Comparing::CompareOptions::get_IgnoreTables</definition>
        <argsstring>() const</argsstring>
        <name>get_IgnoreTables</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_IgnoreTables</qualifiedname>
        <briefdescription>
<para>Specifies whether to compare the differences in data contained in tables. By default tables are not ignored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="325" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a7fb6c3c1bc8613d36a7324ebff7490e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Comparing::CompareOptions::get_IgnoreTextboxes</definition>
        <argsstring>() const</argsstring>
        <name>get_IgnoreTextboxes</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_IgnoreTextboxes</qualifiedname>
        <briefdescription>
<para>Specifies whether to compare differences in the data contained within text boxes. By default textboxes are not ignored. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="729" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ac74c73db8ab27e3c804d4774aae508ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939" kindref="member">Aspose::Words::Comparing::ComparisonTargetType</ref></type>
        <definition>Aspose::Words::Comparing::ComparisonTargetType Aspose::Words::Comparing::CompareOptions::get_Target</definition>
        <argsstring>() const</argsstring>
        <name>get_Target</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::get_Target</qualifiedname>
        <briefdescription>
<para>Specifies which document shall be used as a target during comparison. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1031" column="55"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a9e2a50b3bb9684234d47e78dff569862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_Granularity</definition>
        <argsstring>(Aspose::Words::Comparing::Granularity value)</argsstring>
        <name>set_Granularity</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_Granularity</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_comparing_1a95c350b22d53d90016451949934ab44c" kindref="member">Aspose::Words::Comparing::Granularity</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ad9e6f9a1d7b2628b34c2b045eacd71ff" kindref="member">Aspose::Words::Comparing::CompareOptions::get_Granularity</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1065" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a399d72fcaa1798a03ef54704cb4c3a58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_IgnoreCaseChanges</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_IgnoreCaseChanges</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_IgnoreCaseChanges</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a6188d789091518a7dc164c815c4449ea" kindref="member">Aspose::Words::Comparing::CompareOptions::get_IgnoreCaseChanges</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="227" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a19ad7d41b6b0e79acf1d3aecf779d512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_IgnoreComments</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_IgnoreComments</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_IgnoreComments</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a8120312f72c1b3ea721139e9e5a151e7" kindref="member">Aspose::Words::Comparing::CompareOptions::get_IgnoreComments</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="631" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ab818fac65e50a840c338cea86a87322d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_IgnoreDmlUniqueId</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_IgnoreDmlUniqueId</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_IgnoreDmlUniqueId</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1aa91095ca357f6ae8346b81baa14427f7" kindref="member">Aspose::Words::Comparing::CompareOptions::get_IgnoreDmlUniqueId</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1089" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a21a38a3367668d6e932bc5a335f00b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_IgnoreFields</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_IgnoreFields</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_IgnoreFields</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a08c79b5664f61cf451f87a12fb27b0f4" kindref="member">Aspose::Words::Comparing::CompareOptions::get_IgnoreFields</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="429" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a115a3de5fa9d66e73bb9ec564e936c98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_IgnoreFootnotes</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_IgnoreFootnotes</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_IgnoreFootnotes</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a74f081c1558e1332eecf8ad7c76c512c" kindref="member">Aspose::Words::Comparing::CompareOptions::get_IgnoreFootnotes</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="530" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a8b82c7cdb2e8fb9c6f85f55e34ca3ab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_IgnoreFormatting</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_IgnoreFormatting</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_IgnoreFormatting</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ab3f9fe13ef77e0b32090456c951ce5b7" kindref="member">Aspose::Words::Comparing::CompareOptions::get_IgnoreFormatting</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="833" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a3829202e8ef16fa75d5a521bc9fae912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_IgnoreHeadersAndFooters</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_IgnoreHeadersAndFooters</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_IgnoreHeadersAndFooters</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1acd3c6e27c5e265df2bbc51b177025bc6" kindref="member">Aspose::Words::Comparing::CompareOptions::get_IgnoreHeadersAndFooters</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="934" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ade1033188a2648cb4958d18df1801476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_IgnoreTables</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_IgnoreTables</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_IgnoreTables</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ad9d99d7b9eb14cc316a877bf6b30b0d9" kindref="member">Aspose::Words::Comparing::CompareOptions::get_IgnoreTables</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="328" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ad7231fda8b0eba9fd63d0b5d46c879d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_IgnoreTextboxes</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_IgnoreTextboxes</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_IgnoreTextboxes</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a7fb6c3c1bc8613d36a7324ebff7490e4" kindref="member">Aspose::Words::Comparing::CompareOptions::get_IgnoreTextboxes</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="732" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a069e433eb9b232758e57840e2f821f5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Comparing::CompareOptions::set_Target</definition>
        <argsstring>(Aspose::Words::Comparing::ComparisonTargetType value)</argsstring>
        <name>set_Target</name>
        <qualifiedname>Aspose::Words::Comparing::CompareOptions::set_Target</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939" kindref="member">Aspose::Words::Comparing::ComparisonTargetType</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ac74c73db8ab27e3c804d4774aae508ae" kindref="member">Aspose::Words::Comparing::CompareOptions::get_Target</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="1034" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allows to choose advanced options for document comparison operation. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to filter specific types of document elements when making a comparison. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>the<sp/>original<sp/>document<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>various<sp/>kinds<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docOriginal<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(docOriginal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Paragraph<sp/>text<sp/>referenced<sp/>with<sp/>an<sp/>endnote:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>This<sp/>is<sp/>the<sp/>first<sp/>paragraph.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Original<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>1<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>cell<sp/>2<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Textbox:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBox<sp/>=<sp/>builder-&gt;InsertShape(ShapeType::TextBox,<sp/>150,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBox-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Original<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATE<sp/>field:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(docOriginal-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>DATE<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comment:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newComment<sp/>=<sp/>MakeObject&lt;Comment&gt;(docOriginal,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal">newComment-&gt;SetText(u</highlight><highlight class="stringliteral">&quot;Original<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(newComment);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Header:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Original<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>clone<sp/>of<sp/>our<sp/>document<sp/>and<sp/>perform<sp/>a<sp/>quick<sp/>edit<sp/>on<sp/>each<sp/>of<sp/>the<sp/>cloned<sp/>document&apos;s<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docEdited<sp/>=<sp/>System::DynamicCast&lt;Document&gt;(docOriginal-&gt;Clone(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>firstParagraph<sp/>=<sp/>docEdited-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_Runs()-&gt;idx_get(0)-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;hello<sp/>world!<sp/>this<sp/>is<sp/>the<sp/>first<sp/>paragraph,<sp/>after<sp/>editing.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">firstParagraph-&gt;get_ParagraphFormat()-&gt;set_Style(docEdited-&gt;get_Styles()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>));</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Footnote&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>endnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Table&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstRow()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Cells()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>Cell<sp/>2<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Shape&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>textbox<sp/>contents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;FieldDate&gt;(docEdited-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)))-&gt;set_UseLunarCalendar(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">(System::DynamicCast&lt;Comment&gt;(docEdited-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a0be8406951cdfda82f00f79328cf4efc" kindref="member" tooltip="A comment in a Word document. A Comment node can have Paragraph and Table nodes.">NodeType::Comment</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">docEdited-&gt;get_FirstSection()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_HeadersFooters()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_FirstParagraph()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Runs()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Edited<sp/>header<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comparing<sp/>documents<sp/>creates<sp/>a<sp/>revision<sp/>for<sp/>every<sp/>edit<sp/>in<sp/>the<sp/>edited<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>CompareOptions<sp/>object<sp/>has<sp/>a<sp/>series<sp/>of<sp/>flags<sp/>that<sp/>can<sp/>suppress<sp/>revisions</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>each<sp/>respective<sp/>type<sp/>of<sp/>element,<sp/>effectively<sp/>ignoring<sp/>their<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareOptions<sp/>=<sp/>MakeObject&lt;Aspose::Words::Comparing::CompareOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFormatting(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreCaseChanges(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreComments(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTables(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFields(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreFootnotes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreTextboxes(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_IgnoreHeadersAndFooters(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">compareOptions-&gt;set_Target(<ref refid="namespace_aspose_1_1_words_1_1_comparing_1aedd9c2c4690327cb771a88f0f2c5a939a03c2e7e41ffc181a4e84080b4710e81e" kindref="member" tooltip="Other document is used as a base during comparison.">ComparisonTargetType::New</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Compare(docEdited,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>(),<sp/>compareOptions);</highlight></codeline>
<codeline><highlight class="normal">docOriginal-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.CompareOptions.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Aspose::Words::Comparing::CompareOptions</label>
        <link refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Aspose::Words::Comparing::CompareOptions</label>
        <link refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Comparing/CompareOptions.h" line="118" column="1" bodyfile="Aspose.Words.Cpp/Comparing/CompareOptions.h" bodystart="119" bodyend="1109"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1acaca6b8c9b0dec5bb2c64a9d2bc2fde7" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a72c42152451c064b6278da9a61f2c8a2" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>CompareOptions</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ad9e6f9a1d7b2628b34c2b045eacd71ff" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_Granularity</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a6188d789091518a7dc164c815c4449ea" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_IgnoreCaseChanges</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a8120312f72c1b3ea721139e9e5a151e7" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_IgnoreComments</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1aa91095ca357f6ae8346b81baa14427f7" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_IgnoreDmlUniqueId</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a08c79b5664f61cf451f87a12fb27b0f4" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_IgnoreFields</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a74f081c1558e1332eecf8ad7c76c512c" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_IgnoreFootnotes</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ab3f9fe13ef77e0b32090456c951ce5b7" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_IgnoreFormatting</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1acd3c6e27c5e265df2bbc51b177025bc6" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_IgnoreHeadersAndFooters</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ad9d99d7b9eb14cc316a877bf6b30b0d9" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_IgnoreTables</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a7fb6c3c1bc8613d36a7324ebff7490e4" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_IgnoreTextboxes</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ac74c73db8ab27e3c804d4774aae508ae" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>get_Target</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a11bcaa82a5dc8e7fea813f3767486089" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a4cc57d4eb03318fecbe7caa2ba83a006" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a12a4c8034e42aa23ff312cddb99d90d0" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField10</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a25136daf22586cd6081e81b195a35181" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ae0ad4af8753265dbe8540faf63e0095c" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField3</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ae174810faf210543070e8c8a507d5162" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField4</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a2ac1b24d4ac61bb6b9a6380b0d12f8f1" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField5</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a63255476c8ba751660d779467b9a77fa" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField6</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ae6cfac6f60aa6e0bf6267879818f6729" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField7</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a53de447c00eb3dac84cb689e0e9ca91d" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField8</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a34769e039abdcc66c44171b33bc97dba" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>mField9</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a495956892270e43dfc9750cbe153b9a0" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a9e2a50b3bb9684234d47e78dff569862" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_Granularity</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a399d72fcaa1798a03ef54704cb4c3a58" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_IgnoreCaseChanges</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a19ad7d41b6b0e79acf1d3aecf779d512" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_IgnoreComments</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ab818fac65e50a840c338cea86a87322d" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_IgnoreDmlUniqueId</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a21a38a3367668d6e932bc5a335f00b94" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_IgnoreFields</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a115a3de5fa9d66e73bb9ec564e936c98" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_IgnoreFootnotes</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a8b82c7cdb2e8fb9c6f85f55e34ca3ab7" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_IgnoreFormatting</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a3829202e8ef16fa75d5a521bc9fae912" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_IgnoreHeadersAndFooters</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ade1033188a2648cb4958d18df1801476" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_IgnoreTables</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1ad7231fda8b0eba9fd63d0b5d46c879d8" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_IgnoreTextboxes</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a069e433eb9b232758e57840e2f821f5c" prot="public" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>set_Target</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a1accb09b2f7466c05c5b66329b0508b5" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_comparing_1_1_compare_options_1a9d5c62ec4981261b4b1df9f2af1c839d" prot="private" virt="non-virtual"><scope>Aspose::Words::Comparing::CompareOptions</scope><name>ThisTypeBaseTypesInfo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
