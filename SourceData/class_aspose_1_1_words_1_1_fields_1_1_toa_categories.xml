<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_fields_1_1_toa_categories" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::Fields::ToaCategories</compoundname>
    <basecompoundref refid="class/system.object/" prot="public" virt="non-virtual">System::Object</basecompoundref>
    <includes refid="_toa_categories_8h" local="no">Aspose.Words.Cpp/Fields/ToaCategories.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a4660b32fea6e9ff7cf346c6cd7b8448a" prot="private" static="no">
        <type><ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref></type>
        <definition>typedef System::Object Aspose::Words::Fields::ToaCategories::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Fields::ToaCategories::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Fields/ToaCategories.h" line="72" column="28" bodyfile="Aspose.Words.Cpp/Fields/ToaCategories.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1ace12dcf1b85a0feb66c56d31bec7d217" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories" kindref="compound">ToaCategories</ref></type>
        <definition>typedef ToaCategories Aspose::Words::Fields::ToaCategories::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Fields::ToaCategories::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Fields/ToaCategories.h" line="71" column="27" bodyfile="Aspose.Words.Cpp/Fields/ToaCategories.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a43fbf23a6d01ba61b45505f6725de0f9" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">BaseType</ref> &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType&gt; Aspose::Words::Fields::ToaCategories::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Fields::ToaCategories::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Fields/ToaCategories.h" line="74" column="37" bodyfile="Aspose.Words.Cpp/Fields/ToaCategories.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1ac728831f4e0bbe7360ca92e7dd93a30d" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Fields::ToaCategories::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Fields::ToaCategories::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Fields/ToaCategories.h" line="224" column="23" bodyfile="Aspose.Words.Cpp/Fields/ToaCategories.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1ace087e9f56f8c2daffc5b74318ceda09" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Fields::ToaCategories::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Fields::ToaCategories::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Fields/ToaCategories.h" line="75" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a2d389283bf7b205692316e274d4fc362" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories" kindref="compound">Aspose::Words::Fields::ToaCategories</ref> &gt;</type>
        <definition>static System::SharedPtr&lt; Aspose::Words::Fields::ToaCategories &gt; Aspose::Words::Fields::ToaCategories::get_DefaultCategories</definition>
        <argsstring>()</argsstring>
        <name>get_DefaultCategories</name>
        <qualifiedname>Aspose::Words::Fields::ToaCategories::get_DefaultCategories</qualifiedname>
        <briefdescription>
<para>Gets the default table of authorities categories. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to specify a set of categories for TOA fields. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>TOA<sp/>fields<sp/>can<sp/>filter<sp/>their<sp/>entries<sp/>by<sp/>categories<sp/>defined<sp/>in<sp/>this<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toaCategories<sp/>=<sp/>MakeObject&lt;ToaCategories&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FieldOptions()-&gt;set_ToaCategories(toaCategories);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>collection<sp/>of<sp/>categories<sp/>comes<sp/>with<sp/>default<sp/>values,<sp/>which<sp/>we<sp/>can<sp/>overwrite<sp/>with<sp/>custom<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Cases&quot;</highlight><highlight class="normal">,<sp/>toaCategories-&gt;idx_get(1));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Statutes&quot;</highlight><highlight class="normal">,<sp/>toaCategories-&gt;idx_get(2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">toaCategories-&gt;idx_set(1,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>Category<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">toaCategories-&gt;idx_set(2,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>Category<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>always<sp/>access<sp/>the<sp/>default<sp/>values<sp/>via<sp/>this<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Cases&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a2d389283bf7b205692316e274d4fc362" kindref="member" tooltip="Gets the default table of authorities categories.">ToaCategories::get_DefaultCategories</ref>()-&gt;<ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a740ffb0a13604a7556b82c306d289af4" kindref="member" tooltip="Gets or sets the category heading by category number.">idx_get</ref>(1));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Statutes&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a2d389283bf7b205692316e274d4fc362" kindref="member" tooltip="Gets the default table of authorities categories.">ToaCategories::get_DefaultCategories</ref>()-&gt;<ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a740ffb0a13604a7556b82c306d289af4" kindref="member" tooltip="Gets or sets the category heading by category number.">idx_get</ref>(2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>2<sp/>TOA<sp/>fields.<sp/>TOA<sp/>fields<sp/>create<sp/>an<sp/>entry<sp/>for<sp/>each<sp/>TA<sp/>field<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;\c&quot;<sp/>switch<sp/>to<sp/>select<sp/>the<sp/>index<sp/>of<sp/>a<sp/>category<sp/>from<sp/>our<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>With<sp/>this<sp/>switch,<sp/>a<sp/>TOA<sp/>field<sp/>will<sp/>only<sp/>pick<sp/>up<sp/>entries<sp/>from<sp/>TA<sp/>fields<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>have<sp/>a<sp/>&quot;\c&quot;<sp/>switch<sp/>with<sp/>a<sp/>matching<sp/>category<sp/>index.<sp/>Each<sp/>TOA<sp/>field<sp/>will<sp/>also<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>name<sp/>of<sp/>the<sp/>category<sp/>that<sp/>its<sp/>&quot;\c&quot;<sp/>switch<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TOA<sp/>\\c<sp/>1<sp/>\\h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TOA<sp/>\\c<sp/>2<sp/>\\h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>TOA<sp/>entries<sp/>across<sp/>2<sp/>categories.<sp/>Our<sp/>first<sp/>TOA<sp/>field<sp/>will<sp/>receive<sp/>one<sp/>entry,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>second<sp/>TA<sp/>field<sp/>whose<sp/>&quot;\c&quot;<sp/>switch<sp/>also<sp/>points<sp/>to<sp/>the<sp/>first<sp/>category.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>TOA<sp/>field<sp/>will<sp/>have<sp/>two<sp/>entries<sp/>from<sp/>the<sp/>other<sp/>two<sp/>TA<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>2<sp/>\\l<sp/>\&quot;entry<sp/>1\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>1<sp/>\\l<sp/>\&quot;entry<sp/>2\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>2<sp/>\\l<sp/>\&quot;entry<sp/>3\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;FieldOptions.TOA.Categories.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Fields/ToaCategories.h" line="124" column="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1acc1fd1a4783973443f632d5cd1454404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Fields::ToaCategories::ToaCategories</definition>
        <argsstring>()</argsstring>
        <name>ToaCategories</name>
        <qualifiedname>Aspose::Words::Fields::ToaCategories::ToaCategories</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Fields/ToaCategories.h" line="126" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a740ffb0a13604a7556b82c306d289af4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Fields::ToaCategories::idx_get</definition>
        <argsstring>(int32_t number)</argsstring>
        <name>idx_get</name>
        <qualifiedname>Aspose::Words::Fields::ToaCategories::idx_get</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Gets or sets the category heading by category number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to specify a set of categories for TOA fields. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>TOA<sp/>fields<sp/>can<sp/>filter<sp/>their<sp/>entries<sp/>by<sp/>categories<sp/>defined<sp/>in<sp/>this<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toaCategories<sp/>=<sp/>MakeObject&lt;ToaCategories&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FieldOptions()-&gt;set_ToaCategories(toaCategories);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>collection<sp/>of<sp/>categories<sp/>comes<sp/>with<sp/>default<sp/>values,<sp/>which<sp/>we<sp/>can<sp/>overwrite<sp/>with<sp/>custom<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Cases&quot;</highlight><highlight class="normal">,<sp/>toaCategories-&gt;idx_get(1));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Statutes&quot;</highlight><highlight class="normal">,<sp/>toaCategories-&gt;idx_get(2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">toaCategories-&gt;idx_set(1,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>Category<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">toaCategories-&gt;idx_set(2,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>Category<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>always<sp/>access<sp/>the<sp/>default<sp/>values<sp/>via<sp/>this<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Cases&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a2d389283bf7b205692316e274d4fc362" kindref="member" tooltip="Gets the default table of authorities categories.">ToaCategories::get_DefaultCategories</ref>()-&gt;<ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a740ffb0a13604a7556b82c306d289af4" kindref="member" tooltip="Gets or sets the category heading by category number.">idx_get</ref>(1));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Statutes&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a2d389283bf7b205692316e274d4fc362" kindref="member" tooltip="Gets the default table of authorities categories.">ToaCategories::get_DefaultCategories</ref>()-&gt;<ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a740ffb0a13604a7556b82c306d289af4" kindref="member" tooltip="Gets or sets the category heading by category number.">idx_get</ref>(2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>2<sp/>TOA<sp/>fields.<sp/>TOA<sp/>fields<sp/>create<sp/>an<sp/>entry<sp/>for<sp/>each<sp/>TA<sp/>field<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;\c&quot;<sp/>switch<sp/>to<sp/>select<sp/>the<sp/>index<sp/>of<sp/>a<sp/>category<sp/>from<sp/>our<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>With<sp/>this<sp/>switch,<sp/>a<sp/>TOA<sp/>field<sp/>will<sp/>only<sp/>pick<sp/>up<sp/>entries<sp/>from<sp/>TA<sp/>fields<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>have<sp/>a<sp/>&quot;\c&quot;<sp/>switch<sp/>with<sp/>a<sp/>matching<sp/>category<sp/>index.<sp/>Each<sp/>TOA<sp/>field<sp/>will<sp/>also<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>name<sp/>of<sp/>the<sp/>category<sp/>that<sp/>its<sp/>&quot;\c&quot;<sp/>switch<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TOA<sp/>\\c<sp/>1<sp/>\\h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TOA<sp/>\\c<sp/>2<sp/>\\h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>TOA<sp/>entries<sp/>across<sp/>2<sp/>categories.<sp/>Our<sp/>first<sp/>TOA<sp/>field<sp/>will<sp/>receive<sp/>one<sp/>entry,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>second<sp/>TA<sp/>field<sp/>whose<sp/>&quot;\c&quot;<sp/>switch<sp/>also<sp/>points<sp/>to<sp/>the<sp/>first<sp/>category.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>TOA<sp/>field<sp/>will<sp/>have<sp/>two<sp/>entries<sp/>from<sp/>the<sp/>other<sp/>two<sp/>TA<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>2<sp/>\\l<sp/>\&quot;entry<sp/>1\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>1<sp/>\\l<sp/>\&quot;entry<sp/>2\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>2<sp/>\\l<sp/>\&quot;entry<sp/>3\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;FieldOptions.TOA.Categories.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Fields/ToaCategories.h" line="173" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a9058425a36dad4c354af27c78fef6838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Fields::ToaCategories::idx_set</definition>
        <argsstring>(int32_t number, const System::String &amp;value)</argsstring>
        <name>idx_set</name>
        <qualifiedname>Aspose::Words::Fields::ToaCategories::idx_set</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>number</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Gets or sets the category heading by category number. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to specify a set of categories for TOA fields. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>TOA<sp/>fields<sp/>can<sp/>filter<sp/>their<sp/>entries<sp/>by<sp/>categories<sp/>defined<sp/>in<sp/>this<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toaCategories<sp/>=<sp/>MakeObject&lt;ToaCategories&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FieldOptions()-&gt;set_ToaCategories(toaCategories);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>collection<sp/>of<sp/>categories<sp/>comes<sp/>with<sp/>default<sp/>values,<sp/>which<sp/>we<sp/>can<sp/>overwrite<sp/>with<sp/>custom<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Cases&quot;</highlight><highlight class="normal">,<sp/>toaCategories-&gt;idx_get(1));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Statutes&quot;</highlight><highlight class="normal">,<sp/>toaCategories-&gt;idx_get(2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">toaCategories-&gt;idx_set(1,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>Category<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">toaCategories-&gt;idx_set(2,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>Category<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>always<sp/>access<sp/>the<sp/>default<sp/>values<sp/>via<sp/>this<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Cases&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a2d389283bf7b205692316e274d4fc362" kindref="member" tooltip="Gets the default table of authorities categories.">ToaCategories::get_DefaultCategories</ref>()-&gt;<ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a740ffb0a13604a7556b82c306d289af4" kindref="member" tooltip="Gets or sets the category heading by category number.">idx_get</ref>(1));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Statutes&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a2d389283bf7b205692316e274d4fc362" kindref="member" tooltip="Gets the default table of authorities categories.">ToaCategories::get_DefaultCategories</ref>()-&gt;<ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a740ffb0a13604a7556b82c306d289af4" kindref="member" tooltip="Gets or sets the category heading by category number.">idx_get</ref>(2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>2<sp/>TOA<sp/>fields.<sp/>TOA<sp/>fields<sp/>create<sp/>an<sp/>entry<sp/>for<sp/>each<sp/>TA<sp/>field<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;\c&quot;<sp/>switch<sp/>to<sp/>select<sp/>the<sp/>index<sp/>of<sp/>a<sp/>category<sp/>from<sp/>our<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>With<sp/>this<sp/>switch,<sp/>a<sp/>TOA<sp/>field<sp/>will<sp/>only<sp/>pick<sp/>up<sp/>entries<sp/>from<sp/>TA<sp/>fields<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>have<sp/>a<sp/>&quot;\c&quot;<sp/>switch<sp/>with<sp/>a<sp/>matching<sp/>category<sp/>index.<sp/>Each<sp/>TOA<sp/>field<sp/>will<sp/>also<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>name<sp/>of<sp/>the<sp/>category<sp/>that<sp/>its<sp/>&quot;\c&quot;<sp/>switch<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TOA<sp/>\\c<sp/>1<sp/>\\h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TOA<sp/>\\c<sp/>2<sp/>\\h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>TOA<sp/>entries<sp/>across<sp/>2<sp/>categories.<sp/>Our<sp/>first<sp/>TOA<sp/>field<sp/>will<sp/>receive<sp/>one<sp/>entry,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>second<sp/>TA<sp/>field<sp/>whose<sp/>&quot;\c&quot;<sp/>switch<sp/>also<sp/>points<sp/>to<sp/>the<sp/>first<sp/>category.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>TOA<sp/>field<sp/>will<sp/>have<sp/>two<sp/>entries<sp/>from<sp/>the<sp/>other<sp/>two<sp/>TA<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>2<sp/>\\l<sp/>\&quot;entry<sp/>1\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>1<sp/>\\l<sp/>\&quot;entry<sp/>2\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>2<sp/>\\l<sp/>\&quot;entry<sp/>3\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;FieldOptions.TOA.Categories.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Fields/ToaCategories.h" line="220" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a table of authorities categories. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to specify a set of categories for TOA fields. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>TOA<sp/>fields<sp/>can<sp/>filter<sp/>their<sp/>entries<sp/>by<sp/>categories<sp/>defined<sp/>in<sp/>this<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toaCategories<sp/>=<sp/>MakeObject&lt;ToaCategories&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FieldOptions()-&gt;set_ToaCategories(toaCategories);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>collection<sp/>of<sp/>categories<sp/>comes<sp/>with<sp/>default<sp/>values,<sp/>which<sp/>we<sp/>can<sp/>overwrite<sp/>with<sp/>custom<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Cases&quot;</highlight><highlight class="normal">,<sp/>toaCategories-&gt;idx_get(1));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Statutes&quot;</highlight><highlight class="normal">,<sp/>toaCategories-&gt;idx_get(2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">toaCategories-&gt;idx_set(1,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>Category<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">toaCategories-&gt;idx_set(2,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>Category<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>always<sp/>access<sp/>the<sp/>default<sp/>values<sp/>via<sp/>this<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Cases&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a2d389283bf7b205692316e274d4fc362" kindref="member" tooltip="Gets the default table of authorities categories.">ToaCategories::get_DefaultCategories</ref>()-&gt;<ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a740ffb0a13604a7556b82c306d289af4" kindref="member" tooltip="Gets or sets the category heading by category number.">idx_get</ref>(1));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Statutes&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a2d389283bf7b205692316e274d4fc362" kindref="member" tooltip="Gets the default table of authorities categories.">ToaCategories::get_DefaultCategories</ref>()-&gt;<ref refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a740ffb0a13604a7556b82c306d289af4" kindref="member" tooltip="Gets or sets the category heading by category number.">idx_get</ref>(2));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>2<sp/>TOA<sp/>fields.<sp/>TOA<sp/>fields<sp/>create<sp/>an<sp/>entry<sp/>for<sp/>each<sp/>TA<sp/>field<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;\c&quot;<sp/>switch<sp/>to<sp/>select<sp/>the<sp/>index<sp/>of<sp/>a<sp/>category<sp/>from<sp/>our<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>With<sp/>this<sp/>switch,<sp/>a<sp/>TOA<sp/>field<sp/>will<sp/>only<sp/>pick<sp/>up<sp/>entries<sp/>from<sp/>TA<sp/>fields<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>have<sp/>a<sp/>&quot;\c&quot;<sp/>switch<sp/>with<sp/>a<sp/>matching<sp/>category<sp/>index.<sp/>Each<sp/>TOA<sp/>field<sp/>will<sp/>also<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>name<sp/>of<sp/>the<sp/>category<sp/>that<sp/>its<sp/>&quot;\c&quot;<sp/>switch<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TOA<sp/>\\c<sp/>1<sp/>\\h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TOA<sp/>\\c<sp/>2<sp/>\\h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>TOA<sp/>entries<sp/>across<sp/>2<sp/>categories.<sp/>Our<sp/>first<sp/>TOA<sp/>field<sp/>will<sp/>receive<sp/>one<sp/>entry,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>second<sp/>TA<sp/>field<sp/>whose<sp/>&quot;\c&quot;<sp/>switch<sp/>also<sp/>points<sp/>to<sp/>the<sp/>first<sp/>category.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>TOA<sp/>field<sp/>will<sp/>have<sp/>two<sp/>entries<sp/>from<sp/>the<sp/>other<sp/>two<sp/>TA<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>2<sp/>\\l<sp/>\&quot;entry<sp/>1\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>1<sp/>\\l<sp/>\&quot;entry<sp/>2\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;TA<sp/>\\c<sp/>2<sp/>\\l<sp/>\&quot;entry<sp/>3\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;FieldOptions.TOA.Categories.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Aspose::Words::Fields::ToaCategories</label>
        <link refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Aspose::Words::Fields::ToaCategories</label>
        <link refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Fields/ToaCategories.h" line="69" column="1" bodyfile="Aspose.Words.Cpp/Fields/ToaCategories.h" bodystart="70" bodyend="226"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a4660b32fea6e9ff7cf346c6cd7b8448a" prot="private" virt="non-virtual"><scope>Aspose::Words::Fields::ToaCategories</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a2d389283bf7b205692316e274d4fc362" prot="public" virt="non-virtual"><scope>Aspose::Words::Fields::ToaCategories</scope><name>get_DefaultCategories</name></member>
      <member refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a740ffb0a13604a7556b82c306d289af4" prot="public" virt="non-virtual"><scope>Aspose::Words::Fields::ToaCategories</scope><name>idx_get</name></member>
      <member refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a9058425a36dad4c354af27c78fef6838" prot="public" virt="non-virtual"><scope>Aspose::Words::Fields::ToaCategories</scope><name>idx_set</name></member>
      <member refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1ac728831f4e0bbe7360ca92e7dd93a30d" prot="private" virt="non-virtual"><scope>Aspose::Words::Fields::ToaCategories</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1ace087e9f56f8c2daffc5b74318ceda09" prot="private" virt="non-virtual"><scope>Aspose::Words::Fields::ToaCategories</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1ace12dcf1b85a0feb66c56d31bec7d217" prot="private" virt="non-virtual"><scope>Aspose::Words::Fields::ToaCategories</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1a43fbf23a6d01ba61b45505f6725de0f9" prot="private" virt="non-virtual"><scope>Aspose::Words::Fields::ToaCategories</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_fields_1_1_toa_categories_1acc1fd1a4783973443f632d5cd1454404" prot="public" virt="non-virtual"><scope>Aspose::Words::Fields::ToaCategories</scope><name>ToaCategories</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
