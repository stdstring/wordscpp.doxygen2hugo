<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_paragraph_format" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::ParagraphFormat</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IBorderAttrSource</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IShadingAttrSource</basecompoundref>
    <includes refid="_paragraph_format_8h" local="no">Aspose.Words.Cpp/ParagraphFormat.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_paragraph_format_1a65f889f606affeeb12f3e2cd8a1d0a8c" prot="private" static="no">
        <type>Aspose::Words::IBorderAttrSource</type>
        <definition>typedef Aspose::Words::IBorderAttrSource Aspose::Words::ParagraphFormat::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="104" column="46" bodyfile="Aspose.Words.Cpp/ParagraphFormat.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_paragraph_format_1a82b4b3205d777b4e1903de19a2097bad" prot="private" static="no">
        <type>Aspose::Words::IShadingAttrSource</type>
        <definition>typedef Aspose::Words::IShadingAttrSource Aspose::Words::ParagraphFormat::BaseType1</definition>
        <argsstring></argsstring>
        <name>BaseType1</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::BaseType1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="105" column="47" bodyfile="Aspose.Words.Cpp/ParagraphFormat.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_paragraph_format_1afee20a9517cda28f79cbc67beb90fb97" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_paragraph_format" kindref="compound">ParagraphFormat</ref></type>
        <definition>typedef ParagraphFormat Aspose::Words::ParagraphFormat::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="103" column="29" bodyfile="Aspose.Words.Cpp/ParagraphFormat.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_paragraph_format_1ac465ab6ef10506de3f18ba0c8af93957" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; BaseType, BaseType1 &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType, BaseType1&gt; Aspose::Words::ParagraphFormat::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="107" column="37" bodyfile="Aspose.Words.Cpp/ParagraphFormat.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_paragraph_format_1a513b571c0a8c7bc6d67af38a21c495db" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::ParagraphFormat::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1828" column="21" bodyfile="Aspose.Words.Cpp/ParagraphFormat.h" bodystart="1828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_paragraph_format_1a865af1524f290fee3bcfa8eac10cb8c9" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::ParagraphFormat::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1829" column="21" bodyfile="Aspose.Words.Cpp/ParagraphFormat.h" bodystart="1829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_paragraph_format_1a846075d2a85ad76a736d4cad1ddf1a10" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::ParagraphFormat::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1830" column="23" bodyfile="Aspose.Words.Cpp/ParagraphFormat.h" bodystart="1830" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a4f4411cc51f35fda6875a6c8453252a8" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::ParagraphFormat::~ParagraphFormat</definition>
        <argsstring>()</argsstring>
        <name>~ParagraphFormat</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::~ParagraphFormat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1822" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a2f33053fb577b75a64a3536740f88922" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::ParagraphFormat::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="108" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a33b51d61cad666dec487210087200db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::ClearFormatting</definition>
        <argsstring>()</argsstring>
        <name>ClearFormatting</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::ClearFormatting</qualifiedname>
        <briefdescription>
<para>Resets to default paragraph formatting. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to nest a list inside another list. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>list<sp/>allows<sp/>us<sp/>to<sp/>organize<sp/>and<sp/>decorate<sp/>sets<sp/>of<sp/>paragraphs<sp/>with<sp/>prefix<sp/>symbols<sp/>and<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>nested<sp/>lists<sp/>by<sp/>increasing<sp/>the<sp/>indent<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>begin<sp/>and<sp/>end<sp/>a<sp/>list<sp/>by<sp/>using<sp/>a<sp/>document<sp/>builder&apos;s<sp/>&quot;ListFormat&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>that<sp/>we<sp/>add<sp/>between<sp/>a<sp/>list&apos;s<sp/>start<sp/>and<sp/>the<sp/>end<sp/>will<sp/>become<sp/>an<sp/>item<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>outline<sp/>list<sp/>for<sp/>the<sp/>headings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>outlineList<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(ListTemplate::OutlineNumbers);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(outlineList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>Chapter<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>numbered<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>numberedList<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(ListTemplate::NumberDefault);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(numberedList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a960b44c579bc2f6818d2daaf9e4c16f0" kindref="member" tooltip="The Normal style.">StyleIdentifier::Normal</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Numbered<sp/>list<sp/>item<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>paragraph<sp/>that<sp/>comprises<sp/>a<sp/>list<sp/>will<sp/>have<sp/>this<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentParagraph()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_ParagraphFormat()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>bulleted<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>bulletedList<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(ListTemplate::BulletDefault);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(bulletedList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LeftIndent(72);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Bulleted<sp/>list<sp/>item<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Bulleted<sp/>list<sp/>item<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Revert<sp/>to<sp/>the<sp/>numbered<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(numberedList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Numbered<sp/>list<sp/>item<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Numbered<sp/>list<sp/>item<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Revert<sp/>to<sp/>the<sp/>outline<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(outlineList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>Chapter<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.NestedLists.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1818" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a60373227caad35096f27dac59c6f00af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_AddSpaceBetweenFarEastAndAlpha</definition>
        <argsstring>()</argsstring>
        <name>get_AddSpaceBetweenFarEastAndAlpha</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_AddSpaceBetweenFarEastAndAlpha</qualifiedname>
        <briefdescription>
<para>Gets or sets a flag indicating whether inter-character spacing is automatically adjusted between regions of Latin text and regions of East Asian text in the current paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a paragraph into the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>paragraphFormat<sp/>=<sp/>builder-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_FirstLineIndent(8);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4b425d212a2e7b36c38703bfdcd57823" kindref="member" tooltip="Text is aligned to both left and right.">ParagraphAlignment::Justify</ref>);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndAlpha(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndDigit(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_KeepTogether(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Writeln&quot;<sp/>method<sp/>ends<sp/>the<sp/>paragraph<sp/>after<sp/>appending<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>starts<sp/>a<sp/>new<sp/>line,<sp/>adding<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentParagraph()-&gt;get_IsEndOfDocument());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="465" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1ad7d6cf939ec34ddb76a3faa20a6000bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_AddSpaceBetweenFarEastAndDigit</definition>
        <argsstring>()</argsstring>
        <name>get_AddSpaceBetweenFarEastAndDigit</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_AddSpaceBetweenFarEastAndDigit</qualifiedname>
        <briefdescription>
<para>Gets or sets a flag indicating whether inter-character spacing is automatically adjusted between regions of numbers and regions of East Asian text in the current paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a paragraph into the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>paragraphFormat<sp/>=<sp/>builder-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_FirstLineIndent(8);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4b425d212a2e7b36c38703bfdcd57823" kindref="member" tooltip="Text is aligned to both left and right.">ParagraphAlignment::Justify</ref>);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndAlpha(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndDigit(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_KeepTogether(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Writeln&quot;<sp/>method<sp/>ends<sp/>the<sp/>paragraph<sp/>after<sp/>appending<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>starts<sp/>a<sp/>new<sp/>line,<sp/>adding<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentParagraph()-&gt;get_IsEndOfDocument());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="500" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a9d38fe714632ddc9c3e03267ce1bee38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007" kindref="member">Aspose::Words::ParagraphAlignment</ref></type>
        <definition>Aspose::Words::ParagraphAlignment Aspose::Words::ParagraphFormat::get_Alignment</definition>
        <argsstring>()</argsstring>
        <name>get_Alignment</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_Alignment</qualifiedname>
        <briefdescription>
<para>Gets or sets text alignment for the paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a paragraph into the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>paragraphFormat<sp/>=<sp/>builder-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_FirstLineIndent(8);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4b425d212a2e7b36c38703bfdcd57823" kindref="member" tooltip="Text is aligned to both left and right.">ParagraphAlignment::Justify</ref>);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndAlpha(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndDigit(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_KeepTogether(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Writeln&quot;<sp/>method<sp/>ends<sp/>the<sp/>paragraph<sp/>after<sp/>appending<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>starts<sp/>a<sp/>new<sp/>line,<sp/>adding<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentParagraph()-&gt;get_IsEndOfDocument());</highlight></codeline>
</programlisting></para>
<para>Shows how to construct an Aspose.Words document by hand. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>blank<sp/>document<sp/>contains<sp/>one<sp/>section,<sp/>one<sp/>body<sp/>and<sp/>one<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>&quot;RemoveAllChildren&quot;<sp/>method<sp/>to<sp/>remove<sp/>all<sp/>those<sp/>nodes,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>end<sp/>up<sp/>with<sp/>a<sp/>document<sp/>node<sp/>with<sp/>no<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>document<sp/>now<sp/>has<sp/>no<sp/>composite<sp/>child<sp/>nodes<sp/>that<sp/>we<sp/>can<sp/>add<sp/>content<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>it,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>repopulate<sp/>its<sp/>node<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>First,<sp/>create<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>root<sp/>document<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>section<sp/>=<sp/>MakeObject&lt;Section&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(section);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>some<sp/>page<sp/>setup<sp/>properties<sp/>for<sp/>the<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">section-&gt;get_PageSetup()-&gt;set_SectionStart(<ref refid="namespace_aspose_1_1_words_1a0caffb600fa144ea6826390ec3dc9a47a30c38ed106d7d71b9a1ce0534ea1befd" kindref="member" tooltip="The section starts from a new page.">SectionStart::NewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">section-&gt;get_PageSetup()-&gt;set_PaperSize(<ref refid="namespace_aspose_1_1_words_1a1a2f6b44133c9bd897dabca36c39ba25a17a53d1a012580ef609b70ef6a25d1f1" kindref="member" tooltip="8.5 x 11 inches.">PaperSize::Letter</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>section<sp/>needs<sp/>a<sp/>body,<sp/>which<sp/>will<sp/>contain<sp/>and<sp/>display<sp/>all<sp/>its<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>page<sp/>between<sp/>the<sp/>section&apos;s<sp/>header<sp/>and<sp/>footer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>body<sp/>=<sp/>MakeObject&lt;Body&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">section-&gt;AppendChild(body);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>paragraph,<sp/>set<sp/>some<sp/>formatting<sp/>properties,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>MakeObject&lt;Paragraph&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">body-&gt;AppendChild(para);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finally,<sp/>add<sp/>some<sp/>content<sp/>to<sp/>do<sp/>the<sp/>document.<sp/>Create<sp/>a<sp/>run,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>its<sp/>appearance<sp/>and<sp/>contents,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Section.CreateManually.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="185" column="42"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a17625384e6551e70641ec12ea0db7f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_Bidi</definition>
        <argsstring>()</argsstring>
        <name>get_Bidi</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_Bidi</qualifiedname>
        <briefdescription>
<para>Gets or sets whether this is a right-to-left paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para>When true, the runs and other inline objects in this paragraph are laid out right to left.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create right-to-left language-compatible lists with BIDIOUTLINE fields. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>BIDIOUTLINE<sp/>field<sp/>numbers<sp/>paragraphs<sp/>like<sp/>the<sp/>AUTONUM/LISTNUM<sp/>fields,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>is<sp/>only<sp/>visible<sp/>when<sp/>a<sp/>right-to-left<sp/>editing<sp/>language<sp/>is<sp/>enabled,<sp/>such<sp/>as<sp/>Hebrew<sp/>or<sp/>Arabic.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>field<sp/>will<sp/>display<sp/>&quot;.1&quot;,<sp/>the<sp/>RTL<sp/>equivalent<sp/>of<sp/>list<sp/>number<sp/>&quot;1.&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldBidiOutline&gt;(builder-&gt;InsertField(FieldType::FieldBidiOutline,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;שלום&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;<sp/>BIDIOUTLINE<sp/>&quot;</highlight><highlight class="normal">,<sp/>field-&gt;GetFieldCode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>two<sp/>more<sp/>BIDIOUTLINE<sp/>fields,<sp/>which<sp/>will<sp/>display<sp/>&quot;.2&quot;<sp/>and<sp/>&quot;.3&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(FieldType::FieldBidiOutline,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;שלום&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(FieldType::FieldBidiOutline,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;שלום&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>horizontal<sp/>text<sp/>alignment<sp/>for<sp/>every<sp/>paragraph<sp/>in<sp/>the<sp/>document<sp/>to<sp/>RTL.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>para<sp/>:<sp/>System::IterateOver&lt;Paragraph&gt;(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>para-&gt;get_ParagraphFormat()-&gt;set_Bidi(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>enable<sp/>a<sp/>right-to-left<sp/>editing<sp/>language<sp/>in<sp/>Microsoft<sp/>Word,<sp/>our<sp/>fields<sp/>will<sp/>display<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>they<sp/>will<sp/>display<sp/>&quot;###&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Field.BIDIOUTLINE.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to detect plaintext document text direction. <programlisting><codeline><highlight class="comment">//<sp/>Create<sp/>a<sp/>&quot;TxtLoadOptions&quot;<sp/>object,<sp/>which<sp/>we<sp/>can<sp/>pass<sp/>to<sp/>a<sp/>document&apos;s<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>modify<sp/>how<sp/>we<sp/>load<sp/>a<sp/>plaintext<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>loadOptions<sp/>=<sp/>MakeObject&lt;TxtLoadOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;DocumentDirection&quot;<sp/>property<sp/>to<sp/>&quot;DocumentDirection.Auto&quot;<sp/>automatically<sp/>detects</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>direction<sp/>of<sp/>every<sp/>paragraph<sp/>of<sp/>text<sp/>that<sp/>Aspose.Words<sp/>loads<sp/>from<sp/>plaintext.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph&apos;s<sp/>&quot;Bidi&quot;<sp/>property<sp/>will<sp/>store<sp/>its<sp/>direction.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">loadOptions-&gt;set_DocumentDirection(DocumentDirection::Auto);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Detect<sp/>Hebrew<sp/>text<sp/>as<sp/>right-to-left.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Hebrew<sp/>text.txt&quot;</highlight><highlight class="normal">,<sp/>loadOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat()-&gt;get_Bidi());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Detect<sp/>English<sp/>text<sp/>as<sp/>right-to-left.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;English<sp/>text.txt&quot;</highlight><highlight class="normal">,<sp/>loadOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat()-&gt;get_Bidi());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="624" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a24345aeaa2aa612a9c1abd07bd96d38f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_border_collection" kindref="compound">Aspose::Words::BorderCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::BorderCollection &gt; Aspose::Words::ParagraphFormat::get_Borders</definition>
        <argsstring>()</argsstring>
        <name>get_Borders</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_Borders</qualifiedname>
        <briefdescription>
<para>Gets collection of borders of the paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a paragraph with a top border. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Border&gt;<sp/>topBorder<sp/>=<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Borders()-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a4d30a833e0d716f386fa8d31c3b70c54aa4ffdcf0dc1f31b9acaf295d75b51d00" kindref="member" tooltip="Specifies the top border of a paragraph or a table cell.">BorderType::Top</ref>);</highlight></codeline>
<codeline><highlight class="normal">topBorder-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal">topBorder-&gt;set_LineWidth(4.0);</highlight></codeline>
<codeline><highlight class="normal">topBorder-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da1098dd5030d3fd7b7560aea5b9686e94" kindref="member">LineStyle::DashSmallGap</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>with<sp/>a<sp/>red<sp/>top<sp/>border.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Border.ParagraphTopBorder.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1569" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a16e5672333b2892f3ef463058797da3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_CharacterUnitFirstLineIndent</definition>
        <argsstring>()</argsstring>
        <name>get_CharacterUnitFirstLineIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_CharacterUnitFirstLineIndent</qualifiedname>
        <briefdescription>
<para>Gets or sets the value (in characters) for the first-line or hanging indent. Use positive values to set the first-line indent, and negative values to set the hanging indent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to change paragraph spacing and indents. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>format<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>five<sp/>different<sp/>spacing<sp/>options,<sp/>along<sp/>with<sp/>the<sp/>properties<sp/>that<sp/>their<sp/>configuration<sp/>indirectly<sp/>affects.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Left<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_LeftIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitLeftIndent(10.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_LeftIndent(),<sp/>120.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Right<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_RightIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitRightIndent(-5.5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_RightIndent(),<sp/>-66.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Hanging<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_FirstLineIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitFirstLineIndent(20.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_FirstLineIndent(),<sp/>243.59,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>Line<sp/>spacing<sp/>before<sp/>paragraphs:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_SpaceBefore(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_LineUnitBefore(5.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_SpaceBefore(),<sp/>61.1,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>5<sp/>-<sp/><sp/>Line<sp/>spacing<sp/>after<sp/>paragraphs:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_SpaceAfter(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_LineUnitAfter(10.9);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_SpaceAfter(),<sp/>130.8,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="884" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a01f757c7241b145434188bd6ea3e33a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_CharacterUnitLeftIndent</definition>
        <argsstring>()</argsstring>
        <name>get_CharacterUnitLeftIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_CharacterUnitLeftIndent</qualifiedname>
        <briefdescription>
<para>Gets or sets the left indent value (in characters) for the specified paragraphs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to change paragraph spacing and indents. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>format<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>five<sp/>different<sp/>spacing<sp/>options,<sp/>along<sp/>with<sp/>the<sp/>properties<sp/>that<sp/>their<sp/>configuration<sp/>indirectly<sp/>affects.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Left<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_LeftIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitLeftIndent(10.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_LeftIndent(),<sp/>120.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Right<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_RightIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitRightIndent(-5.5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_RightIndent(),<sp/>-66.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Hanging<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_FirstLineIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitFirstLineIndent(20.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_FirstLineIndent(),<sp/>243.59,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>Line<sp/>spacing<sp/>before<sp/>paragraphs:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_SpaceBefore(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_LineUnitBefore(5.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_SpaceBefore(),<sp/>61.1,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>5<sp/>-<sp/><sp/>Line<sp/>spacing<sp/>after<sp/>paragraphs:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_SpaceAfter(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_LineUnitAfter(10.9);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_SpaceAfter(),<sp/>130.8,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="708" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1afc0b337ad1c87d12eb591f2314de8942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_CharacterUnitRightIndent</definition>
        <argsstring>()</argsstring>
        <name>get_CharacterUnitRightIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_CharacterUnitRightIndent</qualifiedname>
        <briefdescription>
<para>Gets or sets the right indent value (in characters) for the specified paragraphs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to change paragraph spacing and indents. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>format<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>five<sp/>different<sp/>spacing<sp/>options,<sp/>along<sp/>with<sp/>the<sp/>properties<sp/>that<sp/>their<sp/>configuration<sp/>indirectly<sp/>affects.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Left<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_LeftIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitLeftIndent(10.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_LeftIndent(),<sp/>120.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Right<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_RightIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitRightIndent(-5.5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_RightIndent(),<sp/>-66.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Hanging<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_FirstLineIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitFirstLineIndent(20.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_FirstLineIndent(),<sp/>243.59,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>Line<sp/>spacing<sp/>before<sp/>paragraphs:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_SpaceBefore(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_LineUnitBefore(5.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_SpaceBefore(),<sp/>61.1,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>5<sp/>-<sp/><sp/>Line<sp/>spacing<sp/>after<sp/>paragraphs:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_SpaceAfter(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_LineUnitAfter(10.9);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_SpaceAfter(),<sp/>130.8,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="792" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a1aaee376965edb12507a36aff53bdd8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a1fb5e63f2bb476214873f9affc483a3e" kindref="member">Aspose::Words::DropCapPosition</ref></type>
        <definition>Aspose::Words::DropCapPosition Aspose::Words::ParagraphFormat::get_DropCapPosition</definition>
        <argsstring>()</argsstring>
        <name>get_DropCapPosition</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_DropCapPosition</qualifiedname>
        <briefdescription>
<para>Gets or sets the position for a drop cap text. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to nest a list inside another list. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>list<sp/>allows<sp/>us<sp/>to<sp/>organize<sp/>and<sp/>decorate<sp/>sets<sp/>of<sp/>paragraphs<sp/>with<sp/>prefix<sp/>symbols<sp/>and<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>nested<sp/>lists<sp/>by<sp/>increasing<sp/>the<sp/>indent<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>begin<sp/>and<sp/>end<sp/>a<sp/>list<sp/>by<sp/>using<sp/>a<sp/>document<sp/>builder&apos;s<sp/>&quot;ListFormat&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>that<sp/>we<sp/>add<sp/>between<sp/>a<sp/>list&apos;s<sp/>start<sp/>and<sp/>the<sp/>end<sp/>will<sp/>become<sp/>an<sp/>item<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>outline<sp/>list<sp/>for<sp/>the<sp/>headings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>outlineList<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(ListTemplate::OutlineNumbers);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(outlineList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>Chapter<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>numbered<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>numberedList<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(ListTemplate::NumberDefault);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(numberedList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a960b44c579bc2f6818d2daaf9e4c16f0" kindref="member" tooltip="The Normal style.">StyleIdentifier::Normal</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Numbered<sp/>list<sp/>item<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>paragraph<sp/>that<sp/>comprises<sp/>a<sp/>list<sp/>will<sp/>have<sp/>this<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentParagraph()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_ParagraphFormat()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>bulleted<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>bulletedList<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(ListTemplate::BulletDefault);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(bulletedList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LeftIndent(72);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Bulleted<sp/>list<sp/>item<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Bulleted<sp/>list<sp/>item<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Revert<sp/>to<sp/>the<sp/>numbered<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(numberedList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Numbered<sp/>list<sp/>item<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Numbered<sp/>list<sp/>item<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Revert<sp/>to<sp/>the<sp/>outline<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(outlineList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>Chapter<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.NestedLists.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1520" column="39"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a70ecd6a2a0ff5834302b06b58102c051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_FarEastLineBreakControl</definition>
        <argsstring>()</argsstring>
        <name>get_FarEastLineBreakControl</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_FarEastLineBreakControl</qualifiedname>
        <briefdescription>
<para>Gets or sets a flag indicating whether East Asian line-breaking rules are applied to the current paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set special properties for Asian typography. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>format<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_FarEastLineBreakControl(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_WordWrap(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_HangingPunctuation(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.AsianTypographyProperties.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="520" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1aec073a72462170cd4bde4f3d160953fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_FirstLineIndent</definition>
        <argsstring>()</argsstring>
        <name>get_FirstLineIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_FirstLineIndent</qualifiedname>
        <briefdescription>
<para>Gets or sets the value (in points) for a first line or hanging indent. Use positive values to set the first-line indent, and negative values to set the hanging indent. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a paragraph into the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>paragraphFormat<sp/>=<sp/>builder-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_FirstLineIndent(8);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4b425d212a2e7b36c38703bfdcd57823" kindref="member" tooltip="Text is aligned to both left and right.">ParagraphAlignment::Justify</ref>);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndAlpha(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndDigit(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_KeepTogether(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Writeln&quot;<sp/>method<sp/>ends<sp/>the<sp/>paragraph<sp/>after<sp/>appending<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>starts<sp/>a<sp/>new<sp/>line,<sp/>adding<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentParagraph()-&gt;get_IsEndOfDocument());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="827" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1aadfd70f3b0fad281fb4ed51d36678db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_HangingPunctuation</definition>
        <argsstring>()</argsstring>
        <name>get_HangingPunctuation</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_HangingPunctuation</qualifiedname>
        <briefdescription>
<para>Gets or sets a flag indicating whether hanging punctuation is enabled for the current paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set special properties for Asian typography. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>format<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_FarEastLineBreakControl(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_WordWrap(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_HangingPunctuation(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.AsianTypographyProperties.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="561" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a456b5b4029f90cbbe7eba004eed482ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_IsHeading</definition>
        <argsstring>()</argsstring>
        <name>get_IsHeading</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_IsHeading</qualifiedname>
        <briefdescription>
<para>True when the paragraph style is one of the built-in Heading styles. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to limit the headings&apos; level that will appear in the outline of a saved PDF document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>headings<sp/>that<sp/>can<sp/>serve<sp/>as<sp/>TOC<sp/>entries<sp/>of<sp/>levels<sp/>1,<sp/>2,<sp/>and<sp/>then<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_ParagraphFormat()-&gt;get_IsHeading());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a5c20c643b1731618a5eddb7660b10a3e" kindref="member" tooltip="The Heading 3 style.">StyleIdentifier::Heading3</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>&quot;PdfSaveOptions&quot;<sp/>object<sp/>that<sp/>we<sp/>can<sp/>pass<sp/>to<sp/>the<sp/>document&apos;s<sp/>&quot;Save&quot;<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>modify<sp/>how<sp/>that<sp/>method<sp/>converts<sp/>the<sp/>document<sp/>to<sp/>.PDF.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>saveOptions<sp/>=<sp/>MakeObject&lt;PdfSaveOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">saveOptions-&gt;set_SaveFormat(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847ae4204641574e4827600356b4dcacd276" kindref="member" tooltip="Saves the document as PDF (Adobe Portable Document) format.">SaveFormat::Pdf</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>output<sp/>PDF<sp/>document<sp/>will<sp/>contain<sp/>an<sp/>outline,<sp/>which<sp/>is<sp/>a<sp/>table<sp/>of<sp/>contents<sp/>that<sp/>lists<sp/>headings<sp/>in<sp/>the<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clicking<sp/>on<sp/>an<sp/>entry<sp/>in<sp/>this<sp/>outline<sp/>will<sp/>take<sp/>us<sp/>to<sp/>the<sp/>location<sp/>of<sp/>its<sp/>respective<sp/>heading.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;HeadingsOutlineLevels&quot;<sp/>property<sp/>to<sp/>&quot;2&quot;<sp/>to<sp/>exclude<sp/>all<sp/>headings<sp/>whose<sp/>levels<sp/>are<sp/>above<sp/>2<sp/>from<sp/>the<sp/>outline.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>last<sp/>two<sp/>headings<sp/>we<sp/>have<sp/>inserted<sp/>above<sp/>will<sp/>not<sp/>appear.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">saveOptions-&gt;get_OutlineOptions()-&gt;set_HeadingsOutlineLevels(2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;PdfSaveOptions.HeadingsOutlineLevels.pdf&quot;</highlight><highlight class="normal">,<sp/>saveOptions);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1350" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1aeaae96c2071df7c33453b91920425b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_IsListItem</definition>
        <argsstring>()</argsstring>
        <name>get_IsListItem</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_IsListItem</qualifiedname>
        <briefdescription>
<para>True when the paragraph is an item in a bulleted or numbered list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to nest a list inside another list. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>list<sp/>allows<sp/>us<sp/>to<sp/>organize<sp/>and<sp/>decorate<sp/>sets<sp/>of<sp/>paragraphs<sp/>with<sp/>prefix<sp/>symbols<sp/>and<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>nested<sp/>lists<sp/>by<sp/>increasing<sp/>the<sp/>indent<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>begin<sp/>and<sp/>end<sp/>a<sp/>list<sp/>by<sp/>using<sp/>a<sp/>document<sp/>builder&apos;s<sp/>&quot;ListFormat&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>that<sp/>we<sp/>add<sp/>between<sp/>a<sp/>list&apos;s<sp/>start<sp/>and<sp/>the<sp/>end<sp/>will<sp/>become<sp/>an<sp/>item<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>outline<sp/>list<sp/>for<sp/>the<sp/>headings.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>outlineList<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(ListTemplate::OutlineNumbers);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(outlineList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>Chapter<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>numbered<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>numberedList<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(ListTemplate::NumberDefault);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(numberedList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a960b44c579bc2f6818d2daaf9e4c16f0" kindref="member" tooltip="The Normal style.">StyleIdentifier::Normal</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Numbered<sp/>list<sp/>item<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>paragraph<sp/>that<sp/>comprises<sp/>a<sp/>list<sp/>will<sp/>have<sp/>this<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentParagraph()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_ParagraphFormat()-&gt;get_IsListItem());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>bulleted<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;List&gt;<sp/>bulletedList<sp/>=<sp/>doc-&gt;get_Lists()-&gt;Add(ListTemplate::BulletDefault);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(bulletedList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LeftIndent(72);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Bulleted<sp/>list<sp/>item<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Bulleted<sp/>list<sp/>item<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Revert<sp/>to<sp/>the<sp/>numbered<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(numberedList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Numbered<sp/>list<sp/>item<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Numbered<sp/>list<sp/>item<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Revert<sp/>to<sp/>the<sp/>outline<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;set_List(outlineList);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>my<sp/>Chapter<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.NestedLists.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1403" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1ae869ca72812baef90adbdae9fe7a4e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_KeepTogether</definition>
        <argsstring>()</argsstring>
        <name>get_KeepTogether</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_KeepTogether</qualifiedname>
        <briefdescription>
<para>True if all lines in the paragraph are to remain on the same page. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a paragraph into the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>paragraphFormat<sp/>=<sp/>builder-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_FirstLineIndent(8);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4b425d212a2e7b36c38703bfdcd57823" kindref="member" tooltip="Text is aligned to both left and right.">ParagraphAlignment::Justify</ref>);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndAlpha(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndDigit(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_KeepTogether(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Writeln&quot;<sp/>method<sp/>ends<sp/>the<sp/>paragraph<sp/>after<sp/>appending<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>starts<sp/>a<sp/>new<sp/>line,<sp/>adding<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentParagraph()-&gt;get_IsEndOfDocument());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="260" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a5bfe3b3f263558e1c8139e3852a5c748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_KeepWithNext</definition>
        <argsstring>()</argsstring>
        <name>get_KeepWithNext</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_KeepWithNext</qualifiedname>
        <briefdescription>
<para>True if the paragraph is to remains on the same page as the paragraph that follows it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set a table to stay together on the same page. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table<sp/>spanning<sp/>two<sp/>pages.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Tables()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enabling<sp/>KeepWithNext<sp/>for<sp/>every<sp/>paragraph<sp/>in<sp/>the<sp/>table<sp/>except<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>last<sp/>ones<sp/>in<sp/>the<sp/>last<sp/>row<sp/>will<sp/>prevent<sp/>the<sp/>table<sp/>from<sp/>splitting<sp/>across<sp/>multiple<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>cell<sp/>:<sp/>System::IterateOver(table-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a1a66ab62bfc858b7bcf9e01aa9cd1841" kindref="member" tooltip="A cell of a table row. A Cell node can have Paragraph and Table nodes.">NodeType::Cell</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_OfType&lt;SharedPtr&lt;Cell&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>para<sp/>:<sp/>System::IterateOver(cell-&gt;get_Paragraphs()-&gt;LINQ_OfType&lt;SharedPtr&lt;Paragraph&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(para-&gt;get_IsInCell());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(cell-&gt;get_ParentRow()-&gt;get_IsLastRow()<sp/>&amp;&amp;<sp/>para-&gt;get_IsEndOfCell()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>para-&gt;get_ParagraphFormat()-&gt;set_KeepWithNext(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.KeepTableTogether.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="291" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a62e1545970db3e60abf093c3d2dd9664" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_LeftIndent</definition>
        <argsstring>()</argsstring>
        <name>get_LeftIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_LeftIndent</qualifiedname>
        <briefdescription>
<para>Gets or sets the value (in points) that represents the left indent for paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to configure paragraph formatting to create off-center text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Center<sp/>all<sp/>text<sp/>that<sp/>the<sp/>document<sp/>builder<sp/>writes,<sp/>and<sp/>set<sp/>up<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>indent<sp/>configuration<sp/>below<sp/>will<sp/>create<sp/>a<sp/>body<sp/>of<sp/>text<sp/>that<sp/>will<sp/>sit<sp/>asymmetrically<sp/>on<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;center&quot;<sp/>that<sp/>we<sp/>align<sp/>the<sp/>text<sp/>to<sp/>will<sp/>be<sp/>the<sp/>middle<sp/>of<sp/>the<sp/>body<sp/>of<sp/>text,<sp/>not<sp/>the<sp/>middle<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>paragraphFormat<sp/>=<sp/>builder-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_LeftIndent(100);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_RightIndent(50);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_SpaceAfter(25);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>demonstrates<sp/>how<sp/>left<sp/>and<sp/>right<sp/>indentation<sp/>affects<sp/>word<sp/>wrapping.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;The<sp/>space<sp/>between<sp/>the<sp/>above<sp/>paragraph<sp/>and<sp/>this<sp/>one<sp/>depends<sp/>on<sp/>the<sp/>DocumentBuilder&apos;s<sp/>paragraph<sp/>format.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetParagraphFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="652" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a590627eb1cf3a63a2c2a14a6b545b6f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_LineSpacing</definition>
        <argsstring>()</argsstring>
        <name>get_LineSpacing</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_LineSpacing</qualifiedname>
        <briefdescription>
<para>Gets or sets the line spacing (in points) for the paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para>When LineSpacingRule property is set to AtLeast, the line spacing can be greater than or equal to, but never less than the specified LineSpacing value.</para>
<para>When LineSpacingRule property is set to Exactly, the line spacing never changes from the specified LineSpacing value, even if a larger font is used within the paragraph.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with line spacing. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>line<sp/>spacing<sp/>rules<sp/>that<sp/>we<sp/>can<sp/>define<sp/>using<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>paragraph&apos;s<sp/>&quot;LineSpacingRule&quot;<sp/>property<sp/>to<sp/>configure<sp/>spacing<sp/>between<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Set<sp/>a<sp/>minimum<sp/>amount<sp/>of<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>give<sp/>vertical<sp/>padding<sp/>to<sp/>lines<sp/>of<sp/>text<sp/>of<sp/>any<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>too<sp/>small<sp/>to<sp/>maintain<sp/>the<sp/>minimum<sp/>line-height.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacingRule(<ref refid="namespace_aspose_1_1_words_1a77a417cd2b0944eef9293891732957f1abad91df0cfc5662f3af47244d02d4802" kindref="member" tooltip="The line spacing can be greater than or equal to, but never less than, the value specified in the Lin...">LineSpacingRule::AtLeast</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacing(20);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Minimum<sp/>line<sp/>spacing<sp/>of<sp/>20.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Minimum<sp/>line<sp/>spacing<sp/>of<sp/>20.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Set<sp/>exact<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>font<sp/>sizes<sp/>that<sp/>are<sp/>too<sp/>large<sp/>for<sp/>the<sp/>spacing<sp/>will<sp/>truncate<sp/>the<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacingRule(<ref refid="namespace_aspose_1_1_words_1a77a417cd2b0944eef9293891732957f1a32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The line spacing never changes from the value specified in the LineSpacing property,...">LineSpacingRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacing(5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Line<sp/>spacing<sp/>of<sp/>exactly<sp/>5.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Line<sp/>spacing<sp/>of<sp/>exactly<sp/>5.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Set<sp/>spacing<sp/>as<sp/>a<sp/>multiple<sp/>of<sp/>default<sp/>line<sp/>spacing,<sp/>which<sp/>is<sp/>12<sp/>points<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>kind<sp/>of<sp/>spacing<sp/>will<sp/>scale<sp/>to<sp/>different<sp/>font<sp/>sizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacingRule(<ref refid="namespace_aspose_1_1_words_1a77a417cd2b0944eef9293891732957f1aa0bf169f2539e893e00d7b1296bc4d8e" kindref="member" tooltip="The line spacing is specified in the LineSpacing property as the number of lines. One line equals 12 ...">LineSpacingRule::Multiple</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacing(18);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Line<sp/>spacing<sp/>of<sp/>1.5<sp/>default<sp/>lines.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Line<sp/>spacing<sp/>of<sp/>1.5<sp/>default<sp/>lines.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.LineSpacing.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1306" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a30b6b0cf63fe16e0e6a4c200269f1383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a77a417cd2b0944eef9293891732957f1" kindref="member">Aspose::Words::LineSpacingRule</ref></type>
        <definition>Aspose::Words::LineSpacingRule Aspose::Words::ParagraphFormat::get_LineSpacingRule</definition>
        <argsstring>()</argsstring>
        <name>get_LineSpacingRule</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_LineSpacingRule</qualifiedname>
        <briefdescription>
<para>Gets or sets the line spacing for the paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with line spacing. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>line<sp/>spacing<sp/>rules<sp/>that<sp/>we<sp/>can<sp/>define<sp/>using<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>paragraph&apos;s<sp/>&quot;LineSpacingRule&quot;<sp/>property<sp/>to<sp/>configure<sp/>spacing<sp/>between<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Set<sp/>a<sp/>minimum<sp/>amount<sp/>of<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>give<sp/>vertical<sp/>padding<sp/>to<sp/>lines<sp/>of<sp/>text<sp/>of<sp/>any<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>is<sp/>too<sp/>small<sp/>to<sp/>maintain<sp/>the<sp/>minimum<sp/>line-height.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacingRule(<ref refid="namespace_aspose_1_1_words_1a77a417cd2b0944eef9293891732957f1abad91df0cfc5662f3af47244d02d4802" kindref="member" tooltip="The line spacing can be greater than or equal to, but never less than, the value specified in the Lin...">LineSpacingRule::AtLeast</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacing(20);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Minimum<sp/>line<sp/>spacing<sp/>of<sp/>20.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Minimum<sp/>line<sp/>spacing<sp/>of<sp/>20.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Set<sp/>exact<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>font<sp/>sizes<sp/>that<sp/>are<sp/>too<sp/>large<sp/>for<sp/>the<sp/>spacing<sp/>will<sp/>truncate<sp/>the<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacingRule(<ref refid="namespace_aspose_1_1_words_1a77a417cd2b0944eef9293891732957f1a32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The line spacing never changes from the value specified in the LineSpacing property,...">LineSpacingRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacing(5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Line<sp/>spacing<sp/>of<sp/>exactly<sp/>5.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Line<sp/>spacing<sp/>of<sp/>exactly<sp/>5.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Set<sp/>spacing<sp/>as<sp/>a<sp/>multiple<sp/>of<sp/>default<sp/>line<sp/>spacing,<sp/>which<sp/>is<sp/>12<sp/>points<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>kind<sp/>of<sp/>spacing<sp/>will<sp/>scale<sp/>to<sp/>different<sp/>font<sp/>sizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacingRule(<ref refid="namespace_aspose_1_1_words_1a77a417cd2b0944eef9293891732957f1aa0bf169f2539e893e00d7b1296bc4d8e" kindref="member" tooltip="The line spacing is specified in the LineSpacing property as the number of lines. One line equals 12 ...">LineSpacingRule::Multiple</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LineSpacing(18);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Line<sp/>spacing<sp/>of<sp/>1.5<sp/>default<sp/>lines.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Line<sp/>spacing<sp/>of<sp/>1.5<sp/>default<sp/>lines.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.LineSpacing.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1257" column="39"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a7c0c3d11e00bff022283fad03091a7a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::ParagraphFormat::get_LinesToDrop</definition>
        <argsstring>()</argsstring>
        <name>get_LinesToDrop</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_LinesToDrop</qualifiedname>
        <briefdescription>
<para>Gets or sets the number of lines of the paragraph text used to calculate the drop cap height. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set the size of a drop cap. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modify<sp/>the<sp/>&quot;LinesToDrop&quot;<sp/>property<sp/>to<sp/>designate<sp/>a<sp/>paragraph<sp/>as<sp/>a<sp/>drop<sp/>cap,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>turn<sp/>it<sp/>into<sp/>a<sp/>large<sp/>capital<sp/>letter<sp/>that<sp/>will<sp/>decorate<sp/>the<sp/>next<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Give<sp/>this<sp/>property<sp/>a<sp/>value<sp/>of<sp/>4<sp/>to<sp/>give<sp/>the<sp/>drop<sp/>cap<sp/>the<sp/>height<sp/>of<sp/>four<sp/>text<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LinesToDrop(4);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>&quot;LinesToDrop&quot;<sp/>property<sp/>to<sp/>0<sp/>to<sp/>turn<sp/>the<sp/>next<sp/>paragraph<sp/>into<sp/>an<sp/>ordinary<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>text<sp/>in<sp/>this<sp/>paragraph<sp/>will<sp/>wrap<sp/>around<sp/>the<sp/>drop<sp/>cap.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_LinesToDrop(0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;ello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.LinesToDrop.odt&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1464" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a04378f0f03fcfc10779fd25bbaaca403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_LineUnitAfter</definition>
        <argsstring>()</argsstring>
        <name>get_LineUnitAfter</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_LineUnitAfter</qualifiedname>
        <briefdescription>
<para>Gets or sets the amount of spacing (in gridlines) after the paragraphs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to change paragraph spacing and indents. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>format<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>five<sp/>different<sp/>spacing<sp/>options,<sp/>along<sp/>with<sp/>the<sp/>properties<sp/>that<sp/>their<sp/>configuration<sp/>indirectly<sp/>affects.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Left<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_LeftIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitLeftIndent(10.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_LeftIndent(),<sp/>120.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Right<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_RightIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitRightIndent(-5.5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_RightIndent(),<sp/>-66.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Hanging<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_FirstLineIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitFirstLineIndent(20.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_FirstLineIndent(),<sp/>243.59,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>Line<sp/>spacing<sp/>before<sp/>paragraphs:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_SpaceBefore(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_LineUnitBefore(5.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_SpaceBefore(),<sp/>61.1,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>5<sp/>-<sp/><sp/>Line<sp/>spacing<sp/>after<sp/>paragraphs:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_SpaceAfter(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_LineUnitAfter(10.9);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_SpaceAfter(),<sp/>130.8,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1214" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1ac12abe2ab9aefaae497197c90a96d72d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_LineUnitBefore</definition>
        <argsstring>()</argsstring>
        <name>get_LineUnitBefore</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_LineUnitBefore</qualifiedname>
        <briefdescription>
<para>Gets or sets the amount of spacing (in gridlines) before the paragraphs. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to change paragraph spacing and indents. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>format<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>five<sp/>different<sp/>spacing<sp/>options,<sp/>along<sp/>with<sp/>the<sp/>properties<sp/>that<sp/>their<sp/>configuration<sp/>indirectly<sp/>affects.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Left<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_LeftIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitLeftIndent(10.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_LeftIndent(),<sp/>120.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Right<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_RightIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitRightIndent(-5.5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_RightIndent(),<sp/>-66.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Hanging<sp/>indent:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_FirstLineIndent(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_CharacterUnitFirstLineIndent(20.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_FirstLineIndent(),<sp/>243.59,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>Line<sp/>spacing<sp/>before<sp/>paragraphs:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_SpaceBefore(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_LineUnitBefore(5.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_SpaceBefore(),<sp/>61.1,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>5<sp/>-<sp/><sp/>Line<sp/>spacing<sp/>after<sp/>paragraphs:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(format-&gt;get_SpaceAfter(),<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_LineUnitAfter(10.9);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_NEAR(format-&gt;get_SpaceAfter(),<sp/>130.8,<sp/>0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档测试文档&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1093" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1abef53f240e23dd617e0abd92b9ee19b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_NoSpaceBetweenParagraphsOfSameStyle</definition>
        <argsstring>()</argsstring>
        <name>get_NoSpaceBetweenParagraphsOfSameStyle</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_NoSpaceBetweenParagraphsOfSameStyle</qualifiedname>
        <briefdescription>
<para>When true, <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a0412ade4aeafb231e16ce539b1fa3ec1" kindref="member">SpaceBefore</ref> and <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1ae42672d03f13fe772b8b0486d5a60551" kindref="member">SpaceAfter</ref> will be ignored between the paragraphs of the same style. </para>
        </briefdescription>
        <detaileddescription>
<para>This setting only takes affect when applied to a paragraph style. If applied to a paragraph directly, it has no effect.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply no spacing between paragraphs with the same style. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>large<sp/>amount<sp/>of<sp/>spacing<sp/>before<sp/>and<sp/>after<sp/>paragraphs<sp/>that<sp/>this<sp/>builder<sp/>will<sp/>create.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBefore(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfter(24);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;NoSpaceBetweenParagraphsOfSameStyle&quot;<sp/>flag<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>apply</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>spacing<sp/>between<sp/>paragraphs<sp/>with<sp/>the<sp/>same<sp/>style,<sp/>which<sp/>will<sp/>group<sp/>similar<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Leave<sp/>the<sp/>&quot;NoSpaceBetweenParagraphsOfSameStyle&quot;<sp/>flag<sp/>as<sp/>&quot;false&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>evenly<sp/>apply<sp/>spacing<sp/>to<sp/>every<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_NoSpaceBetweenParagraphsOfSameStyle(noSpaceBetweenParagraphsOfSameStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Quote&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.ParagraphSpacingSameStyle.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="226" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a1273687ec8327eb2a6e114a5d186813e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a41d77549c4a2b5daae27afce91068a35" kindref="member">Aspose::Words::OutlineLevel</ref></type>
        <definition>Aspose::Words::OutlineLevel Aspose::Words::ParagraphFormat::get_OutlineLevel</definition>
        <argsstring>()</argsstring>
        <name>get_OutlineLevel</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_OutlineLevel</qualifiedname>
        <briefdescription>
<para>Specifies the outline level of the paragraph in the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to configure paragraph outline levels to create collapsible text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>has<sp/>an<sp/>OutlineLevel,<sp/>which<sp/>could<sp/>be<sp/>any<sp/>number<sp/>from<sp/>1<sp/>to<sp/>9,<sp/>or<sp/>at<sp/>the<sp/>default<sp/>&quot;BodyText&quot;<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>the<sp/>property<sp/>to<sp/>one<sp/>of<sp/>the<sp/>numbered<sp/>values<sp/>will<sp/>show<sp/>an<sp/>arrow<sp/>to<sp/>the<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_OutlineLevel(<ref refid="namespace_aspose_1_1_words_1a41d77549c4a2b5daae27afce91068a35a63664aa8bee7544118de87bf48d529ee" kindref="member" tooltip="The paragraph is at the outline level 1 (topmost level).">OutlineLevel::Level1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>outline<sp/>level<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Level<sp/>1<sp/>is<sp/>the<sp/>topmost<sp/>level.<sp/>If<sp/>there<sp/>is<sp/>a<sp/>paragraph<sp/>with<sp/>a<sp/>lower<sp/>level<sp/>below<sp/>a<sp/>paragraph<sp/>with<sp/>a<sp/>higher<sp/>level,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>collapsing<sp/>the<sp/>higher-level<sp/>paragraph<sp/>will<sp/>collapse<sp/>the<sp/>lower<sp/>level<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_OutlineLevel(<ref refid="namespace_aspose_1_1_words_1a41d77549c4a2b5daae27afce91068a35a0cbbfd5a182368f83190bf23d2bd5fde" kindref="member" tooltip="The paragraph is at the outline level 2.">OutlineLevel::Level2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>outline<sp/>level<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Two<sp/>paragraphs<sp/>of<sp/>the<sp/>same<sp/>level<sp/>will<sp/>not<sp/>collapse<sp/>each<sp/>other,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>arrows<sp/>do<sp/>not<sp/>collapse<sp/>the<sp/>paragraphs<sp/>they<sp/>point<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_OutlineLevel(<ref refid="namespace_aspose_1_1_words_1a41d77549c4a2b5daae27afce91068a35a68290d8bb76fe3ceb98d34e8b068f6be" kindref="member" tooltip="The paragraph is at the outline level 3.">OutlineLevel::Level3</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>outline<sp/>level<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>outline<sp/>level<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>&quot;BodyText&quot;<sp/>value<sp/>is<sp/>the<sp/>lowest,<sp/>which<sp/>a<sp/>paragraph<sp/>of<sp/>any<sp/>level<sp/>can<sp/>collapse.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_OutlineLevel(<ref refid="namespace_aspose_1_1_words_1a41d77549c4a2b5daae27afce91068a35a4cfff2d57e16cda5e4256c5491568c58" kindref="member" tooltip="The paragraph is at the level of the main text.">OutlineLevel::BodyText</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>at<sp/>main<sp/>text<sp/>level.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.ParagraphOutlineLevel.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1437" column="36"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a00f94058873001f3af4c473441fe1815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_PageBreakBefore</definition>
        <argsstring>()</argsstring>
        <name>get_PageBreakBefore</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_PageBreakBefore</qualifiedname>
        <briefdescription>
<para>True if a page break is forced before the paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create paragraphs with page breaks at the beginning. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>this<sp/>flag<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>apply<sp/>a<sp/>page<sp/>break<sp/>to<sp/>each<sp/>paragraph&apos;s<sp/>beginning</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>create<sp/>under<sp/>this<sp/>ParagraphFormat<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>paragraph<sp/>will<sp/>not<sp/>receive<sp/>a<sp/>page<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Leave<sp/>this<sp/>flag<sp/>as<sp/>&quot;false&quot;<sp/>to<sp/>start<sp/>each<sp/>new<sp/>paragraph<sp/>on<sp/>the<sp/>same<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>the<sp/>previous,<sp/>provided<sp/>there<sp/>is<sp/>sufficient<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_PageBreakBefore(pageBreakBefore);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>layoutCollector<sp/>=<sp/>MakeObject&lt;LayoutCollector&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphCollection&gt;<sp/>paragraphs<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pageBreakBefore)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(1,<sp/>layoutCollector-&gt;GetStartPageIndex(paragraphs-&gt;idx_get(0)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(2,<sp/>layoutCollector-&gt;GetStartPageIndex(paragraphs-&gt;idx_get(1)));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(1,<sp/>layoutCollector-&gt;GetStartPageIndex(paragraphs-&gt;idx_get(0)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(1,<sp/>layoutCollector-&gt;GetStartPageIndex(paragraphs-&gt;idx_get(1)));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.PageBreakBefore.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="331" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a2749ebd66ecc60cef6f69b68645c9a0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_RightIndent</definition>
        <argsstring>()</argsstring>
        <name>get_RightIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_RightIndent</qualifiedname>
        <briefdescription>
<para>Gets or sets the value (in points) that represents the right indent for paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to configure paragraph formatting to create off-center text. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Center<sp/>all<sp/>text<sp/>that<sp/>the<sp/>document<sp/>builder<sp/>writes,<sp/>and<sp/>set<sp/>up<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>indent<sp/>configuration<sp/>below<sp/>will<sp/>create<sp/>a<sp/>body<sp/>of<sp/>text<sp/>that<sp/>will<sp/>sit<sp/>asymmetrically<sp/>on<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;center&quot;<sp/>that<sp/>we<sp/>align<sp/>the<sp/>text<sp/>to<sp/>will<sp/>be<sp/>the<sp/>middle<sp/>of<sp/>the<sp/>body<sp/>of<sp/>text,<sp/>not<sp/>the<sp/>middle<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>paragraphFormat<sp/>=<sp/>builder-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_LeftIndent(100);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_RightIndent(50);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_SpaceAfter(25);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>demonstrates<sp/>how<sp/>left<sp/>and<sp/>right<sp/>indentation<sp/>affects<sp/>word<sp/>wrapping.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;The<sp/>space<sp/>between<sp/>the<sp/>above<sp/>paragraph<sp/>and<sp/>this<sp/>one<sp/>depends<sp/>on<sp/>the<sp/>DocumentBuilder&apos;s<sp/>paragraph<sp/>format.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetParagraphFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="736" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a9a1ba3bb0b0b5ef6db672933ea9119c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_shading" kindref="compound">Aspose::Words::Shading</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Shading &gt; Aspose::Words::ParagraphFormat::get_Shading</definition>
        <argsstring>()</argsstring>
        <name>get_Shading</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_Shading</qualifiedname>
        <briefdescription>
<para>Returns a <ref refid="class_aspose_1_1_words_1_1_shading" kindref="compound">Shading</ref> object that refers to the shading formatting for the paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to decorate text with borders and shading. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;BorderCollection&gt;<sp/>borders<sp/>=<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Borders();</highlight></codeline>
<codeline><highlight class="normal">borders-&gt;set_DistanceFromText(20);</highlight></codeline>
<codeline><highlight class="normal">borders-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a4d30a833e0d716f386fa8d31c3b70c54a945d5e233cf7d6240f6b783b36a374ff" kindref="member" tooltip="Specifies the left border of a paragraph or a table cell.">BorderType::Left</ref>)-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dad909d38d705ce75386dd86e611a82f5b" kindref="member">LineStyle::Double</ref>);</highlight></codeline>
<codeline><highlight class="normal">borders-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a4d30a833e0d716f386fa8d31c3b70c54a92b09c7c48c520c3c55e497875da437c" kindref="member" tooltip="Specifies the right border of a paragraph or a table cell.">BorderType::Right</ref>)-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dad909d38d705ce75386dd86e611a82f5b" kindref="member">LineStyle::Double</ref>);</highlight></codeline>
<codeline><highlight class="normal">borders-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a4d30a833e0d716f386fa8d31c3b70c54aa4ffdcf0dc1f31b9acaf295d75b51d00" kindref="member" tooltip="Specifies the top border of a paragraph or a table cell.">BorderType::Top</ref>)-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dad909d38d705ce75386dd86e611a82f5b" kindref="member">LineStyle::Double</ref>);</highlight></codeline>
<codeline><highlight class="normal">borders-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1a4d30a833e0d716f386fa8d31c3b70c54a2ad9d63b69c4a10a5cc9cad923133bc4" kindref="member" tooltip="Specifies the bottom border of a paragraph or a table cell.">BorderType::Bottom</ref>)-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dad909d38d705ce75386dd86e611a82f5b" kindref="member">LineStyle::Double</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shading&gt;<sp/>shading<sp/>=<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Shading();</highlight></codeline>
<codeline><highlight class="normal">shading-&gt;set_Texture(<ref refid="namespace_aspose_1_1_words_1af4457ef004db1cfbdfafbaea990d3674a1827a4bf8c6aa5527c075110473e2b05" kindref="member">TextureIndex::TextureDiagonalCross</ref>);</highlight></codeline>
<codeline><highlight class="normal">shading-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1ac05f5d8b24e1d3b83e2550e61b1eb3f7" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightCoral</ref>());</highlight></codeline>
<codeline><highlight class="normal">shading-&gt;set_ForegroundPatternColor(<ref refid="class/system.drawing.color/_1a3b99013db35f14f1ede42c93a2543596" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightSalmon</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>is<sp/>formatted<sp/>with<sp/>a<sp/>double<sp/>border<sp/>and<sp/>shading.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.ApplyBordersAndShading.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1549" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1ae8e8f34b392489acd69c4621dd66f488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_SnapToGrid</definition>
        <argsstring>()</argsstring>
        <name>get_SnapToGrid</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_SnapToGrid</qualifiedname>
        <briefdescription>
<para>Specifies whether the current paragraph should use the document grid lines per page settings when laying out the contents in the paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to specify a limit for the number of lines that each page may have. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable<sp/>pitching,<sp/>and<sp/>then<sp/>use<sp/>it<sp/>to<sp/>set<sp/>the<sp/>number<sp/>of<sp/>lines<sp/>per<sp/>page<sp/>in<sp/>this<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>large<sp/>enough<sp/>font<sp/>size<sp/>will<sp/>push<sp/>some<sp/>lines<sp/>down<sp/>onto<sp/>the<sp/>next<sp/>page<sp/>to<sp/>avoid<sp/>overlapping<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_LayoutMode(<ref refid="namespace_aspose_1_1_words_1ab38332864790c08d71e2f62e179e62d2a3ab60c9d25b02f3e66dddee7195cb53d" kindref="member" tooltip="Specifies that the corresponding section shall have additional line pitch added to each line within i...">SectionLayoutMode::LineGrid</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_LinesPerPage(15);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SnapToGrid(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>30;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;PageSetup.LinesPerPage.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1735" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1ae42672d03f13fe772b8b0486d5a60551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_SpaceAfter</definition>
        <argsstring>()</argsstring>
        <name>get_SpaceAfter</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_SpaceAfter</qualifiedname>
        <briefdescription>
<para>Gets or sets the amount of spacing (in points) after the paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para>Has no effect when <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1adcc53c5cdb1883aa9df3d90ca0a4a7bb" kindref="member">SpaceAfterAuto</ref> is true.</para>
<para>Valid values ​​range from 0 to 1584 inclusive.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>System::ArgumentOutOfRangeException</parametername>
</parameternamelist>
<parameterdescription>
<para>Throws when argument was out of the range of valid values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set automatic paragraph spacing. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>large<sp/>amount<sp/>of<sp/>spacing<sp/>before<sp/>and<sp/>after<sp/>paragraphs<sp/>that<sp/>this<sp/>builder<sp/>will<sp/>create.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBefore(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfter(24);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>these<sp/>flags<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>apply<sp/>automatic<sp/>spacing,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>effectively<sp/>ignoring<sp/>the<sp/>spacing<sp/>in<sp/>the<sp/>properties<sp/>we<sp/>set<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Leave<sp/>them<sp/>as<sp/>&quot;false&quot;<sp/>will<sp/>apply<sp/>our<sp/>custom<sp/>paragraph<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfterAuto(autoSpacing);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBeforeAuto(autoSpacing);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>two<sp/>paragraphs<sp/>that<sp/>will<sp/>have<sp/>spacing<sp/>above<sp/>and<sp/>below<sp/>them<sp/>and<sp/>save<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.ParagraphSpacingAuto.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to apply no spacing between paragraphs with the same style. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>large<sp/>amount<sp/>of<sp/>spacing<sp/>before<sp/>and<sp/>after<sp/>paragraphs<sp/>that<sp/>this<sp/>builder<sp/>will<sp/>create.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBefore(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfter(24);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;NoSpaceBetweenParagraphsOfSameStyle&quot;<sp/>flag<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>apply</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>spacing<sp/>between<sp/>paragraphs<sp/>with<sp/>the<sp/>same<sp/>style,<sp/>which<sp/>will<sp/>group<sp/>similar<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Leave<sp/>the<sp/>&quot;NoSpaceBetweenParagraphsOfSameStyle&quot;<sp/>flag<sp/>as<sp/>&quot;false&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>evenly<sp/>apply<sp/>spacing<sp/>to<sp/>every<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_NoSpaceBetweenParagraphsOfSameStyle(noSpaceBetweenParagraphsOfSameStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Quote&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.ParagraphSpacingSameStyle.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1158" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1adcc53c5cdb1883aa9df3d90ca0a4a7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_SpaceAfterAuto</definition>
        <argsstring>()</argsstring>
        <name>get_SpaceAfterAuto</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_SpaceAfterAuto</qualifiedname>
        <briefdescription>
<para>True if the amount of spacing after the paragraph is set automatically. </para>
        </briefdescription>
        <detaileddescription>
<para>When set to true, overrides the effect of <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1ae42672d03f13fe772b8b0486d5a60551" kindref="member">SpaceAfter</ref>.</para>
<para>When you set paragraph Space Before and Space After to Auto, <ref refid="namespace/microsoft/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">Microsoft</ref> Word adds 14 points spacing between paragraphs automatically according to the following rules:</para>
<para><itemizedlist>
<listitem><para>Normally, spacing is added after all paragraphs.</para>
</listitem><listitem><para>In a bulleted or numbered list, spacing is added only after the last item in the list. Spacing is not added between the list items.</para>
</listitem><listitem><para>In a nested bulleted or numbered list spacing is not added.</para>
</listitem><listitem><para>Spacing is normally added after a table.</para>
</listitem><listitem><para>Spacing is not added after a table if it is the last block in a table cell.</para>
</listitem><listitem><para>Spacing is not added after the last paragraph in a table cell.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set automatic paragraph spacing. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>large<sp/>amount<sp/>of<sp/>spacing<sp/>before<sp/>and<sp/>after<sp/>paragraphs<sp/>that<sp/>this<sp/>builder<sp/>will<sp/>create.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBefore(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfter(24);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>these<sp/>flags<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>apply<sp/>automatic<sp/>spacing,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>effectively<sp/>ignoring<sp/>the<sp/>spacing<sp/>in<sp/>the<sp/>properties<sp/>we<sp/>set<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Leave<sp/>them<sp/>as<sp/>&quot;false&quot;<sp/>will<sp/>apply<sp/>our<sp/>custom<sp/>paragraph<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfterAuto(autoSpacing);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBeforeAuto(autoSpacing);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>two<sp/>paragraphs<sp/>that<sp/>will<sp/>have<sp/>spacing<sp/>above<sp/>and<sp/>below<sp/>them<sp/>and<sp/>save<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.ParagraphSpacingAuto.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="972" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a0412ade4aeafb231e16ce539b1fa3ec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::ParagraphFormat::get_SpaceBefore</definition>
        <argsstring>()</argsstring>
        <name>get_SpaceBefore</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_SpaceBefore</qualifiedname>
        <briefdescription>
<para>Gets or sets the amount of spacing (in points) before the paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para>Has no effect when <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1af3f03529622b1e38de399b44349256ee" kindref="member">SpaceBeforeAuto</ref> is true.</para>
<para>Valid values range from 0 to 1584 inclusive.</para>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>System::ArgumentOutOfRangeException</parametername>
</parameternamelist>
<parameterdescription>
<para>Throws when argument was out of the range of valid values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set automatic paragraph spacing. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>large<sp/>amount<sp/>of<sp/>spacing<sp/>before<sp/>and<sp/>after<sp/>paragraphs<sp/>that<sp/>this<sp/>builder<sp/>will<sp/>create.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBefore(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfter(24);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>these<sp/>flags<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>apply<sp/>automatic<sp/>spacing,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>effectively<sp/>ignoring<sp/>the<sp/>spacing<sp/>in<sp/>the<sp/>properties<sp/>we<sp/>set<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Leave<sp/>them<sp/>as<sp/>&quot;false&quot;<sp/>will<sp/>apply<sp/>our<sp/>custom<sp/>paragraph<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfterAuto(autoSpacing);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBeforeAuto(autoSpacing);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>two<sp/>paragraphs<sp/>that<sp/>will<sp/>have<sp/>spacing<sp/>above<sp/>and<sp/>below<sp/>them<sp/>and<sp/>save<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.ParagraphSpacingAuto.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to apply no spacing between paragraphs with the same style. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>large<sp/>amount<sp/>of<sp/>spacing<sp/>before<sp/>and<sp/>after<sp/>paragraphs<sp/>that<sp/>this<sp/>builder<sp/>will<sp/>create.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBefore(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfter(24);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;NoSpaceBetweenParagraphsOfSameStyle&quot;<sp/>flag<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>apply</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>spacing<sp/>between<sp/>paragraphs<sp/>with<sp/>the<sp/>same<sp/>style,<sp/>which<sp/>will<sp/>group<sp/>similar<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Leave<sp/>the<sp/>&quot;NoSpaceBetweenParagraphsOfSameStyle&quot;<sp/>flag<sp/>as<sp/>&quot;false&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>evenly<sp/>apply<sp/>spacing<sp/>to<sp/>every<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_NoSpaceBetweenParagraphsOfSameStyle(noSpaceBetweenParagraphsOfSameStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Quote&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>in<sp/>the<sp/>\&quot;{0}\&quot;<sp/>style.&quot;</highlight><highlight class="normal">,<sp/>builder-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.ParagraphSpacingSameStyle.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1037" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1af3f03529622b1e38de399b44349256ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_SpaceBeforeAuto</definition>
        <argsstring>()</argsstring>
        <name>get_SpaceBeforeAuto</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_SpaceBeforeAuto</qualifiedname>
        <briefdescription>
<para>True if the amount of spacing before the paragraph is set automatically. </para>
        </briefdescription>
        <detaileddescription>
<para>When set to true, overrides the effect of <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a0412ade4aeafb231e16ce539b1fa3ec1" kindref="member">SpaceBefore</ref>.</para>
<para>When you set paragraph Space Before and Space After to Auto, <ref refid="namespace/microsoft/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">Microsoft</ref> Word adds 14 points spacing between paragraphs automatically according to the following rules:</para>
<para><itemizedlist>
<listitem><para>Normally, spacing is added after all paragraphs.</para>
</listitem><listitem><para>In a bulleted or numbered list, spacing is added only after the last item in the list. Spacing is not added between the list items.</para>
</listitem><listitem><para>In a nested bulleted or numbered list spacing is not added.</para>
</listitem><listitem><para>Spacing is normally added after a table.</para>
</listitem><listitem><para>Spacing is not added after a table if it is the last block in a table cell.</para>
</listitem><listitem><para>Spacing is not added after the last paragraph in a table cell.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set automatic paragraph spacing. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>large<sp/>amount<sp/>of<sp/>spacing<sp/>before<sp/>and<sp/>after<sp/>paragraphs<sp/>that<sp/>this<sp/>builder<sp/>will<sp/>create.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBefore(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfter(24);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>these<sp/>flags<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>apply<sp/>automatic<sp/>spacing,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>effectively<sp/>ignoring<sp/>the<sp/>spacing<sp/>in<sp/>the<sp/>properties<sp/>we<sp/>set<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Leave<sp/>them<sp/>as<sp/>&quot;false&quot;<sp/>will<sp/>apply<sp/>our<sp/>custom<sp/>paragraph<sp/>spacing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceAfterAuto(autoSpacing);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_SpaceBeforeAuto(autoSpacing);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>two<sp/>paragraphs<sp/>that<sp/>will<sp/>have<sp/>spacing<sp/>above<sp/>and<sp/>below<sp/>them<sp/>and<sp/>save<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.ParagraphSpacingAuto.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="928" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1aed6d25e2929027092a4cd7141d2787c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_style" kindref="compound">Aspose::Words::Style</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Style &gt; Aspose::Words::ParagraphFormat::get_Style</definition>
        <argsstring>()</argsstring>
        <name>get_Style</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_Style</qualifiedname>
        <briefdescription>
<para>Gets or sets the paragraph style applied to this formatting. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create and use a paragraph style with list formatting. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>paragraph<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>style<sp/>=<sp/>doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyStyle1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Size(24);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Verdana&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_ParagraphFormat()-&gt;set_SpaceAfter(12);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>list<sp/>and<sp/>make<sp/>sure<sp/>the<sp/>paragraphs<sp/>that<sp/>use<sp/>this<sp/>style<sp/>will<sp/>use<sp/>this<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_ListFormat()-&gt;set_List(doc-&gt;get_Lists()-&gt;Add(ListTemplate::BulletDefault));</highlight></codeline>
<codeline><highlight class="normal">style-&gt;get_ListFormat()-&gt;set_ListLevelNumber(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>paragraph<sp/>style<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>current<sp/>paragraph,<sp/>and<sp/>then<sp/>add<sp/>some<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(style);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World:<sp/>MyStyle1,<sp/>bulleted<sp/>list.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Change<sp/>the<sp/>document<sp/>builder&apos;s<sp/>style<sp/>to<sp/>one<sp/>that<sp/>has<sp/>no<sp/>list<sp/>formatting<sp/>and<sp/>write<sp/>another<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Style(doc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;Normal&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World:<sp/>Normal.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Styles.ParagraphStyleBulletedList.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1600" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a0b7afb2e3856f7e17a3715486fa3b52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34" kindref="member">Aspose::Words::StyleIdentifier</ref></type>
        <definition>Aspose::Words::StyleIdentifier Aspose::Words::ParagraphFormat::get_StyleIdentifier</definition>
        <argsstring>()</argsstring>
        <name>get_StyleIdentifier</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_StyleIdentifier</qualifiedname>
        <briefdescription>
<para>Gets or sets the locale independent style identifier of the paragraph style applied to this formatting. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a Table of contents (TOC) into a document using heading styles as entries. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>table<sp/>of<sp/>contents<sp/>for<sp/>the<sp/>first<sp/>page<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>table<sp/>to<sp/>pick<sp/>up<sp/>paragraphs<sp/>with<sp/>headings<sp/>of<sp/>levels<sp/>1<sp/>to<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>set<sp/>its<sp/>entries<sp/>to<sp/>be<sp/>hyperlinks<sp/>that<sp/>will<sp/>take<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>location<sp/>of<sp/>the<sp/>heading<sp/>when<sp/>left-clicked<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTableOfContents(u</highlight><highlight class="stringliteral">&quot;\\o<sp/>\&quot;1-3\&quot;<sp/>\\h<sp/>\\z<sp/>\\u&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Populate<sp/>the<sp/>table<sp/>of<sp/>contents<sp/>by<sp/>adding<sp/>paragraphs<sp/>with<sp/>heading<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>such<sp/>heading<sp/>with<sp/>a<sp/>level<sp/>between<sp/>1<sp/>and<sp/>3<sp/>will<sp/>create<sp/>an<sp/>entry<sp/>in<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a5c20c643b1731618a5eddb7660b10a3e" kindref="member" tooltip="The Heading 3 style.">StyleIdentifier::Heading3</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a1418e44fe2e519f30b903c1fbf263097" kindref="member" tooltip="The Heading 4 style.">StyleIdentifier::Heading4</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>table<sp/>of<sp/>contents<sp/>is<sp/>a<sp/>field<sp/>of<sp/>a<sp/>type<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>updated<sp/>to<sp/>show<sp/>an<sp/>up-to-date<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertToc.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1706" column="39"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a8740709b13b9dd0608df1dbbb3e41ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::ParagraphFormat::get_StyleName</definition>
        <argsstring>()</argsstring>
        <name>get_StyleName</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_StyleName</qualifiedname>
        <briefdescription>
<para>Gets or sets the name of the paragraph style applied to this formatting. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to construct an Aspose.Words document by hand. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>blank<sp/>document<sp/>contains<sp/>one<sp/>section,<sp/>one<sp/>body<sp/>and<sp/>one<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>&quot;RemoveAllChildren&quot;<sp/>method<sp/>to<sp/>remove<sp/>all<sp/>those<sp/>nodes,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>end<sp/>up<sp/>with<sp/>a<sp/>document<sp/>node<sp/>with<sp/>no<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>document<sp/>now<sp/>has<sp/>no<sp/>composite<sp/>child<sp/>nodes<sp/>that<sp/>we<sp/>can<sp/>add<sp/>content<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>it,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>repopulate<sp/>its<sp/>node<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>First,<sp/>create<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>root<sp/>document<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>section<sp/>=<sp/>MakeObject&lt;Section&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(section);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>some<sp/>page<sp/>setup<sp/>properties<sp/>for<sp/>the<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">section-&gt;get_PageSetup()-&gt;set_SectionStart(<ref refid="namespace_aspose_1_1_words_1a0caffb600fa144ea6826390ec3dc9a47a30c38ed106d7d71b9a1ce0534ea1befd" kindref="member" tooltip="The section starts from a new page.">SectionStart::NewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">section-&gt;get_PageSetup()-&gt;set_PaperSize(<ref refid="namespace_aspose_1_1_words_1a1a2f6b44133c9bd897dabca36c39ba25a17a53d1a012580ef609b70ef6a25d1f1" kindref="member" tooltip="8.5 x 11 inches.">PaperSize::Letter</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>section<sp/>needs<sp/>a<sp/>body,<sp/>which<sp/>will<sp/>contain<sp/>and<sp/>display<sp/>all<sp/>its<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>page<sp/>between<sp/>the<sp/>section&apos;s<sp/>header<sp/>and<sp/>footer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>body<sp/>=<sp/>MakeObject&lt;Body&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">section-&gt;AppendChild(body);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>paragraph,<sp/>set<sp/>some<sp/>formatting<sp/>properties,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>MakeObject&lt;Paragraph&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">body-&gt;AppendChild(para);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finally,<sp/>add<sp/>some<sp/>content<sp/>to<sp/>do<sp/>the<sp/>document.<sp/>Create<sp/>a<sp/>run,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>its<sp/>appearance<sp/>and<sp/>contents,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Section.CreateManually.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1652" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a8ba1fa8c7cba9a9eb14a7953196073de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_SuppressAutoHyphens</definition>
        <argsstring>()</argsstring>
        <name>get_SuppressAutoHyphens</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_SuppressAutoHyphens</qualifiedname>
        <briefdescription>
<para>Specifies whether the current paragraph should be exempted from any hyphenation which is applied in the document settings. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to suppress hyphenation for a paragraph. <programlisting><codeline><highlight class="normal"><ref refid="class_aspose_1_1_words_1_1_hyphenation_1aa872f107aa67a1dd4a04a9f9cfff018b" kindref="member" tooltip="Registers and loads a hyphenation dictionary for the specified language from a stream....">Hyphenation::RegisterDictionary</ref>(u</highlight><highlight class="stringliteral">&quot;de-CH&quot;</highlight><highlight class="normal">,<sp/>MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;hyph_de_CH.dic&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(<ref refid="class_aspose_1_1_words_1_1_hyphenation_1a2af584231dc9d8201e81569752679c97" kindref="member" tooltip="Returns False if for the specified language there is no dictionary registered or if registered is Nul...">Hyphenation::IsDictionaryRegistered</ref>(u</highlight><highlight class="stringliteral">&quot;de-CH&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>containing<sp/>text<sp/>with<sp/>a<sp/>locale<sp/>matching<sp/>that<sp/>of<sp/>our<sp/>dictionary.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>save<sp/>this<sp/>document<sp/>to<sp/>a<sp/>fixed<sp/>page<sp/>save<sp/>format,<sp/>its<sp/>text<sp/>will<sp/>have<sp/>hyphenation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;German<sp/>text.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>set<sp/>the<sp/>&quot;SuppressAutoHyphens&quot;<sp/>property<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>disable<sp/>hyphenation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>specific<sp/>paragraph<sp/>while<sp/>keeping<sp/>it<sp/>enabled<sp/>for<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>value<sp/>for<sp/>this<sp/>property<sp/>is<sp/>&quot;false&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>means<sp/>every<sp/>paragraph<sp/>by<sp/>default<sp/>uses<sp/>hyphenation<sp/>if<sp/>any<sp/>is<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat()-&gt;set_SuppressAutoHyphens(suppressAutoHyphens);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.SuppressHyphens.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="398" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1acc180a6b14f9609837852735c2a01521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_SuppressLineNumbers</definition>
        <argsstring>()</argsstring>
        <name>get_SuppressLineNumbers</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_SuppressLineNumbers</qualifiedname>
        <briefdescription>
<para>Specifies whether the current paragraph&apos;s lines should be exempted from line numbering which is applied in the parent section. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to enable line numbering for a section. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>the<sp/>section&apos;s<sp/>PageSetup<sp/>object<sp/>to<sp/>display<sp/>numbers<sp/>to<sp/>the<sp/>left<sp/>of<sp/>the<sp/>section&apos;s<sp/>text<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>same<sp/>behavior<sp/>as<sp/>a<sp/>List<sp/>object,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>it<sp/>covers<sp/>the<sp/>entire<sp/>section<sp/>and<sp/>does<sp/>not<sp/>modify<sp/>the<sp/>text<sp/>in<sp/>any<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>section<sp/>will<sp/>restart<sp/>the<sp/>numbering<sp/>on<sp/>each<sp/>new<sp/>page<sp/>from<sp/>1<sp/>and<sp/>display<sp/>the<sp/>number,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>is<sp/>a<sp/>multiple<sp/>of<sp/>3,<sp/>at<sp/>50pt<sp/>to<sp/>the<sp/>left<sp/>of<sp/>the<sp/>line.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;PageSetup&gt;<sp/>pageSetup<sp/>=<sp/>builder-&gt;get_PageSetup();</highlight></codeline>
<codeline><highlight class="normal">pageSetup-&gt;set_LineStartingNumber(1);</highlight></codeline>
<codeline><highlight class="normal">pageSetup-&gt;set_LineNumberCountBy(3);</highlight></codeline>
<codeline><highlight class="normal">pageSetup-&gt;set_LineNumberRestartMode(<ref refid="namespace_aspose_1_1_words_1a097428d5bfe5f30b74dc394f443f6e21a1b7e1e0aee1194295ba21c1f88e06c58" kindref="member" tooltip="Line numbering restarts at the start of every page.">LineNumberRestartMode::RestartPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">pageSetup-&gt;set_LineNumberDistanceFromText(50.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>25;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Writeln(String::Format(u</highlight><highlight class="stringliteral">&quot;Line<sp/>{0}.&quot;</highlight><highlight class="normal">,<sp/>i));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>counter<sp/>will<sp/>skip<sp/>any<sp/>paragraph<sp/>with<sp/>the<sp/>&quot;SuppressLineNumbers&quot;<sp/>flag<sp/>set<sp/>to<sp/>&quot;true&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>paragraph<sp/>is<sp/>on<sp/>the<sp/>15th<sp/>line,<sp/>which<sp/>is<sp/>a<sp/>multiple<sp/>of<sp/>3,<sp/>and<sp/>thus<sp/>would<sp/>normally<sp/>display<sp/>a<sp/>line<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>section&apos;s<sp/>line<sp/>counter<sp/>will<sp/>also<sp/>ignore<sp/>this<sp/>line,<sp/>treat<sp/>the<sp/>next<sp/>line<sp/>as<sp/>the<sp/>15th,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>continue<sp/>the<sp/>count<sp/>from<sp/>that<sp/>point<sp/>onward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(14)-&gt;get_ParagraphFormat()-&gt;set_SuppressLineNumbers(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;PageSetup.LineNumbers.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="370" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a20a46656e580b347f5c397f1baa577fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tab_stop_collection" kindref="compound">Aspose::Words::TabStopCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::TabStopCollection &gt; Aspose::Words::ParagraphFormat::get_TabStops</definition>
        <argsstring>()</argsstring>
        <name>get_TabStops</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_TabStops</qualifiedname>
        <briefdescription>
<para>Gets the collection of custom tab stops defined for this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to modify the position of the right tab stop in TOC related paragraphs. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table<sp/>of<sp/>contents.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>through<sp/>all<sp/>paragraphs<sp/>with<sp/>TOC<sp/>result-based<sp/>styles;<sp/>this<sp/>is<sp/>any<sp/>style<sp/>between<sp/>TOC<sp/>and<sp/>TOC9.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>para<sp/>:<sp/>System::IterateOver(doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_OfType&lt;SharedPtr&lt;Paragraph&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(para-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_StyleIdentifier()<sp/>&gt;=<sp/><ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a20c0f0b05465f571395bbcdf082d0cda" kindref="member">StyleIdentifier::Toc1</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>para-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_StyleIdentifier()<sp/>&lt;=<sp/><ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34ae8da749f30b38cb3ce02e34dcf390ef4" kindref="member">StyleIdentifier::Toc9</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>first<sp/>tab<sp/>used<sp/>in<sp/>this<sp/>paragraph,<sp/>this<sp/>should<sp/>be<sp/>the<sp/>tab<sp/>used<sp/>to<sp/>align<sp/>the<sp/>page<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;TabStop&gt;<sp/>tab<sp/>=<sp/>para-&gt;get_ParagraphFormat()-&gt;get_TabStops()-&gt;idx_get(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>the<sp/>first<sp/>default<sp/>tab,<sp/>stop<sp/>with<sp/>a<sp/>custom<sp/>tab<sp/>stop.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>para-&gt;get_ParagraphFormat()-&gt;get_TabStops()-&gt;RemoveByPosition(tab-&gt;get_Position());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>para-&gt;get_ParagraphFormat()-&gt;get_TabStops()-&gt;Add(tab-&gt;get_Position()<sp/>-<sp/>50,<sp/>tab-&gt;get_Alignment(),<sp/>tab-&gt;get_Leader());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Styles.ChangeTocsTabStops.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1765" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1acc523c7d2b630c72ef463f4fed84e7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_WidowControl</definition>
        <argsstring>()</argsstring>
        <name>get_WidowControl</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_WidowControl</qualifiedname>
        <briefdescription>
<para>True if the first and last lines in the paragraph are to remain on the same page as the rest of the paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to enable widow/orphan control for a paragraph. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>write<sp/>the<sp/>text<sp/>that<sp/>does<sp/>not<sp/>fit<sp/>onto<sp/>one<sp/>page,<sp/>one<sp/>line<sp/>may<sp/>spill<sp/>over<sp/>onto<sp/>the<sp/>next<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>single<sp/>line<sp/>that<sp/>ends<sp/>up<sp/>on<sp/>the<sp/>next<sp/>page<sp/>is<sp/>called<sp/>an<sp/>&quot;Orphan&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>previous<sp/>line<sp/>where<sp/>the<sp/>orphan<sp/>broke<sp/>off<sp/>is<sp/>called<sp/>a<sp/>&quot;Widow&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>fix<sp/>orphans<sp/>and<sp/>widows<sp/>by<sp/>rearranging<sp/>text<sp/>via<sp/>font<sp/>size,<sp/>spacing,<sp/>or<sp/>page<sp/>margins.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>preserve<sp/>our<sp/>document&apos;s<sp/>dimensions,<sp/>we<sp/>can<sp/>set<sp/>this<sp/>flag<sp/>to<sp/>&quot;true&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>push<sp/>widows<sp/>onto<sp/>the<sp/>same<sp/>page<sp/>as<sp/>their<sp/>respective<sp/>orphans.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Leave<sp/>this<sp/>flag<sp/>as<sp/>&quot;false&quot;<sp/>will<sp/>leave<sp/>widow/orphan<sp/>pairs<sp/>in<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>paragraph<sp/>has<sp/>this<sp/>setting<sp/>accessible<sp/>in<sp/>Microsoft<sp/>Word<sp/>via<sp/>Home<sp/>-&gt;<sp/>Paragraph<sp/>-&gt;<sp/>Paragraph<sp/>Settings</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>(button<sp/>on<sp/>bottom<sp/>right<sp/>hand<sp/>corner<sp/>of<sp/>&quot;Paragraph&quot;<sp/>tab)<sp/>-&gt;<sp/>&quot;Widow/Orphan<sp/>control&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_WidowControl(widowControl);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>text<sp/>that<sp/>produces<sp/>an<sp/>orphan<sp/>and<sp/>a<sp/>widow.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(68);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.WidowControl.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="430" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1aa7a6533e85340e70eb0685be2115eaa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::ParagraphFormat::get_WordWrap</definition>
        <argsstring>()</argsstring>
        <name>get_WordWrap</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::get_WordWrap</qualifiedname>
        <briefdescription>
<para>If this property is <bold>false</bold>, Latin text in the middle of a word can be wrapped for the current paragraph. Otherwise Latin text is wrapped by whole words. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set special properties for Asian typography. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>format<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_FarEastLineBreakControl(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_WordWrap(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">format-&gt;set_HangingPunctuation(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;ParagraphFormat.AsianTypographyProperties.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="541" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a745869ea52d57b6b399de7fa6539370a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_AddSpaceBetweenFarEastAndAlpha</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_AddSpaceBetweenFarEastAndAlpha</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_AddSpaceBetweenFarEastAndAlpha</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a60373227caad35096f27dac59c6f00af" kindref="member">Aspose::Words::ParagraphFormat::get_AddSpaceBetweenFarEastAndAlpha</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="468" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1acdb6c10d0fbf0d43f834720d5f3cd357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_AddSpaceBetweenFarEastAndDigit</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_AddSpaceBetweenFarEastAndDigit</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_AddSpaceBetweenFarEastAndDigit</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1ad7d6cf939ec34ddb76a3faa20a6000bf" kindref="member">Aspose::Words::ParagraphFormat::get_AddSpaceBetweenFarEastAndDigit</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="503" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a3783174986cc59991915d4818b4297e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_Alignment</definition>
        <argsstring>(Aspose::Words::ParagraphAlignment value)</argsstring>
        <name>set_Alignment</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_Alignment</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007" kindref="member">Aspose::Words::ParagraphAlignment</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a9d38fe714632ddc9c3e03267ce1bee38" kindref="member">Aspose::Words::ParagraphFormat::get_Alignment</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="188" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a560ee33f012dc4c29b3154debfb5b16c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_Bidi</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Bidi</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_Bidi</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a17625384e6551e70641ec12ea0db7f47" kindref="member">Aspose::Words::ParagraphFormat::get_Bidi</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="627" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a7092464db9717ff8d2ea1c7181e947f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_CharacterUnitFirstLineIndent</definition>
        <argsstring>(double value)</argsstring>
        <name>set_CharacterUnitFirstLineIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_CharacterUnitFirstLineIndent</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a16e5672333b2892f3ef463058797da3b" kindref="member">Aspose::Words::ParagraphFormat::get_CharacterUnitFirstLineIndent</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="887" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a03149871a8d30e4593c72a5a03b0c7ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_CharacterUnitLeftIndent</definition>
        <argsstring>(double value)</argsstring>
        <name>set_CharacterUnitLeftIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_CharacterUnitLeftIndent</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a01f757c7241b145434188bd6ea3e33a9" kindref="member">Aspose::Words::ParagraphFormat::get_CharacterUnitLeftIndent</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="711" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a3b64131e8dbbb2658fe3b2431ef47777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_CharacterUnitRightIndent</definition>
        <argsstring>(double value)</argsstring>
        <name>set_CharacterUnitRightIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_CharacterUnitRightIndent</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1afc0b337ad1c87d12eb591f2314de8942" kindref="member">Aspose::Words::ParagraphFormat::get_CharacterUnitRightIndent</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="795" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1adf30473888deccc31942ab77dfd2d97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_DropCapPosition</definition>
        <argsstring>(Aspose::Words::DropCapPosition value)</argsstring>
        <name>set_DropCapPosition</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_DropCapPosition</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a1fb5e63f2bb476214873f9affc483a3e" kindref="member">Aspose::Words::DropCapPosition</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a1aaee376965edb12507a36aff53bdd8f" kindref="member">Aspose::Words::ParagraphFormat::get_DropCapPosition</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1523" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a23d70173a1292eab7ddc07d4e0b10338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_FarEastLineBreakControl</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_FarEastLineBreakControl</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_FarEastLineBreakControl</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a70ecd6a2a0ff5834302b06b58102c051" kindref="member">Aspose::Words::ParagraphFormat::get_FarEastLineBreakControl</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="523" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a0388514c7b052e5f80ad35c846845ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_FirstLineIndent</definition>
        <argsstring>(double value)</argsstring>
        <name>set_FirstLineIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_FirstLineIndent</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1aec073a72462170cd4bde4f3d160953fd" kindref="member">Aspose::Words::ParagraphFormat::get_FirstLineIndent</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="830" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a51be6716d9496e7d8f688663bda01241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_HangingPunctuation</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_HangingPunctuation</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_HangingPunctuation</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1aadfd70f3b0fad281fb4ed51d36678db0" kindref="member">Aspose::Words::ParagraphFormat::get_HangingPunctuation</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="564" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a350ba0027772b7c3654000928424abb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_KeepTogether</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_KeepTogether</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_KeepTogether</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1ae869ca72812baef90adbdae9fe7a4e1a" kindref="member">Aspose::Words::ParagraphFormat::get_KeepTogether</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="263" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1aa5070eccc39fa80ee63ea5104a6a399e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_KeepWithNext</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_KeepWithNext</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_KeepWithNext</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a5bfe3b3f263558e1c8139e3852a5c748" kindref="member">Aspose::Words::ParagraphFormat::get_KeepWithNext</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="294" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1ae9122fb53cd78d37ed88c7b8c7eb7712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_LeftIndent</definition>
        <argsstring>(double value)</argsstring>
        <name>set_LeftIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_LeftIndent</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a62e1545970db3e60abf093c3d2dd9664" kindref="member">Aspose::Words::ParagraphFormat::get_LeftIndent</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="655" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1aa0302b224fd5ac1c00503c5d904cc276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_LineSpacing</definition>
        <argsstring>(double value)</argsstring>
        <name>set_LineSpacing</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_LineSpacing</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a590627eb1cf3a63a2c2a14a6b545b6f9" kindref="member">Aspose::Words::ParagraphFormat::get_LineSpacing</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1309" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a8bffaa79a496f8c2a3f8366de62ee1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_LineSpacingRule</definition>
        <argsstring>(Aspose::Words::LineSpacingRule value)</argsstring>
        <name>set_LineSpacingRule</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_LineSpacingRule</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a77a417cd2b0944eef9293891732957f1" kindref="member">Aspose::Words::LineSpacingRule</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a30b6b0cf63fe16e0e6a4c200269f1383" kindref="member">Aspose::Words::ParagraphFormat::get_LineSpacingRule</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1260" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a59e4f2236dbef1b78d58dd5b819f26bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_LinesToDrop</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>set_LinesToDrop</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_LinesToDrop</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a7c0c3d11e00bff022283fad03091a7a9" kindref="member">Aspose::Words::ParagraphFormat::get_LinesToDrop</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1467" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1af256ecabaf77c5e2fa9c924184706b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_LineUnitAfter</definition>
        <argsstring>(double value)</argsstring>
        <name>set_LineUnitAfter</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_LineUnitAfter</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a04378f0f03fcfc10779fd25bbaaca403" kindref="member">Aspose::Words::ParagraphFormat::get_LineUnitAfter</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1217" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a1cb2ac709fc89dc8d3ae64f0e8a2b806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_LineUnitBefore</definition>
        <argsstring>(double value)</argsstring>
        <name>set_LineUnitBefore</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_LineUnitBefore</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1ac12abe2ab9aefaae497197c90a96d72d" kindref="member">Aspose::Words::ParagraphFormat::get_LineUnitBefore</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1096" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a5e6b9eae9c00b9a73ac44136c9060585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_NoSpaceBetweenParagraphsOfSameStyle</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_NoSpaceBetweenParagraphsOfSameStyle</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_NoSpaceBetweenParagraphsOfSameStyle</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1abef53f240e23dd617e0abd92b9ee19b9" kindref="member">Aspose::Words::ParagraphFormat::get_NoSpaceBetweenParagraphsOfSameStyle</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="229" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1af786e6709cfaad9ab313c40abcbd263f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_OutlineLevel</definition>
        <argsstring>(Aspose::Words::OutlineLevel value)</argsstring>
        <name>set_OutlineLevel</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_OutlineLevel</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a41d77549c4a2b5daae27afce91068a35" kindref="member">Aspose::Words::OutlineLevel</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a1273687ec8327eb2a6e114a5d186813e" kindref="member">Aspose::Words::ParagraphFormat::get_OutlineLevel</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1440" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1ade658199d40da52b0eca236af5bcebd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_PageBreakBefore</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_PageBreakBefore</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_PageBreakBefore</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a00f94058873001f3af4c473441fe1815" kindref="member">Aspose::Words::ParagraphFormat::get_PageBreakBefore</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="334" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a2b6173379a2973932c3fbc0f6016edb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_RightIndent</definition>
        <argsstring>(double value)</argsstring>
        <name>set_RightIndent</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_RightIndent</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a2749ebd66ecc60cef6f69b68645c9a0f" kindref="member">Aspose::Words::ParagraphFormat::get_RightIndent</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="739" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1aa3b6d5ce1f05e4a10816bf50cd46dcc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_SnapToGrid</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_SnapToGrid</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_SnapToGrid</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1ae8e8f34b392489acd69c4621dd66f488" kindref="member">Aspose::Words::ParagraphFormat::get_SnapToGrid</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1738" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a45fec4cad26bee21d7897e196d366532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_SpaceAfter</definition>
        <argsstring>(double value)</argsstring>
        <name>set_SpaceAfter</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_SpaceAfter</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1ae42672d03f13fe772b8b0486d5a60551" kindref="member">Aspose::Words::ParagraphFormat::get_SpaceAfter</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1161" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a73e66fa50101162dbd2ecb6b24b2b563" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_SpaceAfterAuto</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_SpaceAfterAuto</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_SpaceAfterAuto</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1adcc53c5cdb1883aa9df3d90ca0a4a7bb" kindref="member">Aspose::Words::ParagraphFormat::get_SpaceAfterAuto</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="975" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1afac58cbdf2ccda7c5a2af052915c6e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_SpaceBefore</definition>
        <argsstring>(double value)</argsstring>
        <name>set_SpaceBefore</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_SpaceBefore</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a0412ade4aeafb231e16ce539b1fa3ec1" kindref="member">Aspose::Words::ParagraphFormat::get_SpaceBefore</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1040" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a2591a5469d324adf742b52aea8edde9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_SpaceBeforeAuto</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_SpaceBeforeAuto</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_SpaceBeforeAuto</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1af3f03529622b1e38de399b44349256ee" kindref="member">Aspose::Words::ParagraphFormat::get_SpaceBeforeAuto</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="931" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a0fb5db0524fed004f422d0c7ce12dc43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_Style</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Style &gt; &amp;value)</argsstring>
        <name>set_Style</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_Style</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_style" kindref="compound">Aspose::Words::Style</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1aed6d25e2929027092a4cd7141d2787c5" kindref="member">Aspose::Words::ParagraphFormat::get_Style</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1603" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a138190af732508b3fbc3eca02e14ffb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_StyleIdentifier</definition>
        <argsstring>(Aspose::Words::StyleIdentifier value)</argsstring>
        <name>set_StyleIdentifier</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_StyleIdentifier</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34" kindref="member">Aspose::Words::StyleIdentifier</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a0b7afb2e3856f7e17a3715486fa3b52b" kindref="member">Aspose::Words::ParagraphFormat::get_StyleIdentifier</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1709" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a78aa2fcab020569495792595e8f68154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_StyleName</definition>
        <argsstring>(const System::String &amp;value)</argsstring>
        <name>set_StyleName</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_StyleName</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a8740709b13b9dd0608df1dbbb3e41ae6" kindref="member">Aspose::Words::ParagraphFormat::get_StyleName</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="1655" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1ae64de7a9a36aa7d0e064c8ce58b46460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_SuppressAutoHyphens</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_SuppressAutoHyphens</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_SuppressAutoHyphens</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1a8ba1fa8c7cba9a9eb14a7953196073de" kindref="member">Aspose::Words::ParagraphFormat::get_SuppressAutoHyphens</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="401" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1aed278ca120aedaa51551d925e61f6416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_SuppressLineNumbers</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_SuppressLineNumbers</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_SuppressLineNumbers</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1acc180a6b14f9609837852735c2a01521" kindref="member">Aspose::Words::ParagraphFormat::get_SuppressLineNumbers</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="373" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1a2f59045a6151fba5a26e59bd8437f97e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_WidowControl</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_WidowControl</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_WidowControl</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1acc523c7d2b630c72ef463f4fed84e7be" kindref="member">Aspose::Words::ParagraphFormat::get_WidowControl</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="433" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_paragraph_format_1ab04a7a54eb0fbd5b2d39024f05117749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ParagraphFormat::set_WordWrap</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_WordWrap</name>
        <qualifiedname>Aspose::Words::ParagraphFormat::set_WordWrap</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_paragraph_format_1aa7a6533e85340e70eb0685be2115eaa0" kindref="member">Aspose::Words::ParagraphFormat::get_WordWrap</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="544" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents all the formatting for a paragraph. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to construct an Aspose.Words document by hand. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>blank<sp/>document<sp/>contains<sp/>one<sp/>section,<sp/>one<sp/>body<sp/>and<sp/>one<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>&quot;RemoveAllChildren&quot;<sp/>method<sp/>to<sp/>remove<sp/>all<sp/>those<sp/>nodes,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>end<sp/>up<sp/>with<sp/>a<sp/>document<sp/>node<sp/>with<sp/>no<sp/>children.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>document<sp/>now<sp/>has<sp/>no<sp/>composite<sp/>child<sp/>nodes<sp/>that<sp/>we<sp/>can<sp/>add<sp/>content<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>it,<sp/>we<sp/>will<sp/>need<sp/>to<sp/>repopulate<sp/>its<sp/>node<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>First,<sp/>create<sp/>a<sp/>new<sp/>section,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>root<sp/>document<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>section<sp/>=<sp/>MakeObject&lt;Section&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;AppendChild(section);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>some<sp/>page<sp/>setup<sp/>properties<sp/>for<sp/>the<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">section-&gt;get_PageSetup()-&gt;set_SectionStart(<ref refid="namespace_aspose_1_1_words_1a0caffb600fa144ea6826390ec3dc9a47a30c38ed106d7d71b9a1ce0534ea1befd" kindref="member" tooltip="The section starts from a new page.">SectionStart::NewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">section-&gt;get_PageSetup()-&gt;set_PaperSize(<ref refid="namespace_aspose_1_1_words_1a1a2f6b44133c9bd897dabca36c39ba25a17a53d1a012580ef609b70ef6a25d1f1" kindref="member" tooltip="8.5 x 11 inches.">PaperSize::Letter</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>section<sp/>needs<sp/>a<sp/>body,<sp/>which<sp/>will<sp/>contain<sp/>and<sp/>display<sp/>all<sp/>its<sp/>contents</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>page<sp/>between<sp/>the<sp/>section&apos;s<sp/>header<sp/>and<sp/>footer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>body<sp/>=<sp/>MakeObject&lt;Body&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">section-&gt;AppendChild(body);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>paragraph,<sp/>set<sp/>some<sp/>formatting<sp/>properties,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>MakeObject&lt;Paragraph&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_StyleName(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">body-&gt;AppendChild(para);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Finally,<sp/>add<sp/>some<sp/>content<sp/>to<sp/>do<sp/>the<sp/>document.<sp/>Create<sp/>a<sp/>run,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>its<sp/>appearance<sp/>and<sp/>contents,<sp/>and<sp/>then<sp/>append<sp/>it<sp/>as<sp/>a<sp/>child<sp/>to<sp/>the<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Section.CreateManually.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Aspose::Words::IBorderAttrSource</label>
      </node>
      <node id="3">
        <label>Aspose::Words::IShadingAttrSource</label>
      </node>
      <node id="1">
        <label>Aspose::Words::ParagraphFormat</label>
        <link refid="class_aspose_1_1_words_1_1_paragraph_format"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Aspose::Words::IBorderAttrSource</label>
      </node>
      <node id="3">
        <label>Aspose::Words::IShadingAttrSource</label>
      </node>
      <node id="1">
        <label>Aspose::Words::ParagraphFormat</label>
        <link refid="class_aspose_1_1_words_1_1_paragraph_format"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/ParagraphFormat.h" line="101" column="1" bodyfile="Aspose.Words.Cpp/ParagraphFormat.h" bodystart="102" bodyend="1837"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a65f889f606affeeb12f3e2cd8a1d0a8c" prot="private" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a82b4b3205d777b4e1903de19a2097bad" prot="private" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>BaseType1</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a33b51d61cad666dec487210087200db4" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>ClearFormatting</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a60373227caad35096f27dac59c6f00af" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_AddSpaceBetweenFarEastAndAlpha</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1ad7d6cf939ec34ddb76a3faa20a6000bf" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_AddSpaceBetweenFarEastAndDigit</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a9d38fe714632ddc9c3e03267ce1bee38" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_Alignment</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a17625384e6551e70641ec12ea0db7f47" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_Bidi</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a24345aeaa2aa612a9c1abd07bd96d38f" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_Borders</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a16e5672333b2892f3ef463058797da3b" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_CharacterUnitFirstLineIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a01f757c7241b145434188bd6ea3e33a9" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_CharacterUnitLeftIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1afc0b337ad1c87d12eb591f2314de8942" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_CharacterUnitRightIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a1aaee376965edb12507a36aff53bdd8f" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_DropCapPosition</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a70ecd6a2a0ff5834302b06b58102c051" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_FarEastLineBreakControl</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1aec073a72462170cd4bde4f3d160953fd" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_FirstLineIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1aadfd70f3b0fad281fb4ed51d36678db0" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_HangingPunctuation</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a456b5b4029f90cbbe7eba004eed482ab" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_IsHeading</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1aeaae96c2071df7c33453b91920425b8b" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_IsListItem</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1ae869ca72812baef90adbdae9fe7a4e1a" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_KeepTogether</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a5bfe3b3f263558e1c8139e3852a5c748" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_KeepWithNext</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a62e1545970db3e60abf093c3d2dd9664" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_LeftIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a590627eb1cf3a63a2c2a14a6b545b6f9" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_LineSpacing</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a30b6b0cf63fe16e0e6a4c200269f1383" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_LineSpacingRule</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a7c0c3d11e00bff022283fad03091a7a9" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_LinesToDrop</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a04378f0f03fcfc10779fd25bbaaca403" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_LineUnitAfter</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1ac12abe2ab9aefaae497197c90a96d72d" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_LineUnitBefore</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1abef53f240e23dd617e0abd92b9ee19b9" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_NoSpaceBetweenParagraphsOfSameStyle</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a1273687ec8327eb2a6e114a5d186813e" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_OutlineLevel</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a00f94058873001f3af4c473441fe1815" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_PageBreakBefore</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a2749ebd66ecc60cef6f69b68645c9a0f" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_RightIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a9a1ba3bb0b0b5ef6db672933ea9119c7" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_Shading</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1ae8e8f34b392489acd69c4621dd66f488" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_SnapToGrid</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1ae42672d03f13fe772b8b0486d5a60551" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_SpaceAfter</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1adcc53c5cdb1883aa9df3d90ca0a4a7bb" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_SpaceAfterAuto</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a0412ade4aeafb231e16ce539b1fa3ec1" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_SpaceBefore</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1af3f03529622b1e38de399b44349256ee" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_SpaceBeforeAuto</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1aed6d25e2929027092a4cd7141d2787c5" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_Style</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a0b7afb2e3856f7e17a3715486fa3b52b" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_StyleIdentifier</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a8740709b13b9dd0608df1dbbb3e41ae6" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_StyleName</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a8ba1fa8c7cba9a9eb14a7953196073de" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_SuppressAutoHyphens</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1acc180a6b14f9609837852735c2a01521" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_SuppressLineNumbers</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a20a46656e580b347f5c397f1baa577fb" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_TabStops</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1acc523c7d2b630c72ef463f4fed84e7be" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_WidowControl</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1aa7a6533e85340e70eb0685be2115eaa0" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>get_WordWrap</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a513b571c0a8c7bc6d67af38a21c495db" prot="private" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a865af1524f290fee3bcfa8eac10cb8c9" prot="private" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a846075d2a85ad76a736d4cad1ddf1a10" prot="private" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a2f33053fb577b75a64a3536740f88922" prot="private" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a745869ea52d57b6b399de7fa6539370a" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_AddSpaceBetweenFarEastAndAlpha</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1acdb6c10d0fbf0d43f834720d5f3cd357" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_AddSpaceBetweenFarEastAndDigit</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a3783174986cc59991915d4818b4297e9" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_Alignment</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a560ee33f012dc4c29b3154debfb5b16c" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_Bidi</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a7092464db9717ff8d2ea1c7181e947f0" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_CharacterUnitFirstLineIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a03149871a8d30e4593c72a5a03b0c7ba" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_CharacterUnitLeftIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a3b64131e8dbbb2658fe3b2431ef47777" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_CharacterUnitRightIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1adf30473888deccc31942ab77dfd2d97a" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_DropCapPosition</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a23d70173a1292eab7ddc07d4e0b10338" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_FarEastLineBreakControl</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a0388514c7b052e5f80ad35c846845ad4" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_FirstLineIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a51be6716d9496e7d8f688663bda01241" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_HangingPunctuation</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a350ba0027772b7c3654000928424abb5" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_KeepTogether</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1aa5070eccc39fa80ee63ea5104a6a399e" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_KeepWithNext</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1ae9122fb53cd78d37ed88c7b8c7eb7712" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_LeftIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1aa0302b224fd5ac1c00503c5d904cc276" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_LineSpacing</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a8bffaa79a496f8c2a3f8366de62ee1c9" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_LineSpacingRule</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a59e4f2236dbef1b78d58dd5b819f26bd" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_LinesToDrop</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1af256ecabaf77c5e2fa9c924184706b8c" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_LineUnitAfter</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a1cb2ac709fc89dc8d3ae64f0e8a2b806" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_LineUnitBefore</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a5e6b9eae9c00b9a73ac44136c9060585" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_NoSpaceBetweenParagraphsOfSameStyle</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1af786e6709cfaad9ab313c40abcbd263f" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_OutlineLevel</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1ade658199d40da52b0eca236af5bcebd6" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_PageBreakBefore</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a2b6173379a2973932c3fbc0f6016edb4" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_RightIndent</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1aa3b6d5ce1f05e4a10816bf50cd46dcc0" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_SnapToGrid</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a45fec4cad26bee21d7897e196d366532" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_SpaceAfter</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a73e66fa50101162dbd2ecb6b24b2b563" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_SpaceAfterAuto</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1afac58cbdf2ccda7c5a2af052915c6e8c" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_SpaceBefore</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a2591a5469d324adf742b52aea8edde9f" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_SpaceBeforeAuto</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a0fb5db0524fed004f422d0c7ce12dc43" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_Style</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a138190af732508b3fbc3eca02e14ffb1" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_StyleIdentifier</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a78aa2fcab020569495792595e8f68154" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_StyleName</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1ae64de7a9a36aa7d0e064c8ce58b46460" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_SuppressAutoHyphens</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1aed278ca120aedaa51551d925e61f6416" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_SuppressLineNumbers</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a2f59045a6151fba5a26e59bd8437f97e" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_WidowControl</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1ab04a7a54eb0fbd5b2d39024f05117749" prot="public" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>set_WordWrap</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1afee20a9517cda28f79cbc67beb90fb97" prot="private" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1ac465ab6ef10506de3f18ba0c8af93957" prot="private" virt="non-virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_paragraph_format_1a4f4411cc51f35fda6875a6c8453252a8" prot="private" virt="virtual"><scope>Aspose::Words::ParagraphFormat</scope><name>~ParagraphFormat</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
