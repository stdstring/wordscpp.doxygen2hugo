<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_drawing_1_1_shape" kind="class" language="C++" prot="public" final="yes">
    <compoundname>Aspose::Words::Drawing::Shape</compoundname>
    <basecompoundref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base" prot="public" virt="non-virtual">Aspose::Words::Drawing::ShapeBase</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::Drawing::Core::ITextBox</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::Drawing::Core::IStrokable</basecompoundref>
    <includes refid="_shape_8h" local="no">Aspose.Words.Cpp/Drawing/Shape.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a1a2cb446173989c3db6ba925aacee4ff" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base" kindref="compound">Aspose::Words::Drawing::ShapeBase</ref></type>
        <definition>typedef Aspose::Words::Drawing::ShapeBase Aspose::Words::Drawing::Shape::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="199" column="47" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4c28008240b3a3e249fb694f78edefbc" prot="private" static="no">
        <type>Aspose::Words::Drawing::Core::ITextBox</type>
        <definition>typedef Aspose::Words::Drawing::Core::ITextBox Aspose::Words::Drawing::Shape::BaseType1</definition>
        <argsstring></argsstring>
        <name>BaseType1</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::BaseType1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="200" column="52" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a766d300d15428d6dc67b94cea0c48a54" prot="private" static="no">
        <type>Aspose::Words::Drawing::Core::IStrokable</type>
        <definition>typedef Aspose::Words::Drawing::Core::IStrokable Aspose::Words::Drawing::Shape::BaseType2</definition>
        <argsstring></argsstring>
        <name>BaseType2</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::BaseType2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="201" column="54" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a091520fd6e412bda4d5af8b082c27f10" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref></type>
        <definition>typedef Shape Aspose::Words::Drawing::Shape::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="198" column="19" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a042e240466fe308410e77ebecf22c772" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base" kindref="compound">BaseType</ref>, BaseType1, BaseType2 &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType, BaseType1, BaseType2&gt; Aspose::Words::Drawing::Shape::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="203" column="37" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a7564af32dc67c66f13d1f4e55f7f678c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Drawing::Shape::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2433" column="23" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="2433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a3d5e7b6b0574816cd986fb67eb4db2e6" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Drawing::Shape::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2434" column="23" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="2434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a6c581a19d80139c2a4e84e9fe9d30297" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Drawing::Shape::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2435" column="23" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="2435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a64e1e6508fb915274286e00729b5a537" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Drawing::Shape::mField3</definition>
        <argsstring></argsstring>
        <name>mField3</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::mField3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2436" column="23" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="2436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a287ba291b22bc0cd3b3520ce9c82d72b" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Drawing::Shape::mField4</definition>
        <argsstring></argsstring>
        <name>mField4</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::mField4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2437" column="23" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="2437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ae2ff0e765a63a90906009e8857dc78aa" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Drawing::Shape::mField5</definition>
        <argsstring></argsstring>
        <name>mField5</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::mField5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2438" column="23" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="2438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ae6e9c45d88ae988653790ebe6291b151" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Drawing::Shape::mField6</definition>
        <argsstring></argsstring>
        <name>mField6</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::mField6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2439" column="23" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="2439" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ab9d42df3976d474709979763297202cb" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::Drawing::Shape::~Shape</definition>
        <argsstring>()</argsstring>
        <name>~Shape</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::~Shape</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2390" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ace540df19f9ab64c6e4372857ab5a352" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member">Aspose::Words::VisitorAction</ref></type>
        <definition>Aspose::Words::VisitorAction Aspose::Words::Drawing::Shape::AcceptEnd</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::DocumentVisitor &gt;) override</argsstring>
        <name>AcceptEnd</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::AcceptEnd</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_composite_node_1acfce958aecccd97d02b9ce640c71adb0">AcceptEnd</reimplements>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">Aspose::Words::DocumentVisitor</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2386" column="37"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a98c95ed19b5685a4e2cc7b04c9072b2f" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member">Aspose::Words::VisitorAction</ref></type>
        <definition>Aspose::Words::VisitorAction Aspose::Words::Drawing::Shape::AcceptStart</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::DocumentVisitor &gt;) override</argsstring>
        <name>AcceptStart</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::AcceptStart</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_composite_node_1a4161179423c4ab1bd74fe8825dc06e2f">AcceptStart</reimplements>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">Aspose::Words::DocumentVisitor</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2385" column="37"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ae5de9c7aa864df2031cab9131b3921ad" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::CanInsert</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::Node &gt;) override</argsstring>
        <name>CanInsert</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::CanInsert</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_composite_node_1a06d62fddfb918b33b307b9201c7951aa">CanInsert</reimplements>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2388" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aefff3e73dec8562ed7cf3850596bff1c" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::Drawing::Shape::Clone</definition>
        <argsstring>(bool, System::SharedPtr&lt; Aspose::Words::INodeCloningListener &gt;) override</argsstring>
        <name>Clone</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::Clone</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_composite_node_1ae90ecec13614a52c3ab6fe645fb88807">Clone</reimplements>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::INodeCloningListener &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2387" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad82af008e52628b8e35a795c6529bd0e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">ThisType</ref> *</type>
        <definition>ThisType * Aspose::Words::Drawing::Shape::CppMemberwiseClone</definition>
        <argsstring>() const override</argsstring>
        <name>CppMemberwiseClone</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::CppMemberwiseClone</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_node_1a9358fb4208d077e8411fdf0d4e8553e5">CppMemberwiseClone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2443" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1adab64114ed8fd3da81c0c6485a8829ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a85945aebfa7941033984f1361893750f" kindref="member">Aspose::Words::Drawing::DashStyle</ref></type>
        <definition>Aspose::Words::Drawing::DashStyle Aspose::Words::Drawing::Shape::get_DashStyle</definition>
        <argsstring>() override</argsstring>
        <name>get_DashStyle</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_DashStyle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2404" column="39"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa074f4e53266222331d20dd58435e823" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1aba4a9960dc2f7028e94bf50f4cbb2899" kindref="member">Aspose::Words::Drawing::ArrowLength</ref></type>
        <definition>Aspose::Words::Drawing::ArrowLength Aspose::Words::Drawing::Shape::get_EndArrowLength</definition>
        <argsstring>() override</argsstring>
        <name>get_EndArrowLength</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_EndArrowLength</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2422" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a650329b2041293794c6b5d12348c59ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a2555b23818971467ba5ce3de15a8f78d" kindref="member">Aspose::Words::Drawing::ArrowType</ref></type>
        <definition>Aspose::Words::Drawing::ArrowType Aspose::Words::Drawing::Shape::get_EndArrowType</definition>
        <argsstring>() override</argsstring>
        <name>get_EndArrowType</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_EndArrowType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2414" column="39"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ac0d961b0ff420d9175e8ac8da9a08658" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1ab3c78eebc9bfcfee61e5b8398e9b0ed1" kindref="member">Aspose::Words::Drawing::ArrowWidth</ref></type>
        <definition>Aspose::Words::Drawing::ArrowWidth Aspose::Words::Drawing::Shape::get_EndArrowWidth</definition>
        <argsstring>() override</argsstring>
        <name>get_EndArrowWidth</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_EndArrowWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2420" column="40"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a73534cdf0633f44beb4b2def2f31cb90" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1aad70ed23fe8702e63c020dcb91d1ff2f" kindref="member">Aspose::Words::Drawing::EndCap</ref></type>
        <definition>Aspose::Words::Drawing::EndCap Aspose::Words::Drawing::Shape::get_EndCap</definition>
        <argsstring>() override</argsstring>
        <name>get_EndCap</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_EndCap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2408" column="36"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ab5c9a608ab6cf3aae0d8a7b0ddad1d93" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::get_HasVerticalTextFlow_ITextBox</definition>
        <argsstring>() override</argsstring>
        <name>get_HasVerticalTextFlow_ITextBox</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_HasVerticalTextFlow_ITextBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2430" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa7902b15138c11dce6d05ac82611ba4a" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::get_IsPercentWidthInapplicable</definition>
        <argsstring>() override</argsstring>
        <name>get_IsPercentWidthInapplicable</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_IsPercentWidthInapplicable</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a95f0b0b50a86c5c7b9d66e0b07cfb27e">get_IsPercentWidthInapplicable</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2383" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ab678c5ca480a2a6414075e439edbbb3d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a5cf8d49b721f08db4d9b6f38b5994fdf" kindref="member">Aspose::Words::Drawing::JoinStyle</ref></type>
        <definition>Aspose::Words::Drawing::JoinStyle Aspose::Words::Drawing::Shape::get_JoinStyle</definition>
        <argsstring>() override</argsstring>
        <name>get_JoinStyle</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_JoinStyle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2406" column="39"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a426c586c9c9050cb86e1a3e7fa7ce6f7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Aspose::Words::Drawing::Core::LineFillType</type>
        <definition>Aspose::Words::Drawing::Core::LineFillType Aspose::Words::Drawing::Shape::get_LineFillType</definition>
        <argsstring>() override</argsstring>
        <name>get_LineFillType</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_LineFillType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2424" column="48"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a12ee63324fb2fbc30ee59a84fa4df4bd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a967dbb2cb759c83972c1f31edec3dcd9" kindref="member">Aspose::Words::Drawing::ShapeLineStyle</ref></type>
        <definition>Aspose::Words::Drawing::ShapeLineStyle Aspose::Words::Drawing::Shape::get_LineStyle</definition>
        <argsstring>() override</argsstring>
        <name>get_LineStyle</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_LineStyle</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2410" column="44"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aaf411b1cf5c9f5d6d6817dfa65ed97ff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a49a7105d9ca7cc092a8efe1561cf2090" kindref="member">Aspose::Words::Drawing::ShapeMarkupLanguage</ref></type>
        <definition>Aspose::Words::Drawing::ShapeMarkupLanguage Aspose::Words::Drawing::Shape::get_MarkupLanguage_ITextBox</definition>
        <argsstring>() override</argsstring>
        <name>get_MarkupLanguage_ITextBox</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_MarkupLanguage_ITextBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2431" column="49"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ada4f610817ebc72d42dbfa24af51d539" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1aba4a9960dc2f7028e94bf50f4cbb2899" kindref="member">Aspose::Words::Drawing::ArrowLength</ref></type>
        <definition>Aspose::Words::Drawing::ArrowLength Aspose::Words::Drawing::Shape::get_StartArrowLength</definition>
        <argsstring>() override</argsstring>
        <name>get_StartArrowLength</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StartArrowLength</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2418" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a32a09cc664550256cbc244f8ae44225b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a2555b23818971467ba5ce3de15a8f78d" kindref="member">Aspose::Words::Drawing::ArrowType</ref></type>
        <definition>Aspose::Words::Drawing::ArrowType Aspose::Words::Drawing::Shape::get_StartArrowType</definition>
        <argsstring>() override</argsstring>
        <name>get_StartArrowType</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StartArrowType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2412" column="39"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ae6ff74095077f915f21dd203250b829b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1ab3c78eebc9bfcfee61e5b8398e9b0ed1" kindref="member">Aspose::Words::Drawing::ArrowWidth</ref></type>
        <definition>Aspose::Words::Drawing::ArrowWidth Aspose::Words::Drawing::Shape::get_StartArrowWidth</definition>
        <argsstring>() override</argsstring>
        <name>get_StartArrowWidth</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StartArrowWidth</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2416" column="40"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a3da15e286c218cec57e605d8c3ab51bd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Drawing::DrColor &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Drawing::DrColor &gt; Aspose::Words::Drawing::Shape::get_StrokeBackColor</definition>
        <argsstring>() override</argsstring>
        <name>get_StrokeBackColor</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StrokeBackColor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2396" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa0d64f29c7c50280efdca848609737e4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Drawing::DrColor &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Drawing::DrColor &gt; Aspose::Words::Drawing::Shape::get_StrokeForeColor</definition>
        <argsstring>() override</argsstring>
        <name>get_StrokeForeColor</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StrokeForeColor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2394" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa45f37408c2e4dd49e7a57708e91aee6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt;</type>
        <definition>System::ArrayPtr&lt; uint8_t &gt; Aspose::Words::Drawing::Shape::get_StrokeImageBytes</definition>
        <argsstring>() override</argsstring>
        <name>get_StrokeImageBytes</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StrokeImageBytes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2426" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad25e93f1bdfa997c552c6df935969af6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::Drawing::Core::Dml::Themes::IThemeProvider &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Core::Dml::Themes::IThemeProvider &gt; Aspose::Words::Drawing::Shape::get_StrokeThemeProvider</definition>
        <argsstring>() override</argsstring>
        <name>get_StrokeThemeProvider</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StrokeThemeProvider</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2427" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a20db86b3d9a5ff03dbf1bc54a6ec21b6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Drawing::Shape::get_StrokeTransparency</definition>
        <argsstring>() override</argsstring>
        <name>get_StrokeTransparency</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StrokeTransparency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2400" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ada9befa7c975632b05ed0edf21e2b2e6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::get_StrokeVisible</definition>
        <argsstring>() override</argsstring>
        <name>get_StrokeVisible</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StrokeVisible</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2398" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad845e2095e4f267b7608b232ebe2f17d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a23e23067dfc7a097e9d41a86b3074de9" kindref="member">Aspose::Words::Drawing::LayoutFlow</ref></type>
        <definition>Aspose::Words::Drawing::LayoutFlow Aspose::Words::Drawing::Shape::get_TextboxLayoutFlow_ITextBox</definition>
        <argsstring>() override</argsstring>
        <name>get_TextboxLayoutFlow_ITextBox</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_TextboxLayoutFlow_ITextBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2429" column="40"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa92458d6968b396b09143ac2928e04f8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1ade44d6ac98c2050a3958c6701381b267" kindref="member">Aspose::Words::Drawing::TextBoxWrapMode</ref></type>
        <definition>Aspose::Words::Drawing::TextBoxWrapMode Aspose::Words::Drawing::Shape::get_TextBoxWrapMode_ITextBox</definition>
        <argsstring>() override</argsstring>
        <name>get_TextBoxWrapMode_ITextBox</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_TextBoxWrapMode_ITextBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2428" column="45"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a55eb67e8d49cb74c8d12a3fb2fedb182" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Drawing::Shape::get_Weight</definition>
        <argsstring>() override</argsstring>
        <name>get_Weight</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_Weight</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2402" column="12"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ab324c1c2a7b81f87048a8bce057ea0a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Aspose::Words::Drawing::Shape::GetHorizontalMargins_ITextBox</definition>
        <argsstring>() override</argsstring>
        <name>GetHorizontalMargins_ITextBox</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::GetHorizontalMargins_ITextBox</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2441" column="11"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad216ffad11c3093fecada84d525b2e84" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Drawing::Shape::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="204" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a0f08b618449ab99ff5d8e3d5688418bb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_DashStyle</definition>
        <argsstring>(Aspose::Words::Drawing::DashStyle) override</argsstring>
        <name>set_DashStyle</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_DashStyle</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a85945aebfa7941033984f1361893750f" kindref="member">Aspose::Words::Drawing::DashStyle</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2405" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4980401633fd924911430d7a36a449e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_EndArrowLength</definition>
        <argsstring>(Aspose::Words::Drawing::ArrowLength) override</argsstring>
        <name>set_EndArrowLength</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_EndArrowLength</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1aba4a9960dc2f7028e94bf50f4cbb2899" kindref="member">Aspose::Words::Drawing::ArrowLength</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2423" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a6758556aa4a4bbb2f9216934311892e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_EndArrowType</definition>
        <argsstring>(Aspose::Words::Drawing::ArrowType) override</argsstring>
        <name>set_EndArrowType</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_EndArrowType</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a2555b23818971467ba5ce3de15a8f78d" kindref="member">Aspose::Words::Drawing::ArrowType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2415" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1afd4966fef47c2c0f3f7089491046459f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_EndArrowWidth</definition>
        <argsstring>(Aspose::Words::Drawing::ArrowWidth) override</argsstring>
        <name>set_EndArrowWidth</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_EndArrowWidth</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1ab3c78eebc9bfcfee61e5b8398e9b0ed1" kindref="member">Aspose::Words::Drawing::ArrowWidth</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2421" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a1f535c1d5848e7845a8f73d6972bd577" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_EndCap</definition>
        <argsstring>(Aspose::Words::Drawing::EndCap) override</argsstring>
        <name>set_EndCap</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_EndCap</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1aad70ed23fe8702e63c020dcb91d1ff2f" kindref="member">Aspose::Words::Drawing::EndCap</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2409" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a9af6594ee17cc14a6df0a1864a0565a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_JoinStyle</definition>
        <argsstring>(Aspose::Words::Drawing::JoinStyle) override</argsstring>
        <name>set_JoinStyle</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_JoinStyle</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a5cf8d49b721f08db4d9b6f38b5994fdf" kindref="member">Aspose::Words::Drawing::JoinStyle</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2407" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4a65022e4f65f0a51cadebb27d68855f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_LineFillType</definition>
        <argsstring>(Aspose::Words::Drawing::Core::LineFillType) override</argsstring>
        <name>set_LineFillType</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_LineFillType</qualifiedname>
        <param>
          <type>Aspose::Words::Drawing::Core::LineFillType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2425" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ab3e9b6268ab3e5616bf8566e42f6607f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_LineStyle</definition>
        <argsstring>(Aspose::Words::Drawing::ShapeLineStyle) override</argsstring>
        <name>set_LineStyle</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_LineStyle</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a967dbb2cb759c83972c1f31edec3dcd9" kindref="member">Aspose::Words::Drawing::ShapeLineStyle</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2411" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a67f9d9b5e8d9bbb62eddaeacb7ccac32" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_StartArrowLength</definition>
        <argsstring>(Aspose::Words::Drawing::ArrowLength) override</argsstring>
        <name>set_StartArrowLength</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_StartArrowLength</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1aba4a9960dc2f7028e94bf50f4cbb2899" kindref="member">Aspose::Words::Drawing::ArrowLength</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2419" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ac169c160792bc182edf30efcc5131d75" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_StartArrowType</definition>
        <argsstring>(Aspose::Words::Drawing::ArrowType) override</argsstring>
        <name>set_StartArrowType</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_StartArrowType</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a2555b23818971467ba5ce3de15a8f78d" kindref="member">Aspose::Words::Drawing::ArrowType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2413" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a14b1ed3ed18623d717ead2e7920b6fc6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_StartArrowWidth</definition>
        <argsstring>(Aspose::Words::Drawing::ArrowWidth) override</argsstring>
        <name>set_StartArrowWidth</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_StartArrowWidth</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1ab3c78eebc9bfcfee61e5b8398e9b0ed1" kindref="member">Aspose::Words::Drawing::ArrowWidth</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2417" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ac3855274297ac2b2de2d732106e123d4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_StrokeBackColor</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Drawing::DrColor &gt;) override</argsstring>
        <name>set_StrokeBackColor</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_StrokeBackColor</qualifiedname>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Drawing::DrColor &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2397" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad32fd98158306c9eaa5bf2a3e82d729d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_StrokeForeColor</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Drawing::DrColor &gt;) override</argsstring>
        <name>set_StrokeForeColor</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_StrokeForeColor</qualifiedname>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Drawing::DrColor &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2395" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a5d5ba6c9093860b1adb8523a8a24f8c4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_StrokeTransparency</definition>
        <argsstring>(double) override</argsstring>
        <name>set_StrokeTransparency</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_StrokeTransparency</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2401" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a45f5ddd900d4ed0c706ddb59cf9f0b94" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_StrokeVisible</definition>
        <argsstring>(bool) override</argsstring>
        <name>set_StrokeVisible</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_StrokeVisible</qualifiedname>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2399" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a65feeb4d9c59a05d1a2e2d965501b5f2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_Weight</definition>
        <argsstring>(double) override</argsstring>
        <name>set_Weight</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_Weight</qualifiedname>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2403" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a24c566eb2a33d78b3b2fbd025f012cf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Drawing::Shape::Shape</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::DocumentBase &gt; &amp;doc, Aspose::Words::Drawing::ShapeType shapeType)</argsstring>
        <name>Shape</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::Shape</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_base" kindref="compound">Aspose::Words::DocumentBase</ref> &gt; &amp;</type>
          <declname>doc</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcc" kindref="member">Aspose::Words::Drawing::ShapeType</ref></type>
          <declname>shapeType</declname>
        </param>
        <briefdescription>
<para>Creates a new shape object. </para>
        </briefdescription>
        <detaileddescription>
<para>You should specify desired shape properties after you created a shape.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The owner document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>shapeType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the shape to create.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a shape with an image from the local file system into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Shape&quot;<sp/>class&apos;s<sp/>public<sp/>constructor<sp/>will<sp/>create<sp/>a<sp/>shape<sp/>with<sp/>&quot;ShapeMarkupLanguage.Vml&quot;<sp/>markup<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>need<sp/>to<sp/>create<sp/>a<sp/>shape<sp/>of<sp/>a<sp/>non-primitive<sp/>type,<sp/>such<sp/>as<sp/>SingleCornerSnipped,<sp/>TopCornersSnipped,<sp/>DiagonalCornersSnipped,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>TopCornersOneRoundedOneSnipped,<sp/>SingleCornerRounded,<sp/>TopCornersRounded,<sp/>or<sp/>DiagonalCornersRounded,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>please<sp/>use<sp/>DocumentBuilder.InsertShape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;SetImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Windows<sp/>MetaFile.wmf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Width(100);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Height(100);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.FromFile.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to create and format a text box. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>floating<sp/>text<sp/>box.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>textBox<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccafbe16470e116e861d9fdf08f036ea22f" kindref="member" tooltip="The shape is a textbox. Note that shapes of many other types can also have text inside them too....">ShapeType::TextBox</ref>);</highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="No text wrapping around the shape. The shape is placed behind or in front of text.">WrapType::None</ref>);</highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_Width(200);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>horizontal,<sp/>and<sp/>vertical<sp/>alignment<sp/>of<sp/>the<sp/>text<sp/>inside<sp/>the<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_HorizontalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a9405d962a637184a61edd198df2aa5e4a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Specifies that the object shall be centered with respect to the horizontal alignment base.">HorizontalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a0663b2e567a9ab7e29fbf0cec206fc60aa4ffdcf0dc1f31b9acaf295d75b51d00" kindref="member" tooltip="Specifies that the object shall be at the top of the vertical alignment base.">VerticalAlignment::Top</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>to<sp/>the<sp/>text<sp/>box<sp/>and<sp/>add<sp/>a<sp/>run<sp/>of<sp/>text<sp/>that<sp/>the<sp/>text<sp/>box<sp/>will<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;AppendChild(MakeObject&lt;Paragraph&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>para<sp/>=<sp/>textBox-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(textBox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Shape.CreateTextBox.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2232" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa48149d924cce2f917b880b7fc801148" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::Accept</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::DocumentVisitor &gt; visitor) override</argsstring>
        <name>Accept</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::Accept</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_node_1a556472e35a86820cf189f10594933f3e">Accept</reimplements>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">Aspose::Words::DocumentVisitor</ref> &gt;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>Accepts a visitor. </para>
        </briefdescription>
        <detaileddescription>
<para>Enumerates over this node and all of its children. Each node calls a corresponding method on <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref>.</para>
<para>For more info see the Visitor design pattern.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>visitor</parametername>
</parameternamelist>
<parameterdescription>
<para>The visitor that will visit the nodes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all nodes were visited; false if <ref refid="class_aspose_1_1_words_1_1_document_visitor" kindref="compound">DocumentVisitor</ref> stopped the operation before visiting all nodes.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2376" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad64299078ecbd9360a766ed4ca22d31f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_charts_1_1_chart" kindref="compound">Aspose::Words::Drawing::Charts::Chart</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Charts::Chart &gt; Aspose::Words::Drawing::Shape::get_Chart</definition>
        <argsstring>()</argsstring>
        <name>get_Chart</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_Chart</qualifiedname>
        <briefdescription>
<para>Provides access to the chart properties if this shape has a Chart. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2177" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a29919eea6e4c03dff4c16ad466c96299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::get_ExtrusionEnabled</definition>
        <argsstring>()</argsstring>
        <name>get_ExtrusionEnabled</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_ExtrusionEnabled</qualifiedname>
        <briefdescription>
<para>Returns true if an extrusion effect is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="527" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1afd9df948529c9faf7e7f68fec0ffae85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Drawing::Shape::get_FillColor</definition>
        <argsstring>()</argsstring>
        <name>get_FillColor</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_FillColor</qualifiedname>
        <briefdescription>
<para>Defines the brush color that fills the closed path of the shape. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a shortcut to the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_fill_1a6d1d463852126769d752b89f97f1a6c7" kindref="member">Color</ref> property.</para>
<para>The default value is <ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">White</ref>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to fill a shape with a solid color. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>some<sp/>text,<sp/>and<sp/>then<sp/>cover<sp/>it<sp/>with<sp/>a<sp/>floating<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(32);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertShape(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccaeff6791f376d5b05d891d9ee0d6e07c7" kindref="member">ShapeType::CloudCallout</ref>,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93ac3a934b65d09d283ee0c11e25518b59c" kindref="member" tooltip="Specifies that the horizontal positioning shall be relative to the left margin of the page.">RelativeHorizontalPosition::LeftMargin</ref>,<sp/>25,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41dafcd9bb45d0ca24f74410c16c4ec46350" kindref="member" tooltip="Specifies that the vertical positioning shall be relative to the top margin of the current page.">RelativeVerticalPosition::TopMargin</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>25,<sp/>250,<sp/>150,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="No text wrapping around the shape. The shape is placed behind or in front of text.">WrapType::None</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;StrokeColor&quot;<sp/>property<sp/>to<sp/>set<sp/>the<sp/>color<sp/>of<sp/>the<sp/>outline<sp/>of<sp/>the<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_StrokeColor(<ref refid="class/system.drawing.color/_1a79d76f793a5d23469c70863fd1c26da5" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_CadetBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;FillColor&quot;<sp/>property<sp/>to<sp/>set<sp/>the<sp/>color<sp/>of<sp/>the<sp/>inside<sp/>area<sp/>of<sp/>the<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_FillColor(<ref refid="class/system.drawing.color/_1a989243916cf2bfbe0fc140d29ec2ea2e" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Opacity&quot;<sp/>property<sp/>determines<sp/>how<sp/>transparent<sp/>the<sp/>color<sp/>is<sp/>on<sp/>a<sp/>0-1<sp/>scale,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>1<sp/>being<sp/>fully<sp/>opaque,<sp/>and<sp/>0<sp/>being<sp/>invisible.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>shape<sp/>fill<sp/>by<sp/>default<sp/>is<sp/>fully<sp/>opaque,<sp/>so<sp/>we<sp/>cannot<sp/>see<sp/>the<sp/>text<sp/>that<sp/>this<sp/>shape<sp/>is<sp/>on<sp/>top<sp/>of.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(1.0,<sp/>shape-&gt;get_Fill()-&gt;get_Opacity());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>shape<sp/>fill<sp/>color&apos;s<sp/>opacity<sp/>to<sp/>a<sp/>lower<sp/>value<sp/>so<sp/>that<sp/>we<sp/>can<sp/>see<sp/>the<sp/>text<sp/>underneath<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_Fill()-&gt;set_Opacity(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Shape.Fill.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1378" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a3b75e0e57f37be17e8017dee249519ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::get_Filled</definition>
        <argsstring>()</argsstring>
        <name>get_Filled</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_Filled</qualifiedname>
        <briefdescription>
<para>Determines whether the closed path of the shape will be filled. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a shortcut to the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_fill_1aec53488af4c7119122d0991b0a64711d" kindref="member">On</ref> property.</para>
<para>The default value is <bold>true</bold>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1336" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a1b591166fca77a8dac142d45d88378c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Aspose::Words::Paragraph</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Paragraph &gt; Aspose::Words::Drawing::Shape::get_FirstParagraph</definition>
        <argsstring>()</argsstring>
        <name>get_FirstParagraph</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_FirstParagraph</qualifiedname>
        <briefdescription>
<para>Gets the first paragraph in the shape. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create and format a text box. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>floating<sp/>text<sp/>box.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>textBox<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccafbe16470e116e861d9fdf08f036ea22f" kindref="member" tooltip="The shape is a textbox. Note that shapes of many other types can also have text inside them too....">ShapeType::TextBox</ref>);</highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="No text wrapping around the shape. The shape is placed behind or in front of text.">WrapType::None</ref>);</highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_Width(200);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>horizontal,<sp/>and<sp/>vertical<sp/>alignment<sp/>of<sp/>the<sp/>text<sp/>inside<sp/>the<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_HorizontalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a9405d962a637184a61edd198df2aa5e4a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Specifies that the object shall be centered with respect to the horizontal alignment base.">HorizontalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a0663b2e567a9ab7e29fbf0cec206fc60aa4ffdcf0dc1f31b9acaf295d75b51d00" kindref="member" tooltip="Specifies that the object shall be at the top of the vertical alignment base.">VerticalAlignment::Top</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>paragraph<sp/>to<sp/>the<sp/>text<sp/>box<sp/>and<sp/>add<sp/>a<sp/>run<sp/>of<sp/>text<sp/>that<sp/>the<sp/>text<sp/>box<sp/>will<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;AppendChild(MakeObject&lt;Paragraph&gt;(doc));</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Paragraph&gt;<sp/>para<sp/>=<sp/>textBox-&gt;get_FirstParagraph();</highlight></codeline>
<codeline><highlight class="normal">para-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run<sp/>=<sp/>MakeObject&lt;Run&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">run-&gt;set_Text(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">para-&gt;AppendChild(run);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;AppendChild(textBox);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Shape.CreateTextBox.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1798" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a0297cf02fd240b7579f26b6febb6d7c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::get_HasChart</definition>
        <argsstring>()</argsstring>
        <name>get_HasChart</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_HasChart</qualifiedname>
        <briefdescription>
<para>Returns true if this <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> has a <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad64299078ecbd9360a766ed4ca22d31f" kindref="member">Chart</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2025" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a62a28d2c5dd426976b891dd3a096d593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::get_HasImage</definition>
        <argsstring>()</argsstring>
        <name>get_HasImage</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_HasImage</qualifiedname>
        <briefdescription>
<para>Returns true if the shape has image bytes or links an image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to extract images from a document, and save them to the local file system as individual files. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>collection<sp/>of<sp/>shapes<sp/>from<sp/>the<sp/>document,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>save<sp/>the<sp/>image<sp/>data<sp/>of<sp/>every<sp/>shape<sp/>with<sp/>an<sp/>image<sp/>as<sp/>a<sp/>file<sp/>to<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>shapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(9,<sp/>shapes-&gt;LINQ_Count([](SharedPtr&lt;Node&gt;<sp/>s)<sp/>{<sp/>return<sp/>(System::DynamicCast&lt;Shape&gt;(s))-&gt;get_HasImage();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imageIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shape<sp/>:<sp/>System::IterateOver(shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasImage())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>image<sp/>data<sp/>of<sp/>shapes<sp/>may<sp/>contain<sp/>images<sp/>of<sp/>many<sp/>possible<sp/>image<sp/>formats.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>determine<sp/>a<sp/>file<sp/>extension<sp/>for<sp/>each<sp/>image<sp/>automatically,<sp/>based<sp/>on<sp/>its<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;File.ExtractImages.{0}{1}&quot;</highlight><highlight class="normal">,<sp/>imageIndex,<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a21e427265e23db717e528d7f901e570e" kindref="member" tooltip="Converts an Aspose.Words image type enumerated value into a file extension. The returned extension is...">FileFormatUtil::ImageTypeToExtension</ref>(shape-&gt;get_ImageData()-&gt;get_ImageType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_ImageData()-&gt;Save(ArtifactsDir<sp/>+<sp/>imageFileName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageIndex++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to delete all shapes with images from a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>shapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(9,<sp/>shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Count([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/>return<sp/>s-&gt;get_HasImage();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shape<sp/>:<sp/>System::IterateOver(shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasImage())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;Remove();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()-&gt;LINQ_Count([](SharedPtr&lt;Shape&gt;<sp/>s)<sp/>{<sp/>return<sp/>s-&gt;get_HasImage();<sp/>}));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1429" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a76615445ea7ac716febd75eb994100bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::get_HasSmartArt</definition>
        <argsstring>()</argsstring>
        <name>get_HasSmartArt</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_HasSmartArt</qualifiedname>
        <briefdescription>
<para>Returns true if this <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> has a SmartArt object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to count the number of shapes in a document with SmartArt objects. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;SmartArt.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numberOfSmartArtShapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;LINQ_Cast&lt;SharedPtr&lt;Shape&gt;&gt;()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;LINQ_Count([](SharedPtr&lt;Shape&gt;<sp/>shape)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape-&gt;get_HasSmartArt();<sp/>});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>numberOfSmartArtShapes);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2041" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a1ee4178d06f7a41d217b435a1ff35b36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_horizontal_rule_format" kindref="compound">Aspose::Words::Drawing::HorizontalRuleFormat</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::HorizontalRuleFormat &gt; Aspose::Words::Drawing::Shape::get_HorizontalRuleFormat</definition>
        <argsstring>()</argsstring>
        <name>get_HorizontalRuleFormat</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_HorizontalRuleFormat</qualifiedname>
        <briefdescription>
<para>Provides access to the properties of the horizontal rule shape. For a shape that is not a horizontal rule, returns null. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a horizontal rule shape, and customize its formatting. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertHorizontalRule();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;HorizontalRuleFormat&gt;<sp/>horizontalRuleFormat<sp/>=<sp/>shape-&gt;get_HorizontalRuleFormat();</highlight></codeline>
<codeline><highlight class="normal">horizontalRuleFormat-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a325d40317fef89d527e8b5f62e3c192da4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Aligned to the center.">HorizontalRuleAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">horizontalRuleFormat-&gt;set_WidthPercent(70);</highlight></codeline>
<codeline><highlight class="normal">horizontalRuleFormat-&gt;set_Height(3);</highlight></codeline>
<codeline><highlight class="normal">horizontalRuleFormat-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">horizontalRuleFormat-&gt;set_NoShade(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(shape-&gt;get_IsHorizontalRule());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(shape-&gt;get_HorizontalRuleFormat()-&gt;get_NoShade());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1845" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1abacf5f3de13076cf86ee7397a866c41d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_image_data" kindref="compound">Aspose::Words::Drawing::ImageData</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::ImageData &gt; Aspose::Words::Drawing::Shape::get_ImageData</definition>
        <argsstring>()</argsstring>
        <name>get_ImageData</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_ImageData</qualifiedname>
        <briefdescription>
<para>Provides access to the image of the shape. Returns null if the shape cannot have an image. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to extract images from a document, and save them to the local file system as individual files. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>collection<sp/>of<sp/>shapes<sp/>from<sp/>the<sp/>document,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>save<sp/>the<sp/>image<sp/>data<sp/>of<sp/>every<sp/>shape<sp/>with<sp/>an<sp/>image<sp/>as<sp/>a<sp/>file<sp/>to<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>shapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(9,<sp/>shapes-&gt;LINQ_Count([](SharedPtr&lt;Node&gt;<sp/>s)<sp/>{<sp/>return<sp/>(System::DynamicCast&lt;Shape&gt;(s))-&gt;get_HasImage();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imageIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shape<sp/>:<sp/>System::IterateOver(shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasImage())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>image<sp/>data<sp/>of<sp/>shapes<sp/>may<sp/>contain<sp/>images<sp/>of<sp/>many<sp/>possible<sp/>image<sp/>formats.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>determine<sp/>a<sp/>file<sp/>extension<sp/>for<sp/>each<sp/>image<sp/>automatically,<sp/>based<sp/>on<sp/>its<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;File.ExtractImages.{0}{1}&quot;</highlight><highlight class="normal">,<sp/>imageIndex,<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a21e427265e23db717e528d7f901e570e" kindref="member" tooltip="Converts an Aspose.Words image type enumerated value into a file extension. The returned extension is...">FileFormatUtil::ImageTypeToExtension</ref>(shape-&gt;get_ImageData()-&gt;get_ImageType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_ImageData()-&gt;Save(ArtifactsDir<sp/>+<sp/>imageFileName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageIndex++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a linked image into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=<sp/>ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Windows<sp/>MetaFile.wmf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>applying<sp/>an<sp/>image<sp/>to<sp/>a<sp/>shape<sp/>so<sp/>that<sp/>it<sp/>can<sp/>display<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Set<sp/>the<sp/>shape<sp/>to<sp/>contain<sp/>the<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(builder-&gt;get_Document(),<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa0125cf5f3ca38b312ca5d3b511c45a13" kindref="member" tooltip="The shape remains on the same layer as text and treated as a character.">WrapType::Inline</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;SetImage(imageFileName);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Embedded.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>image<sp/>that<sp/>we<sp/>store<sp/>in<sp/>shape<sp/>will<sp/>increase<sp/>the<sp/>size<sp/>of<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(70000<sp/>&lt;<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Embedded.docx&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Set<sp/>the<sp/>shape<sp/>to<sp/>link<sp/>to<sp/>an<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(builder-&gt;get_Document(),<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccabe53a0541a6d36f6ecb879fa2c584b08" kindref="member" tooltip="The shape is an image.">ShapeType::Image</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa0125cf5f3ca38b312ca5d3b511c45a13" kindref="member" tooltip="The shape remains on the same layer as text and treated as a character.">WrapType::Inline</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;set_SourceFullName(imageFileName);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(shape);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Linked.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Linking<sp/>to<sp/>images<sp/>will<sp/>save<sp/>space<sp/>and<sp/>result<sp/>in<sp/>a<sp/>smaller<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>document<sp/>can<sp/>only<sp/>display<sp/>the<sp/>image<sp/>correctly<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>image<sp/>file<sp/>is<sp/>present<sp/>at<sp/>the<sp/>location<sp/>that<sp/>the<sp/>shape&apos;s<sp/>&quot;SourceFullName&quot;<sp/>property<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(10000<sp/>&gt;<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Linked.docx&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1496" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a93c6e06576b527d4ad71947010e6ef7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Aspose::Words::Paragraph</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Paragraph &gt; Aspose::Words::Drawing::Shape::get_LastParagraph</definition>
        <argsstring>()</argsstring>
        <name>get_LastParagraph</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_LastParagraph</qualifiedname>
        <briefdescription>
<para>Gets the last paragraph in the shape. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set the orientation of text inside a text box. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBoxShape<sp/>=<sp/>builder-&gt;InsertShape(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccafbe16470e116e861d9fdf08f036ea22f" kindref="member" tooltip="The shape is a textbox. Note that shapes of many other types can also have text inside them too....">ShapeType::TextBox</ref>,<sp/>150,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;TextBox&gt;<sp/>textBox<sp/>=<sp/>textBoxShape-&gt;get_TextBox();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>document<sp/>builder<sp/>to<sp/>inside<sp/>the<sp/>TextBox<sp/>and<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBoxShape-&gt;get_LastParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;LayoutFlow&quot;<sp/>property<sp/>to<sp/>set<sp/>an<sp/>orientation<sp/>for<sp/>the<sp/>text<sp/>contents<sp/>of<sp/>this<sp/>text<sp/>box.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_LayoutFlow(layoutFlow);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Shape.TextBoxLayoutFlow.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1822" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1afa9709336672ea09c6ad6bc4d74d7e93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379" kindref="member">Aspose::Words::NodeType</ref></type>
        <definition>Aspose::Words::NodeType Aspose::Words::Drawing::Shape::get_NodeType</definition>
        <argsstring>() const override</argsstring>
        <name>get_NodeType</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_NodeType</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_node_1a7f80e8d96b7a072fca14157b25ae025e">get_NodeType</reimplements>
        <briefdescription>
<para>Returns <ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member">Shape</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to traverse a composite node&apos;s tree of child nodes. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RecurseChildren()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>node<sp/>that<sp/>can<sp/>contain<sp/>child<sp/>nodes,<sp/>such<sp/>as<sp/>the<sp/>document<sp/>itself,<sp/>is<sp/>composite.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc-&gt;get_IsComposite());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>the<sp/>recursive<sp/>function<sp/>that<sp/>will<sp/>go<sp/>through<sp/>and<sp/>print<sp/>all<sp/>the<sp/>child<sp/>nodes<sp/>of<sp/>a<sp/>composite<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TraverseAllNodes(doc,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TraverseAllNodes(SharedPtr&lt;CompositeNode&gt;<sp/>parentNode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(SharedPtr&lt;Node&gt;<sp/>childNode<sp/>=<sp/>parentNode-&gt;get_FirstChild();<sp/>childNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>childNode<sp/>=<sp/>childNode-&gt;get_NextSibling())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>depth))<sp/>&lt;&lt;<sp/><ref refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" kindref="member" tooltip="A utility method that converts a node type enum value into a user friendly string.">Node::NodeTypeToString</ref>(childNode-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recurse<sp/>into<sp/>the<sp/>node<sp/>if<sp/>it<sp/>is<sp/>a<sp/>composite<sp/>node.<sp/>Otherwise,<sp/>print<sp/>its<sp/>contents<sp/>if<sp/>it<sp/>is<sp/>an<sp/>inline<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(childNode-&gt;get_IsComposite())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TraverseAllNodes(System::DynamicCast&lt;CompositeNode&gt;(childNode),<sp/>depth<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(System::ObjectExt::Is&lt;Inline&gt;(childNode))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>childNode-&gt;GetText().Trim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="255" column="32"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4b7eb04ddf6e5df391b5a2251096f950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_ole_format" kindref="compound">Aspose::Words::Drawing::OleFormat</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::OleFormat &gt; Aspose::Words::Drawing::Shape::get_OleFormat</definition>
        <argsstring>()</argsstring>
        <name>get_OleFormat</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_OleFormat</qualifiedname>
        <briefdescription>
<para>Provides access to the OLE data of a shape. For a shape that is not an OLE object or ActiveX control, returns null. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1632" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a630e7656318f2187c83505deaba9f865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::get_ShadowEnabled</definition>
        <argsstring>()</argsstring>
        <name>get_ShadowEnabled</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_ShadowEnabled</qualifiedname>
        <briefdescription>
<para>Returns true if a shadow effect is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="663" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad7d3e9e6fdc8405b171dff02db4c61fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_signature_line" kindref="compound">Aspose::Words::Drawing::SignatureLine</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::SignatureLine &gt; Aspose::Words::Drawing::Shape::get_SignatureLine</definition>
        <argsstring>()</argsstring>
        <name>get_SignatureLine</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_SignatureLine</qualifiedname>
        <briefdescription>
<para>Gets <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad7d3e9e6fdc8405b171dff02db4c61fe" kindref="member">SignatureLine</ref> object if the shape is a signature line. Returns <bold>null</bold> otherwise. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Aspose::Words::DocumentBuilder::InsertSignatureLine(System::SharedPtr&lt;Aspose::Words::SignatureLineOptions&gt;, Aspose::Words::Drawing::RelativeHorizontalPosition, double, Aspose::Words::Drawing::RelativeVerticalPosition, double, Aspose::Words::Drawing::WrapType)</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a line for a signature and insert it into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;SignatureLineOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_AllowComments(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_DefaultInstructions(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_Email(u</highlight><highlight class="stringliteral">&quot;john.doe@management.com&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_Instructions(u</highlight><highlight class="stringliteral">&quot;Please<sp/>sign<sp/>here&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_ShowDate(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_Signer(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_SignerTitle(u</highlight><highlight class="stringliteral">&quot;Senior<sp/>Manager&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>shape<sp/>that<sp/>will<sp/>contain<sp/>a<sp/>signature<sp/>line,<sp/>whose<sp/>appearance<sp/>we<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>customize<sp/>using<sp/>the<sp/>&quot;SignatureLineOptions&quot;<sp/>object<sp/>we<sp/>have<sp/>created<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>insert<sp/>a<sp/>shape<sp/>whose<sp/>coordinates<sp/>originate<sp/>at<sp/>the<sp/>bottom<sp/>right<sp/>hand<sp/>corner<sp/>of<sp/>the<sp/>page,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>supply<sp/>negative<sp/>x<sp/>and<sp/>y<sp/>coordinates<sp/>to<sp/>bring<sp/>the<sp/>shape<sp/>into<sp/>view.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertSignatureLine(options,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93a9c22e5f83e1df7b1f4abdc70c938ef2f" kindref="member" tooltip="Specifies that the horizontal positioning shall be relative to the right margin of the page.">RelativeHorizontalPosition::RightMargin</ref>,<sp/>-170.0,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41dae2297c0e82c95a08944d111c6a4c138d" kindref="member" tooltip="Specifies that the vertical positioning shall be relative to the bottom margin of the current page.">RelativeVerticalPosition::BottomMargin</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-60.0,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="No text wrapping around the shape. The shape is placed behind or in front of text.">WrapType::None</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(shape-&gt;get_IsSignatureLine());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>the<sp/>properties<sp/>of<sp/>our<sp/>signature<sp/>line<sp/>via<sp/>its<sp/>Shape<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;SignatureLine&gt;<sp/>signatureLine<sp/>=<sp/>shape-&gt;get_SignatureLine();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;john.doe@management.com&quot;</highlight><highlight class="normal">,<sp/>signatureLine-&gt;get_Email());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>signatureLine-&gt;get_Signer());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Senior<sp/>Manager&quot;</highlight><highlight class="normal">,<sp/>signatureLine-&gt;get_SignerTitle());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Please<sp/>sign<sp/>here&quot;</highlight><highlight class="normal">,<sp/>signatureLine-&gt;get_Instructions());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(signatureLine-&gt;get_ShowDate());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(signatureLine-&gt;get_AllowComments());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(signatureLine-&gt;get_DefaultInstructions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Shape.SignatureLine.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1889" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4769a115ca3cb6da799849127d828cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119" kindref="member">Aspose::Words::StoryType</ref></type>
        <definition>Aspose::Words::StoryType Aspose::Words::Drawing::Shape::get_StoryType</definition>
        <argsstring>()</argsstring>
        <name>get_StoryType</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StoryType</qualifiedname>
        <briefdescription>
<para>Returns <ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119aceacb93de81fd75fc4d78446523a451f" kindref="member">Textbox</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="391" column="33"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a1202068af63606b68dc001586e48769a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_stroke" kindref="compound">Aspose::Words::Drawing::Stroke</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Stroke &gt; Aspose::Words::Drawing::Shape::get_Stroke</definition>
        <argsstring>()</argsstring>
        <name>get_Stroke</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_Stroke</qualifiedname>
        <briefdescription>
<para>Defines a stroke for a shape. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows to create a variety of shapes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>four<sp/>examples<sp/>of<sp/>shapes<sp/>that<sp/>we<sp/>can<sp/>insert<sp/>into<sp/>our<sp/>documents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Dotted,<sp/>horizontal,<sp/>half-transparent<sp/>red<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>an<sp/>arrow<sp/>on<sp/>the<sp/>left<sp/>end<sp/>and<sp/>a<sp/>diamond<sp/>on<sp/>the<sp/>right<sp/>end:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca4803e6b9e63dabf04de980788d6a13c4" kindref="member">ShapeType::Line</ref>);</highlight></codeline>
<codeline><highlight class="normal">arrow-&gt;set_Width(200);</highlight></codeline>
<codeline><highlight class="normal">arrow-&gt;get_Stroke()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal">arrow-&gt;get_Stroke()-&gt;set_StartArrowType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a2555b23818971467ba5ce3de15a8f78da0f4e1aaabd074689b7d3ead824d1ee8e" kindref="member" tooltip="The arrow is a solid triangle.">ArrowType::Arrow</ref>);</highlight></codeline>
<codeline><highlight class="normal">arrow-&gt;get_Stroke()-&gt;set_StartArrowLength(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1aba4a9960dc2f7028e94bf50f4cbb2899a8394f0347c184cf156ac5924dccb773b" kindref="member">ArrowLength::Long</ref>);</highlight></codeline>
<codeline><highlight class="normal">arrow-&gt;get_Stroke()-&gt;set_StartArrowWidth(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1ab3c78eebc9bfcfee61e5b8398e9b0ed1ae7c770a61dbdf81ca922ae0260e327c1" kindref="member">ArrowWidth::Wide</ref>);</highlight></codeline>
<codeline><highlight class="normal">arrow-&gt;get_Stroke()-&gt;set_EndArrowType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a2555b23818971467ba5ce3de15a8f78da8f7671185d590914ac21c7511767b699" kindref="member" tooltip="The line end is a solid diamond.">ArrowType::Diamond</ref>);</highlight></codeline>
<codeline><highlight class="normal">arrow-&gt;get_Stroke()-&gt;set_EndArrowLength(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1aba4a9960dc2f7028e94bf50f4cbb2899a8394f0347c184cf156ac5924dccb773b" kindref="member">ArrowLength::Long</ref>);</highlight></codeline>
<codeline><highlight class="normal">arrow-&gt;get_Stroke()-&gt;set_EndArrowWidth(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1ab3c78eebc9bfcfee61e5b8398e9b0ed1ae7c770a61dbdf81ca922ae0260e327c1" kindref="member">ArrowWidth::Wide</ref>);</highlight></codeline>
<codeline><highlight class="normal">arrow-&gt;get_Stroke()-&gt;set_DashStyle(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a85945aebfa7941033984f1361893750fa3663598d5c5858b5a6040b1bbed4f187" kindref="member" tooltip="Dash style.">DashStyle::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal">arrow-&gt;get_Stroke()-&gt;set_Opacity(0.5);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a5cf8d49b721f08db4d9b6f38b5994fdfae4396f81cd926bb129ccf3c147c64514" kindref="member" tooltip="Extend edges until they join.">JoinStyle::Miter</ref>,<sp/>arrow-&gt;get_Stroke()-&gt;get_JoinStyle());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(arrow);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Thick<sp/>black<sp/>diagonal<sp/>line<sp/>with<sp/>rounded<sp/>ends:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca4803e6b9e63dabf04de980788d6a13c4" kindref="member">ShapeType::Line</ref>);</highlight></codeline>
<codeline><highlight class="normal">line-&gt;set_Top(40);</highlight></codeline>
<codeline><highlight class="normal">line-&gt;set_Width(200);</highlight></codeline>
<codeline><highlight class="normal">line-&gt;set_Height(20);</highlight></codeline>
<codeline><highlight class="normal">line-&gt;set_StrokeWeight(5.0);</highlight></codeline>
<codeline><highlight class="normal">line-&gt;get_Stroke()-&gt;set_EndCap(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1aad70ed23fe8702e63c020dcb91d1ff2fab7f41fc1412ad2ee75e9b2635d3b9d5c" kindref="member" tooltip="Rounded ends.">EndCap::Round</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(line);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Arrow<sp/>with<sp/>a<sp/>green<sp/>fill:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>filledInArrow<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca0f4e1aaabd074689b7d3ead824d1ee8e" kindref="member">ShapeType::Arrow</ref>);</highlight></codeline>
<codeline><highlight class="normal">filledInArrow-&gt;set_Width(200);</highlight></codeline>
<codeline><highlight class="normal">filledInArrow-&gt;set_Height(40);</highlight></codeline>
<codeline><highlight class="normal">filledInArrow-&gt;set_Top(100);</highlight></codeline>
<codeline><highlight class="normal">filledInArrow-&gt;get_Fill()-&gt;set_ForeColor(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal">filledInArrow-&gt;get_Fill()-&gt;set_Visible(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(filledInArrow);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>Arrow<sp/>with<sp/>a<sp/>flipped<sp/>orientation<sp/>filled<sp/>in<sp/>with<sp/>the<sp/>Aspose<sp/>logo:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>filledInArrowImg<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca0f4e1aaabd074689b7d3ead824d1ee8e" kindref="member">ShapeType::Arrow</ref>);</highlight></codeline>
<codeline><highlight class="normal">filledInArrowImg-&gt;set_Width(200);</highlight></codeline>
<codeline><highlight class="normal">filledInArrowImg-&gt;set_Height(40);</highlight></codeline>
<codeline><highlight class="normal">filledInArrowImg-&gt;set_Top(160);</highlight></codeline>
<codeline><highlight class="normal">filledInArrowImg-&gt;set_FlipOrientation(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a5cd9f1ffa2aa6d687347e1ea79c110e5a130c5b3473c57faa76e2a1c54e26f88e" kindref="member" tooltip="Flip along both the y- and x-axis.">FlipOrientation::Both</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ArrayPtr&lt;uint8_t&gt;<sp/>imageBytes<sp/>=<sp/><ref refid="class/system.i_o.file/_1abdf236ad2f3924d0fc9259f8f715a5c4" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::File::ReadAllBytes</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream<sp/>=<sp/>MakeObject&lt;System::IO::MemoryStream&gt;(imageBytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a422c9ba7c9a4a7964e7cc7a39f64faff" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromStream</ref>(stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>flip<sp/>the<sp/>orientation<sp/>of<sp/>our<sp/>arrow,<sp/>we<sp/>also<sp/>flip<sp/>the<sp/>image<sp/>that<sp/>the<sp/>arrow<sp/>contains.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flip<sp/>the<sp/>image<sp/>the<sp/>other<sp/>way<sp/>to<sp/>cancel<sp/>this<sp/>out<sp/>before<sp/>getting<sp/>the<sp/>shape<sp/>to<sp/>display<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>image-&gt;RotateFlip(System::Drawing::RotateFlipType::RotateNoneFlipXY);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>filledInArrowImg-&gt;get_ImageData()-&gt;SetImage(image);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>filledInArrowImg-&gt;get_Stroke()-&gt;set_JoinStyle(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a5cf8d49b721f08db4d9b6f38b5994fdfab7f41fc1412ad2ee75e9b2635d3b9d5c" kindref="member" tooltip="Draw an arc between the two edges.">JoinStyle::Round</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertNode(filledInArrowImg);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Drawing.VariousShapes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="737" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a8026bca947ee15b9fa75ddedba6104f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
        <definition>System::Drawing::Color Aspose::Words::Drawing::Shape::get_StrokeColor</definition>
        <argsstring>()</argsstring>
        <name>get_StrokeColor</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StrokeColor</qualifiedname>
        <briefdescription>
<para>Defines the color of a stroke. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a shortcut to the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_stroke_1a31bb9efe51981ff2e1c6ceb2212a92b4" kindref="member">Color</ref> property.</para>
<para>The default value is <ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">Black</ref>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to fill a shape with a solid color. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>some<sp/>text,<sp/>and<sp/>then<sp/>cover<sp/>it<sp/>with<sp/>a<sp/>floating<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(32);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertShape(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccaeff6791f376d5b05d891d9ee0d6e07c7" kindref="member">ShapeType::CloudCallout</ref>,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93ac3a934b65d09d283ee0c11e25518b59c" kindref="member" tooltip="Specifies that the horizontal positioning shall be relative to the left margin of the page.">RelativeHorizontalPosition::LeftMargin</ref>,<sp/>25,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41dafcd9bb45d0ca24f74410c16c4ec46350" kindref="member" tooltip="Specifies that the vertical positioning shall be relative to the top margin of the current page.">RelativeVerticalPosition::TopMargin</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>25,<sp/>250,<sp/>150,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="No text wrapping around the shape. The shape is placed behind or in front of text.">WrapType::None</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;StrokeColor&quot;<sp/>property<sp/>to<sp/>set<sp/>the<sp/>color<sp/>of<sp/>the<sp/>outline<sp/>of<sp/>the<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_StrokeColor(<ref refid="class/system.drawing.color/_1a79d76f793a5d23469c70863fd1c26da5" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_CadetBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;FillColor&quot;<sp/>property<sp/>to<sp/>set<sp/>the<sp/>color<sp/>of<sp/>the<sp/>inside<sp/>area<sp/>of<sp/>the<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_FillColor(<ref refid="class/system.drawing.color/_1a989243916cf2bfbe0fc140d29ec2ea2e" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Opacity&quot;<sp/>property<sp/>determines<sp/>how<sp/>transparent<sp/>the<sp/>color<sp/>is<sp/>on<sp/>a<sp/>0-1<sp/>scale,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>1<sp/>being<sp/>fully<sp/>opaque,<sp/>and<sp/>0<sp/>being<sp/>invisible.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>shape<sp/>fill<sp/>by<sp/>default<sp/>is<sp/>fully<sp/>opaque,<sp/>so<sp/>we<sp/>cannot<sp/>see<sp/>the<sp/>text<sp/>that<sp/>this<sp/>shape<sp/>is<sp/>on<sp/>top<sp/>of.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(1.0,<sp/>shape-&gt;get_Fill()-&gt;get_Opacity());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>shape<sp/>fill<sp/>color&apos;s<sp/>opacity<sp/>to<sp/>a<sp/>lower<sp/>value<sp/>so<sp/>that<sp/>we<sp/>can<sp/>see<sp/>the<sp/>text<sp/>underneath<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_Fill()-&gt;set_Opacity(0.3);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Shape.Fill.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1193" column="31"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a49f4baf78b331b1a378dc5668cbb8a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::Drawing::Shape::get_Stroked</definition>
        <argsstring>()</argsstring>
        <name>get_Stroked</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_Stroked</qualifiedname>
        <briefdescription>
<para>Defines whether the path will be stroked. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a shortcut to the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_stroke_1ab5cb8b4a06d40228da97ee6648336081" kindref="member">On</ref> property.</para>
<para>The default value is <bold>true</bold>.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="877" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a7e2ce9bd86c33333ac51b7f5b1e885ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Aspose::Words::Drawing::Shape::get_StrokeWeight</definition>
        <argsstring>()</argsstring>
        <name>get_StrokeWeight</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_StrokeWeight</qualifiedname>
        <briefdescription>
<para>Defines the brush thickness that strokes the path of a shape in points. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a shortcut to the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_stroke_1a9935a2376e1bcbb346e8e08f42f45b8e" kindref="member">Weight</ref> property.</para>
<para>The default value is 0.75.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to iterate over all the shapes in a document. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitShapes()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>shape.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visitor<sp/>=<sp/>MakeObject&lt;ExShape::ShapeAppearancePrinter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Accept(visitor);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>visitor-&gt;GetText()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">ShapeAppearancePrinter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DocumentVisitor</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeAppearancePrinter()<sp/>:<sp/>mShapesVisited(0),<sp/>mTextIndentLevel(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder<sp/>=<sp/>MakeObject&lt;System::Text::StringBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>GetText()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;Shapes<sp/>visited:<sp/>{0}\n{1}&quot;</highlight><highlight class="normal">,<sp/>mShapesVisited,<sp/>mStringBuilder);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeStart(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasChart())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Has<sp/>chart:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Chart()-&gt;get_Title()-&gt;get_Text()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Extrusion<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ExtrusionEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shadow<sp/>enabled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShadowEnabled()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;StoryType:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StoryType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Stroked())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASPOSE_EXPECT_EQ(shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_StrokeColor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>colors:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_Stroke()-&gt;get_Color(),<sp/>shape-&gt;get_Stroke()-&gt;get_Color2()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Stroke<sp/>weight:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_StrokeWeight()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_Filled())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Filled:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_FillColor()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_OleFormat()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Ole<sp/>found<sp/>of<sp/>type:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_OleFormat()-&gt;get_ProgId()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_SignatureLine()<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Found<sp/>signature<sp/>line<sp/>for:<sp/>{0},<sp/>{1}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_SignatureLine()-&gt;get_Signer(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_SignatureLine()-&gt;get_SignerTitle()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitShapeEnd(SharedPtr&lt;Shape&gt;<sp/>shape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mShapesVisited++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeStart(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;Shape<sp/>group<sp/>found:<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel++;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1a5f2a3902dc32f04b75f7fd27967aa9b2" kindref="member" tooltip="Allows the visitor to control the enumeration of nodes.">VisitorAction</ref><sp/>VisitGroupShapeEnd(SharedPtr&lt;GroupShape&gt;<sp/>groupShape)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mTextIndentLevel--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AppendLine(String::Format(u</highlight><highlight class="stringliteral">&quot;End<sp/>of<sp/>{0}&quot;</highlight><highlight class="normal">,<sp/>groupShape-&gt;get_ShapeType()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VisitorAction::Continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mShapesVisited;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mTextIndentLevel;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Text::StringBuilder&gt;<sp/>mStringBuilder;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendLine(String<sp/>text)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mTextIndentLevel;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;Append(u</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mStringBuilder-&gt;AppendLine(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1020" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a33a6da4fe64876c5e11f5a8df5281d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_text_box" kindref="compound">Aspose::Words::Drawing::TextBox</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::TextBox &gt; Aspose::Words::Drawing::Shape::get_TextBox</definition>
        <argsstring>()</argsstring>
        <name>get_TextBox</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_TextBox</qualifiedname>
        <briefdescription>
<para>Defines attributes that specify how text is displayed in a shape. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set the orientation of text inside a text box. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>textBoxShape<sp/>=<sp/>builder-&gt;InsertShape(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccafbe16470e116e861d9fdf08f036ea22f" kindref="member" tooltip="The shape is a textbox. Note that shapes of many other types can also have text inside them too....">ShapeType::TextBox</ref>,<sp/>150,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;TextBox&gt;<sp/>textBox<sp/>=<sp/>textBoxShape-&gt;get_TextBox();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>document<sp/>builder<sp/>to<sp/>inside<sp/>the<sp/>TextBox<sp/>and<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(textBoxShape-&gt;get_LastParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>again!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;LayoutFlow&quot;<sp/>property<sp/>to<sp/>set<sp/>an<sp/>orientation<sp/>for<sp/>the<sp/>text<sp/>contents<sp/>of<sp/>this<sp/>text<sp/>box.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">textBox-&gt;set_LayoutFlow(layoutFlow);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Shape.TextBoxLayoutFlow.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1656" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a8fb00ace93888db8d2d0a9b6a438520d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_text_path" kindref="compound">Aspose::Words::Drawing::TextPath</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::TextPath &gt; Aspose::Words::Drawing::Shape::get_TextPath</definition>
        <argsstring>()</argsstring>
        <name>get_TextPath</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::get_TextPath</qualifiedname>
        <briefdescription>
<para>Defines the text of the text path (of a WordArt object). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with WordArt. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InsertTextPaths()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>WordArt<sp/>object<sp/>to<sp/>display<sp/>text<sp/>in<sp/>a<sp/>shape<sp/>that<sp/>we<sp/>can<sp/>re-size<sp/>and<sp/>move<sp/>by<sp/>using<sp/>the<sp/>mouse<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Provide<sp/>a<sp/>&quot;ShapeType&quot;<sp/>as<sp/>an<sp/>argument<sp/>to<sp/>set<sp/>a<sp/>shape<sp/>for<sp/>the<sp/>WordArt.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>AppendWordArt(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!<sp/>This<sp/>text<sp/>is<sp/>bold,<sp/>and<sp/>italic.&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">,<sp/>480,<sp/>24,<sp/><ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>(),<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca09d2f1e1328e96b52304498911250629" kindref="member" tooltip="WordArt object.">ShapeType::TextPlainText</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>&quot;Bold&apos;<sp/>and<sp/>&quot;Italic&quot;<sp/>formatting<sp/>settings<sp/>to<sp/>the<sp/>text<sp/>using<sp/>the<sp/>respective<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_Italic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>various<sp/>other<sp/>text<sp/>formatting-related<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(shape-&gt;get_TextPath()-&gt;get_Underline());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(shape-&gt;get_TextPath()-&gt;get_Shadow());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(shape-&gt;get_TextPath()-&gt;get_StrikeThrough());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(shape-&gt;get_TextPath()-&gt;get_ReverseRows());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(shape-&gt;get_TextPath()-&gt;get_XScale());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(shape-&gt;get_TextPath()-&gt;get_Trim());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_FALSE(shape-&gt;get_TextPath()-&gt;get_SmallCaps());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(36.0,<sp/>shape-&gt;get_TextPath()-&gt;get_Size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>World!<sp/>This<sp/>text<sp/>is<sp/>bold,<sp/>and<sp/>italic.&quot;</highlight><highlight class="normal">,<sp/>shape-&gt;get_TextPath()-&gt;get_Text());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca09d2f1e1328e96b52304498911250629" kindref="member" tooltip="WordArt object.">ShapeType::TextPlainText</ref>,<sp/>shape-&gt;get_ShapeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;On&quot;<sp/>property<sp/>to<sp/>show/hide<sp/>the<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>AppendWordArt(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;On<sp/>set<sp/>to<sp/>\&quot;true\&quot;&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">,<sp/>150,<sp/>24,<sp/><ref refid="class/system.drawing.color/_1ab0895ee04ac7572b810a3c0f97544c55" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Yellow</ref>(),<sp/><ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca09d2f1e1328e96b52304498911250629" kindref="member" tooltip="WordArt object.">ShapeType::TextPlainText</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_On(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>AppendWordArt(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;On<sp/>set<sp/>to<sp/>\&quot;false\&quot;&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">,<sp/>150,<sp/>24,<sp/><ref refid="class/system.drawing.color/_1ab0895ee04ac7572b810a3c0f97544c55" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Yellow</ref>(),<sp/><ref refid="class/system.drawing.color/_1aa367adae65fcfe95876c5c9021a0af09" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Purple</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca09d2f1e1328e96b52304498911250629" kindref="member" tooltip="WordArt object.">ShapeType::TextPlainText</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_On(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;Kerning&quot;<sp/>property<sp/>to<sp/>enable/disable<sp/>kerning<sp/>spacing<sp/>between<sp/>certain<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>AppendWordArt(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Kerning:<sp/>VAV&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Times<sp/>New<sp/>Roman&quot;</highlight><highlight class="normal">,<sp/>90,<sp/>24,<sp/><ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>(),<sp/><ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca09d2f1e1328e96b52304498911250629" kindref="member" tooltip="WordArt object.">ShapeType::TextPlainText</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_Kerning(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>AppendWordArt(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;No<sp/>kerning:<sp/>VAV&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Times<sp/>New<sp/>Roman&quot;</highlight><highlight class="normal">,<sp/>100,<sp/>24,<sp/><ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>(),<sp/><ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca09d2f1e1328e96b52304498911250629" kindref="member" tooltip="WordArt object.">ShapeType::TextPlainText</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_Kerning(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;Spacing&quot;<sp/>property<sp/>to<sp/>set<sp/>the<sp/>custom<sp/>spacing<sp/>between<sp/>characters<sp/>on<sp/>a<sp/>scale<sp/>from<sp/>0.0<sp/>(none)<sp/>to<sp/>1.0<sp/>(default).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>AppendWordArt(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Spacing<sp/>set<sp/>to<sp/>0.1&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">,<sp/>120,<sp/>24,<sp/><ref refid="class/system.drawing.color/_1aced32cfd62349b57cb954473c5dcd472" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_BlueViolet</ref>(),<sp/><ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca972808f2ccda4cd94318de6ddc202612" kindref="member" tooltip="WordArt object.">ShapeType::TextCascadeDown</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_Spacing(0.1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;RotateLetters&quot;<sp/>property<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>rotate<sp/>each<sp/>character<sp/>90<sp/>degrees<sp/>counterclockwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>AppendWordArt(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;RotateLetters&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">,<sp/>200,<sp/>36,<sp/><ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>(),<sp/><ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca7a8782e56ddab3132293ef13d22009f5" kindref="member">ShapeType::TextWave</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_RotateLetters(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>&quot;SameLetterHeights&quot;<sp/>property<sp/>to<sp/>&quot;true&quot;<sp/>to<sp/>get<sp/>the<sp/>x-height<sp/>of<sp/>each<sp/>character<sp/>to<sp/>equal<sp/>the<sp/>cap<sp/>height.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>AppendWordArt(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;Same<sp/>character<sp/>height<sp/>for<sp/>lower<sp/>and<sp/>UPPER<sp/>case&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">,<sp/>300,<sp/>24,<sp/><ref refid="class/system.drawing.color/_1a3dbef70ba6a944b66ff4c5deb8be4a80" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_DeepSkyBlue</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.color/_1a590eab745cb3b6d0b16ad69de757e685" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_DodgerBlue</ref>(),<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca96f0c34a63b1891180433752a0b1956d" kindref="member" tooltip="WordArt object.">ShapeType::TextSlantUp</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_SameLetterHeights(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>the<sp/>text&apos;s<sp/>size<sp/>will<sp/>always<sp/>scale<sp/>to<sp/>fit<sp/>the<sp/>containing<sp/>shape&apos;s<sp/>size,<sp/>overriding<sp/>the<sp/>text<sp/>size<sp/>setting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>AppendWordArt(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;FitShape<sp/>on&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">,<sp/>160,<sp/>24,<sp/><ref refid="class/system.drawing.color/_1a989243916cf2bfbe0fc140d29ec2ea2e" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightBlue</ref>(),<sp/><ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca09d2f1e1328e96b52304498911250629" kindref="member" tooltip="WordArt object.">ShapeType::TextPlainText</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(shape-&gt;get_TextPath()-&gt;get_FitShape());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_Size(24.0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>set<sp/>the<sp/>&quot;FitShape:<sp/>property<sp/>to<sp/>&quot;false&quot;,<sp/>the<sp/>text<sp/>will<sp/>keep<sp/>the<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>the<sp/>&quot;Size&quot;<sp/>property<sp/>specifies<sp/>regardless<sp/>of<sp/>the<sp/>size<sp/>of<sp/>the<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;TextPathAlignment&quot;<sp/>property<sp/>also<sp/>to<sp/>align<sp/>the<sp/>text<sp/>to<sp/>a<sp/>side<sp/>of<sp/>the<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>AppendWordArt(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;FitShape<sp/>off&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Calibri&quot;</highlight><highlight class="normal">,<sp/>160,<sp/>24,<sp/><ref refid="class/system.drawing.color/_1a989243916cf2bfbe0fc140d29ec2ea2e" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_LightBlue</ref>(),<sp/><ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca09d2f1e1328e96b52304498911250629" kindref="member" tooltip="WordArt object.">ShapeType::TextPlainText</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_FitShape(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_Size(24.0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_TextPathAlignment(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a9afa410fe081025f663c4ad2adb6ea2aa92b09c7c48c520c3c55e497875da437c" kindref="member" tooltip="Right justify.">TextPathAlignment::Right</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Shape.InsertTextPaths.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SharedPtr&lt;Shape&gt;<sp/>AppendWordArt(SharedPtr&lt;Document&gt;<sp/>doc,<sp/>String<sp/>text,<sp/>String<sp/>textFontFamily,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shapeWidth,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shapeHeight,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class/system.drawing.color/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref><sp/>wordArtFill,<sp/><ref refid="class/system.drawing.color/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref><sp/>line,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcc" kindref="member" tooltip="Specifies the type of shape in a Microsoft Word document.">ShapeType</ref><sp/>wordArtShapeType)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>inline<sp/>Shape,<sp/>which<sp/>will<sp/>serve<sp/>as<sp/>a<sp/>container<sp/>for<sp/>our<sp/>WordArt.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>shape<sp/>can<sp/>only<sp/>be<sp/>a<sp/>valid<sp/>WordArt<sp/>shape<sp/>if<sp/>we<sp/>assign<sp/>a<sp/>WordArt-designated<sp/>ShapeType<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>types<sp/>will<sp/>have<sp/>&quot;WordArt<sp/>object&quot;<sp/>in<sp/>the<sp/>description,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>their<sp/>enumerator<sp/>constant<sp/>names<sp/>will<sp/>all<sp/>start<sp/>with<sp/>&quot;Text&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/>wordArtShapeType);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa0125cf5f3ca38b312ca5d3b511c45a13" kindref="member" tooltip="The shape remains on the same layer as text and treated as a character.">WrapType::Inline</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;set_Width(shapeWidth);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;set_Height(shapeHeight);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;set_FillColor(wordArtFill);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;set_StrokeColor(line);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_Text(text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shape-&gt;get_TextPath()-&gt;set_FontFamily(textFontFamily);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>para<sp/>=<sp/>System::DynamicCast&lt;Paragraph&gt;(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;AppendChild(MakeObject&lt;Paragraph&gt;(doc)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>para-&gt;AppendChild(shape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1766" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1af188d7cd724be7149ef73e52d5d34f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_FillColor</definition>
        <argsstring>(System::Drawing::Color value)</argsstring>
        <name>set_FillColor</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_FillColor</qualifiedname>
        <param>
          <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1afd9df948529c9faf7e7f68fec0ffae85" kindref="member">Aspose::Words::Drawing::Shape::get_FillColor</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1381" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a24c9c2c110eafc1de86699111415dcef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_Filled</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Filled</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_Filled</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a3b75e0e57f37be17e8017dee249519ae" kindref="member">Aspose::Words::Drawing::Shape::get_Filled</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1339" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4e0d137296b16f81fd8bcfcf82ccdc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_StrokeColor</definition>
        <argsstring>(System::Drawing::Color value)</argsstring>
        <name>set_StrokeColor</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_StrokeColor</qualifiedname>
        <param>
          <type><ref refid="class/system.drawing.color/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a8026bca947ee15b9fa75ddedba6104f6" kindref="member">Aspose::Words::Drawing::Shape::get_StrokeColor</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1196" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ababb6b37a96b546820fbc62e401ef304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_Stroked</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Stroked</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_Stroked</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a49f4baf78b331b1a378dc5668cbb8a8f" kindref="member">Aspose::Words::Drawing::Shape::get_Stroked</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="880" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a2e0939685575103d82be0001dfeddd18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::set_StrokeWeight</definition>
        <argsstring>(double value)</argsstring>
        <name>set_StrokeWeight</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::set_StrokeWeight</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a7e2ce9bd86c33333ac51b7f5b1e885ef" kindref="member">Aspose::Words::Drawing::Shape::get_StrokeWeight</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="1023" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a36a8f917435d6d6ca3d5c18218a4b86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::Drawing::Shape::UpdateSmartArtDrawing</definition>
        <argsstring>()</argsstring>
        <name>UpdateSmartArtDrawing</name>
        <qualifiedname>Aspose::Words::Drawing::Shape::UpdateSmartArtDrawing</qualifiedname>
        <briefdescription>
<para>Updates SmartArt pre-rendered drawing by using <ref refid="namespace_aspose_1_1_words" kindref="compound">Aspose.Words</ref>&apos;s SmartArt cold rendering engine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="2379" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents an object in the drawing layer, such as an AutoShape, textbox, freeform, OLE object, ActiveX control, or picture. </para>
    </briefdescription>
    <detaileddescription>
<para>Using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> class you can create or modify shapes in a Microsoft Word document.</para>
<para>An important property of a shape is its <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a5eeaf9498ba9e55eadb2c610ee5bc017" kindref="member">ShapeType</ref>. Shapes of different types can have different capabilities in a Word document. For example, only image and OLE shapes can have images inside them. Most of the shapes can have text, but not all.</para>
<para>Shapes that can have text, can contain <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Paragraph</ref> and <ref refid="class_aspose_1_1_words_1_1_tables_1_1_table" kindref="compound">Table</ref> nodes as children.</para>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base" kindref="compound">Aspose::Words::Drawing::ShapeBase</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_drawing_1_1_group_shape" kindref="compound">Aspose::Words::Drawing::GroupShape</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to extract images from a document, and save them to the local file system as individual files. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Images.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>collection<sp/>of<sp/>shapes<sp/>from<sp/>the<sp/>document,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>save<sp/>the<sp/>image<sp/>data<sp/>of<sp/>every<sp/>shape<sp/>with<sp/>an<sp/>image<sp/>as<sp/>a<sp/>file<sp/>to<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>shapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(9,<sp/>shapes-&gt;LINQ_Count([](SharedPtr&lt;Node&gt;<sp/>s)<sp/>{<sp/>return<sp/>(System::DynamicCast&lt;Shape&gt;(s))-&gt;get_HasImage();<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>imageIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>shape<sp/>:<sp/>System::IterateOver(shapes-&gt;LINQ_OfType&lt;SharedPtr&lt;Shape&gt;&gt;()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape-&gt;get_HasImage())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>image<sp/>data<sp/>of<sp/>shapes<sp/>may<sp/>contain<sp/>images<sp/>of<sp/>many<sp/>possible<sp/>image<sp/>formats.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>determine<sp/>a<sp/>file<sp/>extension<sp/>for<sp/>each<sp/>image<sp/>automatically,<sp/>based<sp/>on<sp/>its<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::Format(u</highlight><highlight class="stringliteral">&quot;File.ExtractImages.{0}{1}&quot;</highlight><highlight class="normal">,<sp/>imageIndex,<sp/><ref refid="class_aspose_1_1_words_1_1_file_format_util_1a21e427265e23db717e528d7f901e570e" kindref="member" tooltip="Converts an Aspose.Words image type enumerated value into a file extension. The returned extension is...">FileFormatUtil::ImageTypeToExtension</ref>(shape-&gt;get_ImageData()-&gt;get_ImageType()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape-&gt;get_ImageData()-&gt;Save(ArtifactsDir<sp/>+<sp/>imageFileName);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageIndex++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a floating image to the center of a page. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>floating<sp/>image<sp/>that<sp/>will<sp/>appear<sp/>behind<sp/>the<sp/>overlapping<sp/>text<sp/>and<sp/>align<sp/>it<sp/>to<sp/>the<sp/>page&apos;s<sp/>center.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99baa6adf97f83acf6453d4a6a4b1070f3754" kindref="member" tooltip="No text wrapping around the shape. The shape is placed behind or in front of text.">WrapType::None</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_BehindText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_RelativeHorizontalPosition(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93a193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="The object is positioned relative to the left edge of the page.">RelativeHorizontalPosition::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_RelativeVerticalPosition(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41da193cfc9be3b995831c6af2fea6650e60" kindref="member" tooltip="The object is positioned relative to the top edge of the page.">RelativeVerticalPosition::Page</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_HorizontalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a9405d962a637184a61edd198df2aa5e4a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Specifies that the object shall be centered with respect to the horizontal alignment base.">HorizontalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a0663b2e567a9ab7e29fbf0cec206fc60a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Specifies that the object shall be centered with respect to the vertical alignment base.">VerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateFloatingPageCenter.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to delete all shapes from a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>two<sp/>shapes<sp/>along<sp/>with<sp/>a<sp/>group<sp/>shape<sp/>with<sp/>another<sp/>shape<sp/>inside<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertShape(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccace9291906a4c3b042650b70d7f3b152e" kindref="member">ShapeType::Rectangle</ref>,<sp/>400,<sp/>200);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertShape(<ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcca26f93e6e68e28a698377e941cb59f29a" kindref="member">ShapeType::Star</ref>,<sp/>300,<sp/>300);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>group<sp/>=<sp/>MakeObject&lt;GroupShape&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">group-&gt;set_Bounds(<ref refid="class/system.drawing.rectangle_f/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::RectangleF</ref>(100.0f,<sp/>50.0f,<sp/>200.0f,<sp/>100.0f));</highlight></codeline>
<codeline><highlight class="normal">group-&gt;set_CoordOrigin(<ref refid="class/system.drawing.point/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Point</ref>(-1000,<sp/>-500));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>subShape<sp/>=<sp/>MakeObject&lt;Shape&gt;(doc,<sp/><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bccaa296104f0c61a9cf39f4824d05315e12" kindref="member">ShapeType::Cube</ref>);</highlight></codeline>
<codeline><highlight class="normal">subShape-&gt;set_Width(500);</highlight></codeline>
<codeline><highlight class="normal">subShape-&gt;set_Height(700);</highlight></codeline>
<codeline><highlight class="normal">subShape-&gt;set_Left(0);</highlight></codeline>
<codeline><highlight class="normal">subShape-&gt;set_Top(0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">group-&gt;AppendChild(subShape);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(group);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad508eb2fbe41d99bb795fb8b05ce868b" kindref="member" tooltip="A group of shapes, images, OLE objects or other group shapes. A GroupShape node can contain other Sha...">NodeType::GroupShape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>all<sp/>Shape<sp/>nodes<sp/>from<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>shapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">shapes-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>shapes<sp/>are<sp/>gone,<sp/>but<sp/>the<sp/>group<sp/>shape<sp/>is<sp/>still<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad508eb2fbe41d99bb795fb8b05ce868b" kindref="member" tooltip="A group of shapes, images, OLE objects or other group shapes. A GroupShape node can contain other Sha...">NodeType::GroupShape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>all<sp/>group<sp/>shapes<sp/>separately.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>groupShapes<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad508eb2fbe41d99bb795fb8b05ce868b" kindref="member" tooltip="A group of shapes, images, OLE objects or other group shapes. A GroupShape node can contain other Sha...">NodeType::GroupShape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">groupShapes-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad508eb2fbe41d99bb795fb8b05ce868b" kindref="member" tooltip="A group of shapes, images, OLE objects or other group shapes. A GroupShape node can contain other Sha...">NodeType::GroupShape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>Aspose::Words::CompositeNode</label>
        <link refid="class_aspose_1_1_words_1_1_composite_node"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>Aspose::Words::Drawing::Core::IFillable</label>
      </node>
      <node id="9">
        <label>Aspose::Words::Drawing::Core::IShape</label>
      </node>
      <node id="14">
        <label>Aspose::Words::Drawing::Core::IStrokable</label>
      </node>
      <node id="13">
        <label>Aspose::Words::Drawing::Core::ITextBox</label>
      </node>
      <node id="1">
        <label>Aspose::Words::Drawing::Shape</label>
        <link refid="class_aspose_1_1_words_1_1_drawing_1_1_shape"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::Drawing::ShapeBase</label>
        <link refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>Aspose::Words::IInline</label>
      </node>
      <node id="7">
        <label>Aspose::Words::INodeCollection</label>
      </node>
      <node id="10">
        <label>Aspose::Words::IShapeAttrSource</label>
      </node>
      <node id="4">
        <label>Aspose::Words::Node</label>
        <link refid="class_aspose_1_1_words_1_1_node"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>Aspose::Words::Revisions::ITrackableNode</label>
      </node>
      <node id="6">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Node &gt; &gt;</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>Aspose::Words::CompositeNode</label>
        <link refid="class_aspose_1_1_words_1_1_composite_node"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>Aspose::Words::Drawing::Core::IFillable</label>
      </node>
      <node id="9">
        <label>Aspose::Words::Drawing::Core::IShape</label>
      </node>
      <node id="14">
        <label>Aspose::Words::Drawing::Core::IStrokable</label>
      </node>
      <node id="13">
        <label>Aspose::Words::Drawing::Core::ITextBox</label>
      </node>
      <node id="1">
        <label>Aspose::Words::Drawing::Shape</label>
        <link refid="class_aspose_1_1_words_1_1_drawing_1_1_shape"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::Drawing::ShapeBase</label>
        <link refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>Aspose::Words::IInline</label>
      </node>
      <node id="7">
        <label>Aspose::Words::INodeCollection</label>
      </node>
      <node id="10">
        <label>Aspose::Words::IShapeAttrSource</label>
      </node>
      <node id="4">
        <label>Aspose::Words::Node</label>
        <link refid="class_aspose_1_1_words_1_1_node"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>Aspose::Words::Revisions::ITrackableNode</label>
      </node>
      <node id="6">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Node &gt; &gt;</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Drawing/Shape.h" line="196" column="1" bodyfile="Aspose.Words.Cpp/Drawing/Shape.h" bodystart="197" bodyend="2445"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa48149d924cce2f917b880b7fc801148" prot="public" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>Accept</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ace540df19f9ab64c6e4372857ab5a352" prot="private" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>AcceptEnd</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a98c95ed19b5685a4e2cc7b04c9072b2f" prot="private" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>AcceptStart</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a0eb996db062258788ee3cd460374ef07" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>AdjustWithEffects</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1af74bc4213aebbe5fd01d2fc0f08b2bec" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>AppendChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a1a2cb446173989c3db6ba925aacee4ff" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4c28008240b3a3e249fb694f78edefbc" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>BaseType1</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a766d300d15428d6dc67b94cea0c48a54" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>BaseType2</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ae5de9c7aa864df2031cab9131b3921ad" prot="private" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>CanInsert</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aefff3e73dec8562ed7cf3850596bff1c" prot="private" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a81dedd9b241b09760112b5e5068f1daa" prot="public" virt="non-virtual" ambiguityscope="Aspose::Words::Node::"><scope>Aspose::Words::Drawing::Shape</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad82af008e52628b8e35a795c6529bd0e" prot="private" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>CppMemberwiseClone</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1aa588c69a1b92e492d308b709a4013884" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_AllowOverlap</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1abbd76a0fae2bfdf65bdeef1d21f00df1" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_AlternativeText</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1aefa125fb3a12bf9db42c01685b6c2ac6" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_AnchorLocked</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a031a008ac3627343b09ab5f136de2f08" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_AspectRatioLocked</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ae4f0041ffbe50df30510138578485368" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_BehindText</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1abc2d086228a5699ab59e35f04ae81f2e" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Bottom</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a7893bb7d05a248699b787e925281147a" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Bounds</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1abcfe6e88b7839388bbb228e304e491ec" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_BoundsInPoints</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a2097f9c9bb8a47950140532341811271" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_BoundsWithEffects</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ad69f36d3c74109072392cc727cab3077" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_CanHaveImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad64299078ecbd9360a766ed4ca22d31f" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Chart</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a98d9935dcf818989566431ab3b75bbed" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_ChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ab9a6bcd1d555257ed2301cabadcdadfc" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_CoordOrigin</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a2cae415b06259af39d1ffd8816293139" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_CoordSize</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a801d3d549eb73e216df5b7a64d9e1c68" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Count</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a941120df17372b25f9a7127a9d9b3816" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_CustomNodeId</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1adab64114ed8fd3da81c0c6485a8829ec" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_DashStyle</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1aa69ac06574c7090cae580435d68048ad" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_DistanceBottom</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ab55942bd8ac7ec17439a30e6a3e9f596" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_DistanceLeft</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a571e10ba569eda7655723f576cde9557" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_DistanceRight</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a631c4a8f9fcce8a99bf64f9f33837f26" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_DistanceTop</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a2a69f84e3ccd323199299c999ab32d46" prot="public" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa074f4e53266222331d20dd58435e823" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_EndArrowLength</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a650329b2041293794c6b5d12348c59ec" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_EndArrowType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ac0d961b0ff420d9175e8ac8da9a08658" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_EndArrowWidth</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a73534cdf0633f44beb4b2def2f31cb90" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_EndCap</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a29919eea6e4c03dff4c16ad466c96299" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_ExtrusionEnabled</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ac931ae8c105ab282deaeed3dd5243ef4" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Fill</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1afd9df948529c9faf7e7f68fec0ffae85" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_FillColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a3b75e0e57f37be17e8017dee249519ae" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Filled</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a052d0e4560975f6c19c77bf19d82eedf" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_FirstChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a1b591166fca77a8dac142d45d88378c9" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_FirstParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a0ab1ba0929c39e90753200f3d424fb0d" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_FlipOrientation</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1abfbacd753f05e6fc4d2ceda5c5f48160" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Font</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a0297cf02fd240b7579f26b6febb6d7c1" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_HasChart</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a4b939686e9a6a245a31cf392d202316d" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_HasChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a62a28d2c5dd426976b891dd3a096d593" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_HasImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a76615445ea7ac716febd75eb994100bc" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_HasSmartArt</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ab5c9a608ab6cf3aae0d8a7b0ddad1d93" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_HasVerticalTextFlow_ITextBox</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a710f9f6525e90536ae70bb7e7088358c" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Height</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a781fb7ba9a7f24658d88c47cc3576912" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_HorizontalAlignment</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a1ee4178d06f7a41d217b435a1ff35b36" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_HorizontalRuleFormat</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1aff1216d8058b8eba0d6ca8a1b7bdaec0" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_HRef</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1abacf5f3de13076cf86ee7397a866c41d" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_ImageData</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a96cf2dd90a284fe9939d1d90780d2d4b" prot="public" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsComposite</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a66d770a9de42206c8c86b82af2e1f7c1" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsDecorative</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a4873ef264bf1e07a0c3ae8971b733891" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsDeleteRevision</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a4c761c151c39ed9bde451a2d07c61089" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsGroup</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a3fc9809a68d9751409fa782d9c9a961f" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsHorizontalRule</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a2834d703758462a9af38bca18168a730" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ab0fd0c17726c6e6271ebd95c165c372f" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsInline</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a34a3796f7d23131725c2753eaf4e140e" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsInsertRevision</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ab11bff9c4ed2cf697502b657b5ea1f4e" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsLayoutInCell</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ab61319c10dd2a692fb0efa3b0091b6c1" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsMoveFromRevision</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a4ef3e1c45ff39cec20593340a60c941d" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsMoveToRevision</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa7902b15138c11dce6d05ac82611ba4a" prot="private" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsPercentWidthInapplicable</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a152aaec074f7d67dc3318f832a40c44f" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsSignatureLine</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1aad673097e63588eaf240695cbcd42994" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsTopLevel</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a3e7b8bc15b671167140b19bc21630423" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_IsWordArt</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ab678c5ca480a2a6414075e439edbbb3d" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_JoinStyle</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a58fae512d8549219b7c3a17ef2d46439" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_LastChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a93c6e06576b527d4ad71947010e6ef7d" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_LastParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a6c3dd2e12d72d75ed2f0169902e7f24f" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Left</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a426c586c9c9050cb86e1a3e7fa7ce6f7" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_LineFillType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a12ee63324fb2fbc30ee59a84fa4df4bd" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_LineStyle</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a43b08c79cf41aeb3f40a0b9259f091f4" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_MarkupLanguage</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aaf411b1cf5c9f5d6d6817dfa65ed97ff" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_MarkupLanguage_ITextBox</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1acbe7f498e75081a22b9fbb6ca019de62" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Name</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a938ff32d060619d89ecefdf57984abf8" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_NextSibling</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1afa9709336672ea09c6ad6bc4d74d7e93" prot="public" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_NodeType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4b7eb04ddf6e5df391b5a2251096f950" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_OleFormat</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ab9e608488885c65a2a165dea6645d15e" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_ParentNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a4504f708dc525feb878abc5f8a67eb22" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_ParentParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a6013fe75e5859c54d12a87f9b97fa7f3" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_PreviousSibling</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0f8077bf80409ba331148095b95bc3e5" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Range</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a38af16efaa889a7401e0b7bf5af2f637" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_RelativeHorizontalPosition</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ae87acd02c08a42d1b353726ee9b925ea" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_RelativeVerticalPosition</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a4d236acad70fc5ba81fcca52a2bcfb37" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Right</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1afc381c6bd444bb370af9c26881de9451" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Rotation</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a411a3268bbaff183b1b770266e7c077a" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_ScreenTip</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a630e7656318f2187c83505deaba9f865" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_ShadowEnabled</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ae9b6453844c01ac2093d5fcf3a7e89ea" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_ShadowFormat</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a5eeaf9498ba9e55eadb2c610ee5bc017" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_ShapeType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad7d3e9e6fdc8405b171dff02db4c61fe" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_SignatureLine</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ac30d65837ebb2f5606b9693563e611ce" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_SizeInPoints</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ada4f610817ebc72d42dbfa24af51d539" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StartArrowLength</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a32a09cc664550256cbc244f8ae44225b" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StartArrowType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ae6ff74095077f915f21dd203250b829b" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StartArrowWidth</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4769a115ca3cb6da799849127d828cef" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StoryType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a1202068af63606b68dc001586e48769a" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Stroke</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a3da15e286c218cec57e605d8c3ab51bd" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StrokeBackColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a8026bca947ee15b9fa75ddedba6104f6" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StrokeColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a49f4baf78b331b1a378dc5668cbb8a8f" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Stroked</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa0d64f29c7c50280efdca848609737e4" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StrokeForeColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa45f37408c2e4dd49e7a57708e91aee6" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StrokeImageBytes</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad25e93f1bdfa997c552c6df935969af6" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StrokeThemeProvider</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a20db86b3d9a5ff03dbf1bc54a6ec21b6" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StrokeTransparency</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ada9befa7c975632b05ed0edf21e2b2e6" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StrokeVisible</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a7e2ce9bd86c33333ac51b7f5b1e885ef" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_StrokeWeight</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a53c6f6d6ecce14b6843f3c1edcb76678" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Target</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a33a6da4fe64876c5e11f5a8df5281d4f" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_TextBox</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad845e2095e4f267b7608b232ebe2f17d" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_TextboxLayoutFlow_ITextBox</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1aa92458d6968b396b09143ac2928e04f8" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_TextBoxWrapMode_ITextBox</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a8fb00ace93888db8d2d0a9b6a438520d" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_TextPath</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a918557acc2081455ff02366f7f6524e9" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Title</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1aedf698ef3083449a1723d821693676ce" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Top</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a75af4341a6b813d17ca83571a1ebbd2b" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_VerticalAlignment</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a55eb67e8d49cb74c8d12a3fb2fedb182" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Weight</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a084bb01d8745091d41a49c4c02a4e4c1" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_Width</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ad8b45fc89bd8031ac9027049ee8a7944" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_WrapSide</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a60c99bc335b520c7d7a70cf00e205d9a" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_WrapType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1af1396cf5ddc616453c0e1930759ba272" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>get_ZOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a951706cfa681573e79a56204a2029e9e" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>GetAncestor</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ae19991f4d5aa7ccb60ce6d7207495f1c" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>GetAncestorOf</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a6d961b080681f8dc6ee551c6c0ce44da" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>GetChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1ae1fc746cc70cea4c9ab30caf39aec146" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>GetChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a6d3cc4280067e07fd504c11e6c968419" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>GetEnumerator</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ab324c1c2a7b81f87048a8bce057ea0a6" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>GetHorizontalMargins_ITextBox</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a421d54a5ad35eee3d4d8baeb96e575a5" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>GetShapeRenderer</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a08b4d2cc617495b60d85a550422e2d8f" prot="public" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>GetText</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1ac0cfce6ca5295fe714f5da1e8e244d9e" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>IndexOf</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a2b6e91eabfc75b02062ae6714cd95ec2" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>InsertAfter</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a247cedb3f1fe5474c87f5b5fa0dcd995" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>InsertBefore</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1abea69d29c928685455fb35c42fce7206" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>LocalToParent</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a7564af32dc67c66f13d1f4e55f7f678c" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a3d5e7b6b0574816cd986fb67eb4db2e6" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a6c581a19d80139c2a4e84e9fe9d30297" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a64e1e6508fb915274286e00729b5a537" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>mField3</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a287ba291b22bc0cd3b3520ce9c82d72b" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>mField4</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ae2ff0e765a63a90906009e8857dc78aa" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>mField5</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ae6e9c45d88ae988653790ebe6291b151" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>mField6</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a4f6979e06a5914aeb37a9cb8448658a6" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>NextPreOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>NodeTypeToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1abae3ff6d970ba209cf4eb1c539b205ee" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>PrependChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af40f9573daf950d978d211d3e75c6a95" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>PreviousPreOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a75a9cc0fda5ec9c8aaa1c4910af8f28c" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>Remove</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a4afce861f4df13714988e44419374f21" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>RemoveAllChildren</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a28888dd687866f66b3bb221e63b5063c" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>RemoveChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a5a00bfd5d2e04d5752d96e226a3f5849" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>RemoveSmartTags</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad216ffad11c3093fecada84d525b2e84" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a553923ba5225bd3d28f1960b72b45f4f" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>SelectNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1aa2eb340deba06c3dcb7cc29dfeca5a99" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>SelectSingleNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1acc7dc4ff6b7a88e8a13d5b76f5cda1b7" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_AllowOverlap</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a4c321580b8f71308644922a7a6d0c5bc" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_AlternativeText</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1afd225275887ad92047205f13d2a802c4" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_AnchorLocked</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a18614e3cd08a4bde7e363c8d6a20f745" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_AspectRatioLocked</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a94f9b1e7341136a5460e7da7b2c72355" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_BehindText</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1af3533f7768677858559c47a11a38ac7d" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Bounds</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a5c1668f5667cbf031ceb2a489932dce8" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_CoordOrigin</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a7cc831a00df842f0155f7cdd9104d509" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_CoordSize</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0d412cc05de7836acb92332e55eea267" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_CustomNodeId</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a0f08b618449ab99ff5d8e3d5688418bb" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_DashStyle</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a06795ba92ebd82a4778169000f27ffcb" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_DistanceBottom</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a38b261f1aaf7890f4d2bff2026a5c194" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_DistanceLeft</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a0db0cb65d73c1ced6226ee1358ffcadb" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_DistanceRight</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1adb34fa751adfa9c155e63e80005ea1c6" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_DistanceTop</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4980401633fd924911430d7a36a449e2" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_EndArrowLength</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a6758556aa4a4bbb2f9216934311892e3" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_EndArrowType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1afd4966fef47c2c0f3f7089491046459f" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_EndArrowWidth</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a1f535c1d5848e7845a8f73d6972bd577" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_EndCap</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1af188d7cd724be7149ef73e52d5d34f37" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_FillColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a24c9c2c110eafc1de86699111415dcef" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Filled</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a924e2ff7783e70071b02a544608c292c" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_FlipOrientation</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1abed8fc11d11242375357e9974a7c0497" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Height</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ab867131e28c0a1017acde848df278653" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_HorizontalAlignment</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a0d06d268e40c69d073f432150a055bf0" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_HRef</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1abdf12385e5b5bbf56e682ddf0047d102" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_IsDecorative</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a75d273297ca00a6c27ac4c2c37e881c0" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_IsLayoutInCell</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a9af6594ee17cc14a6df0a1864a0565a6" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_JoinStyle</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ab9d6ae66e7730dc19412731f5d6f4172" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Left</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4a65022e4f65f0a51cadebb27d68855f" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_LineFillType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ab3e9b6268ab3e5616bf8566e42f6607f" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_LineStyle</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a1309851e4c8b0ad14a193009a44bfd8b" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Name</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a86bb8f4a82367d0b330b49ca564de925" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_RelativeHorizontalPosition</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1ab7e80bf370979becec571db37fb7ab94" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_RelativeVerticalPosition</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a18c713902e8a2187467a88826624ba38" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Rotation</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1afdcd1cc33a847e221702a1455978d383" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_ScreenTip</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a67f9d9b5e8d9bbb62eddaeacb7ccac32" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_StartArrowLength</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ac169c160792bc182edf30efcc5131d75" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_StartArrowType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a14b1ed3ed18623d717ead2e7920b6fc6" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_StartArrowWidth</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ac3855274297ac2b2de2d732106e123d4" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_StrokeBackColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a4e0d137296b16f81fd8bcfcf82ccdc17" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_StrokeColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ababb6b37a96b546820fbc62e401ef304" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Stroked</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ad32fd98158306c9eaa5bf2a3e82d729d" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_StrokeForeColor</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a5d5ba6c9093860b1adb8523a8a24f8c4" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_StrokeTransparency</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a45f5ddd900d4ed0c706ddb59cf9f0b94" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_StrokeVisible</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a2e0939685575103d82be0001dfeddd18" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_StrokeWeight</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a7932ee88f15dcbbec0cd90e7672302f9" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Target</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1aa35ff193e5646c4beeba892e92714470" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Title</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1aa9834b699d9c884bfa80f2da82d54f5e" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Top</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1acb64c64257b64375ada016b188c8f24c" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_VerticalAlignment</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a65feeb4d9c59a05d1a2e2d965501b5f2" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Weight</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1abc1647de067cb60261df30ae474a048d" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_Width</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a51ae331fb67432ba524a81e063f60e5e" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_WrapSide</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a0ce56e8b9f4e2a58728a8579908176c8" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_WrapType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_base_1a45af592e993d78e0b88460402e9f7714" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>set_ZOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a29e186f28a68773c7c7679079c77d827" prot="public" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>SetTemplateWeakPtr</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a24c566eb2a33d78b3b2fbd025f012cf5" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>Shape</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a091520fd6e412bda4d5af8b082c27f10" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a042e240466fe308410e77ebecf22c772" prot="private" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af7aa71ab5f185ee2463406dab7727595" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>ToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ad18f64c5586b84a071957824b24426a2" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>ToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1a36a8f917435d6d6ca3d5c18218a4b86d" prot="public" virt="non-virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>UpdateSmartArtDrawing</name></member>
      <member refid="class_aspose_1_1_words_1_1_drawing_1_1_shape_1ab9d42df3976d474709979763297202cb" prot="private" virt="virtual"><scope>Aspose::Words::Drawing::Shape</scope><name>~Shape</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
