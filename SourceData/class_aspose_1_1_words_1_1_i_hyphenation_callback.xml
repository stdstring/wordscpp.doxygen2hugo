<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_i_hyphenation_callback" kind="interface" language="C++" prot="public" abstract="yes">
    <compoundname>Aspose::Words::IHyphenationCallback</compoundname>
    <basecompoundref refid="class/system.object/" prot="public" virt="non-virtual">System::Object</basecompoundref>
    <includes refid="_i_hyphenation_callback_8h" local="no">Aspose.Words.Cpp/IHyphenationCallback.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_i_hyphenation_callback_1a20b91336ee523fc1285f89c38c714a71" prot="private" static="no">
        <type><ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref></type>
        <definition>typedef System::Object Aspose::Words::IHyphenationCallback::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::IHyphenationCallback::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/IHyphenationCallback.h" line="102" column="28" bodyfile="Aspose.Words.Cpp/IHyphenationCallback.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_i_hyphenation_callback_1aa96b12a418db33be6378b15515bf627c" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_i_hyphenation_callback" kindref="compound">IHyphenationCallback</ref></type>
        <definition>typedef IHyphenationCallback Aspose::Words::IHyphenationCallback::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::IHyphenationCallback::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/IHyphenationCallback.h" line="101" column="34" bodyfile="Aspose.Words.Cpp/IHyphenationCallback.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_i_hyphenation_callback_1a6468eab6c1a32513837a7aa4db11f588" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">BaseType</ref> &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType&gt; Aspose::Words::IHyphenationCallback::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::IHyphenationCallback::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/IHyphenationCallback.h" line="104" column="37" bodyfile="Aspose.Words.Cpp/IHyphenationCallback.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_i_hyphenation_callback_1aee6c9a675d4039af2c40ecc9b7d57764" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::IHyphenationCallback::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::IHyphenationCallback::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/IHyphenationCallback.h" line="105" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_i_hyphenation_callback_1af458dbbfe9b025e623e44adb78dadc99" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Aspose::Words::IHyphenationCallback::RequestDictionary</definition>
        <argsstring>(System::String language)=0</argsstring>
        <name>RequestDictionary</name>
        <qualifiedname>Aspose::Words::IHyphenationCallback::RequestDictionary</qualifiedname>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>language</declname>
        </param>
        <briefdescription>
<para>Notifies application that hyphenation dictionary for the specified language wasn&apos;t found and may need to be registered. Implementation should find a dictionary and register it using <ref refid="" kindref="compound">RegisterDictionary()</ref> methods. If dictionary is unavailable for the specified language implementation can opt out of further calls for the same language using <ref refid="" kindref="compound">RegisterDictionary()</ref> with null value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>language</parametername>
</parameternamelist>
<parameterdescription>
<para>A language name, e.g. &quot;en-US&quot;. See .NET documentation for &quot;culture name&quot; and RFC 4646 for details.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to open and register a dictionary from a file. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterDictionary()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>a<sp/>callback<sp/>that<sp/>tracks<sp/>warnings<sp/>that<sp/>occur<sp/>during<sp/>hyphenation<sp/>dictionary<sp/>registration.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>warningInfoCollection<sp/>=<sp/>MakeObject&lt;WarningInfoCollection&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_aspose_1_1_words_1_1_hyphenation_1a0b0259636882abbaeedb230db06f36ed" kindref="member" tooltip="Setter for Aspose::Words::Hyphenation::get_WarningCallback.">Hyphenation::set_WarningCallback</ref>(warningInfoCollection);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>an<sp/>English<sp/>(US)<sp/>hyphenation<sp/>dictionary<sp/>by<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>dictionaryStream<sp/>=<sp/>MakeObject&lt;System::IO::FileStream&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;hyph_en_US.dic&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Open);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_aspose_1_1_words_1_1_hyphenation_1aa872f107aa67a1dd4a04a9f9cfff018b" kindref="member" tooltip="Registers and loads a hyphenation dictionary for the specified language from a stream....">Hyphenation::RegisterDictionary</ref>(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/>dictionaryStream);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(0,<sp/>warningInfoCollection-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>with<sp/>a<sp/>locale<sp/>that<sp/>Microsoft<sp/>Word<sp/>may<sp/>not<sp/>hyphenate<sp/>on<sp/>an<sp/>English<sp/>machine,<sp/>such<sp/>as<sp/>German.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;German<sp/>text.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>hyphenate<sp/>that<sp/>document<sp/>upon<sp/>saving,<sp/>we<sp/>need<sp/>a<sp/>hyphenation<sp/>dictionary<sp/>for<sp/>the<sp/>&quot;de-CH&quot;<sp/>language<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>callback<sp/>will<sp/>handle<sp/>the<sp/>automatic<sp/>request<sp/>for<sp/>that<sp/>dictionary.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_aspose_1_1_words_1_1_hyphenation_1a4a4e884a28752c7b277dbb6ab121a601" kindref="member" tooltip="Setter for Aspose::Words::Hyphenation::get_Callback.">Hyphenation::set_Callback</ref>(MakeObject&lt;ExHyphenation::CustomHyphenationDictionaryRegister&gt;());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>save<sp/>the<sp/>document,<sp/>German<sp/>hyphenation<sp/>will<sp/>take<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Hyphenation.RegisterDictionary.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>dictionary<sp/>contains<sp/>two<sp/>identical<sp/>patterns,<sp/>which<sp/>will<sp/>trigger<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(1,<sp/>warningInfoCollection-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a1c629c0b794b98e0d49bcaf2746f58d9a3bb648b63d3b0dadb5e06c5d8cffea99" kindref="member" tooltip="Generic minor formatting loss, no specific code.">WarningType::MinorFormattingLoss</ref>,<sp/>warningInfoCollection-&gt;idx_get(0)-&gt;get_WarningType());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae78cf72acefc2cbe63016b04f8f44e7caebd9bec4d70abc789d439c1f136b0538" kindref="member" tooltip="Module that builds a document layout.">WarningSource::Layout</ref>,<sp/>warningInfoCollection-&gt;idx_get(0)-&gt;get_Source());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hyphenation<sp/>dictionary<sp/>contains<sp/>duplicate<sp/>patterns.<sp/>The<sp/>only<sp/>first<sp/>found<sp/>pattern<sp/>will<sp/>be<sp/>used.<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;Content<sp/>can<sp/>be<sp/>wrapped<sp/>differently.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warningInfoCollection-&gt;idx_get(0)-&gt;get_Description());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">CustomHyphenationDictionaryRegister<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IHyphenationCallback</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CustomHyphenationDictionaryRegister()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mHyphenationDictionaryFiles<sp/>=<sp/>MakeObject&lt;System::Collections::Generic::Dictionary&lt;String,<sp/>String&gt;&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mHyphenationDictionaryFiles-&gt;Add(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/>MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;hyph_en_US.dic&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mHyphenationDictionaryFiles-&gt;Add(u</highlight><highlight class="stringliteral">&quot;de-CH&quot;</highlight><highlight class="normal">,<sp/>MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;hyph_de_CH.dic&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RequestDictionary(String<sp/>language)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hyphenation<sp/>dictionary<sp/>requested:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>language);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hyphenation::IsDictionaryRegistered(language))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>is<sp/>already<sp/>registered.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mHyphenationDictionaryFiles-&gt;ContainsKey(language))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hyphenation::RegisterDictionary(language,<sp/>mHyphenationDictionaryFiles-&gt;idx_get(language));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>successfully<sp/>registered.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>no<sp/>respective<sp/>dictionary<sp/>file<sp/>known<sp/>by<sp/>this<sp/>Callback.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::Dictionary&lt;String,<sp/>String&gt;&gt;<sp/>mHyphenationDictionaryFiles;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/IHyphenationCallback.h" line="188" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implemented by classes which can register hyphenation dictionaries. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to open and register a dictionary from a file. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterDictionary()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>a<sp/>callback<sp/>that<sp/>tracks<sp/>warnings<sp/>that<sp/>occur<sp/>during<sp/>hyphenation<sp/>dictionary<sp/>registration.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>warningInfoCollection<sp/>=<sp/>MakeObject&lt;WarningInfoCollection&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_aspose_1_1_words_1_1_hyphenation_1a0b0259636882abbaeedb230db06f36ed" kindref="member" tooltip="Setter for Aspose::Words::Hyphenation::get_WarningCallback.">Hyphenation::set_WarningCallback</ref>(warningInfoCollection);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>an<sp/>English<sp/>(US)<sp/>hyphenation<sp/>dictionary<sp/>by<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>dictionaryStream<sp/>=<sp/>MakeObject&lt;System::IO::FileStream&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;hyph_en_US.dic&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Open);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_aspose_1_1_words_1_1_hyphenation_1aa872f107aa67a1dd4a04a9f9cfff018b" kindref="member" tooltip="Registers and loads a hyphenation dictionary for the specified language from a stream....">Hyphenation::RegisterDictionary</ref>(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/>dictionaryStream);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(0,<sp/>warningInfoCollection-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>a<sp/>document<sp/>with<sp/>a<sp/>locale<sp/>that<sp/>Microsoft<sp/>Word<sp/>may<sp/>not<sp/>hyphenate<sp/>on<sp/>an<sp/>English<sp/>machine,<sp/>such<sp/>as<sp/>German.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;German<sp/>text.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>hyphenate<sp/>that<sp/>document<sp/>upon<sp/>saving,<sp/>we<sp/>need<sp/>a<sp/>hyphenation<sp/>dictionary<sp/>for<sp/>the<sp/>&quot;de-CH&quot;<sp/>language<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>callback<sp/>will<sp/>handle<sp/>the<sp/>automatic<sp/>request<sp/>for<sp/>that<sp/>dictionary.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_aspose_1_1_words_1_1_hyphenation_1a4a4e884a28752c7b277dbb6ab121a601" kindref="member" tooltip="Setter for Aspose::Words::Hyphenation::get_Callback.">Hyphenation::set_Callback</ref>(MakeObject&lt;ExHyphenation::CustomHyphenationDictionaryRegister&gt;());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>save<sp/>the<sp/>document,<sp/>German<sp/>hyphenation<sp/>will<sp/>take<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Hyphenation.RegisterDictionary.pdf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>dictionary<sp/>contains<sp/>two<sp/>identical<sp/>patterns,<sp/>which<sp/>will<sp/>trigger<sp/>a<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(1,<sp/>warningInfoCollection-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a1c629c0b794b98e0d49bcaf2746f58d9a3bb648b63d3b0dadb5e06c5d8cffea99" kindref="member" tooltip="Generic minor formatting loss, no specific code.">WarningType::MinorFormattingLoss</ref>,<sp/>warningInfoCollection-&gt;idx_get(0)-&gt;get_WarningType());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae78cf72acefc2cbe63016b04f8f44e7caebd9bec4d70abc789d439c1f136b0538" kindref="member" tooltip="Module that builds a document layout.">WarningSource::Layout</ref>,<sp/>warningInfoCollection-&gt;idx_get(0)-&gt;get_Source());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hyphenation<sp/>dictionary<sp/>contains<sp/>duplicate<sp/>patterns.<sp/>The<sp/>only<sp/>first<sp/>found<sp/>pattern<sp/>will<sp/>be<sp/>used.<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;Content<sp/>can<sp/>be<sp/>wrapped<sp/>differently.&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warningInfoCollection-&gt;idx_get(0)-&gt;get_Description());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">CustomHyphenationDictionaryRegister<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IHyphenationCallback</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CustomHyphenationDictionaryRegister()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mHyphenationDictionaryFiles<sp/>=<sp/>MakeObject&lt;System::Collections::Generic::Dictionary&lt;String,<sp/>String&gt;&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mHyphenationDictionaryFiles-&gt;Add(u</highlight><highlight class="stringliteral">&quot;en-US&quot;</highlight><highlight class="normal">,<sp/>MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;hyph_en_US.dic&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mHyphenationDictionaryFiles-&gt;Add(u</highlight><highlight class="stringliteral">&quot;de-CH&quot;</highlight><highlight class="normal">,<sp/>MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;hyph_de_CH.dic&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RequestDictionary(String<sp/>language)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hyphenation<sp/>dictionary<sp/>requested:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>language);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Hyphenation::IsDictionaryRegistered(language))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>is<sp/>already<sp/>registered.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mHyphenationDictionaryFiles-&gt;ContainsKey(language))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Hyphenation::RegisterDictionary(language,<sp/>mHyphenationDictionaryFiles-&gt;idx_get(language));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>successfully<sp/>registered.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>no<sp/>respective<sp/>dictionary<sp/>file<sp/>known<sp/>by<sp/>this<sp/>Callback.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::Dictionary&lt;String,<sp/>String&gt;&gt;<sp/>mHyphenationDictionaryFiles;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Aspose::Words::IHyphenationCallback</label>
        <link refid="class_aspose_1_1_words_1_1_i_hyphenation_callback"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Aspose::Words::IHyphenationCallback</label>
        <link refid="class_aspose_1_1_words_1_1_i_hyphenation_callback"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/IHyphenationCallback.h" line="99" column="1" bodyfile="Aspose.Words.Cpp/IHyphenationCallback.h" bodystart="100" bodyend="190"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_i_hyphenation_callback_1a20b91336ee523fc1285f89c38c714a71" prot="private" virt="non-virtual"><scope>Aspose::Words::IHyphenationCallback</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_i_hyphenation_callback_1af458dbbfe9b025e623e44adb78dadc99" prot="public" virt="pure-virtual"><scope>Aspose::Words::IHyphenationCallback</scope><name>RequestDictionary</name></member>
      <member refid="class_aspose_1_1_words_1_1_i_hyphenation_callback_1aee6c9a675d4039af2c40ecc9b7d57764" prot="private" virt="non-virtual"><scope>Aspose::Words::IHyphenationCallback</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_i_hyphenation_callback_1aa96b12a418db33be6378b15515bf627c" prot="private" virt="non-virtual"><scope>Aspose::Words::IHyphenationCallback</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_i_hyphenation_callback_1a6468eab6c1a32513837a7aa4db11f588" prot="private" virt="non-virtual"><scope>Aspose::Words::IHyphenationCallback</scope><name>ThisTypeBaseTypesInfo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
