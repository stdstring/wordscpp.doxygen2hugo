<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_variable_collection" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::VariableCollection</compoundname>
    <basecompoundref refid="class/system.collections.generic.i_enumerable/" prot="public" virt="non-virtual">System::Collections::Generic::IEnumerable&lt; System::Collections::Generic::KeyValuePair&lt; System::String, System::String &gt; &gt;</basecompoundref>
    <includes refid="_variable_collection_8h" local="no">Aspose.Words.Cpp/VariableCollection.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_variable_collection_1a6b1f13711b471a4017f7a7df369075b4" prot="private" static="no">
        <type><ref refid="class/system.collections.generic.i_enumerable/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::IEnumerable</ref>&lt; <ref refid="class/system.collections.generic.key_value_pair/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::KeyValuePair</ref>&lt; <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref>, <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &gt; &gt;</type>
        <definition>typedef System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String, System::String&gt; &gt; Aspose::Words::VariableCollection::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::VariableCollection::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="110" column="55" bodyfile="Aspose.Words.Cpp/VariableCollection.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_variable_collection_1aff7af9a8671a4cdbdcb3ba61cc8c28f6" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection" kindref="compound">VariableCollection</ref></type>
        <definition>typedef VariableCollection Aspose::Words::VariableCollection::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::VariableCollection::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="109" column="32" bodyfile="Aspose.Words.Cpp/VariableCollection.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_variable_collection_1ae0d38459349c4c1bef05d5e7a2b21f86" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class/system.collections.generic.i_enumerable/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">BaseType</ref> &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType&gt; Aspose::Words::VariableCollection::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::VariableCollection::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="112" column="37" bodyfile="Aspose.Words.Cpp/VariableCollection.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_variable_collection_1a61e6be93fc4339e9f9477a5162f62e20" prot="public" static="no">
        <type>typename <ref refid="class/system.collections.generic.sorted_list/_1a91d370b050163d5f0859ed4d87d916e3" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">iterator_holder_type::const_iterator</ref></type>
        <definition>using Aspose::Words::VariableCollection::const_iterator =  typename iterator_holder_type::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>Aspose::Words::VariableCollection::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="121" column="5" bodyfile="Aspose.Words.Cpp/VariableCollection.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_variable_collection_1a55bff34807b603fc52ee895b57567f0e" prot="public" static="no">
        <type>typename <ref refid="class/system.collections.generic.sorted_list/_1ac3d6d4d22d9de58a188a64d37f68f697" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">iterator_holder_type::iterator</ref></type>
        <definition>using Aspose::Words::VariableCollection::iterator =  typename iterator_holder_type::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>Aspose::Words::VariableCollection::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="119" column="5" bodyfile="Aspose.Words.Cpp/VariableCollection.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_variable_collection_1a58ccda55782f46dac97039de4b3446f1" prot="public" static="no">
        <type><ref refid="class/system.collections.generic.sorted_list/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::SortedList</ref>&lt; <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref>, <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &gt;</type>
        <definition>using Aspose::Words::VariableCollection::iterator_holder_type =  System::Collections::Generic::SortedList&lt;System::String, System::String&gt;</definition>
        <argsstring></argsstring>
        <name>iterator_holder_type</name>
        <qualifiedname>Aspose::Words::VariableCollection::iterator_holder_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="117" column="5" bodyfile="Aspose.Words.Cpp/VariableCollection.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_variable_collection_1ad6d931df7f7564df1e66dea996c85edf" prot="public" static="no">
        <type>typename <ref refid="class/system.collections.generic.i_enumerable/_1a728213db2c392697ade8169f6a54cb8a" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">iterator_holder_type::virtualized_iterator</ref></type>
        <definition>using Aspose::Words::VariableCollection::virtualized_iterator =  typename iterator_holder_type::virtualized_iterator</definition>
        <argsstring></argsstring>
        <name>virtualized_iterator</name>
        <qualifiedname>Aspose::Words::VariableCollection::virtualized_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="125" column="5" bodyfile="Aspose.Words.Cpp/VariableCollection.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_variable_collection_1a607b65f03ea3bbf8efec3c71dbaa78d7" prot="public" static="no">
        <type>typename <ref refid="class/system.collections.generic.i_enumerable/_1a3a2f6052e0f1f1182c3694c377f3947a" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">iterator_holder_type::virtualized_iterator_element</ref></type>
        <definition>using Aspose::Words::VariableCollection::virtualized_iterator_element =  typename iterator_holder_type::virtualized_iterator_element</definition>
        <argsstring></argsstring>
        <name>virtualized_iterator_element</name>
        <qualifiedname>Aspose::Words::VariableCollection::virtualized_iterator_element</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="123" column="5" bodyfile="Aspose.Words.Cpp/VariableCollection.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_variable_collection_1a00373b1c870e6194ce76b00bc250b5f8" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::VariableCollection::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::VariableCollection::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="760" column="23" bodyfile="Aspose.Words.Cpp/VariableCollection.h" bodystart="760" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1ac084200b4939b398a8a0f07ff16e2657" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::VariableCollection::VariableCollection</definition>
        <argsstring>()</argsstring>
        <name>VariableCollection</name>
        <qualifiedname>Aspose::Words::VariableCollection::VariableCollection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="754" column="5"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a8a67fd556c7ff7caa2babbdc74abf579" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::VariableCollection::~VariableCollection</definition>
        <argsstring>()</argsstring>
        <name>~VariableCollection</name>
        <qualifiedname>Aspose::Words::VariableCollection::~VariableCollection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="756" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1ac995e0c4185d8556c2ff3ad97fe1fe69" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::VariableCollection::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::VariableCollection::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="113" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1af65a327c1bab0311b9eaa51d052a9c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::VariableCollection::Add</definition>
        <argsstring>(const System::String &amp;name, const System::String &amp;value)</argsstring>
        <name>Add</name>
        <qualifiedname>Aspose::Words::VariableCollection::Add</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Adds a document variable to the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The case-insensitive name of the variable to add. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the variable. The value cannot be null, if value is null empty string will be used instead.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document&apos;s variable collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VariableCollection&gt;<sp/>variables<sp/>=<sp/>doc-&gt;get_Variables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>document<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>key/value<sp/>pair<sp/>variables,<sp/>which<sp/>we<sp/>can<sp/>add<sp/>items<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>variables-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>display<sp/>the<sp/>values<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>document<sp/>body<sp/>using<sp/>DOCVARIABLE<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldDocVariable&gt;(builder-&gt;InsertField(FieldType::FieldDocVariable,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_VariableName(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigning<sp/>values<sp/>to<sp/>existing<sp/>keys<sp/>will<sp/>update<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>then<sp/>have<sp/>to<sp/>update<sp/>DOCVARIABLE<sp/>fields<sp/>to<sp/>ensure<sp/>they<sp/>display<sp/>an<sp/>up-to-date<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>document<sp/>variables<sp/>with<sp/>a<sp/>certain<sp/>name<sp/>or<sp/>value<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;LINQ_Any([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v.get_Value()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>collection<sp/>of<sp/>variables<sp/>automatically<sp/>sorts<sp/>variables<sp/>alphabetically<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;String,<sp/>String&gt;&gt;&gt;<sp/>enumerator<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Variables()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>removing<sp/>document<sp/>variables<sp/>from<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Remove(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Clear<sp/>the<sp/>whole<sp/>collection<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="363" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a8f134bc9e18a13c02b04655a4f883b54" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection_1a61e6be93fc4339e9f9477a5162f62e20" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Aspose::Words::VariableCollection::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>Aspose::Words::VariableCollection::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="736" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a4acb85817f542d03af8757540ac949a8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection_1a55bff34807b603fc52ee895b57567f0e" kindref="member">iterator</ref></type>
        <definition>iterator Aspose::Words::VariableCollection::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>Aspose::Words::VariableCollection::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="732" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1aec24d1845d7f59586d29ba169e4094ab" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection_1a61e6be93fc4339e9f9477a5162f62e20" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Aspose::Words::VariableCollection::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <qualifiedname>Aspose::Words::VariableCollection::cbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="740" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a996f2c75bdbd1b759e67e5a92b72a8d8" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection_1a61e6be93fc4339e9f9477a5162f62e20" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Aspose::Words::VariableCollection::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <qualifiedname>Aspose::Words::VariableCollection::cend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="742" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1ad379eb5c5851dfb571eac65213470631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::VariableCollection::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <qualifiedname>Aspose::Words::VariableCollection::Clear</qualifiedname>
        <briefdescription>
<para>Removes all elements from the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document&apos;s variable collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VariableCollection&gt;<sp/>variables<sp/>=<sp/>doc-&gt;get_Variables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>document<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>key/value<sp/>pair<sp/>variables,<sp/>which<sp/>we<sp/>can<sp/>add<sp/>items<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>variables-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>display<sp/>the<sp/>values<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>document<sp/>body<sp/>using<sp/>DOCVARIABLE<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldDocVariable&gt;(builder-&gt;InsertField(FieldType::FieldDocVariable,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_VariableName(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigning<sp/>values<sp/>to<sp/>existing<sp/>keys<sp/>will<sp/>update<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>then<sp/>have<sp/>to<sp/>update<sp/>DOCVARIABLE<sp/>fields<sp/>to<sp/>ensure<sp/>they<sp/>display<sp/>an<sp/>up-to-date<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>document<sp/>variables<sp/>with<sp/>a<sp/>certain<sp/>name<sp/>or<sp/>value<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;LINQ_Any([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v.get_Value()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>collection<sp/>of<sp/>variables<sp/>automatically<sp/>sorts<sp/>variables<sp/>alphabetically<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;String,<sp/>String&gt;&gt;&gt;<sp/>enumerator<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Variables()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>removing<sp/>document<sp/>variables<sp/>from<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Remove(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Clear<sp/>the<sp/>whole<sp/>collection<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="730" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a7b6d244e99a7a40f9efdcfb29388ede5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::VariableCollection::Contains</definition>
        <argsstring>(const System::String &amp;name)</argsstring>
        <name>Contains</name>
        <qualifiedname>Aspose::Words::VariableCollection::Contains</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Determines whether the collection contains a document variable with the given name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Case-insensitive name of the document variable to locate.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if item is found in the collection; otherwise, false.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document&apos;s variable collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VariableCollection&gt;<sp/>variables<sp/>=<sp/>doc-&gt;get_Variables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>document<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>key/value<sp/>pair<sp/>variables,<sp/>which<sp/>we<sp/>can<sp/>add<sp/>items<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>variables-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>display<sp/>the<sp/>values<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>document<sp/>body<sp/>using<sp/>DOCVARIABLE<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldDocVariable&gt;(builder-&gt;InsertField(FieldType::FieldDocVariable,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_VariableName(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigning<sp/>values<sp/>to<sp/>existing<sp/>keys<sp/>will<sp/>update<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>then<sp/>have<sp/>to<sp/>update<sp/>DOCVARIABLE<sp/>fields<sp/>to<sp/>ensure<sp/>they<sp/>display<sp/>an<sp/>up-to-date<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>document<sp/>variables<sp/>with<sp/>a<sp/>certain<sp/>name<sp/>or<sp/>value<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;LINQ_Any([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v.get_Value()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>collection<sp/>of<sp/>variables<sp/>automatically<sp/>sorts<sp/>variables<sp/>alphabetically<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;String,<sp/>String&gt;&gt;&gt;<sp/>enumerator<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Variables()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>removing<sp/>document<sp/>variables<sp/>from<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Remove(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Clear<sp/>the<sp/>whole<sp/>collection<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="438" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a2180ed7afd28b62b19b7c8684de02ac9" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection_1a61e6be93fc4339e9f9477a5162f62e20" kindref="member">const_iterator</ref></type>
        <definition>const_iterator Aspose::Words::VariableCollection::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>Aspose::Words::VariableCollection::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="738" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1aa73f89a7f051a9cd1c3349c17ee3b5b6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection_1a55bff34807b603fc52ee895b57567f0e" kindref="member">iterator</ref></type>
        <definition>iterator Aspose::Words::VariableCollection::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>Aspose::Words::VariableCollection::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="734" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1ad9bdb3c180bc9a7a1e5787a04c6734ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::VariableCollection::get_Count</definition>
        <argsstring>()</argsstring>
        <name>get_Count</name>
        <qualifiedname>Aspose::Words::VariableCollection::get_Count</qualifiedname>
        <briefdescription>
<para>Gets the number of elements contained in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document&apos;s variable collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VariableCollection&gt;<sp/>variables<sp/>=<sp/>doc-&gt;get_Variables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>document<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>key/value<sp/>pair<sp/>variables,<sp/>which<sp/>we<sp/>can<sp/>add<sp/>items<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>variables-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>display<sp/>the<sp/>values<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>document<sp/>body<sp/>using<sp/>DOCVARIABLE<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldDocVariable&gt;(builder-&gt;InsertField(FieldType::FieldDocVariable,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_VariableName(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigning<sp/>values<sp/>to<sp/>existing<sp/>keys<sp/>will<sp/>update<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>then<sp/>have<sp/>to<sp/>update<sp/>DOCVARIABLE<sp/>fields<sp/>to<sp/>ensure<sp/>they<sp/>display<sp/>an<sp/>up-to-date<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>document<sp/>variables<sp/>with<sp/>a<sp/>certain<sp/>name<sp/>or<sp/>value<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;LINQ_Any([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v.get_Value()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>collection<sp/>of<sp/>variables<sp/>automatically<sp/>sorts<sp/>variables<sp/>alphabetically<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;String,<sp/>String&gt;&gt;&gt;<sp/>enumerator<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Variables()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>removing<sp/>document<sp/>variables<sp/>from<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Remove(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Clear<sp/>the<sp/>whole<sp/>collection<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="198" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a6fd0b352ed0569636e8aa31df885f39d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.collections.generic.i_enumerator/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::IEnumerator</ref>&lt; <ref refid="class/system.collections.generic.key_value_pair/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::KeyValuePair</ref>&lt; <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref>, <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &gt; &gt; &gt;</type>
        <definition>System::SharedPtr&lt; System::Collections::Generic::IEnumerator&lt; System::Collections::Generic::KeyValuePair&lt; System::String, System::String &gt; &gt; &gt; Aspose::Words::VariableCollection::GetEnumerator</definition>
        <argsstring>() override</argsstring>
        <name>GetEnumerator</name>
        <qualifiedname>Aspose::Words::VariableCollection::GetEnumerator</qualifiedname>
        <briefdescription>
<para>Returns an enumerator object that can be used to iterate over all variable in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document&apos;s variable collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VariableCollection&gt;<sp/>variables<sp/>=<sp/>doc-&gt;get_Variables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>document<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>key/value<sp/>pair<sp/>variables,<sp/>which<sp/>we<sp/>can<sp/>add<sp/>items<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>variables-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>display<sp/>the<sp/>values<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>document<sp/>body<sp/>using<sp/>DOCVARIABLE<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldDocVariable&gt;(builder-&gt;InsertField(FieldType::FieldDocVariable,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_VariableName(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigning<sp/>values<sp/>to<sp/>existing<sp/>keys<sp/>will<sp/>update<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>then<sp/>have<sp/>to<sp/>update<sp/>DOCVARIABLE<sp/>fields<sp/>to<sp/>ensure<sp/>they<sp/>display<sp/>an<sp/>up-to-date<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>document<sp/>variables<sp/>with<sp/>a<sp/>certain<sp/>name<sp/>or<sp/>value<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;LINQ_Any([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v.get_Value()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>collection<sp/>of<sp/>variables<sp/>automatically<sp/>sorts<sp/>variables<sp/>alphabetically<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;String,<sp/>String&gt;&gt;&gt;<sp/>enumerator<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Variables()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>removing<sp/>document<sp/>variables<sp/>from<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Remove(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Clear<sp/>the<sp/>whole<sp/>collection<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="289" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a5a35bab3f3cf9ff9a92e0257e81c9843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::VariableCollection::idx_get</definition>
        <argsstring>(const System::String &amp;name)</argsstring>
        <name>idx_get</name>
        <qualifiedname>Aspose::Words::VariableCollection::idx_get</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Gets or a sets a document variable by the case-insensitive name. null values are not allowed as a right hand side of the assignment and will be replaced by empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="202" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a3a84137e34ced9f8d8210b1fe536078a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::VariableCollection::idx_get</definition>
        <argsstring>(int32_t index)</argsstring>
        <name>idx_get</name>
        <qualifiedname>Aspose::Words::VariableCollection::idx_get</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Gets or sets a document variable at the specified index. null values are not allowed as a right hand side of the assignment and will be replaced by empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of the document variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="212" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1aef1bce2e1754cc202969307c1c495261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::VariableCollection::idx_set</definition>
        <argsstring>(const System::String &amp;name, const System::String &amp;value)</argsstring>
        <name>idx_set</name>
        <qualifiedname>Aspose::Words::VariableCollection::idx_set</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Gets or a sets a document variable by the case-insensitive name. null values are not allowed as a right hand side of the assignment and will be replaced by empty string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="206" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a0d61f0deb7ea88fc18167b7d6964a205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::VariableCollection::idx_set</definition>
        <argsstring>(int32_t index, const System::String &amp;value)</argsstring>
        <name>idx_set</name>
        <qualifiedname>Aspose::Words::VariableCollection::idx_set</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Gets or sets a document variable at the specified index. null values are not allowed as a right hand side of the assignment and will be replaced by empty string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of the document variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="218" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1ab473e97b60b44ada95fed00c462965fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::VariableCollection::IndexOfKey</definition>
        <argsstring>(const System::String &amp;name)</argsstring>
        <name>IndexOfKey</name>
        <qualifiedname>Aspose::Words::VariableCollection::IndexOfKey</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns the zero-based index of the specified document variable in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The case-insensitive name of the variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The zero based index. Negative value if not found.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document&apos;s variable collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VariableCollection&gt;<sp/>variables<sp/>=<sp/>doc-&gt;get_Variables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>document<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>key/value<sp/>pair<sp/>variables,<sp/>which<sp/>we<sp/>can<sp/>add<sp/>items<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>variables-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>display<sp/>the<sp/>values<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>document<sp/>body<sp/>using<sp/>DOCVARIABLE<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldDocVariable&gt;(builder-&gt;InsertField(FieldType::FieldDocVariable,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_VariableName(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigning<sp/>values<sp/>to<sp/>existing<sp/>keys<sp/>will<sp/>update<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>then<sp/>have<sp/>to<sp/>update<sp/>DOCVARIABLE<sp/>fields<sp/>to<sp/>ensure<sp/>they<sp/>display<sp/>an<sp/>up-to-date<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>document<sp/>variables<sp/>with<sp/>a<sp/>certain<sp/>name<sp/>or<sp/>value<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;LINQ_Any([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v.get_Value()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>collection<sp/>of<sp/>variables<sp/>automatically<sp/>sorts<sp/>variables<sp/>alphabetically<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;String,<sp/>String&gt;&gt;&gt;<sp/>enumerator<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Variables()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>removing<sp/>document<sp/>variables<sp/>from<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Remove(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Clear<sp/>the<sp/>whole<sp/>collection<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="513" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a60880e9ec5b5306653ce417d86b70734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::VariableCollection::Remove</definition>
        <argsstring>(const System::String &amp;name)</argsstring>
        <name>Remove</name>
        <qualifiedname>Aspose::Words::VariableCollection::Remove</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Removes a document variable with the specified name from the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The case-insensitive name of the variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document&apos;s variable collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VariableCollection&gt;<sp/>variables<sp/>=<sp/>doc-&gt;get_Variables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>document<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>key/value<sp/>pair<sp/>variables,<sp/>which<sp/>we<sp/>can<sp/>add<sp/>items<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>variables-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>display<sp/>the<sp/>values<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>document<sp/>body<sp/>using<sp/>DOCVARIABLE<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldDocVariable&gt;(builder-&gt;InsertField(FieldType::FieldDocVariable,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_VariableName(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigning<sp/>values<sp/>to<sp/>existing<sp/>keys<sp/>will<sp/>update<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>then<sp/>have<sp/>to<sp/>update<sp/>DOCVARIABLE<sp/>fields<sp/>to<sp/>ensure<sp/>they<sp/>display<sp/>an<sp/>up-to-date<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>document<sp/>variables<sp/>with<sp/>a<sp/>certain<sp/>name<sp/>or<sp/>value<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;LINQ_Any([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v.get_Value()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>collection<sp/>of<sp/>variables<sp/>automatically<sp/>sorts<sp/>variables<sp/>alphabetically<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;String,<sp/>String&gt;&gt;&gt;<sp/>enumerator<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Variables()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>removing<sp/>document<sp/>variables<sp/>from<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Remove(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Clear<sp/>the<sp/>whole<sp/>collection<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="586" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a25b15230f1e618a5af85aeecd9efe58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::VariableCollection::RemoveAt</definition>
        <argsstring>(int32_t index)</argsstring>
        <name>RemoveAt</name>
        <qualifiedname>Aspose::Words::VariableCollection::RemoveAt</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Removes a document variable at the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The zero based index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document&apos;s variable collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VariableCollection&gt;<sp/>variables<sp/>=<sp/>doc-&gt;get_Variables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>document<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>key/value<sp/>pair<sp/>variables,<sp/>which<sp/>we<sp/>can<sp/>add<sp/>items<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>variables-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>display<sp/>the<sp/>values<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>document<sp/>body<sp/>using<sp/>DOCVARIABLE<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldDocVariable&gt;(builder-&gt;InsertField(FieldType::FieldDocVariable,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_VariableName(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigning<sp/>values<sp/>to<sp/>existing<sp/>keys<sp/>will<sp/>update<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>then<sp/>have<sp/>to<sp/>update<sp/>DOCVARIABLE<sp/>fields<sp/>to<sp/>ensure<sp/>they<sp/>display<sp/>an<sp/>up-to-date<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>document<sp/>variables<sp/>with<sp/>a<sp/>certain<sp/>name<sp/>or<sp/>value<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;LINQ_Any([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v.get_Value()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>collection<sp/>of<sp/>variables<sp/>automatically<sp/>sorts<sp/>variables<sp/>alphabetically<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;String,<sp/>String&gt;&gt;&gt;<sp/>enumerator<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Variables()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>removing<sp/>document<sp/>variables<sp/>from<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Remove(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Clear<sp/>the<sp/>whole<sp/>collection<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="659" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1ab499485743b0afec0a8b00c11a2b1971" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection_1ad6d931df7f7564df1e66dea996c85edf" kindref="member">virtualized_iterator</ref> *</type>
        <definition>virtualized_iterator * Aspose::Words::VariableCollection::virtualizeBeginConstIterator</definition>
        <argsstring>() const override</argsstring>
        <name>virtualizeBeginConstIterator</name>
        <qualifiedname>Aspose::Words::VariableCollection::virtualizeBeginConstIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="748" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a1dfd37f568c55041697c150c134b72aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection_1ad6d931df7f7564df1e66dea996c85edf" kindref="member">virtualized_iterator</ref> *</type>
        <definition>virtualized_iterator * Aspose::Words::VariableCollection::virtualizeBeginIterator</definition>
        <argsstring>() override</argsstring>
        <name>virtualizeBeginIterator</name>
        <qualifiedname>Aspose::Words::VariableCollection::virtualizeBeginIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="744" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1a0b74339ef95036d1dc6e744653c126f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection_1ad6d931df7f7564df1e66dea996c85edf" kindref="member">virtualized_iterator</ref> *</type>
        <definition>virtualized_iterator * Aspose::Words::VariableCollection::virtualizeEndConstIterator</definition>
        <argsstring>() const override</argsstring>
        <name>virtualizeEndConstIterator</name>
        <qualifiedname>Aspose::Words::VariableCollection::virtualizeEndConstIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="750" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_variable_collection_1ae530c14f457ef07357eedbe637697e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_aspose_1_1_words_1_1_variable_collection_1ad6d931df7f7564df1e66dea996c85edf" kindref="member">virtualized_iterator</ref> *</type>
        <definition>virtualized_iterator * Aspose::Words::VariableCollection::virtualizeEndIterator</definition>
        <argsstring>() override</argsstring>
        <name>virtualizeEndIterator</name>
        <qualifiedname>Aspose::Words::VariableCollection::virtualizeEndIterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/VariableCollection.h" line="746" column="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of document variables. </para>
    </briefdescription>
    <detaileddescription>
<para>Variable names and values are strings.</para>
<para>Variable names are case-insensitive.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document&apos;s variable collection. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;VariableCollection&gt;<sp/>variables<sp/>=<sp/>doc-&gt;get_Variables();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>document<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>key/value<sp/>pair<sp/>variables,<sp/>which<sp/>we<sp/>can<sp/>add<sp/>items<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(3,<sp/>variables-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>display<sp/>the<sp/>values<sp/>of<sp/>variables<sp/>in<sp/>the<sp/>document<sp/>body<sp/>using<sp/>DOCVARIABLE<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>field<sp/>=<sp/>System::DynamicCast&lt;FieldDocVariable&gt;(builder-&gt;InsertField(FieldType::FieldDocVariable,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">field-&gt;set_VariableName(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assigning<sp/>values<sp/>to<sp/>existing<sp/>keys<sp/>will<sp/>update<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Add(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>then<sp/>have<sp/>to<sp/>update<sp/>DOCVARIABLE<sp/>fields<sp/>to<sp/>ensure<sp/>they<sp/>display<sp/>an<sp/>up-to-date<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;123<sp/>Main<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">field-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;456<sp/>Queen<sp/>St.&quot;</highlight><highlight class="normal">,<sp/>field-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>document<sp/>variables<sp/>with<sp/>a<sp/>certain<sp/>name<sp/>or<sp/>value<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(variables-&gt;LINQ_Any([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/>return<sp/>v.get_Value()<sp/>==<sp/>u</highlight><highlight class="stringliteral">&quot;London&quot;</highlight><highlight class="normal">;<sp/>}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>collection<sp/>of<sp/>variables<sp/>automatically<sp/>sorts<sp/>variables<sp/>alphabetically<sp/>by<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Bedrooms&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>variables-&gt;IndexOfKey(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enumerate<sp/>over<sp/>the<sp/>collection<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;String,<sp/>String&gt;&gt;&gt;<sp/>enumerator<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc-&gt;get_Variables()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>enumerator-&gt;get_Current().get_Value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>removing<sp/>document<sp/>variables<sp/>from<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>name:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Remove(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;City&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;RemoveAt(1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(variables-&gt;Contains(u</highlight><highlight class="stringliteral">&quot;Home<sp/>address&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Clear<sp/>the<sp/>whole<sp/>collection<sp/>at<sp/>once:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">variables-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>variables-&gt;get_Count());</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Aspose::Words::VariableCollection</label>
        <link refid="class_aspose_1_1_words_1_1_variable_collection"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Collections::Generic::IEnumerable&lt; System::Collections::Generic::KeyValuePair&lt; System::String, System::String &gt; &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Aspose::Words::VariableCollection</label>
        <link refid="class_aspose_1_1_words_1_1_variable_collection"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Collections::Generic::IEnumerable&lt; System::Collections::Generic::KeyValuePair&lt; System::String, System::String &gt; &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/VariableCollection.h" line="107" column="1" bodyfile="Aspose.Words.Cpp/VariableCollection.h" bodystart="108" bodyend="762"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1af65a327c1bab0311b9eaa51d052a9c5b" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>Add</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a6b1f13711b471a4017f7a7df369075b4" prot="private" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a4acb85817f542d03af8757540ac949a8" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>begin</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a8f134bc9e18a13c02b04655a4f883b54" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>begin</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1aec24d1845d7f59586d29ba169e4094ab" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>cbegin</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a996f2c75bdbd1b759e67e5a92b72a8d8" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>cend</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1ad379eb5c5851dfb571eac65213470631" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>Clear</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a61e6be93fc4339e9f9477a5162f62e20" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>const_iterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a7b6d244e99a7a40f9efdcfb29388ede5" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>Contains</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1aa73f89a7f051a9cd1c3349c17ee3b5b6" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>end</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a2180ed7afd28b62b19b7c8684de02ac9" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>end</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1ad9bdb3c180bc9a7a1e5787a04c6734ba" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>get_Count</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a6fd0b352ed0569636e8aa31df885f39d" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>GetEnumerator</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a5a35bab3f3cf9ff9a92e0257e81c9843" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>idx_get</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a3a84137e34ced9f8d8210b1fe536078a" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>idx_get</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1aef1bce2e1754cc202969307c1c495261" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>idx_set</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a0d61f0deb7ea88fc18167b7d6964a205" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>idx_set</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1ab473e97b60b44ada95fed00c462965fb" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>IndexOfKey</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a55bff34807b603fc52ee895b57567f0e" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>iterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a58ccda55782f46dac97039de4b3446f1" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>iterator_holder_type</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a00373b1c870e6194ce76b00bc250b5f8" prot="private" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a60880e9ec5b5306653ce417d86b70734" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>Remove</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a25b15230f1e618a5af85aeecd9efe58d" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>RemoveAt</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1ac995e0c4185d8556c2ff3ad97fe1fe69" prot="private" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1aff7af9a8671a4cdbdcb3ba61cc8c28f6" prot="private" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1ae0d38459349c4c1bef05d5e7a2b21f86" prot="private" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1ac084200b4939b398a8a0f07ff16e2657" prot="private" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>VariableCollection</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1ab499485743b0afec0a8b00c11a2b1971" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>virtualizeBeginConstIterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a1dfd37f568c55041697c150c134b72aa" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>virtualizeBeginIterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1ad6d931df7f7564df1e66dea996c85edf" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>virtualized_iterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a607b65f03ea3bbf8efec3c71dbaa78d7" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>virtualized_iterator_element</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a0b74339ef95036d1dc6e744653c126f8" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>virtualizeEndConstIterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1ae530c14f457ef07357eedbe637697e33" prot="public" virt="non-virtual"><scope>Aspose::Words::VariableCollection</scope><name>virtualizeEndIterator</name></member>
      <member refid="class_aspose_1_1_words_1_1_variable_collection_1a8a67fd556c7ff7caa2babbdc74abf579" prot="private" virt="virtual"><scope>Aspose::Words::VariableCollection</scope><name>~VariableCollection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
