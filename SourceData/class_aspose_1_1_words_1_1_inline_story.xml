<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_inline_story" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Aspose::Words::InlineStory</compoundname>
    <basecompoundref refid="class_aspose_1_1_words_1_1_composite_node" prot="public" virt="non-virtual">Aspose::Words::CompositeNode</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IInline</basecompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_comment" prot="public" virt="non-virtual">Aspose::Words::Comment</derivedcompoundref>
    <derivedcompoundref refid="class_aspose_1_1_words_1_1_notes_1_1_footnote" prot="public" virt="non-virtual">Aspose::Words::Notes::Footnote</derivedcompoundref>
    <includes refid="_inline_story_8h" local="no">Aspose.Words.Cpp/InlineStory.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_inline_story_1aca26b5978bfb6beca0cdf7fdb2cb583c" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_composite_node" kindref="compound">Aspose::Words::CompositeNode</ref></type>
        <definition>typedef Aspose::Words::CompositeNode Aspose::Words::InlineStory::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::InlineStory::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="117" column="42" bodyfile="Aspose.Words.Cpp/InlineStory.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_inline_story_1ada6fd164914405e907bee6f4d0d739d0" prot="private" static="no">
        <type>Aspose::Words::IInline</type>
        <definition>typedef Aspose::Words::IInline Aspose::Words::InlineStory::BaseType1</definition>
        <argsstring></argsstring>
        <name>BaseType1</name>
        <qualifiedname>Aspose::Words::InlineStory::BaseType1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="118" column="36" bodyfile="Aspose.Words.Cpp/InlineStory.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_inline_story_1ad63ea2a3424fb456b68d559856b3727c" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref></type>
        <definition>typedef InlineStory Aspose::Words::InlineStory::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::InlineStory::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="116" column="25" bodyfile="Aspose.Words.Cpp/InlineStory.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_inline_story_1a6bc113db5a1a49b7a788bb4beff370c5" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_composite_node" kindref="compound">BaseType</ref>, BaseType1 &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType, BaseType1&gt; Aspose::Words::InlineStory::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::InlineStory::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="120" column="37" bodyfile="Aspose.Words.Cpp/InlineStory.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_inline_story_1ac8577165d8f6ab4931bb7b2d4fc4c8fb" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::InlineStory::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::InlineStory::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="816" column="23" bodyfile="Aspose.Words.Cpp/InlineStory.h" bodystart="816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_inline_story_1ade7faab51934a6ba44f23d30aa7a5ac3" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::InlineStory::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::InlineStory::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="817" column="23" bodyfile="Aspose.Words.Cpp/InlineStory.h" bodystart="817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_inline_story_1a906c2de0d8365cd8a35b1f6d3f73b29c" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::InlineStory::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::InlineStory::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="818" column="23" bodyfile="Aspose.Words.Cpp/InlineStory.h" bodystart="818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_inline_story_1ab7988295e5cb57cd63b3d4ff072d9e90" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::InlineStory::mField3</definition>
        <argsstring></argsstring>
        <name>mField3</name>
        <qualifiedname>Aspose::Words::InlineStory::mField3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="819" column="23" bodyfile="Aspose.Words.Cpp/InlineStory.h" bodystart="819" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1aa437d7020ad0231a10e554a9bebc10c7" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::InlineStory::~InlineStory</definition>
        <argsstring>()</argsstring>
        <name>~InlineStory</name>
        <qualifiedname>Aspose::Words::InlineStory::~InlineStory</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="807" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1af682d5fef1bb72db26a32f4adfb6bee0" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::InlineStory::CanInsert</definition>
        <argsstring>(System::SharedPtr&lt; Aspose::Words::Node &gt;) override</argsstring>
        <name>CanInsert</name>
        <qualifiedname>Aspose::Words::InlineStory::CanInsert</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_composite_node_1a06d62fddfb918b33b307b9201c7951aa">CanInsert</reimplements>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="805" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1a19464681adc0c02f407db053ec0b78d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::InlineStory::Clone</definition>
        <argsstring>(bool, System::SharedPtr&lt; Aspose::Words::INodeCloningListener &gt;) override</argsstring>
        <name>Clone</name>
        <qualifiedname>Aspose::Words::InlineStory::Clone</qualifiedname>
        <reimplements refid="class_aspose_1_1_words_1_1_composite_node_1ae90ecec13614a52c3ab6fe645fb88807">Clone</reimplements>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; Aspose::Words::INodeCloningListener &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="804" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1a03c69f62d9acf3581fb384bd6e40030d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::InlineStory::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::InlineStory::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="121" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1add39c7dee4940caecfc1c5d0ec8dc181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::InlineStory::EnsureMinimum</definition>
        <argsstring>()</argsstring>
        <name>EnsureMinimum</name>
        <qualifiedname>Aspose::Words::InlineStory::EnsureMinimum</qualifiedname>
        <briefdescription>
<para>If the last child is not a paragraph, creates and appends one empty paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert <ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref> nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Footnote&gt;<sp/>footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table<sp/>nodes<sp/>have<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>that<sp/>makes<sp/>sure<sp/>the<sp/>table<sp/>has<sp/>at<sp/>least<sp/>one<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>MakeObject&lt;Table&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">table-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>place<sp/>a<sp/>table<sp/>inside<sp/>a<sp/>footnote,<sp/>which<sp/>will<sp/>make<sp/>it<sp/>appear<sp/>at<sp/>the<sp/>referencing<sp/>page&apos;s<sp/>footer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;AppendChild(table);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>InlineStory<sp/>has<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>as<sp/>well,<sp/>but<sp/>in<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>makes<sp/>sure<sp/>the<sp/>last<sp/>child<sp/>of<sp/>the<sp/>node<sp/>is<sp/>a<sp/>paragraph,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>us<sp/>to<sp/>be<sp/>able<sp/>to<sp/>click<sp/>and<sp/>write<sp/>text<sp/>easily<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edit<sp/>the<sp/>appearance<sp/>of<sp/>the<sp/>anchor,<sp/>which<sp/>is<sp/>the<sp/>small<sp/>superscript<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>main<sp/>text<sp/>that<sp/>points<sp/>to<sp/>the<sp/>footnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>inline<sp/>story<sp/>nodes<sp/>have<sp/>their<sp/>respective<sp/>story<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a668f1dcdb78a4d16c7e4a2f20dcac198" kindref="member" tooltip="Contains footnote text, represented by Footnote.">StoryType::Footnotes</ref>,<sp/>footnote-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>is<sp/>another<sp/>type<sp/>of<sp/>inline<sp/>story.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>System::DynamicCast&lt;Comment&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_CurrentParagraph()-&gt;AppendChild(MakeObject&lt;Comment&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.<sp/>D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>())));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>parent<sp/>paragraph<sp/>of<sp/>an<sp/>inline<sp/>story<sp/>node<sp/>will<sp/>be<sp/>the<sp/>one<sp/>from<sp/>the<sp/>main<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>comment-&gt;get_ParentParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>last<sp/>paragraph<sp/>is<sp/>the<sp/>one<sp/>from<sp/>the<sp/>comment<sp/>text<sp/>contents,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>be<sp/>outside<sp/>the<sp/>main<sp/>document<sp/>body<sp/>in<sp/>a<sp/>speech<sp/>bubble.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>will<sp/>not<sp/>have<sp/>any<sp/>child<sp/>nodes<sp/>by<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>can<sp/>apply<sp/>the<sp/>EnsureMinimum()<sp/>method<sp/>to<sp/>place<sp/>a<sp/>paragraph<sp/>here<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(comment-&gt;get_LastParagraph()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">comment-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>comment-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Once<sp/>we<sp/>have<sp/>a<sp/>paragraph,<sp/>we<sp/>can<sp/>move<sp/>the<sp/>builder<sp/>to<sp/>do<sp/>it<sp/>and<sp/>write<sp/>our<sp/>comment.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(comment-&gt;get_LastParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;My<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a8413c683b4b27cc3f4dbd4c90329d8ba" kindref="member" tooltip="Contains document comments (annotations), represented by Comment.">StoryType::Comments</ref>,<sp/>comment-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.InsertInlineStoryNodes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="800" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1afdc3007f753643ee3d837d5059b2aed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Aspose::Words::Paragraph</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Paragraph &gt; Aspose::Words::InlineStory::get_FirstParagraph</definition>
        <argsstring>()</argsstring>
        <name>get_FirstParagraph</name>
        <qualifiedname>Aspose::Words::InlineStory::get_FirstParagraph</qualifiedname>
        <briefdescription>
<para>Gets the first paragraph in the story. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert and customize footnotes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>text,<sp/>and<sp/>reference<sp/>it<sp/>with<sp/>a<sp/>footnote.<sp/>This<sp/>footnote<sp/>will<sp/>place<sp/>a<sp/>small<sp/>superscript<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>mark<sp/>after<sp/>the<sp/>text<sp/>that<sp/>it<sp/>references<sp/>and<sp/>create<sp/>an<sp/>entry<sp/>below<sp/>the<sp/>main<sp/>body<sp/>text<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>entry<sp/>will<sp/>contain<sp/>the<sp/>footnote&apos;s<sp/>reference<sp/>mark<sp/>and<sp/>the<sp/>reference<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>we<sp/>will<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertFootnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Main<sp/>body<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Footnote&gt;<sp/>footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>property<sp/>is<sp/>set<sp/>to<sp/>&quot;true&quot;,<sp/>then<sp/>our<sp/>footnote&apos;s<sp/>reference<sp/>mark</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>its<sp/>index<sp/>among<sp/>all<sp/>the<sp/>section&apos;s<sp/>footnotes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>first<sp/>footnote,<sp/>so<sp/>the<sp/>reference<sp/>mark<sp/>will<sp/>be<sp/>&quot;1&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnote-&gt;get_IsAuto());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>move<sp/>the<sp/>document<sp/>builder<sp/>inside<sp/>the<sp/>footnote<sp/>to<sp/>edit<sp/>its<sp/>reference<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(footnote-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>More<sp/>text<sp/>added<sp/>by<sp/>a<sp/>DocumentBuilder.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;\u0002<sp/>Footnote<sp/>text.<sp/>More<sp/>text<sp/>added<sp/>by<sp/>a<sp/>DocumentBuilder.&quot;</highlight><highlight class="normal">,<sp/>footnote-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>More<sp/>main<sp/>body<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>set<sp/>a<sp/>custom<sp/>reference<sp/>mark<sp/>which<sp/>the<sp/>footnote<sp/>will<sp/>use<sp/>instead<sp/>of<sp/>its<sp/>index<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;set_ReferenceMark(u</highlight><highlight class="stringliteral">&quot;RefMark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(footnote-&gt;get_IsAuto());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>bookmark<sp/>with<sp/>the<sp/>&quot;IsAuto&quot;<sp/>flag<sp/>set<sp/>to<sp/>true<sp/>will<sp/>still<sp/>show<sp/>its<sp/>real<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>even<sp/>if<sp/>previous<sp/>bookmarks<sp/>display<sp/>custom<sp/>reference<sp/>marks,<sp/>so<sp/>this<sp/>bookmark&apos;s<sp/>reference<sp/>mark<sp/>will<sp/>be<sp/>a<sp/>&quot;3&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>More<sp/>main<sp/>body<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnote-&gt;get_IsAuto());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.AddFootnote.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to add a comment to a paragraph. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>MakeObject&lt;Comment&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;JD&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1a8b4667cfa17e4aff117188fee6dbd7ed" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Today</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(comment);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(comment-&gt;AppendChild(MakeObject&lt;Paragraph&gt;(doc)));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Comment<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.date_time/_1a8b4667cfa17e4aff117188fee6dbd7ed" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Today</ref>(),<sp/>comment-&gt;get_DateTime());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>Microsoft<sp/>Word,<sp/>we<sp/>can<sp/>right-click<sp/>this<sp/>comment<sp/>in<sp/>the<sp/>document<sp/>body<sp/>to<sp/>edit<sp/>it,<sp/>or<sp/>reply<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.AddComment.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="308" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1adeeae00f619ce915bc99c52f16c9d491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Aspose::Words::Font</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Font &gt; Aspose::Words::InlineStory::get_Font</definition>
        <argsstring>()</argsstring>
        <name>get_Font</name>
        <qualifiedname>Aspose::Words::InlineStory::get_Font</qualifiedname>
        <briefdescription>
<para>Provides access to the font formatting of the anchor character of this object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert <ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref> nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Footnote&gt;<sp/>footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table<sp/>nodes<sp/>have<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>that<sp/>makes<sp/>sure<sp/>the<sp/>table<sp/>has<sp/>at<sp/>least<sp/>one<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>MakeObject&lt;Table&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">table-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>place<sp/>a<sp/>table<sp/>inside<sp/>a<sp/>footnote,<sp/>which<sp/>will<sp/>make<sp/>it<sp/>appear<sp/>at<sp/>the<sp/>referencing<sp/>page&apos;s<sp/>footer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;AppendChild(table);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>InlineStory<sp/>has<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>as<sp/>well,<sp/>but<sp/>in<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>makes<sp/>sure<sp/>the<sp/>last<sp/>child<sp/>of<sp/>the<sp/>node<sp/>is<sp/>a<sp/>paragraph,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>us<sp/>to<sp/>be<sp/>able<sp/>to<sp/>click<sp/>and<sp/>write<sp/>text<sp/>easily<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edit<sp/>the<sp/>appearance<sp/>of<sp/>the<sp/>anchor,<sp/>which<sp/>is<sp/>the<sp/>small<sp/>superscript<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>main<sp/>text<sp/>that<sp/>points<sp/>to<sp/>the<sp/>footnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>inline<sp/>story<sp/>nodes<sp/>have<sp/>their<sp/>respective<sp/>story<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a668f1dcdb78a4d16c7e4a2f20dcac198" kindref="member" tooltip="Contains footnote text, represented by Footnote.">StoryType::Footnotes</ref>,<sp/>footnote-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>is<sp/>another<sp/>type<sp/>of<sp/>inline<sp/>story.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>System::DynamicCast&lt;Comment&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_CurrentParagraph()-&gt;AppendChild(MakeObject&lt;Comment&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.<sp/>D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>())));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>parent<sp/>paragraph<sp/>of<sp/>an<sp/>inline<sp/>story<sp/>node<sp/>will<sp/>be<sp/>the<sp/>one<sp/>from<sp/>the<sp/>main<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>comment-&gt;get_ParentParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>last<sp/>paragraph<sp/>is<sp/>the<sp/>one<sp/>from<sp/>the<sp/>comment<sp/>text<sp/>contents,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>be<sp/>outside<sp/>the<sp/>main<sp/>document<sp/>body<sp/>in<sp/>a<sp/>speech<sp/>bubble.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>will<sp/>not<sp/>have<sp/>any<sp/>child<sp/>nodes<sp/>by<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>can<sp/>apply<sp/>the<sp/>EnsureMinimum()<sp/>method<sp/>to<sp/>place<sp/>a<sp/>paragraph<sp/>here<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(comment-&gt;get_LastParagraph()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">comment-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>comment-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Once<sp/>we<sp/>have<sp/>a<sp/>paragraph,<sp/>we<sp/>can<sp/>move<sp/>the<sp/>builder<sp/>to<sp/>do<sp/>it<sp/>and<sp/>write<sp/>our<sp/>comment.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(comment-&gt;get_LastParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;My<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a8413c683b4b27cc3f4dbd4c90329d8ba" kindref="member" tooltip="Contains document comments (annotations), represented by Comment.">StoryType::Comments</ref>,<sp/>comment-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.InsertInlineStoryNodes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="741" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1aa5df2b5daee50645bf6906f7275885ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::InlineStory::get_IsDeleteRevision</definition>
        <argsstring>()</argsstring>
        <name>get_IsDeleteRevision</name>
        <qualifiedname>Aspose::Words::InlineStory::get_IsDeleteRevision</qualifiedname>
        <briefdescription>
<para>Returns true if this object was deleted in Microsoft Word while change tracking was enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to view revision-related properties of <ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref> nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>footnotes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>edit<sp/>the<sp/>document<sp/>while<sp/>the<sp/>&quot;Track<sp/>Changes&quot;<sp/>option,<sp/>found<sp/>in<sp/>via<sp/>Review<sp/>-&gt;<sp/>Tracking,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>turned<sp/>on<sp/>in<sp/>Microsoft<sp/>Word,<sp/>the<sp/>changes<sp/>we<sp/>apply<sp/>count<sp/>as<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>editing<sp/>a<sp/>document<sp/>using<sp/>Aspose.Words,<sp/>we<sp/>can<sp/>begin<sp/>tracking<sp/>revisions<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>invoking<sp/>the<sp/>document&apos;s<sp/>&quot;StartTrackRevisions&quot;<sp/>method<sp/>and<sp/>stop<sp/>tracking<sp/>by<sp/>using<sp/>the<sp/>&quot;StopTrackRevisions&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>either<sp/>accept<sp/>revisions<sp/>to<sp/>assimilate<sp/>them<sp/>into<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>reject<sp/>them<sp/>to<sp/>undo<sp/>and<sp/>discard<sp/>the<sp/>proposed<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_HasRevisions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Collections::Generic::List&lt;SharedPtr&lt;Footnote&gt;&gt;&gt;<sp/>footnotes<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_Cast&lt;SharedPtr&lt;Footnote&gt;&gt;()-&gt;LINQ_ToList();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(5,<sp/>footnotes-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>five<sp/>types<sp/>of<sp/>revisions<sp/>that<sp/>can<sp/>flag<sp/>an<sp/>InlineStory<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>An<sp/>&quot;insert&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>revision<sp/>occurs<sp/>when<sp/>we<sp/>insert<sp/>text<sp/>while<sp/>tracking<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(2)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>A<sp/>&quot;move<sp/>from&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>highlight<sp/>text<sp/>in<sp/>Microsoft<sp/>Word,<sp/>and<sp/>then<sp/>drag<sp/>it<sp/>to<sp/>a<sp/>different<sp/>place<sp/>in<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>while<sp/>tracking<sp/>changes,<sp/>two<sp/>revisions<sp/>appear.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>is<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>text<sp/>originally<sp/>before<sp/>we<sp/>moved<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(4)-&gt;get_IsMoveFromRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>A<sp/>&quot;move<sp/>to&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;move<sp/>to&quot;<sp/>revision<sp/>is<sp/>the<sp/>text<sp/>that<sp/>we<sp/>moved<sp/>in<sp/>its<sp/>new<sp/>position<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;Move<sp/>from&quot;<sp/>and<sp/>&quot;move<sp/>to&quot;<sp/>revisions<sp/>appear<sp/>in<sp/>pairs<sp/>for<sp/>every<sp/>move<sp/>revision<sp/>we<sp/>carry<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Accepting<sp/>a<sp/>move<sp/>revision<sp/>deletes<sp/>the<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>and<sp/>its<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>keeps<sp/>the<sp/>text<sp/>from<sp/>the<sp/>&quot;move<sp/>to&quot;<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rejecting<sp/>a<sp/>move<sp/>revision<sp/>conversely<sp/>keeps<sp/>the<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>and<sp/>deletes<sp/>the<sp/>&quot;move<sp/>to&quot;<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(1)-&gt;get_IsMoveToRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>A<sp/>&quot;delete&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>revision<sp/>occurs<sp/>when<sp/>we<sp/>delete<sp/>text<sp/>while<sp/>tracking<sp/>changes.<sp/>When<sp/>we<sp/>delete<sp/>text<sp/>like<sp/>this,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>stay<sp/>in<sp/>the<sp/>document<sp/>as<sp/>a<sp/>revision<sp/>until<sp/>we<sp/>either<sp/>accept<sp/>the<sp/>revision,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>delete<sp/>the<sp/>text<sp/>for<sp/>good,<sp/>or<sp/>reject<sp/>the<sp/>revision,<sp/>which<sp/>will<sp/>keep<sp/>the<sp/>text<sp/>we<sp/>deleted<sp/>where<sp/>it<sp/>was.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(3)-&gt;get_IsDeleteRevision());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="586" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1a2bc95ecea1c6ef3fffbfa757427364a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::InlineStory::get_IsInsertRevision</definition>
        <argsstring>()</argsstring>
        <name>get_IsInsertRevision</name>
        <qualifiedname>Aspose::Words::InlineStory::get_IsInsertRevision</qualifiedname>
        <briefdescription>
<para>Returns true if this object was inserted in Microsoft Word while change tracking was enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to view revision-related properties of <ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref> nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>footnotes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>edit<sp/>the<sp/>document<sp/>while<sp/>the<sp/>&quot;Track<sp/>Changes&quot;<sp/>option,<sp/>found<sp/>in<sp/>via<sp/>Review<sp/>-&gt;<sp/>Tracking,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>turned<sp/>on<sp/>in<sp/>Microsoft<sp/>Word,<sp/>the<sp/>changes<sp/>we<sp/>apply<sp/>count<sp/>as<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>editing<sp/>a<sp/>document<sp/>using<sp/>Aspose.Words,<sp/>we<sp/>can<sp/>begin<sp/>tracking<sp/>revisions<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>invoking<sp/>the<sp/>document&apos;s<sp/>&quot;StartTrackRevisions&quot;<sp/>method<sp/>and<sp/>stop<sp/>tracking<sp/>by<sp/>using<sp/>the<sp/>&quot;StopTrackRevisions&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>either<sp/>accept<sp/>revisions<sp/>to<sp/>assimilate<sp/>them<sp/>into<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>reject<sp/>them<sp/>to<sp/>undo<sp/>and<sp/>discard<sp/>the<sp/>proposed<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_HasRevisions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Collections::Generic::List&lt;SharedPtr&lt;Footnote&gt;&gt;&gt;<sp/>footnotes<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_Cast&lt;SharedPtr&lt;Footnote&gt;&gt;()-&gt;LINQ_ToList();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(5,<sp/>footnotes-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>five<sp/>types<sp/>of<sp/>revisions<sp/>that<sp/>can<sp/>flag<sp/>an<sp/>InlineStory<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>An<sp/>&quot;insert&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>revision<sp/>occurs<sp/>when<sp/>we<sp/>insert<sp/>text<sp/>while<sp/>tracking<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(2)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>A<sp/>&quot;move<sp/>from&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>highlight<sp/>text<sp/>in<sp/>Microsoft<sp/>Word,<sp/>and<sp/>then<sp/>drag<sp/>it<sp/>to<sp/>a<sp/>different<sp/>place<sp/>in<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>while<sp/>tracking<sp/>changes,<sp/>two<sp/>revisions<sp/>appear.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>is<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>text<sp/>originally<sp/>before<sp/>we<sp/>moved<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(4)-&gt;get_IsMoveFromRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>A<sp/>&quot;move<sp/>to&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;move<sp/>to&quot;<sp/>revision<sp/>is<sp/>the<sp/>text<sp/>that<sp/>we<sp/>moved<sp/>in<sp/>its<sp/>new<sp/>position<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;Move<sp/>from&quot;<sp/>and<sp/>&quot;move<sp/>to&quot;<sp/>revisions<sp/>appear<sp/>in<sp/>pairs<sp/>for<sp/>every<sp/>move<sp/>revision<sp/>we<sp/>carry<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Accepting<sp/>a<sp/>move<sp/>revision<sp/>deletes<sp/>the<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>and<sp/>its<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>keeps<sp/>the<sp/>text<sp/>from<sp/>the<sp/>&quot;move<sp/>to&quot;<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rejecting<sp/>a<sp/>move<sp/>revision<sp/>conversely<sp/>keeps<sp/>the<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>and<sp/>deletes<sp/>the<sp/>&quot;move<sp/>to&quot;<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(1)-&gt;get_IsMoveToRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>A<sp/>&quot;delete&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>revision<sp/>occurs<sp/>when<sp/>we<sp/>delete<sp/>text<sp/>while<sp/>tracking<sp/>changes.<sp/>When<sp/>we<sp/>delete<sp/>text<sp/>like<sp/>this,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>stay<sp/>in<sp/>the<sp/>document<sp/>as<sp/>a<sp/>revision<sp/>until<sp/>we<sp/>either<sp/>accept<sp/>the<sp/>revision,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>delete<sp/>the<sp/>text<sp/>for<sp/>good,<sp/>or<sp/>reject<sp/>the<sp/>revision,<sp/>which<sp/>will<sp/>keep<sp/>the<sp/>text<sp/>we<sp/>deleted<sp/>where<sp/>it<sp/>was.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(3)-&gt;get_IsDeleteRevision());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="538" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1a9dcbaac8693e544ff5a7f73f449cb280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::InlineStory::get_IsMoveFromRevision</definition>
        <argsstring>()</argsstring>
        <name>get_IsMoveFromRevision</name>
        <qualifiedname>Aspose::Words::InlineStory::get_IsMoveFromRevision</qualifiedname>
        <briefdescription>
<para>Returns <bold>true</bold> if this object was moved (deleted) in Microsoft Word while change tracking was enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to view revision-related properties of <ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref> nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>footnotes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>edit<sp/>the<sp/>document<sp/>while<sp/>the<sp/>&quot;Track<sp/>Changes&quot;<sp/>option,<sp/>found<sp/>in<sp/>via<sp/>Review<sp/>-&gt;<sp/>Tracking,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>turned<sp/>on<sp/>in<sp/>Microsoft<sp/>Word,<sp/>the<sp/>changes<sp/>we<sp/>apply<sp/>count<sp/>as<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>editing<sp/>a<sp/>document<sp/>using<sp/>Aspose.Words,<sp/>we<sp/>can<sp/>begin<sp/>tracking<sp/>revisions<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>invoking<sp/>the<sp/>document&apos;s<sp/>&quot;StartTrackRevisions&quot;<sp/>method<sp/>and<sp/>stop<sp/>tracking<sp/>by<sp/>using<sp/>the<sp/>&quot;StopTrackRevisions&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>either<sp/>accept<sp/>revisions<sp/>to<sp/>assimilate<sp/>them<sp/>into<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>reject<sp/>them<sp/>to<sp/>undo<sp/>and<sp/>discard<sp/>the<sp/>proposed<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_HasRevisions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Collections::Generic::List&lt;SharedPtr&lt;Footnote&gt;&gt;&gt;<sp/>footnotes<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_Cast&lt;SharedPtr&lt;Footnote&gt;&gt;()-&gt;LINQ_ToList();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(5,<sp/>footnotes-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>five<sp/>types<sp/>of<sp/>revisions<sp/>that<sp/>can<sp/>flag<sp/>an<sp/>InlineStory<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>An<sp/>&quot;insert&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>revision<sp/>occurs<sp/>when<sp/>we<sp/>insert<sp/>text<sp/>while<sp/>tracking<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(2)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>A<sp/>&quot;move<sp/>from&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>highlight<sp/>text<sp/>in<sp/>Microsoft<sp/>Word,<sp/>and<sp/>then<sp/>drag<sp/>it<sp/>to<sp/>a<sp/>different<sp/>place<sp/>in<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>while<sp/>tracking<sp/>changes,<sp/>two<sp/>revisions<sp/>appear.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>is<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>text<sp/>originally<sp/>before<sp/>we<sp/>moved<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(4)-&gt;get_IsMoveFromRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>A<sp/>&quot;move<sp/>to&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;move<sp/>to&quot;<sp/>revision<sp/>is<sp/>the<sp/>text<sp/>that<sp/>we<sp/>moved<sp/>in<sp/>its<sp/>new<sp/>position<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;Move<sp/>from&quot;<sp/>and<sp/>&quot;move<sp/>to&quot;<sp/>revisions<sp/>appear<sp/>in<sp/>pairs<sp/>for<sp/>every<sp/>move<sp/>revision<sp/>we<sp/>carry<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Accepting<sp/>a<sp/>move<sp/>revision<sp/>deletes<sp/>the<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>and<sp/>its<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>keeps<sp/>the<sp/>text<sp/>from<sp/>the<sp/>&quot;move<sp/>to&quot;<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rejecting<sp/>a<sp/>move<sp/>revision<sp/>conversely<sp/>keeps<sp/>the<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>and<sp/>deletes<sp/>the<sp/>&quot;move<sp/>to&quot;<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(1)-&gt;get_IsMoveToRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>A<sp/>&quot;delete&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>revision<sp/>occurs<sp/>when<sp/>we<sp/>delete<sp/>text<sp/>while<sp/>tracking<sp/>changes.<sp/>When<sp/>we<sp/>delete<sp/>text<sp/>like<sp/>this,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>stay<sp/>in<sp/>the<sp/>document<sp/>as<sp/>a<sp/>revision<sp/>until<sp/>we<sp/>either<sp/>accept<sp/>the<sp/>revision,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>delete<sp/>the<sp/>text<sp/>for<sp/>good,<sp/>or<sp/>reject<sp/>the<sp/>revision,<sp/>which<sp/>will<sp/>keep<sp/>the<sp/>text<sp/>we<sp/>deleted<sp/>where<sp/>it<sp/>was.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(3)-&gt;get_IsDeleteRevision());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="634" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1a941a29c595f5abd8d415948daa542d76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::InlineStory::get_IsMoveToRevision</definition>
        <argsstring>()</argsstring>
        <name>get_IsMoveToRevision</name>
        <qualifiedname>Aspose::Words::InlineStory::get_IsMoveToRevision</qualifiedname>
        <briefdescription>
<para>Returns <bold>true</bold> if this object was moved (inserted) in Microsoft Word while change tracking was enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to view revision-related properties of <ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref> nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Revision<sp/>footnotes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>edit<sp/>the<sp/>document<sp/>while<sp/>the<sp/>&quot;Track<sp/>Changes&quot;<sp/>option,<sp/>found<sp/>in<sp/>via<sp/>Review<sp/>-&gt;<sp/>Tracking,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>turned<sp/>on<sp/>in<sp/>Microsoft<sp/>Word,<sp/>the<sp/>changes<sp/>we<sp/>apply<sp/>count<sp/>as<sp/>revisions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>editing<sp/>a<sp/>document<sp/>using<sp/>Aspose.Words,<sp/>we<sp/>can<sp/>begin<sp/>tracking<sp/>revisions<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>invoking<sp/>the<sp/>document&apos;s<sp/>&quot;StartTrackRevisions&quot;<sp/>method<sp/>and<sp/>stop<sp/>tracking<sp/>by<sp/>using<sp/>the<sp/>&quot;StopTrackRevisions&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>either<sp/>accept<sp/>revisions<sp/>to<sp/>assimilate<sp/>them<sp/>into<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>reject<sp/>them<sp/>to<sp/>undo<sp/>and<sp/>discard<sp/>the<sp/>proposed<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(doc-&gt;get_HasRevisions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Collections::Generic::List&lt;SharedPtr&lt;Footnote&gt;&gt;&gt;<sp/>footnotes<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a8b213ded385c637758f8c3705eb6386a" kindref="member" tooltip="A footnote or endnote in a Word document. A Footnote node can have Paragraph and Table nodes.">NodeType::Footnote</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)-&gt;LINQ_Cast&lt;SharedPtr&lt;Footnote&gt;&gt;()-&gt;LINQ_ToList();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(5,<sp/>footnotes-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>five<sp/>types<sp/>of<sp/>revisions<sp/>that<sp/>can<sp/>flag<sp/>an<sp/>InlineStory<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>An<sp/>&quot;insert&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>revision<sp/>occurs<sp/>when<sp/>we<sp/>insert<sp/>text<sp/>while<sp/>tracking<sp/>changes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(2)-&gt;get_IsInsertRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>A<sp/>&quot;move<sp/>from&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>highlight<sp/>text<sp/>in<sp/>Microsoft<sp/>Word,<sp/>and<sp/>then<sp/>drag<sp/>it<sp/>to<sp/>a<sp/>different<sp/>place<sp/>in<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>while<sp/>tracking<sp/>changes,<sp/>two<sp/>revisions<sp/>appear.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>is<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>text<sp/>originally<sp/>before<sp/>we<sp/>moved<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(4)-&gt;get_IsMoveFromRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>A<sp/>&quot;move<sp/>to&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;move<sp/>to&quot;<sp/>revision<sp/>is<sp/>the<sp/>text<sp/>that<sp/>we<sp/>moved<sp/>in<sp/>its<sp/>new<sp/>position<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;Move<sp/>from&quot;<sp/>and<sp/>&quot;move<sp/>to&quot;<sp/>revisions<sp/>appear<sp/>in<sp/>pairs<sp/>for<sp/>every<sp/>move<sp/>revision<sp/>we<sp/>carry<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Accepting<sp/>a<sp/>move<sp/>revision<sp/>deletes<sp/>the<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>and<sp/>its<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>keeps<sp/>the<sp/>text<sp/>from<sp/>the<sp/>&quot;move<sp/>to&quot;<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rejecting<sp/>a<sp/>move<sp/>revision<sp/>conversely<sp/>keeps<sp/>the<sp/>&quot;move<sp/>from&quot;<sp/>revision<sp/>and<sp/>deletes<sp/>the<sp/>&quot;move<sp/>to&quot;<sp/>revision.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(1)-&gt;get_IsMoveToRevision());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>A<sp/>&quot;delete&quot;<sp/>revision:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>revision<sp/>occurs<sp/>when<sp/>we<sp/>delete<sp/>text<sp/>while<sp/>tracking<sp/>changes.<sp/>When<sp/>we<sp/>delete<sp/>text<sp/>like<sp/>this,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>stay<sp/>in<sp/>the<sp/>document<sp/>as<sp/>a<sp/>revision<sp/>until<sp/>we<sp/>either<sp/>accept<sp/>the<sp/>revision,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>delete<sp/>the<sp/>text<sp/>for<sp/>good,<sp/>or<sp/>reject<sp/>the<sp/>revision,<sp/>which<sp/>will<sp/>keep<sp/>the<sp/>text<sp/>we<sp/>deleted<sp/>where<sp/>it<sp/>was.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnotes-&gt;idx_get(3)-&gt;get_IsDeleteRevision());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="682" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1ac562899f1e65a03e4d02b4bc7430cb7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Aspose::Words::Paragraph</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Paragraph &gt; Aspose::Words::InlineStory::get_LastParagraph</definition>
        <argsstring>()</argsstring>
        <name>get_LastParagraph</name>
        <qualifiedname>Aspose::Words::InlineStory::get_LastParagraph</qualifiedname>
        <briefdescription>
<para>Gets the last paragraph in the story. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert <ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref> nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Footnote&gt;<sp/>footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table<sp/>nodes<sp/>have<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>that<sp/>makes<sp/>sure<sp/>the<sp/>table<sp/>has<sp/>at<sp/>least<sp/>one<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>MakeObject&lt;Table&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">table-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>place<sp/>a<sp/>table<sp/>inside<sp/>a<sp/>footnote,<sp/>which<sp/>will<sp/>make<sp/>it<sp/>appear<sp/>at<sp/>the<sp/>referencing<sp/>page&apos;s<sp/>footer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;AppendChild(table);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>InlineStory<sp/>has<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>as<sp/>well,<sp/>but<sp/>in<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>makes<sp/>sure<sp/>the<sp/>last<sp/>child<sp/>of<sp/>the<sp/>node<sp/>is<sp/>a<sp/>paragraph,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>us<sp/>to<sp/>be<sp/>able<sp/>to<sp/>click<sp/>and<sp/>write<sp/>text<sp/>easily<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edit<sp/>the<sp/>appearance<sp/>of<sp/>the<sp/>anchor,<sp/>which<sp/>is<sp/>the<sp/>small<sp/>superscript<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>main<sp/>text<sp/>that<sp/>points<sp/>to<sp/>the<sp/>footnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>inline<sp/>story<sp/>nodes<sp/>have<sp/>their<sp/>respective<sp/>story<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a668f1dcdb78a4d16c7e4a2f20dcac198" kindref="member" tooltip="Contains footnote text, represented by Footnote.">StoryType::Footnotes</ref>,<sp/>footnote-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>is<sp/>another<sp/>type<sp/>of<sp/>inline<sp/>story.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>System::DynamicCast&lt;Comment&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_CurrentParagraph()-&gt;AppendChild(MakeObject&lt;Comment&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.<sp/>D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>())));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>parent<sp/>paragraph<sp/>of<sp/>an<sp/>inline<sp/>story<sp/>node<sp/>will<sp/>be<sp/>the<sp/>one<sp/>from<sp/>the<sp/>main<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>comment-&gt;get_ParentParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>last<sp/>paragraph<sp/>is<sp/>the<sp/>one<sp/>from<sp/>the<sp/>comment<sp/>text<sp/>contents,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>be<sp/>outside<sp/>the<sp/>main<sp/>document<sp/>body<sp/>in<sp/>a<sp/>speech<sp/>bubble.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>will<sp/>not<sp/>have<sp/>any<sp/>child<sp/>nodes<sp/>by<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>can<sp/>apply<sp/>the<sp/>EnsureMinimum()<sp/>method<sp/>to<sp/>place<sp/>a<sp/>paragraph<sp/>here<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(comment-&gt;get_LastParagraph()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">comment-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>comment-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Once<sp/>we<sp/>have<sp/>a<sp/>paragraph,<sp/>we<sp/>can<sp/>move<sp/>the<sp/>builder<sp/>to<sp/>do<sp/>it<sp/>and<sp/>write<sp/>our<sp/>comment.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(comment-&gt;get_LastParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;My<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a8413c683b4b27cc3f4dbd4c90329d8ba" kindref="member" tooltip="Contains document comments (annotations), represented by Comment.">StoryType::Comments</ref>,<sp/>comment-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.InsertInlineStoryNodes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="367" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1a75d66b36017fa596add159f9762832dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_paragraph_collection" kindref="compound">Aspose::Words::ParagraphCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ParagraphCollection &gt; Aspose::Words::InlineStory::get_Paragraphs</definition>
        <argsstring>()</argsstring>
        <name>get_Paragraphs</name>
        <qualifiedname>Aspose::Words::InlineStory::get_Paragraphs</qualifiedname>
        <briefdescription>
<para>Gets a collection of paragraphs that are immediate children of the story. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert and customize footnotes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>text,<sp/>and<sp/>reference<sp/>it<sp/>with<sp/>a<sp/>footnote.<sp/>This<sp/>footnote<sp/>will<sp/>place<sp/>a<sp/>small<sp/>superscript<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>mark<sp/>after<sp/>the<sp/>text<sp/>that<sp/>it<sp/>references<sp/>and<sp/>create<sp/>an<sp/>entry<sp/>below<sp/>the<sp/>main<sp/>body<sp/>text<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>entry<sp/>will<sp/>contain<sp/>the<sp/>footnote&apos;s<sp/>reference<sp/>mark<sp/>and<sp/>the<sp/>reference<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>we<sp/>will<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertFootnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Main<sp/>body<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Footnote&gt;<sp/>footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>property<sp/>is<sp/>set<sp/>to<sp/>&quot;true&quot;,<sp/>then<sp/>our<sp/>footnote&apos;s<sp/>reference<sp/>mark</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>its<sp/>index<sp/>among<sp/>all<sp/>the<sp/>section&apos;s<sp/>footnotes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>first<sp/>footnote,<sp/>so<sp/>the<sp/>reference<sp/>mark<sp/>will<sp/>be<sp/>&quot;1&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnote-&gt;get_IsAuto());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>move<sp/>the<sp/>document<sp/>builder<sp/>inside<sp/>the<sp/>footnote<sp/>to<sp/>edit<sp/>its<sp/>reference<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(footnote-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>More<sp/>text<sp/>added<sp/>by<sp/>a<sp/>DocumentBuilder.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;\u0002<sp/>Footnote<sp/>text.<sp/>More<sp/>text<sp/>added<sp/>by<sp/>a<sp/>DocumentBuilder.&quot;</highlight><highlight class="normal">,<sp/>footnote-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>More<sp/>main<sp/>body<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>set<sp/>a<sp/>custom<sp/>reference<sp/>mark<sp/>which<sp/>the<sp/>footnote<sp/>will<sp/>use<sp/>instead<sp/>of<sp/>its<sp/>index<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;set_ReferenceMark(u</highlight><highlight class="stringliteral">&quot;RefMark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(footnote-&gt;get_IsAuto());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>bookmark<sp/>with<sp/>the<sp/>&quot;IsAuto&quot;<sp/>flag<sp/>set<sp/>to<sp/>true<sp/>will<sp/>still<sp/>show<sp/>its<sp/>real<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>even<sp/>if<sp/>previous<sp/>bookmarks<sp/>display<sp/>custom<sp/>reference<sp/>marks,<sp/>so<sp/>this<sp/>bookmark&apos;s<sp/>reference<sp/>mark<sp/>will<sp/>be<sp/>a<sp/>&quot;3&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>More<sp/>main<sp/>body<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnote-&gt;get_IsAuto());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.AddFootnote.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to add a comment to a paragraph. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>MakeObject&lt;Comment&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;JD&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1a8b4667cfa17e4aff117188fee6dbd7ed" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Today</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(comment);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(comment-&gt;AppendChild(MakeObject&lt;Paragraph&gt;(doc)));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Comment<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.date_time/_1a8b4667cfa17e4aff117188fee6dbd7ed" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Today</ref>(),<sp/>comment-&gt;get_DateTime());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>Microsoft<sp/>Word,<sp/>we<sp/>can<sp/>right-click<sp/>this<sp/>comment<sp/>in<sp/>the<sp/>document<sp/>body<sp/>to<sp/>edit<sp/>it,<sp/>or<sp/>reply<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.AddComment.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="431" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1aa441ec921695b865099fb4d64e441378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Aspose::Words::Paragraph</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Paragraph &gt; Aspose::Words::InlineStory::get_ParentParagraph</definition>
        <argsstring>()</argsstring>
        <name>get_ParentParagraph</name>
        <qualifiedname>Aspose::Words::InlineStory::get_ParentParagraph</qualifiedname>
        <briefdescription>
<para>Retrieves the parent <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Paragraph</ref> of this node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert <ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref> nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Footnote&gt;<sp/>footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table<sp/>nodes<sp/>have<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>that<sp/>makes<sp/>sure<sp/>the<sp/>table<sp/>has<sp/>at<sp/>least<sp/>one<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>MakeObject&lt;Table&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">table-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>place<sp/>a<sp/>table<sp/>inside<sp/>a<sp/>footnote,<sp/>which<sp/>will<sp/>make<sp/>it<sp/>appear<sp/>at<sp/>the<sp/>referencing<sp/>page&apos;s<sp/>footer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;AppendChild(table);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>InlineStory<sp/>has<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>as<sp/>well,<sp/>but<sp/>in<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>makes<sp/>sure<sp/>the<sp/>last<sp/>child<sp/>of<sp/>the<sp/>node<sp/>is<sp/>a<sp/>paragraph,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>us<sp/>to<sp/>be<sp/>able<sp/>to<sp/>click<sp/>and<sp/>write<sp/>text<sp/>easily<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edit<sp/>the<sp/>appearance<sp/>of<sp/>the<sp/>anchor,<sp/>which<sp/>is<sp/>the<sp/>small<sp/>superscript<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>main<sp/>text<sp/>that<sp/>points<sp/>to<sp/>the<sp/>footnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>inline<sp/>story<sp/>nodes<sp/>have<sp/>their<sp/>respective<sp/>story<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a668f1dcdb78a4d16c7e4a2f20dcac198" kindref="member" tooltip="Contains footnote text, represented by Footnote.">StoryType::Footnotes</ref>,<sp/>footnote-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>is<sp/>another<sp/>type<sp/>of<sp/>inline<sp/>story.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>System::DynamicCast&lt;Comment&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_CurrentParagraph()-&gt;AppendChild(MakeObject&lt;Comment&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.<sp/>D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>())));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>parent<sp/>paragraph<sp/>of<sp/>an<sp/>inline<sp/>story<sp/>node<sp/>will<sp/>be<sp/>the<sp/>one<sp/>from<sp/>the<sp/>main<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>comment-&gt;get_ParentParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>last<sp/>paragraph<sp/>is<sp/>the<sp/>one<sp/>from<sp/>the<sp/>comment<sp/>text<sp/>contents,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>be<sp/>outside<sp/>the<sp/>main<sp/>document<sp/>body<sp/>in<sp/>a<sp/>speech<sp/>bubble.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>will<sp/>not<sp/>have<sp/>any<sp/>child<sp/>nodes<sp/>by<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>can<sp/>apply<sp/>the<sp/>EnsureMinimum()<sp/>method<sp/>to<sp/>place<sp/>a<sp/>paragraph<sp/>here<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(comment-&gt;get_LastParagraph()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">comment-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>comment-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Once<sp/>we<sp/>have<sp/>a<sp/>paragraph,<sp/>we<sp/>can<sp/>move<sp/>the<sp/>builder<sp/>to<sp/>do<sp/>it<sp/>and<sp/>write<sp/>our<sp/>comment.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(comment-&gt;get_LastParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;My<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a8413c683b4b27cc3f4dbd4c90329d8ba" kindref="member" tooltip="Contains document comments (annotations), represented by Comment.">StoryType::Comments</ref>,<sp/>comment-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.InsertInlineStoryNodes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="244" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1a8458ba774700d3d6a19ef41afde6b19f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119" kindref="member">Aspose::Words::StoryType</ref></type>
        <definition>virtual Aspose::Words::StoryType Aspose::Words::InlineStory::get_StoryType</definition>
        <argsstring>()=0</argsstring>
        <name>get_StoryType</name>
        <qualifiedname>Aspose::Words::InlineStory::get_StoryType</qualifiedname>
        <reimplementedby refid="class_aspose_1_1_words_1_1_comment_1ac9d71b8c884b888ee98e5992ecedd7f6">get_StoryType</reimplementedby>
        <reimplementedby refid="class_aspose_1_1_words_1_1_notes_1_1_footnote_1aeca093808471504db8e92e995a472ccb">get_StoryType</reimplementedby>
        <briefdescription>
<para>Returns the type of the story. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert <ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref> nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Footnote&gt;<sp/>footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table<sp/>nodes<sp/>have<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>that<sp/>makes<sp/>sure<sp/>the<sp/>table<sp/>has<sp/>at<sp/>least<sp/>one<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>MakeObject&lt;Table&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">table-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>place<sp/>a<sp/>table<sp/>inside<sp/>a<sp/>footnote,<sp/>which<sp/>will<sp/>make<sp/>it<sp/>appear<sp/>at<sp/>the<sp/>referencing<sp/>page&apos;s<sp/>footer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;AppendChild(table);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>InlineStory<sp/>has<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>as<sp/>well,<sp/>but<sp/>in<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>makes<sp/>sure<sp/>the<sp/>last<sp/>child<sp/>of<sp/>the<sp/>node<sp/>is<sp/>a<sp/>paragraph,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>us<sp/>to<sp/>be<sp/>able<sp/>to<sp/>click<sp/>and<sp/>write<sp/>text<sp/>easily<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edit<sp/>the<sp/>appearance<sp/>of<sp/>the<sp/>anchor,<sp/>which<sp/>is<sp/>the<sp/>small<sp/>superscript<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>main<sp/>text<sp/>that<sp/>points<sp/>to<sp/>the<sp/>footnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>inline<sp/>story<sp/>nodes<sp/>have<sp/>their<sp/>respective<sp/>story<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a668f1dcdb78a4d16c7e4a2f20dcac198" kindref="member" tooltip="Contains footnote text, represented by Footnote.">StoryType::Footnotes</ref>,<sp/>footnote-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>is<sp/>another<sp/>type<sp/>of<sp/>inline<sp/>story.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>System::DynamicCast&lt;Comment&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_CurrentParagraph()-&gt;AppendChild(MakeObject&lt;Comment&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.<sp/>D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>())));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>parent<sp/>paragraph<sp/>of<sp/>an<sp/>inline<sp/>story<sp/>node<sp/>will<sp/>be<sp/>the<sp/>one<sp/>from<sp/>the<sp/>main<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>comment-&gt;get_ParentParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>last<sp/>paragraph<sp/>is<sp/>the<sp/>one<sp/>from<sp/>the<sp/>comment<sp/>text<sp/>contents,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>be<sp/>outside<sp/>the<sp/>main<sp/>document<sp/>body<sp/>in<sp/>a<sp/>speech<sp/>bubble.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>will<sp/>not<sp/>have<sp/>any<sp/>child<sp/>nodes<sp/>by<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>can<sp/>apply<sp/>the<sp/>EnsureMinimum()<sp/>method<sp/>to<sp/>place<sp/>a<sp/>paragraph<sp/>here<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(comment-&gt;get_LastParagraph()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">comment-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>comment-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Once<sp/>we<sp/>have<sp/>a<sp/>paragraph,<sp/>we<sp/>can<sp/>move<sp/>the<sp/>builder<sp/>to<sp/>do<sp/>it<sp/>and<sp/>write<sp/>our<sp/>comment.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(comment-&gt;get_LastParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;My<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a8413c683b4b27cc3f4dbd4c90329d8ba" kindref="member" tooltip="Contains document comments (annotations), represented by Comment.">StoryType::Comments</ref>,<sp/>comment-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.InsertInlineStoryNodes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="185" column="41"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_inline_story_1ad4723a892718a02095d5c55d87ec4211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tables_1_1_table_collection" kindref="compound">Aspose::Words::Tables::TableCollection</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Tables::TableCollection &gt; Aspose::Words::InlineStory::get_Tables</definition>
        <argsstring>()</argsstring>
        <name>get_Tables</name>
        <qualifiedname>Aspose::Words::InlineStory::get_Tables</qualifiedname>
        <briefdescription>
<para>Gets a collection of tables that are immediate children of the story. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert <ref refid="class_aspose_1_1_words_1_1_inline_story" kindref="compound">InlineStory</ref> nodes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Footnote&gt;<sp/>footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Table<sp/>nodes<sp/>have<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>that<sp/>makes<sp/>sure<sp/>the<sp/>table<sp/>has<sp/>at<sp/>least<sp/>one<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>table<sp/>=<sp/>MakeObject&lt;Table&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">table-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>place<sp/>a<sp/>table<sp/>inside<sp/>a<sp/>footnote,<sp/>which<sp/>will<sp/>make<sp/>it<sp/>appear<sp/>at<sp/>the<sp/>referencing<sp/>page&apos;s<sp/>footer.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;AppendChild(table);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>footnote-&gt;get_Tables()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="A Table object that represents a table in a Word document. A Table node can have Row nodes.">NodeType::Table</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>InlineStory<sp/>has<sp/>an<sp/>&quot;EnsureMinimum()&quot;<sp/>method<sp/>as<sp/>well,<sp/>but<sp/>in<sp/>this<sp/>case,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>makes<sp/>sure<sp/>the<sp/>last<sp/>child<sp/>of<sp/>the<sp/>node<sp/>is<sp/>a<sp/>paragraph,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>us<sp/>to<sp/>be<sp/>able<sp/>to<sp/>click<sp/>and<sp/>write<sp/>text<sp/>easily<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>footnote-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Edit<sp/>the<sp/>appearance<sp/>of<sp/>the<sp/>anchor,<sp/>which<sp/>is<sp/>the<sp/>small<sp/>superscript<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>main<sp/>text<sp/>that<sp/>points<sp/>to<sp/>the<sp/>footnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>inline<sp/>story<sp/>nodes<sp/>have<sp/>their<sp/>respective<sp/>story<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a668f1dcdb78a4d16c7e4a2f20dcac198" kindref="member" tooltip="Contains footnote text, represented by Footnote.">StoryType::Footnotes</ref>,<sp/>footnote-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>is<sp/>another<sp/>type<sp/>of<sp/>inline<sp/>story.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>System::DynamicCast&lt;Comment&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;get_CurrentParagraph()-&gt;AppendChild(MakeObject&lt;Comment&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;J.<sp/>D.&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>())));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>parent<sp/>paragraph<sp/>of<sp/>an<sp/>inline<sp/>story<sp/>node<sp/>will<sp/>be<sp/>the<sp/>one<sp/>from<sp/>the<sp/>main<sp/>document<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>comment-&gt;get_ParentParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>last<sp/>paragraph<sp/>is<sp/>the<sp/>one<sp/>from<sp/>the<sp/>comment<sp/>text<sp/>contents,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>be<sp/>outside<sp/>the<sp/>main<sp/>document<sp/>body<sp/>in<sp/>a<sp/>speech<sp/>bubble.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>comment<sp/>will<sp/>not<sp/>have<sp/>any<sp/>child<sp/>nodes<sp/>by<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>we<sp/>can<sp/>apply<sp/>the<sp/>EnsureMinimum()<sp/>method<sp/>to<sp/>place<sp/>a<sp/>paragraph<sp/>here<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(comment-&gt;get_LastParagraph()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">comment-&gt;EnsureMinimum();</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/>comment-&gt;get_LastChild()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Once<sp/>we<sp/>have<sp/>a<sp/>paragraph,<sp/>we<sp/>can<sp/>move<sp/>the<sp/>builder<sp/>to<sp/>do<sp/>it<sp/>and<sp/>write<sp/>our<sp/>comment.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(comment-&gt;get_LastParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;My<sp/>comment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119a8413c683b4b27cc3f4dbd4c90329d8ba" kindref="member" tooltip="Contains document comments (annotations), represented by Comment.">StoryType::Comments</ref>,<sp/>comment-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.InsertInlineStoryNodes.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/InlineStory.h" line="490" column="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for inline-level nodes that can contain paragraphs and tables. </para>
    </briefdescription>
    <detaileddescription>
<para><bold>InlineStory</bold> is a container for block-level nodes <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Paragraph</ref> and <ref refid="class_aspose_1_1_words_1_1_tables_1_1_table" kindref="compound">Table</ref>.</para>
<para>The classes that derive from <bold>InlineStory</bold> are inline-level nodes that can contain their own text (paragraphs and tables). For example, a <bold>Comment</bold> node contains text of a comment and a <bold>Footnote</bold> contains text of a footnote.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert and customize footnotes. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>text,<sp/>and<sp/>reference<sp/>it<sp/>with<sp/>a<sp/>footnote.<sp/>This<sp/>footnote<sp/>will<sp/>place<sp/>a<sp/>small<sp/>superscript<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>mark<sp/>after<sp/>the<sp/>text<sp/>that<sp/>it<sp/>references<sp/>and<sp/>create<sp/>an<sp/>entry<sp/>below<sp/>the<sp/>main<sp/>body<sp/>text<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>entry<sp/>will<sp/>contain<sp/>the<sp/>footnote&apos;s<sp/>reference<sp/>mark<sp/>and<sp/>the<sp/>reference<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>we<sp/>will<sp/>pass<sp/>to<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertFootnote&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Main<sp/>body<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Footnote&gt;<sp/>footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>property<sp/>is<sp/>set<sp/>to<sp/>&quot;true&quot;,<sp/>then<sp/>our<sp/>footnote&apos;s<sp/>reference<sp/>mark</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>its<sp/>index<sp/>among<sp/>all<sp/>the<sp/>section&apos;s<sp/>footnotes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>first<sp/>footnote,<sp/>so<sp/>the<sp/>reference<sp/>mark<sp/>will<sp/>be<sp/>&quot;1&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnote-&gt;get_IsAuto());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>move<sp/>the<sp/>document<sp/>builder<sp/>inside<sp/>the<sp/>footnote<sp/>to<sp/>edit<sp/>its<sp/>reference<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(footnote-&gt;get_FirstParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>More<sp/>text<sp/>added<sp/>by<sp/>a<sp/>DocumentBuilder.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;\u0002<sp/>Footnote<sp/>text.<sp/>More<sp/>text<sp/>added<sp/>by<sp/>a<sp/>DocumentBuilder.&quot;</highlight><highlight class="normal">,<sp/>footnote-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>More<sp/>main<sp/>body<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>set<sp/>a<sp/>custom<sp/>reference<sp/>mark<sp/>which<sp/>the<sp/>footnote<sp/>will<sp/>use<sp/>instead<sp/>of<sp/>its<sp/>index<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">footnote-&gt;set_ReferenceMark(u</highlight><highlight class="stringliteral">&quot;RefMark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(footnote-&gt;get_IsAuto());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>bookmark<sp/>with<sp/>the<sp/>&quot;IsAuto&quot;<sp/>flag<sp/>set<sp/>to<sp/>true<sp/>will<sp/>still<sp/>show<sp/>its<sp/>real<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>even<sp/>if<sp/>previous<sp/>bookmarks<sp/>display<sp/>custom<sp/>reference<sp/>marks,<sp/>so<sp/>this<sp/>bookmark&apos;s<sp/>reference<sp/>mark<sp/>will<sp/>be<sp/>a<sp/>&quot;3&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>More<sp/>main<sp/>body<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">footnote<sp/>=<sp/>builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(footnote-&gt;get_IsAuto());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.AddFootnote.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to add a comment to a paragraph. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>MakeObject&lt;Comment&gt;(doc,<sp/>u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;JD&quot;</highlight><highlight class="normal">,<sp/><ref refid="class/system.date_time/_1a8b4667cfa17e4aff117188fee6dbd7ed" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Today</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentParagraph()-&gt;AppendChild(comment);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(comment-&gt;AppendChild(MakeObject&lt;Paragraph&gt;(doc)));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Comment<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.date_time/_1a8b4667cfa17e4aff117188fee6dbd7ed" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Today</ref>(),<sp/>comment-&gt;get_DateTime());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>Microsoft<sp/>Word,<sp/>we<sp/>can<sp/>right-click<sp/>this<sp/>comment<sp/>in<sp/>the<sp/>document<sp/>body<sp/>to<sp/>edit<sp/>it,<sp/>or<sp/>reply<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InlineStory.AddComment.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8">
        <label>Aspose::Words::Comment</label>
        <link refid="class_aspose_1_1_words_1_1_comment"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Aspose::Words::CompositeNode</label>
        <link refid="class_aspose_1_1_words_1_1_composite_node"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Aspose::Words::IInline</label>
      </node>
      <node id="6">
        <label>Aspose::Words::INodeCollection</label>
      </node>
      <node id="1">
        <label>Aspose::Words::InlineStory</label>
        <link refid="class_aspose_1_1_words_1_1_inline_story"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Aspose::Words::Node</label>
        <link refid="class_aspose_1_1_words_1_1_node"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>Aspose::Words::Notes::Footnote</label>
        <link refid="class_aspose_1_1_words_1_1_notes_1_1_footnote"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Node &gt; &gt;</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Aspose::Words::CompositeNode</label>
        <link refid="class_aspose_1_1_words_1_1_composite_node"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>Aspose::Words::IInline</label>
      </node>
      <node id="6">
        <label>Aspose::Words::INodeCollection</label>
      </node>
      <node id="1">
        <label>Aspose::Words::InlineStory</label>
        <link refid="class_aspose_1_1_words_1_1_inline_story"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Aspose::Words::Node</label>
        <link refid="class_aspose_1_1_words_1_1_node"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::Node &gt; &gt;</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/InlineStory.h" line="114" column="1" bodyfile="Aspose.Words.Cpp/InlineStory.h" bodystart="115" bodyend="828"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_node_1a556472e35a86820cf189f10594933f3e" prot="public" virt="pure-virtual"><scope>Aspose::Words::InlineStory</scope><name>Accept</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1af74bc4213aebbe5fd01d2fc0f08b2bec" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>AppendChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1aca26b5978bfb6beca0cdf7fdb2cb583c" prot="private" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1ada6fd164914405e907bee6f4d0d739d0" prot="private" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>BaseType1</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1af682d5fef1bb72db26a32f4adfb6bee0" prot="private" virt="virtual"><scope>Aspose::Words::InlineStory</scope><name>CanInsert</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1a19464681adc0c02f407db053ec0b78d2" prot="private" virt="virtual"><scope>Aspose::Words::InlineStory</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a81dedd9b241b09760112b5e5068f1daa" prot="public" virt="non-virtual" ambiguityscope="Aspose::Words::Node::"><scope>Aspose::Words::InlineStory</scope><name>Clone</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1add39c7dee4940caecfc1c5d0ec8dc181" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>EnsureMinimum</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a98d9935dcf818989566431ab3b75bbed" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_ChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a801d3d549eb73e216df5b7a64d9e1c68" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_Count</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a941120df17372b25f9a7127a9d9b3816" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_CustomNodeId</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a2a69f84e3ccd323199299c999ab32d46" prot="public" virt="virtual"><scope>Aspose::Words::InlineStory</scope><name>get_Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a052d0e4560975f6c19c77bf19d82eedf" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_FirstChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1afdc3007f753643ee3d837d5059b2aed7" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_FirstParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1adeeae00f619ce915bc99c52f16c9d491" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_Font</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a4b939686e9a6a245a31cf392d202316d" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_HasChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a96cf2dd90a284fe9939d1d90780d2d4b" prot="public" virt="virtual"><scope>Aspose::Words::InlineStory</scope><name>get_IsComposite</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1aa5df2b5daee50645bf6906f7275885ce" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_IsDeleteRevision</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1a2bc95ecea1c6ef3fffbfa757427364a7" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_IsInsertRevision</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1a9dcbaac8693e544ff5a7f73f449cb280" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_IsMoveFromRevision</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1a941a29c595f5abd8d415948daa542d76" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_IsMoveToRevision</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a58fae512d8549219b7c3a17ef2d46439" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_LastChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1ac562899f1e65a03e4d02b4bc7430cb7e" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_LastParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a938ff32d060619d89ecefdf57984abf8" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_NextSibling</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a7f80e8d96b7a072fca14157b25ae025e" prot="public" virt="pure-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_NodeType</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1a75d66b36017fa596add159f9762832dc" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_Paragraphs</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ab9e608488885c65a2a165dea6645d15e" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_ParentNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1aa441ec921695b865099fb4d64e441378" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_ParentParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a6013fe75e5859c54d12a87f9b97fa7f3" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_PreviousSibling</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0f8077bf80409ba331148095b95bc3e5" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_Range</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1a8458ba774700d3d6a19ef41afde6b19f" prot="public" virt="pure-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_StoryType</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1ad4723a892718a02095d5c55d87ec4211" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>get_Tables</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a951706cfa681573e79a56204a2029e9e" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>GetAncestor</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ae19991f4d5aa7ccb60ce6d7207495f1c" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>GetAncestorOf</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a6d961b080681f8dc6ee551c6c0ce44da" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>GetChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1ae1fc746cc70cea4c9ab30caf39aec146" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>GetChildNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a6d3cc4280067e07fd504c11e6c968419" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>GetEnumerator</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a08b4d2cc617495b60d85a550422e2d8f" prot="public" virt="virtual"><scope>Aspose::Words::InlineStory</scope><name>GetText</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1ac0cfce6ca5295fe714f5da1e8e244d9e" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>IndexOf</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a2b6e91eabfc75b02062ae6714cd95ec2" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>InsertAfter</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a247cedb3f1fe5474c87f5b5fa0dcd995" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>InsertBefore</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1ac8577165d8f6ab4931bb7b2d4fc4c8fb" prot="private" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1ade7faab51934a6ba44f23d30aa7a5ac3" prot="private" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1a906c2de0d8365cd8a35b1f6d3f73b29c" prot="private" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1ab7988295e5cb57cd63b3d4ff072d9e90" prot="private" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>mField3</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a4f6979e06a5914aeb37a9cb8448658a6" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>NextPreOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0e46189d6dfa7a81c8fa2e2bd2354d61" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>NodeTypeToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1abae3ff6d970ba209cf4eb1c539b205ee" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>PrependChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af40f9573daf950d978d211d3e75c6a95" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>PreviousPreOrder</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a75a9cc0fda5ec9c8aaa1c4910af8f28c" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>Remove</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a4afce861f4df13714988e44419374f21" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>RemoveAllChildren</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a28888dd687866f66b3bb221e63b5063c" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>RemoveChild</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a5a00bfd5d2e04d5752d96e226a3f5849" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>RemoveSmartTags</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1a03c69f62d9acf3581fb384bd6e40030d" prot="private" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a553923ba5225bd3d28f1960b72b45f4f" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>SelectNodes</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1aa2eb340deba06c3dcb7cc29dfeca5a99" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>SelectSingleNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1a0d412cc05de7836acb92332e55eea267" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>set_CustomNodeId</name></member>
      <member refid="class_aspose_1_1_words_1_1_composite_node_1a29e186f28a68773c7c7679079c77d827" prot="public" virt="virtual"><scope>Aspose::Words::InlineStory</scope><name>SetTemplateWeakPtr</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1ad63ea2a3424fb456b68d559856b3727c" prot="private" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1a6bc113db5a1a49b7a788bb4beff370c5" prot="private" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1af7aa71ab5f185ee2463406dab7727595" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>ToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_node_1ad18f64c5586b84a071957824b24426a2" prot="public" virt="non-virtual"><scope>Aspose::Words::InlineStory</scope><name>ToString</name></member>
      <member refid="class_aspose_1_1_words_1_1_inline_story_1aa437d7020ad0231a10e554a9bebc10c7" prot="private" virt="virtual"><scope>Aspose::Words::InlineStory</scope><name>~InlineStory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
