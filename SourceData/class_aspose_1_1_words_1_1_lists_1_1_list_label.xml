<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_lists_1_1_list_label" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::Lists::ListLabel</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IRunAttrSource</basecompoundref>
    <includes refid="_list_label_8h" local="no">Aspose.Words.Cpp/Lists/ListLabel.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1ae9066fd2103a53e1e1d960fe562137a3" prot="private" static="no">
        <type>Aspose::Words::IRunAttrSource</type>
        <definition>typedef Aspose::Words::IRunAttrSource Aspose::Words::Lists::ListLabel::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="70" column="43" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1aa4f6a377a05eaa299f2e28cb7fca1a5a" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_label" kindref="compound">ListLabel</ref></type>
        <definition>typedef ListLabel Aspose::Words::Lists::ListLabel::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="69" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1accf581c155f57306fa100da1755f3b88" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; BaseType &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType&gt; Aspose::Words::Lists::ListLabel::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="72" column="37" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1aba1f151e5172b3532d80f7f44f7ab56c" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::Lists::ListLabel::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="156" column="21" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a0c9f669c4e7e7092f96bac99ce8c1133" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListLabel::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="157" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a68dfac18f080cd81a3546b4b9c90e96a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListLabel::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="158" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a92e3f1e765837b268686cf9561a98603" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListLabel::mField3</definition>
        <argsstring></argsstring>
        <name>mField3</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::mField3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="159" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a413ed55e6c24b360a4e32a83e8a8647a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListLabel::mField4</definition>
        <argsstring></argsstring>
        <name>mField4</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::mField4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="160" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1afa7d0a6093089858017a19e43e96ebe2" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListLabel::mField5</definition>
        <argsstring></argsstring>
        <name>mField5</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::mField5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="161" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1aa639a1fb616ea8791b9e4ac9cd6bfad6" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListLabel::mField6</definition>
        <argsstring></argsstring>
        <name>mField6</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::mField6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="162" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1ab476f167277bbef9207caf21f4fc5bc2" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListLabel::mField7</definition>
        <argsstring></argsstring>
        <name>mField7</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::mField7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="163" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a601b8adba2d681efc6d0a02264c50f91" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::Lists::ListLabel::mField8</definition>
        <argsstring></argsstring>
        <name>mField8</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::mField8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="164" column="23" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a6ba15920ccc2261574abb4d8426a5bfe" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::Lists::ListLabel::~ListLabel</definition>
        <argsstring>()</argsstring>
        <name>~ListLabel</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::~ListLabel</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="152" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a7e1fabefa8b40f811ec2599764289e13" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::Lists::ListLabel::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="73" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a131079f469f34c7abc8edd75675068b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Aspose::Words::Font</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Font &gt; Aspose::Words::Lists::ListLabel::get_Font</definition>
        <argsstring>()</argsstring>
        <name>get_Font</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::get_Font</qualifiedname>
        <briefdescription>
<para>Gets the list label font. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="78" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a136366777b5e2876358fdb64f72af197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
        <definition>System::String Aspose::Words::Lists::ListLabel::get_LabelString</definition>
        <argsstring>()</argsstring>
        <name>get_LabelString</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::get_LabelString</qualifiedname>
        <briefdescription>
<para>Gets a string representation of list label. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to extract the list labels of all paragraphs that are list items. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateListLabels();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>paras<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Find<sp/>if<sp/>we<sp/>have<sp/>the<sp/>paragraph<sp/>list.<sp/>In<sp/>our<sp/>document,<sp/>our<sp/>list<sp/>uses<sp/>plain<sp/>Arabic<sp/>numbers,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>start<sp/>at<sp/>three<sp/>and<sp/>ends<sp/>at<sp/>six.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>paragraph<sp/>:<sp/>System::IterateOver(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paras-&gt;LINQ_OfType&lt;SharedPtr&lt;Paragraph&gt;&gt;()-&gt;LINQ_Where([](SharedPtr&lt;Paragraph&gt;<sp/>p)<sp/>{<sp/>return<sp/>p-&gt;get_ListFormat()-&gt;get_IsListItem();<sp/>})))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;List<sp/>item<sp/>paragraph<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paras-&gt;IndexOf(paragraph)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>text<sp/>we<sp/>get<sp/>when<sp/>getting<sp/>when<sp/>we<sp/>output<sp/>this<sp/>node<sp/>to<sp/>text<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>text<sp/>output<sp/>will<sp/>omit<sp/>list<sp/>labels.<sp/>Trim<sp/>any<sp/>paragraph<sp/>formatting<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>paragraphText<sp/>=<sp/>paragraph-&gt;ToString(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a9dffbf69ffba8bc38bc4e01abf4b1675" kindref="member" tooltip="Saves the document in the plain text format.">SaveFormat::Text</ref>).Trim();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tExported<sp/>Text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paragraphText<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;ListLabel&gt;<sp/>label<sp/>=<sp/>paragraph-&gt;get_ListLabel();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>the<sp/>position<sp/>of<sp/>the<sp/>paragraph<sp/>in<sp/>the<sp/>current<sp/>level<sp/>of<sp/>the<sp/>list.<sp/>If<sp/>we<sp/>have<sp/>a<sp/>list<sp/>with<sp/>multiple<sp/>levels,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>tell<sp/>us<sp/>what<sp/>position<sp/>it<sp/>is<sp/>on<sp/>that<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tNumerical<sp/>Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label-&gt;get_LabelValue()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Combine<sp/>them<sp/>together<sp/>to<sp/>include<sp/>the<sp/>list<sp/>label<sp/>with<sp/>the<sp/>text<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tList<sp/>label<sp/>combined<sp/>with<sp/>text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label-&gt;get_LabelString()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paragraphText<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="113" column="23"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a96b368c97331dfaa772988e2e993f1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::Lists::ListLabel::get_LabelValue</definition>
        <argsstring>()</argsstring>
        <name>get_LabelValue</name>
        <qualifiedname>Aspose::Words::Lists::ListLabel::get_LabelValue</qualifiedname>
        <briefdescription>
<para>Gets a numeric value for this label. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to extract the list labels of all paragraphs that are list items. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateListLabels();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>paras<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Find<sp/>if<sp/>we<sp/>have<sp/>the<sp/>paragraph<sp/>list.<sp/>In<sp/>our<sp/>document,<sp/>our<sp/>list<sp/>uses<sp/>plain<sp/>Arabic<sp/>numbers,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>start<sp/>at<sp/>three<sp/>and<sp/>ends<sp/>at<sp/>six.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>paragraph<sp/>:<sp/>System::IterateOver(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paras-&gt;LINQ_OfType&lt;SharedPtr&lt;Paragraph&gt;&gt;()-&gt;LINQ_Where([](SharedPtr&lt;Paragraph&gt;<sp/>p)<sp/>{<sp/>return<sp/>p-&gt;get_ListFormat()-&gt;get_IsListItem();<sp/>})))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;List<sp/>item<sp/>paragraph<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paras-&gt;IndexOf(paragraph)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>text<sp/>we<sp/>get<sp/>when<sp/>getting<sp/>when<sp/>we<sp/>output<sp/>this<sp/>node<sp/>to<sp/>text<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>text<sp/>output<sp/>will<sp/>omit<sp/>list<sp/>labels.<sp/>Trim<sp/>any<sp/>paragraph<sp/>formatting<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>paragraphText<sp/>=<sp/>paragraph-&gt;ToString(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a9dffbf69ffba8bc38bc4e01abf4b1675" kindref="member" tooltip="Saves the document in the plain text format.">SaveFormat::Text</ref>).Trim();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tExported<sp/>Text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paragraphText<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;ListLabel&gt;<sp/>label<sp/>=<sp/>paragraph-&gt;get_ListLabel();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>the<sp/>position<sp/>of<sp/>the<sp/>paragraph<sp/>in<sp/>the<sp/>current<sp/>level<sp/>of<sp/>the<sp/>list.<sp/>If<sp/>we<sp/>have<sp/>a<sp/>list<sp/>with<sp/>multiple<sp/>levels,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>tell<sp/>us<sp/>what<sp/>position<sp/>it<sp/>is<sp/>on<sp/>that<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tNumerical<sp/>Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label-&gt;get_LabelValue()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Combine<sp/>them<sp/>together<sp/>to<sp/>include<sp/>the<sp/>list<sp/>label<sp/>with<sp/>the<sp/>text<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tList<sp/>label<sp/>combined<sp/>with<sp/>text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label-&gt;get_LabelString()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paragraphText<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="148" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines properties specific to a list label. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to extract the list labels of all paragraphs that are list items. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Rendering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateListLabels();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>paras<sp/>=<sp/>doc-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379afeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="A paragraph of text. A Paragraph node is a container for inline level elements Run,...">NodeType::Paragraph</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Find<sp/>if<sp/>we<sp/>have<sp/>the<sp/>paragraph<sp/>list.<sp/>In<sp/>our<sp/>document,<sp/>our<sp/>list<sp/>uses<sp/>plain<sp/>Arabic<sp/>numbers,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>start<sp/>at<sp/>three<sp/>and<sp/>ends<sp/>at<sp/>six.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>paragraph<sp/>:<sp/>System::IterateOver(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paras-&gt;LINQ_OfType&lt;SharedPtr&lt;Paragraph&gt;&gt;()-&gt;LINQ_Where([](SharedPtr&lt;Paragraph&gt;<sp/>p)<sp/>{<sp/>return<sp/>p-&gt;get_ListFormat()-&gt;get_IsListItem();<sp/>})))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;List<sp/>item<sp/>paragraph<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paras-&gt;IndexOf(paragraph)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>text<sp/>we<sp/>get<sp/>when<sp/>getting<sp/>when<sp/>we<sp/>output<sp/>this<sp/>node<sp/>to<sp/>text<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>text<sp/>output<sp/>will<sp/>omit<sp/>list<sp/>labels.<sp/>Trim<sp/>any<sp/>paragraph<sp/>formatting<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>paragraphText<sp/>=<sp/>paragraph-&gt;ToString(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a9dffbf69ffba8bc38bc4e01abf4b1675" kindref="member" tooltip="Saves the document in the plain text format.">SaveFormat::Text</ref>).Trim();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tExported<sp/>Text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paragraphText<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;ListLabel&gt;<sp/>label<sp/>=<sp/>paragraph-&gt;get_ListLabel();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gets<sp/>the<sp/>position<sp/>of<sp/>the<sp/>paragraph<sp/>in<sp/>the<sp/>current<sp/>level<sp/>of<sp/>the<sp/>list.<sp/>If<sp/>we<sp/>have<sp/>a<sp/>list<sp/>with<sp/>multiple<sp/>levels,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>tell<sp/>us<sp/>what<sp/>position<sp/>it<sp/>is<sp/>on<sp/>that<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tNumerical<sp/>Id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label-&gt;get_LabelValue()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Combine<sp/>them<sp/>together<sp/>to<sp/>include<sp/>the<sp/>list<sp/>label<sp/>with<sp/>the<sp/>text<sp/>in<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tList<sp/>label<sp/>combined<sp/>with<sp/>text:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>label-&gt;get_LabelString()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>paragraphText<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Aspose::Words::IRunAttrSource</label>
      </node>
      <node id="1">
        <label>Aspose::Words::Lists::ListLabel</label>
        <link refid="class_aspose_1_1_words_1_1_lists_1_1_list_label"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Aspose::Words::IRunAttrSource</label>
      </node>
      <node id="1">
        <label>Aspose::Words::Lists::ListLabel</label>
        <link refid="class_aspose_1_1_words_1_1_lists_1_1_list_label"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/Lists/ListLabel.h" line="67" column="1" bodyfile="Aspose.Words.Cpp/Lists/ListLabel.h" bodystart="68" bodyend="172"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1ae9066fd2103a53e1e1d960fe562137a3" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a131079f469f34c7abc8edd75675068b5" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>get_Font</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a136366777b5e2876358fdb64f72af197" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>get_LabelString</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a96b368c97331dfaa772988e2e993f1c8" prot="public" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>get_LabelValue</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1aba1f151e5172b3532d80f7f44f7ab56c" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a0c9f669c4e7e7092f96bac99ce8c1133" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a68dfac18f080cd81a3546b4b9c90e96a" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a92e3f1e765837b268686cf9561a98603" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>mField3</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a413ed55e6c24b360a4e32a83e8a8647a" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>mField4</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1afa7d0a6093089858017a19e43e96ebe2" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>mField5</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1aa639a1fb616ea8791b9e4ac9cd6bfad6" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>mField6</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1ab476f167277bbef9207caf21f4fc5bc2" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>mField7</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a601b8adba2d681efc6d0a02264c50f91" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>mField8</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a7e1fabefa8b40f811ec2599764289e13" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1aa4f6a377a05eaa299f2e28cb7fca1a5a" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1accf581c155f57306fa100da1755f3b88" prot="private" virt="non-virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_lists_1_1_list_label_1a6ba15920ccc2261574abb4d8426a5bfe" prot="private" virt="virtual"><scope>Aspose::Words::Lists::ListLabel</scope><name>~ListLabel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
