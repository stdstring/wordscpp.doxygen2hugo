<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_conditional_style_collection" kind="class" language="C++" prot="public" final="yes">
    <compoundname>Aspose::Words::ConditionalStyleCollection</compoundname>
    <basecompoundref refid="class/system.collections.generic.i_enumerable/" prot="public" virt="non-virtual">System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; &gt;</basecompoundref>
    <includes refid="_conditional_style_collection_8h" local="no">Aspose.Words.Cpp/ConditionalStyleCollection.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a95cbd4af34fa60d023097956fbe51b66" prot="private" static="no">
        <type><ref refid="class/system.collections.generic.i_enumerable/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::IEnumerable</ref>&lt; <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt; &gt;</type>
        <definition>typedef System::Collections::Generic::IEnumerable&lt;System::SharedPtr&lt;Aspose::Words::ConditionalStyle&gt; &gt; Aspose::Words::ConditionalStyleCollection::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="108" column="55" bodyfile="Aspose.Words.Cpp/ConditionalStyleCollection.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a47a20fc8b632aee0dc774b90f705ee96" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_conditional_style_collection" kindref="compound">ConditionalStyleCollection</ref></type>
        <definition>typedef ConditionalStyleCollection Aspose::Words::ConditionalStyleCollection::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="107" column="40" bodyfile="Aspose.Words.Cpp/ConditionalStyleCollection.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a8f9b6c5ccaa1646b44e53beab3b96923" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; <ref refid="class/system.collections.generic.i_enumerable/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">BaseType</ref> &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType&gt; Aspose::Words::ConditionalStyleCollection::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="110" column="37" bodyfile="Aspose.Words.Cpp/ConditionalStyleCollection.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a4d8fa0c536d9d40e468d5efc891389b2" prot="private" static="no" mutable="no">
        <type><ref refid="class/system.weak_ptr/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::WeakPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::WeakPtr&lt;System::Object&gt; Aspose::Words::ConditionalStyleCollection::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="1352" column="21" bodyfile="Aspose.Words.Cpp/ConditionalStyleCollection.h" bodystart="1352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a61aa706c1619350cfc46a7d055a88e28" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::ConditionalStyleCollection::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="1353" column="23" bodyfile="Aspose.Words.Cpp/ConditionalStyleCollection.h" bodystart="1353" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1afef6114a62cc3eda7d17245780c00553" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::ConditionalStyleCollection::~ConditionalStyleCollection</definition>
        <argsstring>()</argsstring>
        <name>~ConditionalStyleCollection</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::~ConditionalStyleCollection</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="1348" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a196b4e2833590836769ea858d1d5332f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::ConditionalStyleCollection::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="111" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a5323e4baf0af011323dd8d45c732b5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::ConditionalStyleCollection::ClearFormatting</definition>
        <argsstring>()</argsstring>
        <name>ClearFormatting</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::ClearFormatting</qualifiedname>
        <briefdescription>
<para>Clears all conditional styles of the table style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to reset conditional table styles. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;First<sp/>row&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Last<sp/>row&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>table<sp/>style<sp/>to<sp/>color<sp/>the<sp/>borders<sp/>of<sp/>the<sp/>first<sp/>row<sp/>of<sp/>the<sp/>table<sp/>in<sp/>red.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>table<sp/>style<sp/>to<sp/>color<sp/>the<sp/>borders<sp/>of<sp/>the<sp/>last<sp/>row<sp/>of<sp/>the<sp/>table<sp/>in<sp/>blue.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>using<sp/>the<sp/>&quot;ClearFormatting&quot;<sp/>method<sp/>to<sp/>clear<sp/>the<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Clear<sp/>the<sp/>conditional<sp/>styles<sp/>for<sp/>a<sp/>specific<sp/>part<sp/>of<sp/>a<sp/>table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_Borders()-&gt;get_Color());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Clear<sp/>the<sp/>conditional<sp/>styles<sp/>for<sp/>the<sp/>entire<sp/>table:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isEmptyColor<sp/>=<sp/>[](SharedPtr&lt;ConditionalStyle&gt;<sp/>s)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s-&gt;get_Borders()-&gt;get_Color()<sp/>==<sp/><ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(tableStyle-&gt;get_ConditionalStyles()-&gt;LINQ_All(isEmptyColor));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="1120" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a3b04a83e7f4f024e37835488c0682bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_BottomLeftCell</definition>
        <argsstring>()</argsstring>
        <name>get_BottomLeftCell</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_BottomLeftCell</qualifiedname>
        <briefdescription>
<para>Gets the bottom left cell style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="1003" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a14cc06dd21450fc9328816a945f31074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_BottomRightCell</definition>
        <argsstring>()</argsstring>
        <name>get_BottomRightCell</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_BottomRightCell</qualifiedname>
        <briefdescription>
<para>Gets the bottom right cell style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="1077" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a2d7253a72a39a702cae8f91deed5fec1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Aspose::Words::ConditionalStyleCollection::get_Count</definition>
        <argsstring>() const</argsstring>
        <name>get_Count</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_Count</qualifiedname>
        <briefdescription>
<para>Gets the number of conditional styles in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="189" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a0c5c29cbbca86eea624c2d6015adab56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_EvenColumnBanding</definition>
        <argsstring>()</argsstring>
        <name>get_EvenColumnBanding</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_EvenColumnBanding</qualifiedname>
        <briefdescription>
<para>Gets the even column banding style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="781" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a3ddca67e831817e8888771e230aa3ba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_EvenRowBanding</definition>
        <argsstring>()</argsstring>
        <name>get_EvenRowBanding</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_EvenRowBanding</qualifiedname>
        <briefdescription>
<para>Gets the even row banding style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="707" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a921ee179df6ac26e35c93679f9961b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_FirstColumn</definition>
        <argsstring>()</argsstring>
        <name>get_FirstColumn</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_FirstColumn</qualifiedname>
        <briefdescription>
<para>Gets the first column style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="337" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a91de855c424d1e24a34e03b60f88ae33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_FirstRow</definition>
        <argsstring>()</argsstring>
        <name>get_FirstRow</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_FirstRow</qualifiedname>
        <briefdescription>
<para>Gets the first row style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="263" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a9116f96e0f315180c08e0c4df27276c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_LastColumn</definition>
        <argsstring>()</argsstring>
        <name>get_LastColumn</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_LastColumn</qualifiedname>
        <briefdescription>
<para>Gets the last column style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="485" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a413cf7165bca0f7b05ed662fc8bba87f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_LastRow</definition>
        <argsstring>()</argsstring>
        <name>get_LastRow</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_LastRow</qualifiedname>
        <briefdescription>
<para>Gets the last row style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="411" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a008905fde9e3eae10dc6fb4ce28de751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_OddColumnBanding</definition>
        <argsstring>()</argsstring>
        <name>get_OddColumnBanding</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_OddColumnBanding</qualifiedname>
        <briefdescription>
<para>Gets the odd column banding style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="633" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a70daac13436a80e97c6b8793ebd4314b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_OddRowBanding</definition>
        <argsstring>()</argsstring>
        <name>get_OddRowBanding</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_OddRowBanding</qualifiedname>
        <briefdescription>
<para>Gets the odd row banding style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="559" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a6fd50e006cec0b2c06577fc86c1521e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_TopLeftCell</definition>
        <argsstring>()</argsstring>
        <name>get_TopLeftCell</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_TopLeftCell</qualifiedname>
        <briefdescription>
<para>Gets the top left cell style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="855" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a2d4c437e01bb5cd9a98a3c4c08e65fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::get_TopRightCell</definition>
        <argsstring>()</argsstring>
        <name>get_TopRightCell</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::get_TopRightCell</qualifiedname>
        <briefdescription>
<para>Gets the top right cell style. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="929" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a0fcc01076a2c9a584ffef6b7e048bbdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.collections.generic.i_enumerator/" kindref="compound" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Collections::Generic::IEnumerator</ref>&lt; <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt; &gt; &gt;</type>
        <definition>System::SharedPtr&lt; System::Collections::Generic::IEnumerator&lt; System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; &gt; &gt; Aspose::Words::ConditionalStyleCollection::GetEnumerator</definition>
        <argsstring>() override</argsstring>
        <name>GetEnumerator</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::GetEnumerator</qualifiedname>
        <briefdescription>
<para>Returns an enumerator object that can be used to iterate over all conditional styles in the collection. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="1194" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a9aedfd19f2ebc175de45894424fa753c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::idx_get</definition>
        <argsstring>(Aspose::Words::ConditionalStyleType conditionalStyleType)</argsstring>
        <name>idx_get</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::idx_get</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512a" kindref="member">Aspose::Words::ConditionalStyleType</ref></type>
          <declname>conditionalStyleType</declname>
        </param>
        <briefdescription>
<para>Retrieves a <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">ConditionalStyle</ref> object by conditional style type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="1268" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_conditional_style_collection_1a76fe236deff1a4c8425a5eb5e08782e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">Aspose::Words::ConditionalStyle</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; Aspose::Words::ConditionalStyleCollection::idx_get</definition>
        <argsstring>(int32_t index)</argsstring>
        <name>idx_get</name>
        <qualifiedname>Aspose::Words::ConditionalStyleCollection::idx_get</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Retrieves a <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">ConditionalStyle</ref> object by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Zero-based index of the conditional style to retrieve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="1344" column="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a collection of <ref refid="class_aspose_1_1_words_1_1_conditional_style" kindref="compound">ConditionalStyle</ref> objects. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with certain area styles of a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>custom<sp/>table<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tableStyle<sp/>=<sp/>System::DynamicCast&lt;TableStyle&gt;(doc-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1ba51c45b795d5d18a3e4e0c37e8b20a141" kindref="member" tooltip="The style is a table style.">StyleType::Table</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyTableStyle1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Conditional<sp/>styles<sp/>are<sp/>formatting<sp/>changes<sp/>that<sp/>affect<sp/>only<sp/>some<sp/>of<sp/>the<sp/>table&apos;s<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>based<sp/>on<sp/>a<sp/>predicate,<sp/>such<sp/>as<sp/>the<sp/>cells<sp/>being<sp/>in<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>accessing<sp/>a<sp/>table<sp/>style&apos;s<sp/>conditional<sp/>styles<sp/>from<sp/>the<sp/>&quot;ConditionalStyles&quot;<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>By<sp/>style<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;idx_get(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;get_Shading()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1af90758ed5c66dd6f1681ae5becc227e0" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_AliceBlue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>By<sp/>index:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a7d0b969629be27c82281c543064169f8" kindref="member" external="X:/words-cpp-release/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Black</ref>());</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da946369d896277a74817357a370331422" kindref="member">LineStyle::DotDash</ref>);</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1af2786fc44471a8730d414a5547c8512aa6f90473812d5f788bddfb1470840e651" kindref="member" tooltip="Specifies formatting of the first row of a table.">ConditionalStyleType::FirstRow</ref>,<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;idx_get(0)-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>As<sp/>a<sp/>property:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_FirstRow()-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>padding<sp/>and<sp/>text<sp/>formatting<sp/>to<sp/>conditional<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_BottomPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_LeftPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_RightPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastRow()-&gt;set_TopPadding(10);</highlight></codeline>
<codeline><highlight class="normal">tableStyle-&gt;get_ConditionalStyles()-&gt;get_LastColumn()-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>all<sp/>possible<sp/>style<sp/>conditions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Collections::Generic::IEnumerator&lt;SharedPtr&lt;ConditionalStyle&gt;&gt;&gt;<sp/>enumerator<sp/>=<sp/>tableStyle-&gt;get_ConditionalStyles()-&gt;GetEnumerator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(enumerator-&gt;MoveNext())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;ConditionalStyle&gt;<sp/>currentStyle<sp/>=<sp/>enumerator-&gt;get_Current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentStyle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>System::EnumGetName(currentStyle-&gt;get_Type())<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apply<sp/>the<sp/>custom<sp/>style,<sp/>which<sp/>contains<sp/>all<sp/>conditional<sp/>styles,<sp/>to<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_Style(tableStyle);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>style<sp/>applies<sp/>some<sp/>conditional<sp/>styles<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(TableStyleOptions::FirstRow<sp/>|<sp/>TableStyleOptions::FirstColumn<sp/>|<sp/>TableStyleOptions::RowBands,<sp/>table-&gt;get_StyleOptions());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>enable<sp/>all<sp/>other<sp/>styles<sp/>ourselves<sp/>via<sp/>the<sp/>&quot;StyleOptions&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_StyleOptions(table-&gt;get_StyleOptions()<sp/>|<sp/>TableStyleOptions::LastRow<sp/>|<sp/>TableStyleOptions::LastColumn);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Table.ConditionalStyles.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Aspose::Words::ConditionalStyleCollection</label>
        <link refid="class_aspose_1_1_words_1_1_conditional_style_collection"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>System::Object</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Aspose::Words::ConditionalStyleCollection</label>
        <link refid="class_aspose_1_1_words_1_1_conditional_style_collection"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>System::Collections::Generic::IEnumerable&lt; System::SharedPtr&lt; Aspose::Words::ConditionalStyle &gt; &gt;</label>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>System::Object</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/ConditionalStyleCollection.h" line="105" column="1" bodyfile="Aspose.Words.Cpp/ConditionalStyleCollection.h" bodystart="106" bodyend="1355"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a95cbd4af34fa60d023097956fbe51b66" prot="private" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a5323e4baf0af011323dd8d45c732b5b3" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>ClearFormatting</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a3b04a83e7f4f024e37835488c0682bbe" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_BottomLeftCell</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a14cc06dd21450fc9328816a945f31074" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_BottomRightCell</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a2d7253a72a39a702cae8f91deed5fec1" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_Count</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a0c5c29cbbca86eea624c2d6015adab56" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_EvenColumnBanding</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a3ddca67e831817e8888771e230aa3ba7" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_EvenRowBanding</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a921ee179df6ac26e35c93679f9961b50" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_FirstColumn</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a91de855c424d1e24a34e03b60f88ae33" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_FirstRow</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a9116f96e0f315180c08e0c4df27276c2" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_LastColumn</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a413cf7165bca0f7b05ed662fc8bba87f" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_LastRow</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a008905fde9e3eae10dc6fb4ce28de751" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_OddColumnBanding</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a70daac13436a80e97c6b8793ebd4314b" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_OddRowBanding</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a6fd50e006cec0b2c06577fc86c1521e4" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_TopLeftCell</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a2d4c437e01bb5cd9a98a3c4c08e65fc2" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>get_TopRightCell</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a0fcc01076a2c9a584ffef6b7e048bbdf" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>GetEnumerator</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a9aedfd19f2ebc175de45894424fa753c" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>idx_get</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a76fe236deff1a4c8425a5eb5e08782e3" prot="public" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>idx_get</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a4d8fa0c536d9d40e468d5efc891389b2" prot="private" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a61aa706c1619350cfc46a7d055a88e28" prot="private" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a196b4e2833590836769ea858d1d5332f" prot="private" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a47a20fc8b632aee0dc774b90f705ee96" prot="private" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1a8f9b6c5ccaa1646b44e53beab3b96923" prot="private" virt="non-virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_conditional_style_collection_1afef6114a62cc3eda7d17245780c00553" prot="private" virt="virtual"><scope>Aspose::Words::ConditionalStyleCollection</scope><name>~ConditionalStyleCollection</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
