<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="class_aspose_1_1_words_1_1_document_builder" kind="class" language="C++" prot="public">
    <compoundname>Aspose::Words::DocumentBuilder</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IRunAttrSource</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::IRowAttrSource</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">Aspose::Words::ICellAttrSource</basecompoundref>
    <includes refid="_document_builder_8h" local="no">Aspose.Words.Cpp/DocumentBuilder.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_document_builder_1a01d04df1b2432feacc92129236c51d78" prot="private" static="no">
        <type>Aspose::Words::IRunAttrSource</type>
        <definition>typedef Aspose::Words::IRunAttrSource Aspose::Words::DocumentBuilder::BaseType</definition>
        <argsstring></argsstring>
        <name>BaseType</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::BaseType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="258" column="43" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_document_builder_1a89b88d18ff1f9c1dc04d37b72cdcbf1a" prot="private" static="no">
        <type>Aspose::Words::IRowAttrSource</type>
        <definition>typedef Aspose::Words::IRowAttrSource Aspose::Words::DocumentBuilder::BaseType1</definition>
        <argsstring></argsstring>
        <name>BaseType1</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::BaseType1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="259" column="43" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_document_builder_1ab86c9910d9fe163bd3118532a6bc675c" prot="private" static="no">
        <type>Aspose::Words::ICellAttrSource</type>
        <definition>typedef Aspose::Words::ICellAttrSource Aspose::Words::DocumentBuilder::BaseType2</definition>
        <argsstring></argsstring>
        <name>BaseType2</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::BaseType2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="260" column="44" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_document_builder_1a52051ce680cf534ccdbc09b577b2968e" prot="private" static="no">
        <type><ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref></type>
        <definition>typedef DocumentBuilder Aspose::Words::DocumentBuilder::ThisType</definition>
        <argsstring></argsstring>
        <name>ThisType</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::ThisType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="257" column="29" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_aspose_1_1_words_1_1_document_builder_1a7f22b999753cb5b89f069e5deaa4a551" prot="private" static="no">
        <type><ref refid="class/system.base_types_info/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">::System::BaseTypesInfo</ref>&lt; BaseType, BaseType1, BaseType2 &gt;</type>
        <definition>typedef ::System::BaseTypesInfo&lt;BaseType, BaseType1, BaseType2&gt; Aspose::Words::DocumentBuilder::ThisTypeBaseTypesInfo</definition>
        <argsstring></argsstring>
        <name>ThisTypeBaseTypesInfo</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::ThisTypeBaseTypesInfo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="262" column="37" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1abf2790d87894562bfd465d6c6f22cdd8" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField0</definition>
        <argsstring></argsstring>
        <name>mField0</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField0</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5510" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1a282a7be9ab26f1607a042ece2571f5ba" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField1</definition>
        <argsstring></argsstring>
        <name>mField1</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5511" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1a3d9ce130b75f2b2021df71bba3b8d44f" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField10</definition>
        <argsstring></argsstring>
        <name>mField10</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField10</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5520" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1af55c269bed97b9d8738947d6794c934a" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField11</definition>
        <argsstring></argsstring>
        <name>mField11</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField11</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5521" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1adc31d5fad6d70f24901fa2159a74b655" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField12</definition>
        <argsstring></argsstring>
        <name>mField12</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField12</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5522" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1a9f80906b93e4a6d8fd604eeeabb96951" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::DocumentBuilder::mField13</definition>
        <argsstring></argsstring>
        <name>mField13</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField13</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5523" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1a63ce23f3c0a586012ca36e74b8e5f411" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::DocumentBuilder::mField14</definition>
        <argsstring></argsstring>
        <name>mField14</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField14</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5524" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1af7ca5a92ca78ec850c65d3b2b7f22b16" prot="private" static="no" mutable="no">
        <type>__TypeStub&lt; 4, 4, 4, 4 &gt;::type</type>
        <definition>__TypeStub&lt;4,4,4,4&gt;::type Aspose::Words::DocumentBuilder::mField15</definition>
        <argsstring></argsstring>
        <name>mField15</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField15</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5525" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1a50100455f54adf32e6648292bb4ed958" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField2</definition>
        <argsstring></argsstring>
        <name>mField2</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5512" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1a173676d0e14d9853bccce8eadadc47ed" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField3</definition>
        <argsstring></argsstring>
        <name>mField3</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5513" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1aa0403c1ca09e7c911754a55452abc194" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField4</definition>
        <argsstring></argsstring>
        <name>mField4</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5514" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1afec058a63ae02c03d416d00d02aef246" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField5</definition>
        <argsstring></argsstring>
        <name>mField5</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField5</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5515" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1ad940639d66a9a84746667595147931e0" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField6</definition>
        <argsstring></argsstring>
        <name>mField6</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField6</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5516" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1a1ead8da510fd2fc097f17df81ff9755f" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField7</definition>
        <argsstring></argsstring>
        <name>mField7</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField7</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5517" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1a6342e98fffb14a7a386cdb13cb0b7fc9" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField8</definition>
        <argsstring></argsstring>
        <name>mField8</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField8</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5518" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_aspose_1_1_words_1_1_document_builder_1ace7ebcda36c9c32f1e53492de03212de" prot="private" static="no" mutable="no">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.object/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Object</ref> &gt;</type>
        <definition>System::SharedPtr&lt;System::Object&gt; Aspose::Words::DocumentBuilder::mField9</definition>
        <argsstring></argsstring>
        <name>mField9</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::mField9</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5519" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5519" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1afad80d42faa3478ac6af3c8b18a078cd" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual Aspose::Words::DocumentBuilder::~DocumentBuilder</definition>
        <argsstring>()</argsstring>
        <name>~DocumentBuilder</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::~DocumentBuilder</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5506" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a09579c123653f7256b4bd70dc35654aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::DocumentBuilder::RTTI_INFO_DECL_EX</definition>
        <argsstring>()</argsstring>
        <name>RTTI_INFO_DECL_EX</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::RTTI_INFO_DECL_EX</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="263" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1accace6a637ef09481c4b7acb729eb981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::DocumentBuilder::DocumentBuilder</definition>
        <argsstring>()</argsstring>
        <name>DocumentBuilder</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::DocumentBuilder</qualifiedname>
        <briefdescription>
<para>Initializes a new instance of this class. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1223" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ab879364d5e576f45ec0ff35ec03f8b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Aspose::Words::DocumentBuilder::DocumentBuilder</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Document &gt; &amp;doc)</argsstring>
        <name>DocumentBuilder</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::DocumentBuilder</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt; &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Initializes a new instance of this class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>doc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Document</ref> object to attach to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert formatted text using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>font<sp/>formatting,<sp/>then<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Aspose::Words::Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to create headers and footers in a document using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>that<sp/>we<sp/>want<sp/>different<sp/>headers<sp/>and<sp/>footers<sp/>for<sp/>first,<sp/>even<sp/>and<sp/>odd<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_DifferentFirstPageHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_OddAndEvenPagesHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>headers,<sp/>then<sp/>add<sp/>three<sp/>pages<sp/>to<sp/>the<sp/>document<sp/>to<sp/>display<sp/>each<sp/>header<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a545b1c922d56aca91ca2080eed0d7913" kindref="member" tooltip="Header for the first page of the section.">HeaderFooterType::HeaderFirst</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>the<sp/>first<sp/>page&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69adfe2914bbaa51fcbf35bdb65ac3865d6" kindref="member" tooltip="Header for even numbered pages.">HeaderFooterType::HeaderEven</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>even<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>all<sp/>other<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.HeadersAndFooters.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a Table of contents (TOC) into a document using heading styles as entries. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>table<sp/>of<sp/>contents<sp/>for<sp/>the<sp/>first<sp/>page<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>table<sp/>to<sp/>pick<sp/>up<sp/>paragraphs<sp/>with<sp/>headings<sp/>of<sp/>levels<sp/>1<sp/>to<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>set<sp/>its<sp/>entries<sp/>to<sp/>be<sp/>hyperlinks<sp/>that<sp/>will<sp/>take<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>location<sp/>of<sp/>the<sp/>heading<sp/>when<sp/>left-clicked<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTableOfContents(u</highlight><highlight class="stringliteral">&quot;\\o<sp/>\&quot;1-3\&quot;<sp/>\\h<sp/>\\z<sp/>\\u&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Populate<sp/>the<sp/>table<sp/>of<sp/>contents<sp/>by<sp/>adding<sp/>paragraphs<sp/>with<sp/>heading<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>such<sp/>heading<sp/>with<sp/>a<sp/>level<sp/>between<sp/>1<sp/>and<sp/>3<sp/>will<sp/>create<sp/>an<sp/>entry<sp/>in<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a5c20c643b1731618a5eddb7660b10a3e" kindref="member" tooltip="The Heading 3 style.">StyleIdentifier::Heading3</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a1418e44fe2e519f30b903c1fbf263097" kindref="member" tooltip="The Heading 4 style.">StyleIdentifier::Heading4</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>table<sp/>of<sp/>contents<sp/>is<sp/>a<sp/>field<sp/>of<sp/>a<sp/>type<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>updated<sp/>to<sp/>show<sp/>an<sp/>up-to-date<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertToc.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1319" column="8"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1afa01f39baa86bfce3e32023044c10e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tables_1_1_row" kindref="compound">Aspose::Words::Tables::Row</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Tables::Row &gt; Aspose::Words::DocumentBuilder::DeleteRow</definition>
        <argsstring>(int32_t tableIndex, int32_t rowIndex)</argsstring>
        <name>DeleteRow</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::DeleteRow</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>tableIndex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>rowIndex</declname>
        </param>
        <briefdescription>
<para>Deletes a row from a table. </para>
        </briefdescription>
        <detaileddescription>
<para>If the cursor is inside the row that is being deleted, the cursor is moved out to the next row or to the next paragraph after the table.</para>
<para>If you delete a row from a table that contains only one row, the whole table is deleted.</para>
<para>For the index parameters, when index is greater than or equal to 0, it specifies an index from the beginning with 0 being the first element. When index is less than 0, it specified an index from the end with -1 being the last element.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tableIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the row in the table.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The row node that was just removed.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to delete a row from a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>table-&gt;get_Rows()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Delete<sp/>the<sp/>first<sp/>row<sp/>of<sp/>the<sp/>first<sp/>table<sp/>in<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;DeleteRow(0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>table-&gt;get_Rows()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.\aRow<sp/>2,<sp/>cell<sp/>2.\a\a&quot;</highlight><highlight class="normal">,<sp/>table-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2000" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a7550962b4842aa0a12f1fb1b303a1b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_bookmark_end" kindref="compound">Aspose::Words::BookmarkEnd</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::BookmarkEnd &gt; Aspose::Words::DocumentBuilder::EndBookmark</definition>
        <argsstring>(const System::String &amp;bookmarkName)</argsstring>
        <name>EndBookmark</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::EndBookmark</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>bookmarkName</declname>
        </param>
        <briefdescription>
<para>Marks the current position in the document as a bookmark end. </para>
        </briefdescription>
        <detaileddescription>
<para>Bookmarks in a document can overlap and span any range. To create a valid bookmark you need to call both <ref refid="" kindref="compound">StartBookmark()</ref> and <ref refid="" kindref="compound">EndBookmark()</ref> with the same <bold>bookmarkName</bold> parameter.</para>
<para>Badly formed bookmarks or bookmarks with duplicate names will be ignored when the document is saved.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bookmarkName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the bookmark.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bookmark end node that was just created.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how create a bookmark. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>valid<sp/>bookmark<sp/>needs<sp/>to<sp/>have<sp/>document<sp/>body<sp/>text<sp/>enclosed<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BookmarkStart<sp/>and<sp/>BookmarkEnd<sp/>nodes<sp/>created<sp/>with<sp/>a<sp/>matching<sp/>bookmark<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Range()-&gt;get_Bookmarks()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Bookmarks()-&gt;idx_get(0)-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Bookmarks()-&gt;idx_get(0)-&gt;get_Text().Trim());</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a hyperlink which references a local bookmark. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;Bookmark1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmarked<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;Bookmark1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>outside<sp/>of<sp/>the<sp/>bookmark.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>HYPERLINK<sp/>field<sp/>that<sp/>links<sp/>to<sp/>the<sp/>bookmark.<sp/>We<sp/>can<sp/>pass<sp/>field<sp/>switches</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>&quot;InsertHyperlink&quot;<sp/>method<sp/>as<sp/>part<sp/>of<sp/>the<sp/>argument<sp/>containing<sp/>the<sp/>referenced<sp/>bookmark&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a66ba162102bbf6ae31b522aec561735e" kindref="member">Underline::Single</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHyperlink(u</highlight><highlight class="stringliteral">&quot;Link<sp/>to<sp/>Bookmark1&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Bookmark1\&quot;<sp/>\\o<sp/>\&quot;Hyperlink<sp/>Tip&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertHyperlinkToLocalBookmark.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4960" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a4eff139293213b332e8bba6b56b71f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_bookmark_end" kindref="compound">Aspose::Words::BookmarkEnd</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::BookmarkEnd &gt; Aspose::Words::DocumentBuilder::EndColumnBookmark</definition>
        <argsstring>(const System::String &amp;bookmarkName)</argsstring>
        <name>EndColumnBookmark</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::EndColumnBookmark</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>bookmarkName</declname>
        </param>
        <briefdescription>
<para>Marks the current position in the document as a column bookmark end. The position must be in a table cell. </para>
        </briefdescription>
        <detaileddescription>
<para>A column bookmark covers one or more columns in a range of rows. To create a valid bookmark you need to call both <ref refid="" kindref="compound">StartColumnBookmark()</ref> and <ref refid="" kindref="compound">EndColumnBookmark()</ref> with the same <bold>bookmarkName</bold> parameter.</para>
<para>Badly formed bookmarks or bookmarks with duplicate names will be ignored when the document is saved.</para>
<para>The actual position of the inserted <ref refid="class_aspose_1_1_words_1_1_bookmark_end" kindref="compound">BookmarkEnd</ref> node may differ from the current document builder position.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bookmarkName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the bookmark.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bookmark end node that was just created.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a column bookmark. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cells<sp/>1,2,4,5<sp/>will<sp/>be<sp/>bookmarked.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartColumnBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Badly<sp/>formed<sp/>bookmarks<sp/>or<sp/>bookmarks<sp/>with<sp/>duplicate<sp/>names<sp/>will<sp/>be<sp/>ignored<sp/>when<sp/>the<sp/>document<sp/>is<sp/>saved.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartColumnBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartColumnBookmark(u</highlight><highlight class="stringliteral">&quot;BadStartBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndColumnBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndColumnBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Bookmarks.CreateColumnBookmark.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5076" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1abc58d5e55a771e9e29a34249255fbad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_editable_range_end" kindref="compound">Aspose::Words::EditableRangeEnd</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::EditableRangeEnd &gt; Aspose::Words::DocumentBuilder::EndEditableRange</definition>
        <argsstring>()</argsstring>
        <name>EndEditableRange</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::EndEditableRange</qualifiedname>
        <briefdescription>
<para>Marks the current position in the document as an editable range end. </para>
        </briefdescription>
        <detaileddescription>
<para>Editable range in a document can overlap and span any range. To create a valid editable range you need to call both <ref refid="class_aspose_1_1_words_1_1_document_builder_1afa102ba223b55da4aa2335edc44ef20c" kindref="member">StartEditableRange</ref> and <ref refid="class_aspose_1_1_words_1_1_document_builder_1abc58d5e55a771e9e29a34249255fbad2" kindref="member">EndEditableRange</ref> or <ref refid="" kindref="compound">EndEditableRange()</ref> methods.</para>
<para>Badly formed editable range will be ignored when the document is saved.</para>
<para><simplesect kind="return"><para>The editable range end node that was just created.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with an editable range. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>Since<sp/>we<sp/>have<sp/>set<sp/>the<sp/>document&apos;s<sp/>protection<sp/>level<sp/>to<sp/>read-only,&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;<sp/>we<sp/>cannot<sp/>edit<sp/>this<sp/>paragraph<sp/>without<sp/>the<sp/>password.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Editable<sp/>ranges<sp/>allow<sp/>us<sp/>to<sp/>leave<sp/>parts<sp/>of<sp/>protected<sp/>documents<sp/>open<sp/>for<sp/>editing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;EditableRangeStart&gt;<sp/>editableRangeStart<sp/>=<sp/>builder-&gt;StartEditableRange();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>is<sp/>inside<sp/>an<sp/>editable<sp/>range,<sp/>and<sp/>can<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;EditableRangeEnd&gt;<sp/>editableRangeEnd<sp/>=<sp/>builder-&gt;EndEditableRange();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>well-formed<sp/>editable<sp/>range<sp/>has<sp/>a<sp/>start<sp/>node,<sp/>and<sp/>end<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>nodes<sp/>have<sp/>matching<sp/>IDs<sp/>and<sp/>encompass<sp/>editable<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;EditableRange&gt;<sp/>editableRange<sp/>=<sp/>editableRangeStart-&gt;get_EditableRange();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRangeStart-&gt;get_Id(),<sp/>editableRange-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRangeEnd-&gt;get_Id(),<sp/>editableRange-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Different<sp/>parts<sp/>of<sp/>the<sp/>editable<sp/>range<sp/>link<sp/>to<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRangeStart-&gt;get_Id(),<sp/>editableRange-&gt;get_EditableRangeStart()-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRangeStart-&gt;get_Id(),<sp/>editableRangeEnd-&gt;get_EditableRangeStart()-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRange-&gt;get_Id(),<sp/>editableRangeStart-&gt;get_EditableRange()-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRangeEnd-&gt;get_Id(),<sp/>editableRange-&gt;get_EditableRangeEnd()-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>access<sp/>the<sp/>node<sp/>types<sp/>of<sp/>each<sp/>part<sp/>like<sp/>this.<sp/>The<sp/>editable<sp/>range<sp/>itself<sp/>is<sp/>not<sp/>a<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>an<sp/>entity<sp/>which<sp/>consists<sp/>of<sp/>a<sp/>start,<sp/>an<sp/>end,<sp/>and<sp/>their<sp/>enclosed<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ab88eb18c19662bf66714b9ac6f20b1fc" kindref="member" tooltip="A beginning of an editable range.">NodeType::EditableRangeStart</ref>,<sp/>editableRangeStart-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a65e9b68ed547a62d4d9eb928da137251" kindref="member" tooltip="An end of an editable range.">NodeType::EditableRangeEnd</ref>,<sp/>editableRangeEnd-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>is<sp/>outside<sp/>the<sp/>editable<sp/>range,<sp/>and<sp/>cannot<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;EditableRange.CreateAndRemove.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>an<sp/>editable<sp/>range.<sp/>All<sp/>the<sp/>nodes<sp/>that<sp/>were<sp/>inside<sp/>the<sp/>range<sp/>will<sp/>remain<sp/>intact.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">editableRange-&gt;Remove();</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5217" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a67acacaa453e749a88a75e35b4f45cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_editable_range_end" kindref="compound">Aspose::Words::EditableRangeEnd</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::EditableRangeEnd &gt; Aspose::Words::DocumentBuilder::EndEditableRange</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::EditableRangeStart &gt; &amp;start)</argsstring>
        <name>EndEditableRange</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::EndEditableRange</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_editable_range_start" kindref="compound">Aspose::Words::EditableRangeStart</ref> &gt; &amp;</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Marks the current position in the document as an editable range end. </para>
        </briefdescription>
        <detaileddescription>
<para>Use this overload during creating nested editable ranges.</para>
<para>Editable range in a document can overlap and span any range. To create a valid editable range you need to call both <ref refid="class_aspose_1_1_words_1_1_document_builder_1afa102ba223b55da4aa2335edc44ef20c" kindref="member">StartEditableRange</ref> and <ref refid="class_aspose_1_1_words_1_1_document_builder_1abc58d5e55a771e9e29a34249255fbad2" kindref="member">EndEditableRange</ref> or <ref refid="" kindref="compound">EndEditableRange()</ref> methods.</para>
<para>Badly formed editable range will be ignored when the document is saved.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>This editable range start.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The editable range end node that was just created.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create nested editable ranges. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>Since<sp/>we<sp/>have<sp/>set<sp/>the<sp/>document&apos;s<sp/>protection<sp/>level<sp/>to<sp/>read-only,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;we<sp/>cannot<sp/>edit<sp/>this<sp/>paragraph<sp/>without<sp/>the<sp/>password.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>two<sp/>nested<sp/>editable<sp/>ranges.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;EditableRangeStart&gt;<sp/>outerEditableRangeStart<sp/>=<sp/>builder-&gt;StartEditableRange();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>inside<sp/>the<sp/>outer<sp/>editable<sp/>range<sp/>and<sp/>can<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;EditableRangeStart&gt;<sp/>innerEditableRangeStart<sp/>=<sp/>builder-&gt;StartEditableRange();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>inside<sp/>both<sp/>the<sp/>outer<sp/>and<sp/>inner<sp/>editable<sp/>ranges<sp/>and<sp/>can<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Currently,<sp/>the<sp/>document<sp/>builder&apos;s<sp/>node<sp/>insertion<sp/>cursor<sp/>is<sp/>in<sp/>more<sp/>than<sp/>one<sp/>ongoing<sp/>editable<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>want<sp/>to<sp/>end<sp/>an<sp/>editable<sp/>range<sp/>in<sp/>this<sp/>situation,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>specify<sp/>which<sp/>of<sp/>the<sp/>ranges<sp/>we<sp/>wish<sp/>to<sp/>end<sp/>by<sp/>passing<sp/>its<sp/>EditableRangeStart<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndEditableRange(innerEditableRangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>inside<sp/>the<sp/>outer<sp/>editable<sp/>range<sp/>and<sp/>can<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndEditableRange(outerEditableRangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>is<sp/>outside<sp/>any<sp/>editable<sp/>ranges,<sp/>and<sp/>cannot<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>region<sp/>of<sp/>text<sp/>has<sp/>two<sp/>overlapping<sp/>editable<sp/>ranges<sp/>with<sp/>specified<sp/>groups,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>combined<sp/>group<sp/>of<sp/>users<sp/>excluded<sp/>by<sp/>both<sp/>groups<sp/>are<sp/>prevented<sp/>from<sp/>editing<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">outerEditableRangeStart-&gt;get_EditableRange()-&gt;set_EditorGroup(<ref refid="namespace_aspose_1_1_words_1a91d5f723074b64ad6e414ec9a2e7f773af9ae5e5c44e59f94680af569879f704a" kindref="member" tooltip="Specifies that all users that open the document shall be allowed to edit editable ranges using this e...">EditorType::Everyone</ref>);</highlight></codeline>
<codeline><highlight class="normal">innerEditableRangeStart-&gt;get_EditableRange()-&gt;set_EditorGroup(<ref refid="namespace_aspose_1_1_words_1a91d5f723074b64ad6e414ec9a2e7f773a96858cb143562346b7f065e32c403f30" kindref="member" tooltip="Specifies that users associated with the Contributors group shall be allowed to edit editable ranges ...">EditorType::Contributors</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;EditableRange.Nested.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5269" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a02fe2bcf78b96b2b0319ef7988cc79f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tables_1_1_row" kindref="compound">Aspose::Words::Tables::Row</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Tables::Row &gt; Aspose::Words::DocumentBuilder::EndRow</definition>
        <argsstring>()</argsstring>
        <name>EndRow</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::EndRow</qualifiedname>
        <briefdescription>
<para>Ends a table row in the document. </para>
        </briefdescription>
        <detaileddescription>
<para>Call <bold>EndRow</bold> to end a table row. If you call <ref refid="class_aspose_1_1_words_1_1_document_builder_1af82339419cbcd5ef32c583b493600faa" kindref="member">InsertCell</ref> immediately after that, then the table continues on a new row.</para>
<para>Use the <ref refid="class_aspose_1_1_words_1_1_document_builder_1a458cf5b271d7bc664e4d6c7e98c72468" kindref="member">RowFormat</ref> property to specify row formatting.</para>
<para><simplesect kind="return"><para>The row node that was just finished.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to merge table cells vertically. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>cell<sp/>into<sp/>the<sp/>first<sp/>column<sp/>of<sp/>the<sp/>first<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>cell<sp/>will<sp/>be<sp/>the<sp/>first<sp/>in<sp/>a<sp/>range<sp/>of<sp/>vertically<sp/>merged<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalMerge(CellMerge::First);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>merged<sp/>cells.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>cell<sp/>into<sp/>the<sp/>second<sp/>column<sp/>of<sp/>the<sp/>first<sp/>row,<sp/>then<sp/>end<sp/>the<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>configure<sp/>the<sp/>builder<sp/>to<sp/>disable<sp/>vertical<sp/>merging<sp/>in<sp/>created<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalMerge(CellMerge::None);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>unmerged<sp/>cell.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>cell<sp/>into<sp/>the<sp/>first<sp/>column<sp/>of<sp/>the<sp/>second<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instead<sp/>of<sp/>adding<sp/>text<sp/>contents,<sp/>we<sp/>will<sp/>merge<sp/>this<sp/>cell<sp/>with<sp/>the<sp/>first<sp/>cell<sp/>that<sp/>we<sp/>added<sp/>directly<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalMerge(CellMerge::Previous);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>another<sp/>independent<sp/>cell<sp/>in<sp/>the<sp/>second<sp/>column<sp/>of<sp/>the<sp/>second<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalMerge(CellMerge::None);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>in<sp/>unmerged<sp/>cell.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;CellFormat.VerticalMerge.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a formatted 2x2 table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>While<sp/>building<sp/>the<sp/>table,<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>its<sp/>current<sp/>RowFormat/CellFormat<sp/>property<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>current<sp/>row/cell<sp/>that<sp/>its<sp/>cursor<sp/>is<sp/>in<sp/>and<sp/>any<sp/>new<sp/>rows/cells<sp/>as<sp/>it<sp/>creates<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(100);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Previously<sp/>added<sp/>rows<sp/>and<sp/>cells<sp/>are<sp/>not<sp/>retroactively<sp/>affected<sp/>by<sp/>changes<sp/>to<sp/>the<sp/>builder&apos;s<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(100,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.BuildTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4860" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a26b721722234df47e55d38e14e9cfea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tables_1_1_table" kindref="compound">Aspose::Words::Tables::Table</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Tables::Table &gt; Aspose::Words::DocumentBuilder::EndTable</definition>
        <argsstring>()</argsstring>
        <name>EndTable</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::EndTable</qualifiedname>
        <briefdescription>
<para>Ends a table in the document. </para>
        </briefdescription>
        <detaileddescription>
<para>This method should be called only once after <ref refid="class_aspose_1_1_words_1_1_document_builder_1a02fe2bcf78b96b2b0319ef7988cc79f2" kindref="member">EndRow</ref> was called. When called, <bold>EndTable</bold> moves the cursor out of the current cell to point just after the table.</para>
<para><simplesect kind="return"><para>The table node that was just finished.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a formatted 2x2 table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>While<sp/>building<sp/>the<sp/>table,<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>its<sp/>current<sp/>RowFormat/CellFormat<sp/>property<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>current<sp/>row/cell<sp/>that<sp/>its<sp/>cursor<sp/>is<sp/>in<sp/>and<sp/>any<sp/>new<sp/>rows/cells<sp/>as<sp/>it<sp/>creates<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(100);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Previously<sp/>added<sp/>rows<sp/>and<sp/>cells<sp/>are<sp/>not<sp/>retroactively<sp/>affected<sp/>by<sp/>changes<sp/>to<sp/>the<sp/>builder&apos;s<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(100,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.BuildTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to format cells with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>second<sp/>cell,<sp/>and<sp/>then<sp/>configure<sp/>cell<sp/>text<sp/>padding<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>will<sp/>apply<sp/>these<sp/>settings<sp/>at<sp/>its<sp/>current<sp/>cell,<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>creates<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CellFormat&gt;<sp/>cellFormat<sp/>=<sp/>builder-&gt;get_CellFormat();</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_Width(250);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_LeftPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_RightPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_TopPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_BottomPadding(30);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>was<sp/>unaffected<sp/>by<sp/>the<sp/>padding<sp/>reconfiguration,<sp/>and<sp/>still<sp/>holds<sp/>the<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(250.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>will<sp/>still<sp/>grow<sp/>in<sp/>the<sp/>output<sp/>document<sp/>to<sp/>match<sp/>the<sp/>size<sp/>of<sp/>its<sp/>neighboring<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetCellFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4715" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aa11845e9df34409420154b5c1e872a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::DocumentBuilder::get_Bold</definition>
        <argsstring>()</argsstring>
        <name>get_Bold</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_Bold</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as bold. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to fill MERGEFIELDs with data with a document builder instead of a mail merge. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>some<sp/>MERGEFIELDS,<sp/>which<sp/>accept<sp/>data<sp/>from<sp/>columns<sp/>of<sp/>the<sp/>same<sp/>name<sp/>in<sp/>a<sp/>data<sp/>source<sp/>during<sp/>a<sp/>mail<sp/>merge,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>fill<sp/>them<sp/>manually.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>Chairman<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>ChiefFinancialOfficer<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>ChiefTechnologyOfficer<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;Chairman&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;ChiefFinancialOfficer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;set_Italic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Jane<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;ChiefTechnologyOfficer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;set_Italic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;John<sp/>Bloggs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.FillMergeFields.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="414" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a8df42877c8de0aafc1ed208d6fd8152d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell_format" kindref="compound">Aspose::Words::Tables::CellFormat</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Tables::CellFormat &gt; Aspose::Words::DocumentBuilder::get_CellFormat</definition>
        <argsstring>()</argsstring>
        <name>get_CellFormat</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_CellFormat</qualifiedname>
        <briefdescription>
<para>Returns an object that represents current table cell formatting properties. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a formatted 2x2 table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>While<sp/>building<sp/>the<sp/>table,<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>its<sp/>current<sp/>RowFormat/CellFormat<sp/>property<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>current<sp/>row/cell<sp/>that<sp/>its<sp/>cursor<sp/>is<sp/>in<sp/>and<sp/>any<sp/>new<sp/>rows/cells<sp/>as<sp/>it<sp/>creates<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(100);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Previously<sp/>added<sp/>rows<sp/>and<sp/>cells<sp/>are<sp/>not<sp/>retroactively<sp/>affected<sp/>by<sp/>changes<sp/>to<sp/>the<sp/>builder&apos;s<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(100,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.BuildTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to format cells with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>second<sp/>cell,<sp/>and<sp/>then<sp/>configure<sp/>cell<sp/>text<sp/>padding<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>will<sp/>apply<sp/>these<sp/>settings<sp/>at<sp/>its<sp/>current<sp/>cell,<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>creates<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CellFormat&gt;<sp/>cellFormat<sp/>=<sp/>builder-&gt;get_CellFormat();</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_Width(250);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_LeftPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_RightPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_TopPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_BottomPadding(30);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>was<sp/>unaffected<sp/>by<sp/>the<sp/>padding<sp/>reconfiguration,<sp/>and<sp/>still<sp/>holds<sp/>the<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(250.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>will<sp/>still<sp/>grow<sp/>in<sp/>the<sp/>output<sp/>document<sp/>to<sp/>match<sp/>the<sp/>size<sp/>of<sp/>its<sp/>neighboring<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetCellFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="935" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ac3dbf55b947bd7e36b46ba9b5ada0630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::DocumentBuilder::get_CurrentNode</definition>
        <argsstring>()</argsstring>
        <name>get_CurrentNode</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_CurrentNode</qualifiedname>
        <briefdescription>
<para>Gets the node that is currently selected in this <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><bold>CurrentNode</bold> is a cursor of <bold>DocumentBuilder</bold> and points to a <bold>Node</bold> that is a direct child of a <bold>Paragraph</bold>. Any insert operations you perform using <bold>DocumentBuilder</bold> will insert before the <bold>CurrentNode</bold>.</para>
<para>When the current paragraph is empty or the cursor is positioned just before the end of the paragraph, <bold>CurrentNode</bold> returns null.</para>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_builder_1a1d0509775253820dcb7231884e14d070" kindref="member">Aspose::Words::DocumentBuilder::get_CurrentParagraph</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s cursor to different nodes in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>valid<sp/>bookmark,<sp/>an<sp/>entity<sp/>that<sp/>consists<sp/>of<sp/>nodes<sp/>enclosed<sp/>by<sp/>a<sp/>bookmark<sp/>start<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>a<sp/>bookmark<sp/>end<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>firstParagraphNodes<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ChildNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>firstParagraphNodes-&gt;idx_get(0)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379acf68b65492c5c8b1aa801725023836c0" kindref="member" tooltip="An end of a bookmark marker.">NodeType::BookmarkEnd</ref>,<sp/>firstParagraphNodes-&gt;idx_get(2)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>always<sp/>ahead<sp/>of<sp/>the<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document,<sp/>its<sp/>current<sp/>node<sp/>will<sp/>be<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>previous<sp/>node<sp/>is<sp/>the<sp/>bookmark<sp/>end<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>new<sp/>nodes<sp/>with<sp/>the<sp/>builder<sp/>will<sp/>append<sp/>them<sp/>to<sp/>the<sp/>last<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>a<sp/>different<sp/>part<sp/>of<sp/>the<sp/>document<sp/>with<sp/>the<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>bring<sp/>its<sp/>cursor<sp/>to<sp/>the<sp/>node<sp/>we<sp/>wish<sp/>to<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moving<sp/>it<sp/>to<sp/>a<sp/>bookmark<sp/>will<sp/>move<sp/>it<sp/>to<sp/>the<sp/>first<sp/>node<sp/>within<sp/>the<sp/>bookmark<sp/>start<sp/>and<sp/>end<sp/>nodes,<sp/>the<sp/>enclosed<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(firstParagraphNodes-&gt;idx_get(1),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>an<sp/>individual<sp/>node<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>builder-&gt;get_CurrentNode()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>builder-&gt;get_CurrentParagraph());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>specific<sp/>methods<sp/>to<sp/>move<sp/>to<sp/>the<sp/>start/end<sp/>of<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtEndOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentStart();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1103" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a1d0509775253820dcb7231884e14d070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Aspose::Words::Paragraph</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Paragraph &gt; Aspose::Words::DocumentBuilder::get_CurrentParagraph</definition>
        <argsstring>()</argsstring>
        <name>get_CurrentParagraph</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_CurrentParagraph</qualifiedname>
        <briefdescription>
<para>Gets the paragraph that is currently selected in this <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s cursor to different nodes in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>valid<sp/>bookmark,<sp/>an<sp/>entity<sp/>that<sp/>consists<sp/>of<sp/>nodes<sp/>enclosed<sp/>by<sp/>a<sp/>bookmark<sp/>start<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>a<sp/>bookmark<sp/>end<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>firstParagraphNodes<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ChildNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>firstParagraphNodes-&gt;idx_get(0)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379acf68b65492c5c8b1aa801725023836c0" kindref="member" tooltip="An end of a bookmark marker.">NodeType::BookmarkEnd</ref>,<sp/>firstParagraphNodes-&gt;idx_get(2)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>always<sp/>ahead<sp/>of<sp/>the<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document,<sp/>its<sp/>current<sp/>node<sp/>will<sp/>be<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>previous<sp/>node<sp/>is<sp/>the<sp/>bookmark<sp/>end<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>new<sp/>nodes<sp/>with<sp/>the<sp/>builder<sp/>will<sp/>append<sp/>them<sp/>to<sp/>the<sp/>last<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>a<sp/>different<sp/>part<sp/>of<sp/>the<sp/>document<sp/>with<sp/>the<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>bring<sp/>its<sp/>cursor<sp/>to<sp/>the<sp/>node<sp/>we<sp/>wish<sp/>to<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moving<sp/>it<sp/>to<sp/>a<sp/>bookmark<sp/>will<sp/>move<sp/>it<sp/>to<sp/>the<sp/>first<sp/>node<sp/>within<sp/>the<sp/>bookmark<sp/>start<sp/>and<sp/>end<sp/>nodes,<sp/>the<sp/>enclosed<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(firstParagraphNodes-&gt;idx_get(1),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>an<sp/>individual<sp/>node<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>builder-&gt;get_CurrentNode()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>builder-&gt;get_CurrentParagraph());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>specific<sp/>methods<sp/>to<sp/>move<sp/>to<sp/>the<sp/>start/end<sp/>of<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtEndOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentStart();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1156" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ad7545e14ba06e588901b616aaf86598e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_section" kindref="compound">Aspose::Words::Section</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Section &gt; Aspose::Words::DocumentBuilder::get_CurrentSection</definition>
        <argsstring>()</argsstring>
        <name>get_CurrentSection</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_CurrentSection</qualifiedname>
        <briefdescription>
<para>Gets the section that is currently selected in this <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a floating image, and specify its position and size. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(WrapType::None);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>shape&apos;s<sp/>&quot;RelativeHorizontalPosition&quot;<sp/>property<sp/>to<sp/>treat<sp/>the<sp/>value<sp/>of<sp/>the<sp/>&quot;Left&quot;<sp/>property</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>the<sp/>shape&apos;s<sp/>horizontal<sp/>distance,<sp/>in<sp/>points,<sp/>from<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_RelativeHorizontalPosition(RelativeHorizontalPosition::Page);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>shape&apos;s<sp/>horizontal<sp/>distance<sp/>from<sp/>the<sp/>left<sp/>side<sp/>of<sp/>the<sp/>page<sp/>to<sp/>100.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Left(100);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>&quot;RelativeVerticalPosition&quot;<sp/>property<sp/>in<sp/>a<sp/>similar<sp/>way<sp/>to<sp/>position<sp/>the<sp/>shape<sp/>80pt<sp/>below<sp/>the<sp/>top<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_RelativeVerticalPosition(RelativeVerticalPosition::Page);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Top(80);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>shape&apos;s<sp/>height,<sp/>which<sp/>will<sp/>automatically<sp/>scale<sp/>the<sp/>width<sp/>to<sp/>preserve<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Height(125);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(125.0,<sp/>shape-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Bottom&quot;<sp/>and<sp/>&quot;Right&quot;<sp/>properties<sp/>contain<sp/>the<sp/>bottom<sp/>and<sp/>right<sp/>edges<sp/>of<sp/>the<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(shape-&gt;get_Top()<sp/>+<sp/>shape-&gt;get_Height(),<sp/>shape-&gt;get_Bottom());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(shape-&gt;get_Left()<sp/>+<sp/>shape-&gt;get_Width(),<sp/>shape-&gt;get_Right());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateFloatingPositionSize.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1220" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ad39892460a31227f1a4cb0f4091409ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_story" kindref="compound">Aspose::Words::Story</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Story &gt; Aspose::Words::DocumentBuilder::get_CurrentStory</definition>
        <argsstring>()</argsstring>
        <name>get_CurrentStory</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_CurrentStory</qualifiedname>
        <briefdescription>
<para>Gets the story that is currently selected in this <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with a document builder&apos;s current story. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>Story<sp/>is<sp/>a<sp/>type<sp/>of<sp/>node<sp/>that<sp/>has<sp/>child<sp/>Paragraph<sp/>nodes,<sp/>such<sp/>as<sp/>a<sp/>Body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(builder-&gt;get_CurrentStory(),<sp/>doc-&gt;get_FirstSection()-&gt;get_Body());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(builder-&gt;get_CurrentStory(),<sp/>builder-&gt;get_CurrentParagraph()-&gt;get_ParentNode());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a94116f2446f9aa6f89d2b97593ffa119aae33a5a5e66611dc61c782fcbc4d60d7" kindref="member" tooltip="Contains the main text of the document, represented by Body.">StoryType::MainText</ref>,<sp/>builder-&gt;get_CurrentStory()-&gt;get_StoryType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CurrentStory()-&gt;AppendParagraph(u</highlight><highlight class="stringliteral">&quot;Text<sp/>added<sp/>to<sp/>current<sp/>Story.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>Story<sp/>can<sp/>also<sp/>contain<sp/>tables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentStory()-&gt;get_Tables()-&gt;Contains(table));</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1184" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ad7f4c9930f6107e63082576d261cdef3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Document &gt; Aspose::Words::DocumentBuilder::get_Document</definition>
        <argsstring>() const</argsstring>
        <name>get_Document</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_Document</qualifiedname>
        <briefdescription>
<para>Gets or sets the <ref refid="class_aspose_1_1_words_1_1_document_builder_1ad7f4c9930f6107e63082576d261cdef3" kindref="member">Document</ref> object that this object is attached to. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply and revert page setup settings to sections in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modify<sp/>the<sp/>page<sp/>setup<sp/>properties<sp/>for<sp/>the<sp/>builder&apos;s<sp/>current<sp/>section<sp/>and<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1ae2ae8bf76a0ae07d1d85df205d98af0ba815dff01257e5ef182b25d4c1ef0a7a0" kindref="member" tooltip="Landscape page orientation (wide and short).">Orientation::Landscape</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1a7cd338e1f9cd4762ef94952a62a1e395a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of the page.">PageVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>first<sp/>section,<sp/>which<sp/>landscape<sp/>oriented<sp/>with<sp/>vertically<sp/>centered<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>start<sp/>a<sp/>new<sp/>section<sp/>using<sp/>a<sp/>document<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>inherit<sp/>the<sp/>builder&apos;s<sp/>current<sp/>page<sp/>setup<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae2ae8bf76a0ae07d1d85df205d98af0ba815dff01257e5ef182b25d4c1ef0a7a0" kindref="member" tooltip="Landscape page orientation (wide and short).">Orientation::Landscape</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a7cd338e1f9cd4762ef94952a62a1e395a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of the page.">PageVerticalAlignment::Center</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>revert<sp/>its<sp/>page<sp/>setup<sp/>properties<sp/>to<sp/>their<sp/>default<sp/>values<sp/>using<sp/>the<sp/>&quot;ClearFormatting&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae2ae8bf76a0ae07d1d85df205d98af0ba1c7444be9626d149ab598fb79b639f96" kindref="member" tooltip="Portrait page orientation (narrow and tall).">Orientation::Portrait</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a7cd338e1f9cd4762ef94952a62a1e395aa4ffdcf0dc1f31b9acaf295d75b51d00" kindref="member" tooltip="Text is aligned at the top of the page.">PageVerticalAlignment::Top</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>second<sp/>section,<sp/>which<sp/>is<sp/>in<sp/>default<sp/>Letter<sp/>paper<sp/>size,<sp/>portrait<sp/>orientation<sp/>and<sp/>top<sp/>alignment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;PageSetup.ClearFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="300" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a49bd68eef34fcb42a305e7197c476fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_font" kindref="compound">Aspose::Words::Font</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Font &gt; Aspose::Words::DocumentBuilder::get_Font</definition>
        <argsstring>()</argsstring>
        <name>get_Font</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_Font</qualifiedname>
        <briefdescription>
<para>Returns an object that represents current font formatting properties. </para>
        </briefdescription>
        <detaileddescription>
<para>Use <bold>Font</bold> to access and modify font formatting properties.</para>
<para>Specify font formatting before inserting text.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a string surrounded by a border into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_LineWidth(2.5);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da8cf8027b2b64fbbc8ed979f94a7555b8" kindref="member">LineStyle::DashDotStroker</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>surrounded<sp/>by<sp/>green<sp/>border.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Border.FontBorder.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to create a formatted table using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_LeftIndent(20);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>some<sp/>formatting<sp/>options<sp/>for<sp/>text<sp/>and<sp/>table<sp/>appearance.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(40);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccbabad91df0cfc5662f3af47244d02d4802" kindref="member" tooltip="The height will be at least the specified height in points. It will grow, if needed,...">HeightRule::AtLeast</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1ad3a7bcb373676e499a5ec82f1d6696f3" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::FromArgb</ref>(198,<sp/>217,<sp/>241));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Configuring<sp/>the<sp/>formatting<sp/>options<sp/>in<sp/>a<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>current<sp/>cell/row<sp/>its<sp/>cursor<sp/>is<sp/>in,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>well<sp/>as<sp/>any<sp/>new<sp/>cells<sp/>and<sp/>rows<sp/>created<sp/>using<sp/>that<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>Row,\n<sp/>Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>Row,\n<sp/>Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>Row,\n<sp/>Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reconfigure<sp/>the<sp/>builder&apos;s<sp/>formatting<sp/>objects<sp/>for<sp/>new<sp/>rows<sp/>and<sp/>cells<sp/>that<sp/>we<sp/>are<sp/>about<sp/>to<sp/>make.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>will<sp/>not<sp/>apply<sp/>these<sp/>to<sp/>the<sp/>first<sp/>row<sp/>already<sp/>created<sp/>so<sp/>that<sp/>it<sp/>will<sp/>stand<sp/>out<sp/>as<sp/>a<sp/>header<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(30);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(12);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.CreateFormattedTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="383" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a3f305d6002abe07bb3a8b9b7949050df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::DocumentBuilder::get_IsAtEndOfParagraph</definition>
        <argsstring>()</argsstring>
        <name>get_IsAtEndOfParagraph</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_IsAtEndOfParagraph</qualifiedname>
        <briefdescription>
<para>Returns true if the cursor is at the end of the current paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s cursor to different nodes in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>valid<sp/>bookmark,<sp/>an<sp/>entity<sp/>that<sp/>consists<sp/>of<sp/>nodes<sp/>enclosed<sp/>by<sp/>a<sp/>bookmark<sp/>start<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>a<sp/>bookmark<sp/>end<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>firstParagraphNodes<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ChildNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>firstParagraphNodes-&gt;idx_get(0)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379acf68b65492c5c8b1aa801725023836c0" kindref="member" tooltip="An end of a bookmark marker.">NodeType::BookmarkEnd</ref>,<sp/>firstParagraphNodes-&gt;idx_get(2)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>always<sp/>ahead<sp/>of<sp/>the<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document,<sp/>its<sp/>current<sp/>node<sp/>will<sp/>be<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>previous<sp/>node<sp/>is<sp/>the<sp/>bookmark<sp/>end<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>new<sp/>nodes<sp/>with<sp/>the<sp/>builder<sp/>will<sp/>append<sp/>them<sp/>to<sp/>the<sp/>last<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>a<sp/>different<sp/>part<sp/>of<sp/>the<sp/>document<sp/>with<sp/>the<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>bring<sp/>its<sp/>cursor<sp/>to<sp/>the<sp/>node<sp/>we<sp/>wish<sp/>to<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moving<sp/>it<sp/>to<sp/>a<sp/>bookmark<sp/>will<sp/>move<sp/>it<sp/>to<sp/>the<sp/>first<sp/>node<sp/>within<sp/>the<sp/>bookmark<sp/>start<sp/>and<sp/>end<sp/>nodes,<sp/>the<sp/>enclosed<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(firstParagraphNodes-&gt;idx_get(1),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>an<sp/>individual<sp/>node<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>builder-&gt;get_CurrentNode()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>builder-&gt;get_CurrentParagraph());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>specific<sp/>methods<sp/>to<sp/>move<sp/>to<sp/>the<sp/>start/end<sp/>of<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtEndOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentStart();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1041" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a1e089ae3c611ef9b7199b9ffafef2d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::DocumentBuilder::get_IsAtStartOfParagraph</definition>
        <argsstring>()</argsstring>
        <name>get_IsAtStartOfParagraph</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_IsAtStartOfParagraph</qualifiedname>
        <briefdescription>
<para>Returns true if the cursor is at the beginning of the current paragraph (no text before the cursor). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s cursor to different nodes in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>valid<sp/>bookmark,<sp/>an<sp/>entity<sp/>that<sp/>consists<sp/>of<sp/>nodes<sp/>enclosed<sp/>by<sp/>a<sp/>bookmark<sp/>start<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>a<sp/>bookmark<sp/>end<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>firstParagraphNodes<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ChildNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>firstParagraphNodes-&gt;idx_get(0)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379acf68b65492c5c8b1aa801725023836c0" kindref="member" tooltip="An end of a bookmark marker.">NodeType::BookmarkEnd</ref>,<sp/>firstParagraphNodes-&gt;idx_get(2)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>always<sp/>ahead<sp/>of<sp/>the<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document,<sp/>its<sp/>current<sp/>node<sp/>will<sp/>be<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>previous<sp/>node<sp/>is<sp/>the<sp/>bookmark<sp/>end<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>new<sp/>nodes<sp/>with<sp/>the<sp/>builder<sp/>will<sp/>append<sp/>them<sp/>to<sp/>the<sp/>last<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>a<sp/>different<sp/>part<sp/>of<sp/>the<sp/>document<sp/>with<sp/>the<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>bring<sp/>its<sp/>cursor<sp/>to<sp/>the<sp/>node<sp/>we<sp/>wish<sp/>to<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moving<sp/>it<sp/>to<sp/>a<sp/>bookmark<sp/>will<sp/>move<sp/>it<sp/>to<sp/>the<sp/>first<sp/>node<sp/>within<sp/>the<sp/>bookmark<sp/>start<sp/>and<sp/>end<sp/>nodes,<sp/>the<sp/>enclosed<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(firstParagraphNodes-&gt;idx_get(1),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>an<sp/>individual<sp/>node<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>builder-&gt;get_CurrentNode()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>builder-&gt;get_CurrentParagraph());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>specific<sp/>methods<sp/>to<sp/>move<sp/>to<sp/>the<sp/>start/end<sp/>of<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtEndOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentStart();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="988" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aff6212cdd69724c6b791ec0c39af384c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::DocumentBuilder::get_Italic</definition>
        <argsstring>()</argsstring>
        <name>get_Italic</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_Italic</qualifiedname>
        <briefdescription>
<para>True if the font is formatted as italic. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to fill MERGEFIELDs with data with a document builder instead of a mail merge. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>some<sp/>MERGEFIELDS,<sp/>which<sp/>accept<sp/>data<sp/>from<sp/>columns<sp/>of<sp/>the<sp/>same<sp/>name<sp/>in<sp/>a<sp/>data<sp/>source<sp/>during<sp/>a<sp/>mail<sp/>merge,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>fill<sp/>them<sp/>manually.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>Chairman<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>ChiefFinancialOfficer<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>ChiefTechnologyOfficer<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;Chairman&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;ChiefFinancialOfficer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;set_Italic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Jane<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;ChiefTechnologyOfficer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;set_Italic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;John<sp/>Bloggs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.FillMergeFields.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="448" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1af9cc028cc784040418e16ad8ba8c084e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_lists_1_1_list_format" kindref="compound">Aspose::Words::Lists::ListFormat</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Lists::ListFormat &gt; Aspose::Words::DocumentBuilder::get_ListFormat</definition>
        <argsstring>()</argsstring>
        <name>get_ListFormat</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_ListFormat</qualifiedname>
        <briefdescription>
<para>Returns an object that represents current list formatting properties. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create bulleted and numbered lists. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Aspose.Words<sp/>main<sp/>advantages<sp/>are:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>list<sp/>allows<sp/>us<sp/>to<sp/>organize<sp/>and<sp/>decorate<sp/>sets<sp/>of<sp/>paragraphs<sp/>with<sp/>prefix<sp/>symbols<sp/>and<sp/>indents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>nested<sp/>lists<sp/>by<sp/>increasing<sp/>the<sp/>indent<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>begin<sp/>and<sp/>end<sp/>a<sp/>list<sp/>by<sp/>using<sp/>a<sp/>document<sp/>builder&apos;s<sp/>&quot;ListFormat&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>that<sp/>we<sp/>add<sp/>between<sp/>a<sp/>list&apos;s<sp/>start<sp/>and<sp/>the<sp/>end<sp/>will<sp/>become<sp/>an<sp/>item<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>types<sp/>of<sp/>lists<sp/>that<sp/>we<sp/>can<sp/>create<sp/>with<sp/>a<sp/>document<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>A<sp/>bulleted<sp/>list:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>list<sp/>will<sp/>apply<sp/>an<sp/>indent<sp/>and<sp/>a<sp/>bullet<sp/>symbol<sp/>(&quot;•&quot;)<sp/>before<sp/>each<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;ApplyBulletDefault();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Great<sp/>performance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;High<sp/>reliability&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Quality<sp/>code<sp/>and<sp/>working&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Wide<sp/>variety<sp/>of<sp/>features&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Easy<sp/>to<sp/>understand<sp/>API&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>the<sp/>bulleted<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2eac3316c9c335ce5fa8638df2fc5d518d4" kindref="member" tooltip="Break between paragraphs.">BreakType::ParagraphBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Aspose.Words<sp/>allows:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>A<sp/>numbered<sp/>list:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Numbered<sp/>lists<sp/>create<sp/>a<sp/>logical<sp/>order<sp/>for<sp/>their<sp/>paragraphs<sp/>by<sp/>numbering<sp/>each<sp/>item.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;ApplyNumberDefault();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>paragraph<sp/>is<sp/>the<sp/>first<sp/>item.<sp/>The<sp/>first<sp/>item<sp/>of<sp/>a<sp/>numbered<sp/>list<sp/>will<sp/>have<sp/>a<sp/>&quot;1.&quot;<sp/>as<sp/>its<sp/>list<sp/>item<sp/>symbol.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Opening<sp/>documents<sp/>from<sp/>different<sp/>formats:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>builder-&gt;get_ListFormat()-&gt;get_ListLevelNumber());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>&quot;ListIndent&quot;<sp/>method<sp/>to<sp/>increase<sp/>the<sp/>current<sp/>list<sp/>level,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>start<sp/>a<sp/>new<sp/>self-contained<sp/>list,<sp/>with<sp/>a<sp/>deeper<sp/>indent,<sp/>at<sp/>the<sp/>current<sp/>item<sp/>of<sp/>the<sp/>first<sp/>list<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;ListIndent();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>builder-&gt;get_ListFormat()-&gt;get_ListLevelNumber());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>the<sp/>first<sp/>three<sp/>list<sp/>items<sp/>of<sp/>the<sp/>second<sp/>list<sp/>level,<sp/>which<sp/>will<sp/>maintain<sp/>a<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>independent<sp/>of<sp/>the<sp/>count<sp/>of<sp/>the<sp/>first<sp/>list<sp/>level.<sp/>According<sp/>to<sp/>the<sp/>current<sp/>list<sp/>format,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>they<sp/>will<sp/>have<sp/>symbols<sp/>of<sp/>&quot;a.&quot;,<sp/>&quot;b.&quot;,<sp/>and<sp/>&quot;c.&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;DOC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;PDF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;HTML&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>&quot;ListOutdent&quot;<sp/>method<sp/>to<sp/>return<sp/>to<sp/>the<sp/>previous<sp/>list<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;ListOutdent();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>builder-&gt;get_ListFormat()-&gt;get_ListLevelNumber());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>paragraphs<sp/>will<sp/>continue<sp/>the<sp/>count<sp/>of<sp/>the<sp/>first<sp/>list<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>items<sp/>will<sp/>have<sp/>symbols<sp/>of<sp/>&quot;2.&quot;,<sp/>and<sp/>&quot;3.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Processing<sp/>documents&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Saving<sp/>documents<sp/>in<sp/>different<sp/>formats:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>increase<sp/>the<sp/>list<sp/>level<sp/>to<sp/>a<sp/>level<sp/>that<sp/>we<sp/>have<sp/>added<sp/>items<sp/>to<sp/>previously,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>nested<sp/>list<sp/>will<sp/>be<sp/>separate<sp/>from<sp/>the<sp/>previous,<sp/>and<sp/>its<sp/>numbering<sp/>will<sp/>start<sp/>from<sp/>the<sp/>beginning.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>list<sp/>items<sp/>will<sp/>have<sp/>symbols<sp/>of<sp/>&quot;a.&quot;,<sp/>&quot;b.&quot;,<sp/>&quot;c.&quot;,<sp/>&quot;d.&quot;,<sp/>and<sp/>&quot;e&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;ListIndent();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;DOC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;PDF&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;HTML&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;MHTML&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Plain<sp/>text&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Outdent<sp/>the<sp/>list<sp/>level<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;ListOutdent();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Doing<sp/>many<sp/>other<sp/>things!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>the<sp/>numbered<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ListFormat()-&gt;RemoveNumbers();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Lists.ApplyDefaultBulletsAndNumbers.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="620" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1af4bb2e610d428af5ad5a50138b4131e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_page_setup" kindref="compound">Aspose::Words::PageSetup</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::PageSetup &gt; Aspose::Words::DocumentBuilder::get_PageSetup</definition>
        <argsstring>()</argsstring>
        <name>get_PageSetup</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_PageSetup</qualifiedname>
        <briefdescription>
<para>Returns an object that represents current page setup and section properties. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply and revert page setup settings to sections in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modify<sp/>the<sp/>page<sp/>setup<sp/>properties<sp/>for<sp/>the<sp/>builder&apos;s<sp/>current<sp/>section<sp/>and<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1ae2ae8bf76a0ae07d1d85df205d98af0ba815dff01257e5ef182b25d4c1ef0a7a0" kindref="member" tooltip="Landscape page orientation (wide and short).">Orientation::Landscape</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1a7cd338e1f9cd4762ef94952a62a1e395a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of the page.">PageVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>first<sp/>section,<sp/>which<sp/>landscape<sp/>oriented<sp/>with<sp/>vertically<sp/>centered<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>start<sp/>a<sp/>new<sp/>section<sp/>using<sp/>a<sp/>document<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>inherit<sp/>the<sp/>builder&apos;s<sp/>current<sp/>page<sp/>setup<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae2ae8bf76a0ae07d1d85df205d98af0ba815dff01257e5ef182b25d4c1ef0a7a0" kindref="member" tooltip="Landscape page orientation (wide and short).">Orientation::Landscape</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a7cd338e1f9cd4762ef94952a62a1e395a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of the page.">PageVerticalAlignment::Center</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>revert<sp/>its<sp/>page<sp/>setup<sp/>properties<sp/>to<sp/>their<sp/>default<sp/>values<sp/>using<sp/>the<sp/>&quot;ClearFormatting&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae2ae8bf76a0ae07d1d85df205d98af0ba1c7444be9626d149ab598fb79b639f96" kindref="member" tooltip="Portrait page orientation (narrow and tall).">Orientation::Portrait</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a7cd338e1f9cd4762ef94952a62a1e395aa4ffdcf0dc1f31b9acaf295d75b51d00" kindref="member" tooltip="Text is aligned at the top of the page.">PageVerticalAlignment::Top</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>second<sp/>section,<sp/>which<sp/>is<sp/>in<sp/>default<sp/>Letter<sp/>paper<sp/>size,<sp/>portrait<sp/>orientation<sp/>and<sp/>top<sp/>alignment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;PageSetup.ClearFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="653" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a50e7eb77bacf84cbaa8bde0293cd308b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_paragraph_format" kindref="compound">Aspose::Words::ParagraphFormat</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::ParagraphFormat &gt; Aspose::Words::DocumentBuilder::get_ParagraphFormat</definition>
        <argsstring>()</argsstring>
        <name>get_ParagraphFormat</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_ParagraphFormat</qualifiedname>
        <briefdescription>
<para>Returns an object that represents current paragraph formatting properties. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a formatted table using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">table-&gt;set_LeftIndent(20);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>some<sp/>formatting<sp/>options<sp/>for<sp/>text<sp/>and<sp/>table<sp/>appearance.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(40);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccbabad91df0cfc5662f3af47244d02d4802" kindref="member" tooltip="The height will be at least the specified height in points. It will grow, if needed,...">HeightRule::AtLeast</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1ad3a7bcb373676e499a5ec82f1d6696f3" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::FromArgb</ref>(198,<sp/>217,<sp/>241));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Configuring<sp/>the<sp/>formatting<sp/>options<sp/>in<sp/>a<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>current<sp/>cell/row<sp/>its<sp/>cursor<sp/>is<sp/>in,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>well<sp/>as<sp/>any<sp/>new<sp/>cells<sp/>and<sp/>rows<sp/>created<sp/>using<sp/>that<sp/>builder.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>Row,\n<sp/>Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>Row,\n<sp/>Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>Row,\n<sp/>Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reconfigure<sp/>the<sp/>builder&apos;s<sp/>formatting<sp/>objects<sp/>for<sp/>new<sp/>rows<sp/>and<sp/>cells<sp/>that<sp/>we<sp/>are<sp/>about<sp/>to<sp/>make.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>will<sp/>not<sp/>apply<sp/>these<sp/>to<sp/>the<sp/>first<sp/>row<sp/>already<sp/>created<sp/>so<sp/>that<sp/>it<sp/>will<sp/>stand<sp/>out<sp/>as<sp/>a<sp/>header<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a1b90a32ef23b518d7809b352c2a8274b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_White</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(30);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(12);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.CreateFormattedTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="536" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a458cf5b271d7bc664e4d6c7e98c72468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tables_1_1_row_format" kindref="compound">Aspose::Words::Tables::RowFormat</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Tables::RowFormat &gt; Aspose::Words::DocumentBuilder::get_RowFormat</definition>
        <argsstring>()</argsstring>
        <name>get_RowFormat</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_RowFormat</qualifiedname>
        <briefdescription>
<para>Returns an object that represents current table row formatting properties. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a formatted 2x2 table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>While<sp/>building<sp/>the<sp/>table,<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>its<sp/>current<sp/>RowFormat/CellFormat<sp/>property<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>current<sp/>row/cell<sp/>that<sp/>its<sp/>cursor<sp/>is<sp/>in<sp/>and<sp/>any<sp/>new<sp/>rows/cells<sp/>as<sp/>it<sp/>creates<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(100);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Previously<sp/>added<sp/>rows<sp/>and<sp/>cells<sp/>are<sp/>not<sp/>retroactively<sp/>affected<sp/>by<sp/>changes<sp/>to<sp/>the<sp/>builder&apos;s<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(100,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.BuildTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to format rows with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Start<sp/>a<sp/>second<sp/>row,<sp/>and<sp/>then<sp/>configure<sp/>its<sp/>height.<sp/>The<sp/>builder<sp/>will<sp/>apply<sp/>these<sp/>settings<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>its<sp/>current<sp/>row,<sp/>as<sp/>well<sp/>as<sp/>any<sp/>new<sp/>rows<sp/>it<sp/>creates<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;RowFormat&gt;<sp/>rowFormat<sp/>=<sp/>builder-&gt;get_RowFormat();</highlight></codeline>
<codeline><highlight class="normal">rowFormat-&gt;set_Height(100);</highlight></codeline>
<codeline><highlight class="normal">rowFormat-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>row<sp/>was<sp/>unaffected<sp/>by<sp/>the<sp/>padding<sp/>reconfiguration<sp/>and<sp/>still<sp/>holds<sp/>the<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(100.0,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetRowFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="789" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a572d304e8d4cede9f7687013926effe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94" kindref="member">Aspose::Words::Underline</ref></type>
        <definition>Aspose::Words::Underline Aspose::Words::DocumentBuilder::get_Underline</definition>
        <argsstring>()</argsstring>
        <name>get_Underline</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::get_Underline</qualifiedname>
        <briefdescription>
<para>Gets/sets underline type for the current font. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to format text inserted by a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(32);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>applies<sp/>formatting<sp/>to<sp/>its<sp/>current<sp/>paragraph<sp/>and<sp/>any<sp/>new<sp/>text<sp/>added<sp/>by<sp/>it<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Large,<sp/>blue,<sp/>and<sp/>underlined<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertUnderline.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="471" column="33"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a571c26886e30a740fc710e99daaed446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::InsertBreak</definition>
        <argsstring>(Aspose::Words::BreakType breakType)</argsstring>
        <name>InsertBreak</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertBreak</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2e" kindref="member">Aspose::Words::BreakType</ref></type>
          <declname>breakType</declname>
        </param>
        <briefdescription>
<para>Inserts a break of the specified type into the document. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>breakType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the type of the break to insert.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create headers and footers in a document using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>that<sp/>we<sp/>want<sp/>different<sp/>headers<sp/>and<sp/>footers<sp/>for<sp/>first,<sp/>even<sp/>and<sp/>odd<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_DifferentFirstPageHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_OddAndEvenPagesHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>headers,<sp/>then<sp/>add<sp/>three<sp/>pages<sp/>to<sp/>the<sp/>document<sp/>to<sp/>display<sp/>each<sp/>header<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a545b1c922d56aca91ca2080eed0d7913" kindref="member" tooltip="Header for the first page of the section.">HeaderFooterType::HeaderFirst</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>the<sp/>first<sp/>page&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69adfe2914bbaa51fcbf35bdb65ac3865d6" kindref="member" tooltip="Header for even numbered pages.">HeaderFooterType::HeaderEven</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>even<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>all<sp/>other<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.HeadersAndFooters.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a Table of contents (TOC) into a document using heading styles as entries. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>table<sp/>of<sp/>contents<sp/>for<sp/>the<sp/>first<sp/>page<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>table<sp/>to<sp/>pick<sp/>up<sp/>paragraphs<sp/>with<sp/>headings<sp/>of<sp/>levels<sp/>1<sp/>to<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>set<sp/>its<sp/>entries<sp/>to<sp/>be<sp/>hyperlinks<sp/>that<sp/>will<sp/>take<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>location<sp/>of<sp/>the<sp/>heading<sp/>when<sp/>left-clicked<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTableOfContents(u</highlight><highlight class="stringliteral">&quot;\\o<sp/>\&quot;1-3\&quot;<sp/>\\h<sp/>\\z<sp/>\\u&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Populate<sp/>the<sp/>table<sp/>of<sp/>contents<sp/>by<sp/>adding<sp/>paragraphs<sp/>with<sp/>heading<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>such<sp/>heading<sp/>with<sp/>a<sp/>level<sp/>between<sp/>1<sp/>and<sp/>3<sp/>will<sp/>create<sp/>an<sp/>entry<sp/>in<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a5c20c643b1731618a5eddb7660b10a3e" kindref="member" tooltip="The Heading 3 style.">StyleIdentifier::Heading3</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a1418e44fe2e519f30b903c1fbf263097" kindref="member" tooltip="The Heading 4 style.">StyleIdentifier::Heading4</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>table<sp/>of<sp/>contents<sp/>is<sp/>a<sp/>field<sp/>of<sp/>a<sp/>type<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>updated<sp/>to<sp/>show<sp/>an<sp/>up-to-date<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertToc.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to apply and revert page setup settings to sections in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modify<sp/>the<sp/>page<sp/>setup<sp/>properties<sp/>for<sp/>the<sp/>builder&apos;s<sp/>current<sp/>section<sp/>and<sp/>add<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1ae2ae8bf76a0ae07d1d85df205d98af0ba815dff01257e5ef182b25d4c1ef0a7a0" kindref="member" tooltip="Landscape page orientation (wide and short).">Orientation::Landscape</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_VerticalAlignment(<ref refid="namespace_aspose_1_1_words_1a7cd338e1f9cd4762ef94952a62a1e395a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of the page.">PageVerticalAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>first<sp/>section,<sp/>which<sp/>landscape<sp/>oriented<sp/>with<sp/>vertically<sp/>centered<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>start<sp/>a<sp/>new<sp/>section<sp/>using<sp/>a<sp/>document<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>inherit<sp/>the<sp/>builder&apos;s<sp/>current<sp/>page<sp/>setup<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae2ae8bf76a0ae07d1d85df205d98af0ba815dff01257e5ef182b25d4c1ef0a7a0" kindref="member" tooltip="Landscape page orientation (wide and short).">Orientation::Landscape</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a7cd338e1f9cd4762ef94952a62a1e395a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is aligned in the middle of the page.">PageVerticalAlignment::Center</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>revert<sp/>its<sp/>page<sp/>setup<sp/>properties<sp/>to<sp/>their<sp/>default<sp/>values<sp/>using<sp/>the<sp/>&quot;ClearFormatting&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae2ae8bf76a0ae07d1d85df205d98af0ba1c7444be9626d149ab598fb79b639f96" kindref="member" tooltip="Portrait page orientation (narrow and tall).">Orientation::Portrait</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a7cd338e1f9cd4762ef94952a62a1e395aa4ffdcf0dc1f31b9acaf295d75b51d00" kindref="member" tooltip="Text is aligned at the top of the page.">PageVerticalAlignment::Top</ref>,<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>the<sp/>second<sp/>section,<sp/>which<sp/>is<sp/>in<sp/>default<sp/>Letter<sp/>paper<sp/>size,<sp/>portrait<sp/>orientation<sp/>and<sp/>top<sp/>alignment.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;PageSetup.ClearFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2402" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1af82339419cbcd5ef32c583b493600faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tables_1_1_cell" kindref="compound">Aspose::Words::Tables::Cell</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Tables::Cell &gt; Aspose::Words::DocumentBuilder::InsertCell</definition>
        <argsstring>()</argsstring>
        <name>InsertCell</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertCell</qualifiedname>
        <briefdescription>
<para>Inserts a table cell into the document. </para>
        </briefdescription>
        <detaileddescription>
<para>To start a table, just call <bold>InsertCell</bold>. After this, any content you add using other methods of the <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref> class will be added to the current cell.</para>
<para>To start a new cell in the same row, call <bold>InsertCell</bold> again.</para>
<para>To end a table row call <ref refid="class_aspose_1_1_words_1_1_document_builder_1a02fe2bcf78b96b2b0319ef7988cc79f2" kindref="member">EndRow</ref>.</para>
<para>Use the <ref refid="class_aspose_1_1_words_1_1_document_builder_1a8df42877c8de0aafc1ed208d6fd8152d" kindref="member">CellFormat</ref> property to specify cell formatting.</para>
<para><simplesect kind="return"><para>The cell node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to use a document builder to create a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Start<sp/>the<sp/>table,<sp/>then<sp/>populate<sp/>the<sp/>first<sp/>row<sp/>with<sp/>two<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>builder&apos;s<sp/>&quot;EndRow&quot;<sp/>method<sp/>to<sp/>start<sp/>a<sp/>new<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.CreateTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4412" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a1432a663bfdf45f0f2b95c234abd20d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertChart</definition>
        <argsstring>(Aspose::Words::Drawing::Charts::ChartType chartType, Aspose::Words::Drawing::RelativeHorizontalPosition horzPos, double left, Aspose::Words::Drawing::RelativeVerticalPosition vertPos, double top, double width, double height, Aspose::Words::Drawing::WrapType wrapType)</argsstring>
        <name>InsertChart</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertChart</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1_1_charts_1a1a4ae35eb8880ff95c16437f9d3f3b36" kindref="member">Aspose::Words::Drawing::Charts::ChartType</ref></type>
          <declname>chartType</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93" kindref="member">Aspose::Words::Drawing::RelativeHorizontalPosition</ref></type>
          <declname>horzPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41d" kindref="member">Aspose::Words::Drawing::RelativeVerticalPosition</ref></type>
          <declname>vertPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99ba" kindref="member">Aspose::Words::Drawing::WrapType</ref></type>
          <declname>wrapType</declname>
        </param>
        <briefdescription>
<para>Inserts an chart object into the document and scales it to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chartType</parametername>
</parameternamelist>
<parameterdescription>
<para>The chart type to insert into the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horzPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image is measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the left side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the top side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrapType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to wrap text around the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to specify position and wrapping while inserting a chart. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertChart(ChartType::Pie,<sp/>RelativeHorizontalPosition::Margin,<sp/>100,<sp/>RelativeVerticalPosition::Margin,<sp/>100,<sp/>200,<sp/>100,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertedChartRelativePosition.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4035" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aeb709e74f76e66be4fe270ca13245f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertChart</definition>
        <argsstring>(Aspose::Words::Drawing::Charts::ChartType chartType, double width, double height)</argsstring>
        <name>InsertChart</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertChart</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1_1_charts_1a1a4ae35eb8880ff95c16437f9d3f3b36" kindref="member">Aspose::Words::Drawing::Charts::ChartType</ref></type>
          <declname>chartType</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Inserts an chart object into the document and scales it to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>chartType</parametername>
</parameternamelist>
<parameterdescription>
<para>The chart type to insert into the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a pie chart into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Chart&gt;<sp/>chart<sp/>=<sp/>builder-&gt;InsertChart(ChartType::Pie,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(300),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(300))-&gt;get_Chart();</highlight></codeline>
<codeline><highlight class="normal">chart-&gt;get_Series()-&gt;Clear();</highlight></codeline>
<codeline><highlight class="normal">chart-&gt;get_Series()-&gt;Add(u</highlight><highlight class="stringliteral">&quot;My<sp/>fruit&quot;</highlight><highlight class="normal">,<sp/>MakeArray&lt;String&gt;({u</highlight><highlight class="stringliteral">&quot;Apples&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Bananas&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Cherries&quot;</highlight><highlight class="normal">}),<sp/>MakeArray&lt;double&gt;({1.3,<sp/>2.2,<sp/>1.5}));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertPieChart.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4006" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a078d20238eac2ddc84087e1aedb913d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_form_field" kindref="compound">Aspose::Words::Fields::FormField</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fields::FormField &gt; Aspose::Words::DocumentBuilder::InsertCheckBox</definition>
        <argsstring>(const System::String &amp;name, bool checkedValue, int32_t size)</argsstring>
        <name>InsertCheckBox</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertCheckBox</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkedValue</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Inserts a checkbox form field at the current position. </para>
        </briefdescription>
        <detaileddescription>
<para>If you specify a name for the form field, then a bookmark is automatically created with the same name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the form field. Can be an empty string. The value longer than 20 characters will be truncated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkedValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Checked status of the checkbox form field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the size of the checkbox in points. Specify 0 for MS Word to calculate the size of the checkbox automatically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The form field node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert checkboxes into the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>checkboxes<sp/>of<sp/>varying<sp/>sizes<sp/>and<sp/>default<sp/>checked<sp/>statuses.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Unchecked<sp/>check<sp/>box<sp/>of<sp/>a<sp/>default<sp/>size:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCheckBox(String::Empty,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Large<sp/>checked<sp/>check<sp/>box:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCheckBox(u</highlight><highlight class="stringliteral">&quot;CheckBox_Default&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Form<sp/>fields<sp/>have<sp/>a<sp/>name<sp/>length<sp/>limit<sp/>of<sp/>20<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Very<sp/>large<sp/>checked<sp/>check<sp/>box:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCheckBox(u</highlight><highlight class="stringliteral">&quot;CheckBox_OnlyCheckedValue&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;CheckBox_OnlyChecked&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_FormFields()-&gt;idx_get(2)-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>interact<sp/>with<sp/>these<sp/>check<sp/>boxes<sp/>in<sp/>Microsoft<sp/>Word<sp/>by<sp/>double<sp/>clicking<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertCheckBox.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2857" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aae89a284b2fcfcd4c19fd1cf540fb66d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_form_field" kindref="compound">Aspose::Words::Fields::FormField</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fields::FormField &gt; Aspose::Words::DocumentBuilder::InsertCheckBox</definition>
        <argsstring>(const System::String &amp;name, bool defaultValue, bool checkedValue, int32_t size)</argsstring>
        <name>InsertCheckBox</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertCheckBox</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkedValue</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Inserts a checkbox form field at the current position. </para>
        </briefdescription>
        <detaileddescription>
<para>If you specify a name for the form field, then a bookmark is automatically created with the same name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the form field. Can be an empty string. The value longer than 20 characters will be truncated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value of the checkbox form field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkedValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Current checked status of the checkbox form field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the size of the checkbox in points. Specify 0 for MS Word to calculate the size of the checkbox automatically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The form field node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert checkboxes into the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>checkboxes<sp/>of<sp/>varying<sp/>sizes<sp/>and<sp/>default<sp/>checked<sp/>statuses.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Unchecked<sp/>check<sp/>box<sp/>of<sp/>a<sp/>default<sp/>size:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCheckBox(String::Empty,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Large<sp/>checked<sp/>check<sp/>box:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCheckBox(u</highlight><highlight class="stringliteral">&quot;CheckBox_Default&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Form<sp/>fields<sp/>have<sp/>a<sp/>name<sp/>length<sp/>limit<sp/>of<sp/>20<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Very<sp/>large<sp/>checked<sp/>check<sp/>box:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCheckBox(u</highlight><highlight class="stringliteral">&quot;CheckBox_OnlyCheckedValue&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;CheckBox_OnlyChecked&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_FormFields()-&gt;idx_get(2)-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>interact<sp/>with<sp/>these<sp/>check<sp/>boxes<sp/>in<sp/>Microsoft<sp/>Word<sp/>by<sp/>double<sp/>clicking<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertCheckBox.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2896" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a27c02821a8c7de8a7e3b6673db247d11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_form_field" kindref="compound">Aspose::Words::Fields::FormField</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fields::FormField &gt; Aspose::Words::DocumentBuilder::InsertComboBox</definition>
        <argsstring>(const System::String &amp;name, const System::ArrayPtr&lt; System::String &gt; &amp;items, int32_t selectedIndex)</argsstring>
        <name>InsertComboBox</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertComboBox</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &gt; &amp;</type>
          <declname>items</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>selectedIndex</declname>
        </param>
        <briefdescription>
<para>Inserts a combobox form field at the current position. </para>
        </briefdescription>
        <detaileddescription>
<para>If you specify a name for the form field, then a bookmark is automatically created with the same name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the form field. Can be an empty string. The value longer than 20 characters will be truncated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>The items of the ComboBox. Maximum is 25 items. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selectedIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the selected item in the ComboBox.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The form field node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create form fields. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Form<sp/>fields<sp/>are<sp/>objects<sp/>in<sp/>the<sp/>document<sp/>that<sp/>the<sp/>user<sp/>can<sp/>interact<sp/>with<sp/>by<sp/>being<sp/>prompted<sp/>to<sp/>enter<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>them<sp/>using<sp/>a<sp/>document<sp/>builder,<sp/>and<sp/>below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>doing<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Basic<sp/>text<sp/>input:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTextInput(u</highlight><highlight class="stringliteral">&quot;My<sp/>text<sp/>input&quot;</highlight><highlight class="normal">,<sp/>TextFormFieldType::Regular,<sp/>u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Enter<sp/>your<sp/>name<sp/>here&quot;</highlight><highlight class="normal">,<sp/>30);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Combo<sp/>box<sp/>with<sp/>prompt<sp/>text,<sp/>and<sp/>a<sp/>range<sp/>of<sp/>possible<sp/>values:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ArrayPtr&lt;String&gt;<sp/>items<sp/>=<sp/>MakeArray&lt;String&gt;({u</highlight><highlight class="stringliteral">&quot;--<sp/>Select<sp/>your<sp/>favorite<sp/>footwear<sp/>--&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Sneakers&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Oxfords&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Flip-flops&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Other&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertComboBox(u</highlight><highlight class="stringliteral">&quot;My<sp/>combo<sp/>box&quot;</highlight><highlight class="normal">,<sp/>items,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.CreateForm.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a combo box form field into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>form<sp/>that<sp/>prompts<sp/>the<sp/>user<sp/>to<sp/>pick<sp/>one<sp/>of<sp/>the<sp/>items<sp/>from<sp/>the<sp/>menu.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Pick<sp/>a<sp/>fruit:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">ArrayPtr&lt;String&gt;<sp/>items<sp/>=<sp/>MakeArray&lt;String&gt;({u</highlight><highlight class="stringliteral">&quot;Apple&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Banana&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Cherry&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertComboBox(u</highlight><highlight class="stringliteral">&quot;DropDown&quot;</highlight><highlight class="normal">,<sp/>items,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertComboBox.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2940" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aa14757cbd59d2e9e53d4281077a3e135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::DocumentBuilder::InsertDocument</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Document &gt; &amp;srcDoc, Aspose::Words::ImportFormatMode importFormatMode)</argsstring>
        <name>InsertDocument</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertDocument</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt; &amp;</type>
          <declname>srcDoc</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949" kindref="member">Aspose::Words::ImportFormatMode</ref></type>
          <declname>importFormatMode</declname>
        </param>
        <briefdescription>
<para>Inserts a document at the cursor position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcDoc</parametername>
</parameternamelist>
<parameterdescription>
<para>Source document for inserting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>importFormatMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to merge style formatting that clashes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>First node of the inserted content.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a document into another document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Document.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>docToInsert<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Formatted<sp/>elements.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertDocument(docToInsert,<sp/><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949a4cf454c612a2ed0c3ee75ac5175497c3" kindref="member" tooltip="Copy all required styles to the destination document, generate unique style names if needed.">ImportFormatMode::KeepSourceFormatting</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertDocument.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5293" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ab7f10612e96e891e4f9d40671f51e14e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Node &gt; Aspose::Words::DocumentBuilder::InsertDocument</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Document &gt; &amp;srcDoc, Aspose::Words::ImportFormatMode importFormatMode, const System::SharedPtr&lt; Aspose::Words::ImportFormatOptions &gt; &amp;importFormatOptions)</argsstring>
        <name>InsertDocument</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertDocument</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt; &amp;</type>
          <declname>srcDoc</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949" kindref="member">Aspose::Words::ImportFormatMode</ref></type>
          <declname>importFormatMode</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_import_format_options" kindref="compound">Aspose::Words::ImportFormatOptions</ref> &gt; &amp;</type>
          <declname>importFormatOptions</declname>
        </param>
        <briefdescription>
<para>Inserts a document at the cursor position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcDoc</parametername>
</parameternamelist>
<parameterdescription>
<para>Source document for inserting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>importFormatMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to merge style formatting that clashes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>importFormatOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>Allows to specify options that affect formatting of a result document.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>First node of the inserted content.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to resolve duplicate styles while inserting documents. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dstDoc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(dstDoc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>myStyle<sp/>=<sp/>builder-&gt;get_Document()-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">myStyle-&gt;get_Font()-&gt;set_Size(14);</highlight></codeline>
<codeline><highlight class="normal">myStyle-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Courier<sp/>New&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">myStyle-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleName(myStyle-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clone<sp/>the<sp/>document<sp/>and<sp/>edit<sp/>the<sp/>clone&apos;s<sp/>&quot;MyStyle&quot;<sp/>style,<sp/>so<sp/>it<sp/>is<sp/>a<sp/>different<sp/>color<sp/>than<sp/>that<sp/>of<sp/>the<sp/>original.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>insert<sp/>the<sp/>clone<sp/>into<sp/>the<sp/>original<sp/>document,<sp/>the<sp/>two<sp/>styles<sp/>with<sp/>the<sp/>same<sp/>name<sp/>will<sp/>cause<sp/>a<sp/>clash.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Document&gt;<sp/>srcDoc<sp/>=<sp/>dstDoc-&gt;Clone();</highlight></codeline>
<codeline><highlight class="normal">srcDoc-&gt;get_Styles()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;MyStyle&quot;</highlight><highlight class="normal">)-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a1d4bef72f59c2029f4c055ca8711d8dd" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Red</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>enable<sp/>SmartStyleBehavior<sp/>and<sp/>use<sp/>the<sp/>KeepSourceFormatting<sp/>import<sp/>format<sp/>mode,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Aspose.Words<sp/>will<sp/>resolve<sp/>style<sp/>clashes<sp/>by<sp/>converting<sp/>source<sp/>document<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>same<sp/>names<sp/>as<sp/>destination<sp/>styles<sp/>into<sp/>direct<sp/>paragraph<sp/>attributes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;ImportFormatOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_SmartStyleBehavior(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertDocument(srcDoc,<sp/><ref refid="namespace_aspose_1_1_words_1aafaa52cbf0baa49c3225787c23a8c949a4cf454c612a2ed0c3ee75ac5175497c3" kindref="member" tooltip="Copy all required styles to the destination document, generate unique style names if needed.">ImportFormatMode::KeepSourceFormatting</ref>,<sp/>options);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">dstDoc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SmartStyleBehavior.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5333" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ac98e449ffa0206c5cab306d58ae2c6f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Aspose::Words::Fields::Field</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fields::Field &gt; Aspose::Words::DocumentBuilder::InsertField</definition>
        <argsstring>(Aspose::Words::Fields::FieldType fieldType, bool updateField)</argsstring>
        <name>InsertField</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertField</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_fields_1a07fe44a4500c375e409bae0f72c9edec" kindref="member">Aspose::Words::Fields::FieldType</ref></type>
          <declname>fieldType</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>updateField</declname>
        </param>
        <briefdescription>
<para>Inserts a Word field into a document and optionally updates the field result. </para>
        </briefdescription>
        <detaileddescription>
<para>This method inserts a field into a document. Aspose.Words can update fields of most types, but not all. For more details see the <ref refid="" kindref="compound">InsertField()</ref> overload.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fieldType</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the field to append. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateField</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether to update the field immediately.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Field</ref> object that represents the inserted field.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Aspose::Words::Fields::Field</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a field into a document using FieldType. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>two<sp/>fields<sp/>while<sp/>passing<sp/>a<sp/>flag<sp/>which<sp/>determines<sp/>whether<sp/>to<sp/>update<sp/>them<sp/>as<sp/>the<sp/>builder<sp/>inserts<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>some<sp/>cases,<sp/>updating<sp/>fields<sp/>could<sp/>be<sp/>computationally<sp/>expensive,<sp/>and<sp/>it<sp/>may<sp/>be<sp/>a<sp/>good<sp/>idea<sp/>to<sp/>defer<sp/>the<sp/>update.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_BuiltInDocumentProperties()-&gt;set_Author(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>document<sp/>was<sp/>written<sp/>by<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(FieldType::FieldAuthor,<sp/>updateInsertedFieldsImmediately);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;\nThis<sp/>is<sp/>page<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(FieldType::FieldPage,<sp/>updateInsertedFieldsImmediately);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;<sp/>AUTHOR<sp/>&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)-&gt;GetFieldCode());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;<sp/>PAGE<sp/>&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(1)-&gt;GetFieldCode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateInsertedFieldsImmediately)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(1)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(String::Empty,<sp/>doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(String::Empty,<sp/>doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(1)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>need<sp/>to<sp/>update<sp/>these<sp/>fields<sp/>using<sp/>the<sp/>update<sp/>methods<sp/>manually.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)-&gt;Update();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(1)-&gt;get_Result());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2537" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a5a640e84409b8968db118a5cfcfb0e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Aspose::Words::Fields::Field</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fields::Field &gt; Aspose::Words::DocumentBuilder::InsertField</definition>
        <argsstring>(const System::String &amp;fieldCode)</argsstring>
        <name>InsertField</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertField</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fieldCode</declname>
        </param>
        <briefdescription>
<para>Inserts a Word field into a document and updates the field result. </para>
        </briefdescription>
        <detaileddescription>
<para>This method inserts a field into a document and updates the field result immediately. Aspose.Words can update fields of most types, but not all. For more details see the <ref refid="" kindref="compound">InsertField()</ref> overload.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fieldCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The field code to insert (without curly braces).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Field</ref> object that represents the inserted field.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Aspose::Words::Fields::Field</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert fields, and move the document builder&apos;s cursor to them. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;MERGEFIELD<sp/>MyMergeField1<sp/>\\*<sp/>MERGEFORMAT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;MERGEFIELD<sp/>MyMergeField2<sp/>\\*<sp/>MERGEFORMAT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>cursor<sp/>to<sp/>the<sp/>first<sp/>MERGEFIELD.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;MyMergeField1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>cursor<sp/>is<sp/>placed<sp/>immediately<sp/>after<sp/>the<sp/>first<sp/>MERGEFIELD,<sp/>and<sp/>before<sp/>the<sp/>second.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(1)-&gt;get_Start(),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)-&gt;get_End(),<sp/>builder-&gt;get_CurrentNode()-&gt;get_PreviousSibling());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>the<sp/>field&apos;s<sp/>field<sp/>code<sp/>or<sp/>contents<sp/>using<sp/>the<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>its<sp/>cursor<sp/>would<sp/>need<sp/>to<sp/>be<sp/>inside<sp/>a<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>place<sp/>it<sp/>inside<sp/>a<sp/>field,<sp/>we<sp/>would<sp/>need<sp/>to<sp/>call<sp/>the<sp/>document<sp/>builder&apos;s<sp/>MoveTo<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>pass<sp/>the<sp/>field&apos;s<sp/>start<sp/>or<sp/>separator<sp/>node<sp/>as<sp/>an<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>Text<sp/>between<sp/>our<sp/>merge<sp/>fields.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.MergeFields.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a field into a document using a field code. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Field&gt;<sp/>field<sp/>=<sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;DATE<sp/>\\@<sp/>\&quot;dddd,<sp/>MMMM<sp/>dd,<sp/>yyyy\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(FieldType::FieldDate,<sp/>field-&gt;get_Type());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;DATE<sp/>\\@<sp/>\&quot;dddd,<sp/>MMMM<sp/>dd,<sp/>yyyy\&quot;&quot;</highlight><highlight class="normal">,<sp/>field-&gt;GetFieldCode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overload<sp/>of<sp/>the<sp/>InsertField<sp/>method<sp/>automatically<sp/>updates<sp/>inserted<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_LE(<ref refid="struct/system.math/_1a562e313d90d467f581dfb28b85e6e7fe" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Math::Abs</ref>((<ref refid="class/system.date_time/_1a54eeee79d8f9d970d218cf28702d94de" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::Parse</ref>(field-&gt;get_Result())<sp/>-<sp/><ref refid="class/system.date_time/_1a8b4667cfa17e4aff117188fee6dbd7ed" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Today</ref>()).get_Hours()),<sp/>24);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2589" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a13586e4e8cffa2acd710ecbf83bb7936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Aspose::Words::Fields::Field</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fields::Field &gt; Aspose::Words::DocumentBuilder::InsertField</definition>
        <argsstring>(const System::String &amp;fieldCode, const System::String &amp;fieldValue)</argsstring>
        <name>InsertField</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertField</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fieldCode</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fieldValue</declname>
        </param>
        <briefdescription>
<para>Inserts a Word field into a document without updating the field result. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="namespace_aspose_1_1_words_1_1_fields" kindref="compound">Fields</ref> in Microsoft Word documents consist of a field code and a field result. The field code is like a formula and the field result is like the value that the formula produces. The field code may also contain field switches that are like additional instructions to perform a specific action.</para>
<para>You can switch between displaying field codes and results in your document in Microsoft Word using the keyboard shortcut Alt+F9. Field codes appear between curly braces ( { } ).</para>
<para>To create a field, you need to specify a field type, field code and a &quot;placeholder&quot; field value. If you are not sure about a particular field code syntax, create the field in Microsoft Word first and switch to see its field code.</para>
<para>Aspose.Words can calculate field results for most of the field types, but this method does not update the field result automatically. Because the field result is not calculated automatically, you are expected to pass some string value (or even an empty string) that will be inserted into the field result. This value will remain in the field result as a placeholder until the field is updated. To update the field result you can call <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field_1aaec82418b2b6493aa2827b8e282b2e82" kindref="member">Update</ref> on the field object returned to you or <ref refid="class_aspose_1_1_words_1_1_document_1a9c2187d845fae7a8dd8a6a5241d69d25" kindref="member">UpdateFields</ref> to update fields in the whole document.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fieldCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The field code to insert (without curly braces). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldValue</parametername>
</parameternamelist>
<parameterdescription>
<para>The field value to insert. Pass null for fields that do not have a value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Field</ref> object that represents the inserted field.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Aspose::Words::Fields::Field</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to set up page numbering in a section. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1,<sp/>page<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1,<sp/>page<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Section<sp/>1,<sp/>page<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea8e798e1e673d70f3c9d8b7be6234320b" kindref="member" tooltip="Specifies start of new section on a new page.">BreakType::SectionBreakNewPage</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2,<sp/>page<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2,<sp/>page<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Section<sp/>2,<sp/>page<sp/>3.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>document<sp/>builder<sp/>to<sp/>the<sp/>first<sp/>section&apos;s<sp/>primary<sp/>header,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>every<sp/>page<sp/>in<sp/>that<sp/>section<sp/>will<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>PAGE<sp/>field,<sp/>which<sp/>will<sp/>display<sp/>the<sp/>number<sp/>of<sp/>the<sp/>current<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Page<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;PAGE&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>section<sp/>to<sp/>have<sp/>the<sp/>page<sp/>count<sp/>that<sp/>PAGE<sp/>fields<sp/>display<sp/>start<sp/>from<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>configure<sp/>all<sp/>PAGE<sp/>fields<sp/>to<sp/>display<sp/>their<sp/>page<sp/>numbers<sp/>using<sp/>uppercase<sp/>Roman<sp/>numerals.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;PageSetup&gt;<sp/>pageSetup<sp/>=<sp/>doc-&gt;get_Sections()-&gt;idx_get(0)-&gt;get_PageSetup();</highlight></codeline>
<codeline><highlight class="normal">pageSetup-&gt;set_RestartPageNumbering(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">pageSetup-&gt;set_PageStartingNumber(5);</highlight></codeline>
<codeline><highlight class="normal">pageSetup-&gt;set_PageNumberStyle(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89da3c04ee10e6af5c1dd2255e5bd5c078e9" kindref="member" tooltip="Upper case Roman (I, II, III, ...)">NumberStyle::UppercaseRoman</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>another<sp/>primary<sp/>header<sp/>for<sp/>the<sp/>second<sp/>section,<sp/>with<sp/>another<sp/>PAGE<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(1);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;PAGE&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>section<sp/>to<sp/>have<sp/>the<sp/>page<sp/>count<sp/>that<sp/>PAGE<sp/>fields<sp/>display<sp/>start<sp/>from<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>configure<sp/>all<sp/>PAGE<sp/>fields<sp/>to<sp/>display<sp/>their<sp/>page<sp/>numbers<sp/>using<sp/>Arabic<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">pageSetup<sp/>=<sp/>doc-&gt;get_Sections()-&gt;idx_get(1)-&gt;get_PageSetup();</highlight></codeline>
<codeline><highlight class="normal">pageSetup-&gt;set_PageStartingNumber(10);</highlight></codeline>
<codeline><highlight class="normal">pageSetup-&gt;set_RestartPageNumbering(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">pageSetup-&gt;set_PageNumberStyle(<ref refid="namespace_aspose_1_1_words_1a078bfff76cf8186d8eb7ea66d94ab89da272ccb8592bafde0baf1dedce0fd3ac2" kindref="member" tooltip="Arabic numbering (1, 2, 3, ...)">NumberStyle::Arabic</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;PageSetup.PageNumbering.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2671" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a109f4602b37dffa8745cd1d94e986a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_notes_1_1_footnote" kindref="compound">Aspose::Words::Notes::Footnote</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Notes::Footnote &gt; Aspose::Words::DocumentBuilder::InsertFootnote</definition>
        <argsstring>(Aspose::Words::Notes::FootnoteType footnoteType, const System::String &amp;footnoteText)</argsstring>
        <name>InsertFootnote</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertFootnote</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_notes_1a2680135dcc9094dfd377cd5acf9bf4a8" kindref="member">Aspose::Words::Notes::FootnoteType</ref></type>
          <declname>footnoteType</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>footnoteText</declname>
        </param>
        <briefdescription>
<para>Inserts a footnote or endnote into the document. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>footnoteType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether to insert a footnote or an endnote. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footnoteText</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the text of the footnote.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a footnote object that was just created.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to reference text with a footnote and an endnote. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>some<sp/>text<sp/>and<sp/>mark<sp/>it<sp/>with<sp/>a<sp/>footnote<sp/>with<sp/>the<sp/>IsAuto<sp/>property<sp/>set<sp/>to<sp/>&quot;true&quot;<sp/>by<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>the<sp/>marker<sp/>seen<sp/>in<sp/>the<sp/>body<sp/>text<sp/>will<sp/>be<sp/>auto-numbered<sp/>at<sp/>&quot;1&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>footnote<sp/>will<sp/>appear<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>will<sp/>be<sp/>referenced<sp/>by<sp/>a<sp/>footnote.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>comment<sp/>regarding<sp/>referenced<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>more<sp/>text<sp/>and<sp/>mark<sp/>it<sp/>with<sp/>an<sp/>endnote<sp/>with<sp/>a<sp/>custom<sp/>reference<sp/>mark,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>be<sp/>used<sp/>in<sp/>place<sp/>of<sp/>the<sp/>number<sp/>&quot;2&quot;<sp/>and<sp/>set<sp/>&quot;IsAuto&quot;<sp/>to<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>will<sp/>be<sp/>referenced<sp/>by<sp/>an<sp/>endnote.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>comment<sp/>regarding<sp/>referenced<sp/>text.&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;CustomMark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnotes<sp/>always<sp/>appear<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>their<sp/>referenced<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>this<sp/>page<sp/>break<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>footnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>the<sp/>other<sp/>hand,<sp/>endnotes<sp/>are<sp/>always<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>this<sp/>page<sp/>break<sp/>will<sp/>push<sp/>the<sp/>endnote<sp/>down<sp/>to<sp/>the<sp/>next<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertFootnote.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2975" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a10911690b71094fdd090b5ca1b156ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_notes_1_1_footnote" kindref="compound">Aspose::Words::Notes::Footnote</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Notes::Footnote &gt; Aspose::Words::DocumentBuilder::InsertFootnote</definition>
        <argsstring>(Aspose::Words::Notes::FootnoteType footnoteType, const System::String &amp;footnoteText, const System::String &amp;referenceMark)</argsstring>
        <name>InsertFootnote</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertFootnote</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_notes_1a2680135dcc9094dfd377cd5acf9bf4a8" kindref="member">Aspose::Words::Notes::FootnoteType</ref></type>
          <declname>footnoteType</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>footnoteText</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>referenceMark</declname>
        </param>
        <briefdescription>
<para>Inserts a footnote or endnote into the document. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>footnoteType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies whether to insert a footnote or an endnote. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>footnoteText</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the text of the footnote. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceMark</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the custom reference mark of the footnote.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a footnote object that was just created.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to reference text with a footnote and an endnote. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>some<sp/>text<sp/>and<sp/>mark<sp/>it<sp/>with<sp/>a<sp/>footnote<sp/>with<sp/>the<sp/>IsAuto<sp/>property<sp/>set<sp/>to<sp/>&quot;true&quot;<sp/>by<sp/>default,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>the<sp/>marker<sp/>seen<sp/>in<sp/>the<sp/>body<sp/>text<sp/>will<sp/>be<sp/>auto-numbered<sp/>at<sp/>&quot;1&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>footnote<sp/>will<sp/>appear<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>will<sp/>be<sp/>referenced<sp/>by<sp/>a<sp/>footnote.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Footnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Footnote<sp/>comment<sp/>regarding<sp/>referenced<sp/>text.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>more<sp/>text<sp/>and<sp/>mark<sp/>it<sp/>with<sp/>an<sp/>endnote<sp/>with<sp/>a<sp/>custom<sp/>reference<sp/>mark,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>be<sp/>used<sp/>in<sp/>place<sp/>of<sp/>the<sp/>number<sp/>&quot;2&quot;<sp/>and<sp/>set<sp/>&quot;IsAuto&quot;<sp/>to<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>will<sp/>be<sp/>referenced<sp/>by<sp/>an<sp/>endnote.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertFootnote(FootnoteType::Endnote,<sp/>u</highlight><highlight class="stringliteral">&quot;Endnote<sp/>comment<sp/>regarding<sp/>referenced<sp/>text.&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;CustomMark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Footnotes<sp/>always<sp/>appear<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>their<sp/>referenced<sp/>text,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>this<sp/>page<sp/>break<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>footnote.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>the<sp/>other<sp/>hand,<sp/>endnotes<sp/>are<sp/>always<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>this<sp/>page<sp/>break<sp/>will<sp/>push<sp/>the<sp/>endnote<sp/>down<sp/>to<sp/>the<sp/>next<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertFootnote.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3011" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a493c9fa50a76b73c0190b89d2ca93193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertHorizontalRule</definition>
        <argsstring>()</argsstring>
        <name>InsertHorizontalRule</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertHorizontalRule</qualifiedname>
        <briefdescription>
<para>Inserts a horizontal rule shape into the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The shape that is a horizontal rule.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a horizontal rule shape, and customize its formatting. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertHorizontalRule();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;HorizontalRuleFormat&gt;<sp/>horizontalRuleFormat<sp/>=<sp/>shape-&gt;get_HorizontalRuleFormat();</highlight></codeline>
<codeline><highlight class="normal">horizontalRuleFormat-&gt;set_Alignment(HorizontalRuleAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">horizontalRuleFormat-&gt;set_WidthPercent(70);</highlight></codeline>
<codeline><highlight class="normal">horizontalRuleFormat-&gt;set_Height(3);</highlight></codeline>
<codeline><highlight class="normal">horizontalRuleFormat-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">horizontalRuleFormat-&gt;set_NoShade(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(shape-&gt;get_IsHorizontalRule());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(shape-&gt;get_HorizontalRuleFormat()-&gt;get_NoShade());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4313" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a0e1b8e9772eb058022fc79c344224800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::InsertHtml</definition>
        <argsstring>(const System::String &amp;html)</argsstring>
        <name>InsertHtml</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertHtml</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>html</declname>
        </param>
        <briefdescription>
<para>Inserts an HTML string into the document. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>html</parametername>
</parameternamelist>
<parameterdescription>
<para>An HTML string to insert into the document.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use a document builder to insert html content into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>html<sp/>=<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;&lt;p<sp/>align=&apos;right&apos;&gt;Paragraph<sp/>right&lt;/p&gt;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;b&gt;Implicit<sp/>paragraph<sp/>left&lt;/b&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;div<sp/>align=&apos;center&apos;&gt;Div<sp/>center&lt;/div&gt;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;&lt;h1<sp/>align=&apos;left&apos;&gt;Heading<sp/>1<sp/>left.&lt;/h1&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHtml(html);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Inserting<sp/>HTML<sp/>code<sp/>parses<sp/>the<sp/>formatting<sp/>of<sp/>each<sp/>element<sp/>into<sp/>equivalent<sp/>document<sp/>text<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphCollection&gt;<sp/>paragraphs<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>right&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(0)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a92b09c7c48c520c3c55e497875da437c" kindref="member" tooltip="Text is aligned to the right.">ParagraphAlignment::Right</ref>,<sp/>paragraphs-&gt;idx_get(0)-&gt;get_ParagraphFormat()-&gt;get_Alignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Implicit<sp/>paragraph<sp/>left&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(1)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a945d5e233cf7d6240f6b783b36a374ff" kindref="member" tooltip="Text is aligned to the left.">ParagraphAlignment::Left</ref>,<sp/>paragraphs-&gt;idx_get(1)-&gt;get_ParagraphFormat()-&gt;get_Alignment());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(paragraphs-&gt;idx_get(1)-&gt;get_Runs()-&gt;idx_get(0)-&gt;get_Font()-&gt;get_Bold());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Div<sp/>center&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(2)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>,<sp/>paragraphs-&gt;idx_get(2)-&gt;get_ParagraphFormat()-&gt;get_Alignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1<sp/>left.&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(3)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(3)-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertHtml.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to execute a mail merge with a custom callback that handles merge data in the form of HTML documents. <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MergeHtml()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;MERGEFIELD<sp/><sp/>html_Title<sp/><sp/>\\b<sp/>Content&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;MERGEFIELD<sp/><sp/>html_Body<sp/><sp/>\\b<sp/>Content&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayPtr&lt;SharedPtr&lt;System::Object&gt;&gt;<sp/>mergeData<sp/>=<sp/>MakeArray&lt;SharedPtr&lt;System::Object&gt;&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{System::ObjectExt::Box&lt;String&gt;(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;&lt;html&gt;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;h1&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;span<sp/>style=\&quot;color:<sp/>#0000ff;<sp/>font-family:<sp/>Arial;\&quot;&gt;Hello<sp/>World!&lt;/span&gt;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;&lt;/h1&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;/html&gt;&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>System::ObjectExt::Box&lt;String&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;&lt;html&gt;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;blockquote&gt;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;&lt;p&gt;Lorem<sp/>ipsum<sp/>dolor<sp/>sit<sp/>amet,<sp/>consectetur<sp/>adipiscing<sp/>elit,<sp/>sed<sp/>do<sp/>eiusmod<sp/>tempor<sp/>incididunt<sp/>ut<sp/>labore<sp/>et<sp/>dolore<sp/>magna<sp/>aliqua.&lt;/p&gt;&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;&lt;/blockquote&gt;&quot;</highlight><highlight class="normal"><sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;/html&gt;&quot;</highlight><highlight class="normal">)});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_MailMerge()-&gt;set_FieldMergingCallback(MakeObject&lt;ExMailMergeEvent::HandleMergeFieldInsertHtml&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;get_MailMerge()-&gt;Execute(MakeArray&lt;String&gt;({u</highlight><highlight class="stringliteral">&quot;html_Title&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;html_Body&quot;</highlight><highlight class="normal">}),<sp/>mergeData);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;MailMergeEvent.MergeHtml.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">HandleMergeFieldInsertHtml<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IFieldMergingCallback</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FieldMerging(SharedPtr&lt;FieldMergingArgs&gt;<sp/>args)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args-&gt;get_DocumentFieldName().StartsWith(u</highlight><highlight class="stringliteral">&quot;html_&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>args-&gt;get_Field()-&gt;GetFieldCode().Contains(u</highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>parsed<sp/>HTML<sp/>data<sp/>to<sp/>the<sp/>document&apos;s<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(args-&gt;get_Document());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;MoveToMergeField(args-&gt;get_DocumentFieldName());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;InsertHtml(System::ObjectExt::Unbox&lt;String&gt;(args-&gt;get_FieldValue()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>have<sp/>already<sp/>inserted<sp/>the<sp/>merged<sp/>content<sp/>manually,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>not<sp/>need<sp/>to<sp/>respond<sp/>to<sp/>this<sp/>event<sp/>by<sp/>returning<sp/>content<sp/>via<sp/>the<sp/>&quot;Text&quot;<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args-&gt;set_Text(String::Empty);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImageFieldMerging(SharedPtr&lt;ImageFieldMergingArgs&gt;<sp/>args)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3837" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a281d1bf6f6c61665870684e6cb809788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::InsertHtml</definition>
        <argsstring>(const System::String &amp;html, Aspose::Words::HtmlInsertOptions options)</argsstring>
        <name>InsertHtml</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertHtml</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>html</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1ab7b9f237c4bdd76f746c26c9b6420925" kindref="member">Aspose::Words::HtmlInsertOptions</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Inserts an HTML string into the document. Allows to specify additional options. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>html</parametername>
</parameternamelist>
<parameterdescription>
<para>An HTML string to insert into the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Options that are used when HTML string is inserted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use options while inserting html. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>Name<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>EMAIL<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default<sp/>&quot;DocumentBuilder.InsertHtml&quot;<sp/>inserts<sp/>a<sp/>HTML<sp/>fragment<sp/>that<sp/>ends<sp/>with<sp/>a<sp/>block-level<sp/>HTML<sp/>element,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>normally<sp/>closes<sp/>that<sp/>block-level<sp/>element<sp/>and<sp/>inserts<sp/>a<sp/>paragraph<sp/>break.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>As<sp/>a<sp/>result,<sp/>a<sp/>new<sp/>empty<sp/>paragraph<sp/>appears<sp/>after<sp/>inserted<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>specify<sp/>&quot;HtmlInsertOptions.RemoveLastEmptyParagraph&quot;,<sp/>those<sp/>extra<sp/>empty<sp/>paragraphs<sp/>will<sp/>be<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;NAME&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHtml(u</highlight><highlight class="stringliteral">&quot;&lt;p&gt;John<sp/>Smith&lt;/p&gt;&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_aspose_1_1_words_1ab7b9f237c4bdd76f746c26c9b6420925aad780607cfa168aaedd73ab6ff8bd85c" kindref="member" tooltip="Use font and paragraph formatting specified in DocumentBuilder as base formatting for text inserted f...">HtmlInsertOptions::UseBuilderFormatting</ref><sp/>|<sp/><ref refid="namespace_aspose_1_1_words_1ab7b9f237c4bdd76f746c26c9b6420925a2c5e9d755f5a82c7b73140ed0d0b24a7" kindref="member" tooltip="Remove the empty paragraph that is normally inserted after HTML that ends with a block-level element.">HtmlInsertOptions::RemoveLastEmptyParagraph</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;EMAIL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHtml(u</highlight><highlight class="stringliteral">&quot;&lt;p&gt;jsmith@example.com&lt;/p&gt;&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespace_aspose_1_1_words_1ab7b9f237c4bdd76f746c26c9b6420925aad780607cfa168aaedd73ab6ff8bd85c" kindref="member" tooltip="Use font and paragraph formatting specified in DocumentBuilder as base formatting for text inserted f...">HtmlInsertOptions::UseBuilderFormatting</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;MailMerge.RemoveLastEmptyParagraph.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3911" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a97d98583cb022ca71d9b9b6071d0995e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::InsertHtml</definition>
        <argsstring>(const System::String &amp;html, bool useBuilderFormatting)</argsstring>
        <name>InsertHtml</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertHtml</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>html</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useBuilderFormatting</declname>
        </param>
        <briefdescription>
<para>Inserts an HTML string into the document. </para>
        </briefdescription>
        <detaileddescription>
<para>You can use this method to insert an HTML fragment or whole HTML document.</para>
<para>When <emphasis>useBuilderFormatting</emphasis> is <computeroutput>false</computeroutput>, <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref> formating is ignored and formatting of inserted text is based on default HTML formatting. As a result, the text looks as it is rendered in browsers.</para>
<para>When <emphasis>useBuilderFormatting</emphasis> is <computeroutput>true</computeroutput>, formatting of inserted text is based on <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref> formatting, and the text looks as if it were inserted with <ref refid="" kindref="compound">Write()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>html</parametername>
</parameternamelist>
<parameterdescription>
<para>An HTML string to insert into the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useBuilderFormatting</parametername>
</parameternamelist>
<parameterdescription>
<para>A value indicating whether formatting specified in <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref> is used as base formatting for text imported from HTML.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to apply a document builder&apos;s formatting while inserting HTML content. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>a<sp/>text<sp/>alignment<sp/>for<sp/>the<sp/>builder,<sp/>insert<sp/>an<sp/>HTML<sp/>paragraph<sp/>with<sp/>a<sp/>specified<sp/>alignment,<sp/>and<sp/>one<sp/>without.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a8c16cbebef45d87fd2b36ce69f46c526" kindref="member" tooltip="Text is evenly distributed.">ParagraphAlignment::Distributed</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHtml(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;&lt;p<sp/>align=&apos;right&apos;&gt;Paragraph<sp/>1.&lt;/p&gt;&quot;</highlight><highlight class="normal">)<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;&lt;p&gt;Paragraph<sp/>2.&lt;/p&gt;&quot;</highlight><highlight class="normal">,<sp/>useBuilderFormatting);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphCollection&gt;<sp/>paragraphs<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>paragraph<sp/>has<sp/>an<sp/>alignment<sp/>specified.<sp/>When<sp/>InsertHtml<sp/>parses<sp/>the<sp/>HTML<sp/>code,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>paragraph<sp/>alignment<sp/>value<sp/>found<sp/>in<sp/>the<sp/>HTML<sp/>code<sp/>always<sp/>supersedes<sp/>the<sp/>document<sp/>builder&apos;s<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>1.&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(0)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a92b09c7c48c520c3c55e497875da437c" kindref="member" tooltip="Text is aligned to the right.">ParagraphAlignment::Right</ref>,<sp/>paragraphs-&gt;idx_get(0)-&gt;get_ParagraphFormat()-&gt;get_Alignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>paragraph<sp/>has<sp/>no<sp/>alignment<sp/>specified.<sp/>It<sp/>can<sp/>have<sp/>its<sp/>alignment<sp/>value<sp/>filled<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>builder&apos;s<sp/>value<sp/>depending<sp/>on<sp/>the<sp/>flag<sp/>we<sp/>passed<sp/>to<sp/>the<sp/>InsertHtml<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Paragraph<sp/>2.&quot;</highlight><highlight class="normal">,<sp/>paragraphs-&gt;idx_get(1)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(useBuilderFormatting<sp/>?<sp/><ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a8c16cbebef45d87fd2b36ce69f46c526" kindref="member" tooltip="Text is evenly distributed.">ParagraphAlignment::Distributed</ref><sp/>:<sp/><ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a945d5e233cf7d6240f6b783b36a374ff" kindref="member" tooltip="Text is aligned to the left.">ParagraphAlignment::Left</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paragraphs-&gt;idx_get(1)-&gt;get_ParagraphFormat()-&gt;get_Alignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertHtmlWithFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3881" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a82ca4d29fee5db47ae1dcd1ebb1cfe4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Aspose::Words::Fields::Field</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fields::Field &gt; Aspose::Words::DocumentBuilder::InsertHyperlink</definition>
        <argsstring>(const System::String &amp;displayText, const System::String &amp;urlOrBookmark, bool isBookmark)</argsstring>
        <name>InsertHyperlink</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertHyperlink</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>displayText</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>urlOrBookmark</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isBookmark</declname>
        </param>
        <briefdescription>
<para>Inserts a hyperlink into the document. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that you need to specify font formatting for the hyperlink display text explicitly using the <ref refid="class_aspose_1_1_words_1_1_document_builder_1a49bd68eef34fcb42a305e7197c476fe5" kindref="member">Font</ref> property.</para>
<para>This methods internally calls <ref refid="" kindref="compound">InsertField()</ref> to insert an MS Word HYPERLINK field into the document.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>displayText</parametername>
</parameternamelist>
<parameterdescription>
<para>Text of the link to be displayed in the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>urlOrBookmark</parametername>
</parameternamelist>
<parameterdescription>
<para>Link destination. Can be a url or a name of a bookmark inside the document. This method always adds apostrophes at the beginning and end of the url. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isBookmark</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the previous parameter is a name of a bookmark inside the document; false is the previous parameter is a URL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Field</ref> object that represents the inserted field.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a hyperlink field. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;For<sp/>more<sp/>information,<sp/>please<sp/>visit<sp/>the<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>hyperlink<sp/>and<sp/>emphasize<sp/>it<sp/>with<sp/>custom<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>hyperlink<sp/>will<sp/>be<sp/>a<sp/>clickable<sp/>piece<sp/>of<sp/>text<sp/>which<sp/>will<sp/>take<sp/>us<sp/>to<sp/>the<sp/>location<sp/>specified<sp/>in<sp/>the<sp/>URL.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a66ba162102bbf6ae31b522aec561735e" kindref="member">Underline::Single</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHyperlink(u</highlight><highlight class="stringliteral">&quot;Google<sp/>website&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;https://www.google.com&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Ctrl<sp/>+<sp/>left<sp/>clicking<sp/>the<sp/>link<sp/>in<sp/>the<sp/>text<sp/>in<sp/>Microsoft<sp/>Word<sp/>will<sp/>take<sp/>us<sp/>to<sp/>the<sp/>URL<sp/>via<sp/>a<sp/>new<sp/>web<sp/>browser<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertHyperlink.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to use a document builder&apos;s formatting stack. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>font<sp/>formatting,<sp/>then<sp/>write<sp/>the<sp/>text<sp/>that<sp/>goes<sp/>before<sp/>the<sp/>hyperlink.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;To<sp/>visit<sp/>Google,<sp/>hold<sp/>Ctrl<sp/>and<sp/>click<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Preserve<sp/>our<sp/>current<sp/>formatting<sp/>configuration<sp/>on<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;PushFont();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Alter<sp/>the<sp/>builder&apos;s<sp/>current<sp/>formatting<sp/>by<sp/>applying<sp/>a<sp/>new<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a79cd387280b73179eee47b96dadafc7b" kindref="member" tooltip="The Hyperlink style.">StyleIdentifier::Hyperlink</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHyperlink(u</highlight><highlight class="stringliteral">&quot;here&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;http://www.google.com&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>().ToArgb(),<sp/>builder-&gt;get_Font()-&gt;get_Color().ToArgb());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a66ba162102bbf6ae31b522aec561735e" kindref="member">Underline::Single</ref>,<sp/>builder-&gt;get_Font()-&gt;get_Underline());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>font<sp/>formatting<sp/>that<sp/>we<sp/>saved<sp/>earlier<sp/>and<sp/>remove<sp/>the<sp/>element<sp/>from<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;PopFont();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>.ToArgb(),<sp/>builder-&gt;get_Font()-&gt;get_Color().ToArgb());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Underline::None</ref>,<sp/>builder-&gt;get_Font()-&gt;get_Underline());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;.<sp/>We<sp/>hope<sp/>you<sp/>enjoyed<sp/>the<sp/>example.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.PushPopFont.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a hyperlink which references a local bookmark. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;Bookmark1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmarked<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;Bookmark1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>outside<sp/>of<sp/>the<sp/>bookmark.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>HYPERLINK<sp/>field<sp/>that<sp/>links<sp/>to<sp/>the<sp/>bookmark.<sp/>We<sp/>can<sp/>pass<sp/>field<sp/>switches</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>&quot;InsertHyperlink&quot;<sp/>method<sp/>as<sp/>part<sp/>of<sp/>the<sp/>argument<sp/>containing<sp/>the<sp/>referenced<sp/>bookmark&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a66ba162102bbf6ae31b522aec561735e" kindref="member">Underline::Single</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHyperlink(u</highlight><highlight class="stringliteral">&quot;Link<sp/>to<sp/>Bookmark1&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Bookmark1\&quot;<sp/>\\o<sp/>\&quot;Hyperlink<sp/>Tip&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertHyperlinkToLocalBookmark.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2759" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aa76fc3d035aca8ee766876607ed0b0d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::ArrayPtr&lt; uint8_t &gt; &amp;imageBytes)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt; &amp;</type>
          <declname>imageBytes</declname>
        </param>
        <briefdescription>
<para>Inserts an image from a byte array into the document. The image is inserted inline and at 100% scale. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imageBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte array that contains the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from a byte array into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a744ad35e2fcb00393fb7ce4e24e59263" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromFile</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ms<sp/>=<sp/>MakeObject&lt;System::IO::MemoryStream&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>image-&gt;Save(ms,<sp/><ref refid="class/system.drawing.imaging.image_format/_1a854fe6ac4c8bb96087464e4e59112df5" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Imaging::ImageFormat::get_Png</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayPtr&lt;uint8_t&gt;<sp/>imageByteArray<sp/>=<sp/>ms-&gt;ToArray();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>byte<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(imageByteArray);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(imageByteArray,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(imageByteArray,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,<sp/>100.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromByteArray.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3251" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a5f4bd6e35dba9475f44dc4f5232bf58c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::ArrayPtr&lt; uint8_t &gt; &amp;imageBytes, Aspose::Words::Drawing::RelativeHorizontalPosition horzPos, double left, Aspose::Words::Drawing::RelativeVerticalPosition vertPos, double top, double width, double height, Aspose::Words::Drawing::WrapType wrapType)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt; &amp;</type>
          <declname>imageBytes</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93" kindref="member">Aspose::Words::Drawing::RelativeHorizontalPosition</ref></type>
          <declname>horzPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41d" kindref="member">Aspose::Words::Drawing::RelativeVerticalPosition</ref></type>
          <declname>vertPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99ba" kindref="member">Aspose::Words::Drawing::WrapType</ref></type>
          <declname>wrapType</declname>
        </param>
        <briefdescription>
<para>Inserts an image from a byte array at the specified position and size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imageBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte array that contains the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horzPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image is measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the left side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the top side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrapType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to wrap text around the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from a byte array into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a744ad35e2fcb00393fb7ce4e24e59263" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromFile</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ms<sp/>=<sp/>MakeObject&lt;System::IO::MemoryStream&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>image-&gt;Save(ms,<sp/><ref refid="class/system.drawing.imaging.image_format/_1a854fe6ac4c8bb96087464e4e59112df5" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Imaging::ImageFormat::get_Png</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayPtr&lt;uint8_t&gt;<sp/>imageByteArray<sp/>=<sp/>ms-&gt;ToArray();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>byte<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(imageByteArray);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(imageByteArray,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(imageByteArray,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,<sp/>100.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromByteArray.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3626" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a82925838692c89169d992a983ac095fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::ArrayPtr&lt; uint8_t &gt; &amp;imageBytes, double width, double height)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt; &amp;</type>
          <declname>imageBytes</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Inserts an inline image from a byte array into the document and scales it to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>imageBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte array that contains the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from a byte array into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a744ad35e2fcb00393fb7ce4e24e59263" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromFile</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ms<sp/>=<sp/>MakeObject&lt;System::IO::MemoryStream&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>image-&gt;Save(ms,<sp/><ref refid="class/system.drawing.imaging.image_format/_1a854fe6ac4c8bb96087464e4e59112df5" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Imaging::ImageFormat::get_Png</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayPtr&lt;uint8_t&gt;<sp/>imageByteArray<sp/>=<sp/>ms-&gt;ToArray();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>byte<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(imageByteArray);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(imageByteArray,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(imageByteArray,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,<sp/>100.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromByteArray.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3411" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a4b7ea15aca1793bc7485e418583c9bdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::SharedPtr&lt; System::Drawing::Image &gt; &amp;image)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.drawing.image/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image</ref> &gt; &amp;</type>
          <declname>image</declname>
        </param>
        <briefdescription>
<para>Inserts an image from a <ref refid="class/system.drawing.image/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">Image</ref> object into the document. The image is inserted inline and at 100% scale. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>The image to insert into the document.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from an object into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a744ad35e2fcb00393fb7ce4e24e59263" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromFile</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>an<sp/>Image<sp/>object<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(image);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(image,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(image,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,<sp/>100.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromImageObject.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3048" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ad665359a0fad80dd16517501df09fe41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::SharedPtr&lt; System::Drawing::Image &gt; &amp;image, Aspose::Words::Drawing::RelativeHorizontalPosition horzPos, double left, Aspose::Words::Drawing::RelativeVerticalPosition vertPos, double top, double width, double height, Aspose::Words::Drawing::WrapType wrapType)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.drawing.image/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image</ref> &gt; &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93" kindref="member">Aspose::Words::Drawing::RelativeHorizontalPosition</ref></type>
          <declname>horzPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41d" kindref="member">Aspose::Words::Drawing::RelativeVerticalPosition</ref></type>
          <declname>vertPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99ba" kindref="member">Aspose::Words::Drawing::WrapType</ref></type>
          <declname>wrapType</declname>
        </param>
        <briefdescription>
<para>Inserts an image from a <ref refid="class/system.drawing.image/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">Image</ref> object at the specified position and size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>The image to insert into the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horzPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image is measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the left side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the top side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrapType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to wrap text around the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from an object into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a744ad35e2fcb00393fb7ce4e24e59263" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromFile</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>an<sp/>Image<sp/>object<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(image);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(image,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(image,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,<sp/>100.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromImageObject.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3455" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a61d7d1d0c686e218ff129307234f530d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::SharedPtr&lt; System::Drawing::Image &gt; &amp;image, double width, double height)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.drawing.image/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image</ref> &gt; &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Inserts an inline image from a <ref refid="class/system.drawing.image/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">Image</ref> object into the document and scales it to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>The image to insert into the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from an object into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a744ad35e2fcb00393fb7ce4e24e59263" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromFile</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>an<sp/>Image<sp/>object<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(image);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(image,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(image,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,<sp/>100.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromImageObject.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3290" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a9b5183410bf6f9553ae023b690cb21e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Inserts an image from a stream into the document. The image is inserted inline and at 100% scale. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream that contains the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from a stream into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=<sp/><ref refid="class/system.i_o.file/_1acf0c889be242fb4723b33e96e9377423" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::File::OpenRead</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(stream);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(stream,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(stream,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,<sp/>100.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromStream.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a shape with an image from a stream into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=<sp/><ref refid="class/system.i_o.file/_1acf0c889be242fb4723b33e96e9377423" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::File::OpenRead</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Image<sp/>from<sp/>stream:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(stream);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.FromStream.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3208" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a8f7d34175990e27c24f05ccff7dcf3b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream, Aspose::Words::Drawing::RelativeHorizontalPosition horzPos, double left, Aspose::Words::Drawing::RelativeVerticalPosition vertPos, double top, double width, double height, Aspose::Words::Drawing::WrapType wrapType)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93" kindref="member">Aspose::Words::Drawing::RelativeHorizontalPosition</ref></type>
          <declname>horzPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41d" kindref="member">Aspose::Words::Drawing::RelativeVerticalPosition</ref></type>
          <declname>vertPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99ba" kindref="member">Aspose::Words::Drawing::WrapType</ref></type>
          <declname>wrapType</declname>
        </param>
        <briefdescription>
<para>Inserts an image from a stream at the specified position and size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream that contains the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horzPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image is measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the left side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the top side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrapType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to wrap text around the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from a stream into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=<sp/><ref refid="class/system.i_o.file/_1acf0c889be242fb4723b33e96e9377423" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::File::OpenRead</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(stream);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(stream,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(stream,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,<sp/>100.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromStream.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3576" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a1df84c86fbd77059550513a611ce3bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream, double width, double height)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Inserts an inline image from a stream into the document and scales it to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The stream that contains the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from a stream into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;System::IO::Stream&gt;<sp/>stream<sp/>=<sp/><ref refid="class/system.i_o.file/_1acf0c889be242fb4723b33e96e9377423" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::File::OpenRead</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(stream);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(stream,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;InsertImage(stream,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,<sp/>100.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromStream.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3366" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ae1f9db5ccfbe436b6e9bf9e3d1fa2e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::String &amp;fileName)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Inserts an image from a file or URL into the document. The image is inserted inline and at 100% scale. </para>
        </briefdescription>
        <detaileddescription>
<para>This overload will automatically download the image before inserting into the document if you specify a remote URI.</para>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The file with the image. Can be any valid local or remote URI.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from the local file system into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>local<sp/>system<sp/>filename.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Transparent<sp/>background<sp/>logo.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Windows<sp/>MetaFile.wmf&quot;</highlight><highlight class="normal">,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromFilename.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to determine which image will be inserted. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Scalable<sp/>Vector<sp/>Graphics.svg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Aspose.Words<sp/>insert<sp/>SVG<sp/>image<sp/>to<sp/>the<sp/>document<sp/>as<sp/>PNG<sp/>with<sp/>svgBlip<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>contains<sp/>the<sp/>original<sp/>vector<sp/>SVG<sp/>image<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertSvgImage.SvgWithSvgBlip.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Aspose.Words<sp/>insert<sp/>SVG<sp/>image<sp/>to<sp/>the<sp/>document<sp/>as<sp/>PNG,<sp/>just<sp/>like<sp/>Microsoft<sp/>Word<sp/>does<sp/>for<sp/>old<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertSvgImage.Svg.doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_CompatibilityOptions()-&gt;OptimizeFor(MsWordVersion::Word2003);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Aspose.Words<sp/>insert<sp/>SVG<sp/>image<sp/>to<sp/>the<sp/>document<sp/>as<sp/>EMF<sp/>metafile<sp/>to<sp/>keep<sp/>the<sp/>image<sp/>in<sp/>vector<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertSvgImage.Emf.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert gif image to the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>insert<sp/>gif<sp/>image<sp/>using<sp/>path<sp/>or<sp/>bytes<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>works<sp/>only<sp/>if<sp/>DocumentBuilder<sp/>optimized<sp/>to<sp/>Word<sp/>version<sp/>2010<sp/>or<sp/>higher.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note,<sp/>that<sp/>access<sp/>to<sp/>the<sp/>image<sp/>bytes<sp/>causes<sp/>conversion<sp/>Gif<sp/>to<sp/>Png.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>gifImage<sp/>=<sp/>builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Graphics<sp/>Interchange<sp/>Format.gif&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">gifImage<sp/>=<sp/>builder-&gt;InsertImage(<ref refid="class/system.i_o.file/_1abdf236ad2f3924d0fc9259f8f715a5c4" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::File::ReadAllBytes</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Graphics<sp/>Interchange<sp/>Format.gif&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;InsertGif.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a shape with an image into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>locations<sp/>where<sp/>the<sp/>document<sp/>builder&apos;s<sp/>&quot;InsertShape&quot;<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>source<sp/>the<sp/>image<sp/>that<sp/>the<sp/>shape<sp/>will<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Pass<sp/>a<sp/>local<sp/>file<sp/>system<sp/>filename<sp/>of<sp/>an<sp/>image<sp/>file:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Image<sp/>from<sp/>local<sp/>file:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Pass<sp/>a<sp/>URL<sp/>which<sp/>points<sp/>to<sp/>an<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Image<sp/>from<sp/>a<sp/>URL:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(get_ImageUrl());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.FromUrl.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a floating image to the center of a page. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>floating<sp/>image<sp/>that<sp/>will<sp/>appear<sp/>behind<sp/>the<sp/>overlapping<sp/>text<sp/>and<sp/>align<sp/>it<sp/>to<sp/>the<sp/>page&apos;s<sp/>center.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(WrapType::None);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_BehindText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_RelativeHorizontalPosition(RelativeHorizontalPosition::Page);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_RelativeVerticalPosition(RelativeVerticalPosition::Page);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_HorizontalAlignment(HorizontalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_VerticalAlignment(VerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateFloatingPageCenter.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3157" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aeeafcaf81da826364f98bf0930982908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::String &amp;fileName, Aspose::Words::Drawing::RelativeHorizontalPosition horzPos, double left, Aspose::Words::Drawing::RelativeVerticalPosition vertPos, double top, double width, double height, Aspose::Words::Drawing::WrapType wrapType)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93" kindref="member">Aspose::Words::Drawing::RelativeHorizontalPosition</ref></type>
          <declname>horzPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41d" kindref="member">Aspose::Words::Drawing::RelativeVerticalPosition</ref></type>
          <declname>vertPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99ba" kindref="member">Aspose::Words::Drawing::WrapType</ref></type>
          <declname>wrapType</declname>
        </param>
        <briefdescription>
<para>Inserts an image from a file or URL at the specified position and size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The file that contains the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horzPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image is measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the left side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the top side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrapType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to wrap text around the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>using<sp/>a<sp/>document<sp/>builder<sp/>to<sp/>source<sp/>an<sp/>image<sp/>and<sp/>then<sp/>insert<sp/>it<sp/>as<sp/>a<sp/>floating<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>From<sp/>a<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Transparent<sp/>background<sp/>logo.png&quot;</highlight><highlight class="normal">,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>0.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>200.0,<sp/>200.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>From<sp/>a<sp/>URL:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(get_ImageUrl(),<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>250.0,<sp/>200.0,<sp/>200.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertFloatingImage.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert an image from the local file system into a document while preserving its dimensions. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>InsertImage<sp/>method<sp/>creates<sp/>a<sp/>floating<sp/>shape<sp/>with<sp/>the<sp/>passed<sp/>image<sp/>in<sp/>its<sp/>image<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>specify<sp/>the<sp/>dimensions<sp/>of<sp/>the<sp/>shape<sp/>can<sp/>be<sp/>passing<sp/>them<sp/>to<sp/>this<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>imageShape<sp/>=<sp/>builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">,<sp/>RelativeHorizontalPosition::Margin,<sp/>0.0,<sp/>RelativeVerticalPosition::Margin,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>-1.0,<sp/>-1.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Passing<sp/>negative<sp/>values<sp/>as<sp/>the<sp/>intended<sp/>dimensions<sp/>will<sp/>automatically<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>shape&apos;s<sp/>dimensions<sp/>based<sp/>on<sp/>the<sp/>dimensions<sp/>of<sp/>its<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(300.0,<sp/>imageShape-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(300.0,<sp/>imageShape-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertImageOriginalSize.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert an image from the local file system into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>local<sp/>system<sp/>filename.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Transparent<sp/>background<sp/>logo.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Windows<sp/>MetaFile.wmf&quot;</highlight><highlight class="normal">,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromFilename.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3532" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1adb3af8a570a08227389b88c7e4101c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(const System::String &amp;fileName, double width, double height)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Inserts an inline image from a file or URL into the document and scales it to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The file that contains the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an image from the local file system into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>three<sp/>ways<sp/>of<sp/>inserting<sp/>an<sp/>image<sp/>from<sp/>a<sp/>local<sp/>system<sp/>filename.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>a<sp/>default<sp/>size<sp/>based<sp/>on<sp/>the<sp/>image&apos;s<sp/>original<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Transparent<sp/>background<sp/>logo.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(250),<sp/><ref refid="class_aspose_1_1_words_1_1_convert_util_1aa9333641e2c7fa6de34eb0794062e149" kindref="member" tooltip="Converts pixels to points at 96 dpi.">ConvertUtil::PixelToPoint</ref>(144));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>3<sp/>-<sp/><sp/>Floating<sp/>shape<sp/>with<sp/>custom<sp/>dimensions:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertImage(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Windows<sp/>MetaFile.wmf&quot;</highlight><highlight class="normal">,<sp/>RelativeHorizontalPosition::Margin,<sp/>100.0,<sp/>RelativeVerticalPosition::Margin,<sp/>100.0,<sp/>200.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100.0,<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilderImages.InsertImageFromFilename.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3327" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a7b330b9975e41bb5bbde9811997bd19c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(std::basic_istream&lt; CharType, Traits &gt; &amp;stream)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>std::basic_istream&lt; CharType, Traits &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5455" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5455" bodyend="5459"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a654a16ee544189af55e8684935c65709" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(std::basic_istream&lt; CharType, Traits &gt; &amp;stream, Aspose::Words::Drawing::RelativeHorizontalPosition horzPos, double left, Aspose::Words::Drawing::RelativeVerticalPosition vertPos, double top, double width, double height, Aspose::Words::Drawing::WrapType wrapType)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>std::basic_istream&lt; CharType, Traits &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93" kindref="member">Aspose::Words::Drawing::RelativeHorizontalPosition</ref></type>
          <declname>horzPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41d" kindref="member">Aspose::Words::Drawing::RelativeVerticalPosition</ref></type>
          <declname>vertPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99ba" kindref="member">Aspose::Words::Drawing::WrapType</ref></type>
          <declname>wrapType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5469" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5469" bodyend="5473"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ad5adacabdc491ae5f0d7ca6f54587ee3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertImage</definition>
        <argsstring>(std::basic_istream&lt; CharType, Traits &gt; &amp;stream, double width, double height)</argsstring>
        <name>InsertImage</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertImage</qualifiedname>
        <param>
          <type>std::basic_istream&lt; CharType, Traits &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5462" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5462" bodyend="5466"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a02b741e360433f23de2fdf0aea7b35e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::InsertNode</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Node &gt; &amp;node)</argsstring>
        <name>InsertNode</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertNode</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Inserts a text level node inside the current paragraph before the cursor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a linked image into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>imageFileName<sp/>=<sp/>ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Windows<sp/>MetaFile.wmf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>applying<sp/>an<sp/>image<sp/>to<sp/>a<sp/>shape<sp/>so<sp/>that<sp/>it<sp/>can<sp/>display<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Set<sp/>the<sp/>shape<sp/>to<sp/>contain<sp/>the<sp/>image.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(builder-&gt;get_Document(),<sp/>ShapeType::Image);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(WrapType::Inline);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;SetImage(imageFileName);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(shape);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Embedded.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Every<sp/>image<sp/>that<sp/>we<sp/>store<sp/>in<sp/>shape<sp/>will<sp/>increase<sp/>the<sp/>size<sp/>of<sp/>our<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(70000<sp/>&lt;<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Embedded.docx&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;RemoveAllChildren();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Set<sp/>the<sp/>shape<sp/>to<sp/>link<sp/>to<sp/>an<sp/>image<sp/>file<sp/>in<sp/>the<sp/>local<sp/>file<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape<sp/>=<sp/>MakeObject&lt;Shape&gt;(builder-&gt;get_Document(),<sp/>ShapeType::Image);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(WrapType::Inline);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;get_ImageData()-&gt;set_SourceFullName(imageFileName);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertNode(shape);</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Linked.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Linking<sp/>to<sp/>images<sp/>will<sp/>save<sp/>space<sp/>and<sp/>result<sp/>in<sp/>a<sp/>smaller<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>the<sp/>document<sp/>can<sp/>only<sp/>display<sp/>the<sp/>image<sp/>correctly<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>image<sp/>file<sp/>is<sp/>present<sp/>at<sp/>the<sp/>location<sp/>that<sp/>the<sp/>shape&apos;s<sp/>&quot;SourceFullName&quot;<sp/>property<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(10000<sp/>&gt;<sp/>MakeObject&lt;System::IO::FileInfo&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Image.CreateLinkedImage.Linked.docx&quot;</highlight><highlight class="normal">)-&gt;get_Length());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5452" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a782fab995c1a67bbd77e7fbe2e215160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOleObject</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream, const System::String &amp;progId, bool asIcon, const System::SharedPtr&lt; System::IO::Stream &gt; &amp;presentation)</argsstring>
        <name>InsertOleObject</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOleObject</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>progId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>asIcon</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>presentation</declname>
        </param>
        <briefdescription>
<para>Inserts an embedded OLE object from a stream into the document. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream containing application data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>progId</parametername>
</parameternamelist>
<parameterdescription>
<para>Programmatic Identifier of OLE object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asIcon</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies either Iconic or Normal mode of OLE object being inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>presentation</parametername>
</parameternamelist>
<parameterdescription>
<para>Image presentation of OLE object. If value is null Aspose.Words will use one of the predefined images.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shape node containing Ole object and inserted at the current Builder position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3636" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a5c13161a87a1ad4f2cc80a0b52ce9313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOleObject</definition>
        <argsstring>(const System::String &amp;fileName, bool isLinked, bool asIcon, const System::SharedPtr&lt; System::IO::Stream &gt; &amp;presentation)</argsstring>
        <name>InsertOleObject</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOleObject</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLinked</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>asIcon</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>presentation</declname>
        </param>
        <briefdescription>
<para>Inserts an embedded or linked OLE object from a file into the document. Detects OLE object type using file extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Full path to the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isLinked</parametername>
</parameternamelist>
<parameterdescription>
<para>If true then linked OLE object is inserted otherwise embedded OLE object is inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asIcon</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies either Iconic or Normal mode of OLE object being inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>presentation</parametername>
</parameternamelist>
<parameterdescription>
<para>Image presentation of OLE object. If value is null Aspose.Words will use one of the predefined images.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shape node containing Ole object and inserted at the current Builder position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3646" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a35edd8411a9f368ff713394e3c11d6f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOleObject</definition>
        <argsstring>(const System::String &amp;fileName, const System::String &amp;progId, bool isLinked, bool asIcon, const System::SharedPtr&lt; System::IO::Stream &gt; &amp;presentation)</argsstring>
        <name>InsertOleObject</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOleObject</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>progId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLinked</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>asIcon</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>presentation</declname>
        </param>
        <briefdescription>
<para>Inserts an embedded or linked OLE object from a file into the document. Detects OLE object type using given progID parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Full path to the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>progId</parametername>
</parameternamelist>
<parameterdescription>
<para>ProgId of OLE object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isLinked</parametername>
</parameternamelist>
<parameterdescription>
<para>If true then linked OLE object is inserted otherwise embedded OLE object is inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asIcon</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies either Iconic or Normal mode of OLE object being inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>presentation</parametername>
</parameternamelist>
<parameterdescription>
<para>Image presentation of OLE object. If value is null Aspose.Words will use one of the predefined images.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shape node containing Ole object and inserted at the current Builder position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3657" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ade746f0cb9e2c308a9e58a0501bcfd25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOleObject</definition>
        <argsstring>(std::basic_istream&lt; CharType, Traits &gt; &amp;stream, System::String progId, bool asIcon, std::basic_istream&lt; CharType, Traits &gt; &amp;presentation)</argsstring>
        <name>InsertOleObject</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOleObject</qualifiedname>
        <param>
          <type>std::basic_istream&lt; CharType, Traits &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>progId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>asIcon</declname>
        </param>
        <param>
          <type>std::basic_istream&lt; CharType, Traits &gt; &amp;</type>
          <declname>presentation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5476" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5476" bodyend="5481"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a994efcbb01cef9a6137d20a32bb56d0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOleObject</definition>
        <argsstring>(System::String fileName, bool isLinked, bool asIcon, std::basic_istream&lt; CharType, Traits &gt; &amp;presentation)</argsstring>
        <name>InsertOleObject</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOleObject</qualifiedname>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLinked</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>asIcon</declname>
        </param>
        <param>
          <type>std::basic_istream&lt; CharType, Traits &gt; &amp;</type>
          <declname>presentation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5484" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5484" bodyend="5488"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1af27f692a34427f779bce0962b17aaf23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOleObject</definition>
        <argsstring>(System::String fileName, System::String progId, bool isLinked, bool asIcon, std::basic_istream&lt; CharType, Traits &gt; &amp;presentation)</argsstring>
        <name>InsertOleObject</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOleObject</qualifiedname>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>fileName</declname>
        </param>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>progId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLinked</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>asIcon</declname>
        </param>
        <param>
          <type>std::basic_istream&lt; CharType, Traits &gt; &amp;</type>
          <declname>presentation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5491" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5491" bodyend="5495"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a72be9cb0b09c3a7c771aac616645625b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOleObjectAsIcon</definition>
        <argsstring>(const System::SharedPtr&lt; System::IO::Stream &gt; &amp;stream, const System::String &amp;progId, const System::String &amp;iconFile, const System::String &amp;iconCaption)</argsstring>
        <name>InsertOleObjectAsIcon</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOleObjectAsIcon</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class/system.i_o.stream/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::Stream</ref> &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>progId</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>iconFile</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>iconCaption</declname>
        </param>
        <briefdescription>
<para>Inserts an embedded OLE object as icon from a stream into the document. Allows to specify icon file and caption. Detects OLE object type using given progID parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream containing application data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>progId</parametername>
</parameternamelist>
<parameterdescription>
<para>ProgId of OLE object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iconFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Full path to the ICO file. If the value is null, Aspose.Words will use a predefined image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iconCaption</parametername>
</parameternamelist>
<parameterdescription>
<para>Icon caption. If the value is null, Aspose.Words will use the a predefined icon caption.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shape node containing Ole object and inserted at the current Builder position.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an embedded or linked OLE object as icon into the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>&apos;iconFile&apos;<sp/>and<sp/>&apos;iconCaption&apos;<sp/>are<sp/>omitted,<sp/>this<sp/>overloaded<sp/>method<sp/>selects</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>icon<sp/>according<sp/>to<sp/>&apos;progId&apos;<sp/>and<sp/>uses<sp/>the<sp/>filename<sp/>for<sp/>the<sp/>icon<sp/>caption.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertOleObjectAsIcon(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Presentation.pptx&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Package&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo<sp/>icon.ico&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>embedded<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2eafced549b9e8e487f42d2bcb5bb63616c" kindref="member" tooltip="Explicit line break.">BreakType::LineBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream<sp/>=<sp/>MakeObject&lt;System::IO::FileStream&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Presentation.pptx&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Open);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>&apos;iconFile&apos;<sp/>and<sp/>&apos;iconCaption&apos;<sp/>are<sp/>omitted,<sp/>this<sp/>overloaded<sp/>method<sp/>selects</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>icon<sp/>according<sp/>to<sp/>the<sp/>file<sp/>extension<sp/>and<sp/>uses<sp/>the<sp/>filename<sp/>for<sp/>the<sp/>icon<sp/>caption.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertOleObjectAsIcon(stream,<sp/>u</highlight><highlight class="stringliteral">&quot;PowerPoint.Application&quot;</highlight><highlight class="normal">,<sp/>ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo<sp/>icon.ico&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>embedded<sp/>file<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;OlePackage&gt;<sp/>setOlePackage<sp/>=<sp/>shape-&gt;get_OleFormat()-&gt;get_OlePackage();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>setOlePackage-&gt;set_FileName(u</highlight><highlight class="stringliteral">&quot;Presentation.pptx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>setOlePackage-&gt;set_DisplayName(u</highlight><highlight class="stringliteral">&quot;Presentation.pptx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertOleObjectAsIcon.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3745" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aa80d1377c39e01257d20b76f3a6c0f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOleObjectAsIcon</definition>
        <argsstring>(const System::String &amp;fileName, bool isLinked, const System::String &amp;iconFile, const System::String &amp;iconCaption)</argsstring>
        <name>InsertOleObjectAsIcon</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOleObjectAsIcon</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLinked</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>iconFile</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>iconCaption</declname>
        </param>
        <briefdescription>
<para>Inserts an embedded or linked OLE object as icon into the document. Allows to specify icon file and caption. Detects OLE object type using file extension. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Full path to the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isLinked</parametername>
</parameternamelist>
<parameterdescription>
<para>If true then linked OLE object is inserted otherwise embedded OLE object is inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iconFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Full path to the ICO file. If the value is null, Aspose.Words will use a predefined image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iconCaption</parametername>
</parameternamelist>
<parameterdescription>
<para>Icon caption. If the value is null, Aspose.Words will use the file name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shape node containing Ole object and inserted at the current Builder position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3668" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a421cae4453abbf8f7cd0b9fa078e7030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOleObjectAsIcon</definition>
        <argsstring>(const System::String &amp;fileName, const System::String &amp;progId, bool isLinked, const System::String &amp;iconFile, const System::String &amp;iconCaption)</argsstring>
        <name>InsertOleObjectAsIcon</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOleObjectAsIcon</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>progId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isLinked</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>iconFile</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>iconCaption</declname>
        </param>
        <briefdescription>
<para>Inserts an embedded or linked OLE object as icon into the document. Allows to specify icon file and caption. Detects OLE object type using given progID parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>Full path to the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>progId</parametername>
</parameternamelist>
<parameterdescription>
<para>ProgId of OLE object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isLinked</parametername>
</parameternamelist>
<parameterdescription>
<para>If true then linked OLE object is inserted otherwise embedded OLE object is inserted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iconFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Full path to the ICO file. If the value is null, Aspose.Words will use a predefined image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iconCaption</parametername>
</parameternamelist>
<parameterdescription>
<para>Icon caption. If the value is null, Aspose.Words will use the file name.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Shape node containing Ole object and inserted at the current Builder position.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an embedded or linked OLE object as icon into the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>&apos;iconFile&apos;<sp/>and<sp/>&apos;iconCaption&apos;<sp/>are<sp/>omitted,<sp/>this<sp/>overloaded<sp/>method<sp/>selects</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>icon<sp/>according<sp/>to<sp/>&apos;progId&apos;<sp/>and<sp/>uses<sp/>the<sp/>filename<sp/>for<sp/>the<sp/>icon<sp/>caption.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertOleObjectAsIcon(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Presentation.pptx&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Package&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo<sp/>icon.ico&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>embedded<sp/>file&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2eafced549b9e8e487f42d2bcb5bb63616c" kindref="member" tooltip="Explicit line break.">BreakType::LineBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream<sp/>=<sp/>MakeObject&lt;System::IO::FileStream&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Presentation.pptx&quot;</highlight><highlight class="normal">,<sp/>System::IO::FileMode::Open);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>&apos;iconFile&apos;<sp/>and<sp/>&apos;iconCaption&apos;<sp/>are<sp/>omitted,<sp/>this<sp/>overloaded<sp/>method<sp/>selects</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>icon<sp/>according<sp/>to<sp/>the<sp/>file<sp/>extension<sp/>and<sp/>uses<sp/>the<sp/>filename<sp/>for<sp/>the<sp/>icon<sp/>caption.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertOleObjectAsIcon(stream,<sp/>u</highlight><highlight class="stringliteral">&quot;PowerPoint.Application&quot;</highlight><highlight class="normal">,<sp/>ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo<sp/>icon.ico&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;My<sp/>embedded<sp/>file<sp/>stream&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SharedPtr&lt;OlePackage&gt;<sp/>setOlePackage<sp/>=<sp/>shape-&gt;get_OleFormat()-&gt;get_OlePackage();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>setOlePackage-&gt;set_FileName(u</highlight><highlight class="stringliteral">&quot;Presentation.pptx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>setOlePackage-&gt;set_DisplayName(u</highlight><highlight class="stringliteral">&quot;Presentation.pptx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertOleObjectAsIcon.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3707" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a05f82ba343bda5a85f76a3a5f39d4468" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOleObjectAsIcon</definition>
        <argsstring>(std::basic_istream&lt; CharType, Traits &gt; &amp;stream, System::String progId, System::String iconFile, System::String iconCaption)</argsstring>
        <name>InsertOleObjectAsIcon</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOleObjectAsIcon</qualifiedname>
        <param>
          <type>std::basic_istream&lt; CharType, Traits &gt; &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>progId</declname>
        </param>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>iconFile</declname>
        </param>
        <param>
          <type><ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref></type>
          <declname>iconCaption</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5498" column="23" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="5498" bodyend="5502"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a65ec90d5ba149b46c1260e06a8a86929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOnlineVideo</definition>
        <argsstring>(const System::String &amp;videoUrl, Aspose::Words::Drawing::RelativeHorizontalPosition horzPos, double left, Aspose::Words::Drawing::RelativeVerticalPosition vertPos, double top, double width, double height, Aspose::Words::Drawing::WrapType wrapType)</argsstring>
        <name>InsertOnlineVideo</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOnlineVideo</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>videoUrl</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93" kindref="member">Aspose::Words::Drawing::RelativeHorizontalPosition</ref></type>
          <declname>horzPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41d" kindref="member">Aspose::Words::Drawing::RelativeVerticalPosition</ref></type>
          <declname>vertPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99ba" kindref="member">Aspose::Words::Drawing::WrapType</ref></type>
          <declname>wrapType</declname>
        </param>
        <briefdescription>
<para>Inserts an online video object into the document and scales it to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para>Insertion of online video from the following resources is supported:</para>
<para><itemizedlist>
<listitem><para><ulink url="https://www.youtube.com/">https://www.youtube.com/</ulink></para>
</listitem><listitem><para><ulink url="https://vimeo.com/">https://vimeo.com/</ulink></para>
</listitem></itemizedlist>
</para>
<para>If your online video is not displaying correctly, use <ref refid="" kindref="compound">InsertOnlineVideo()</ref>, which accepts custom embedded html code.</para>
<para>The code for embedding video can vary between providers, consult your corresponding provider of choice for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>videoUrl</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL to the video. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horzPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image is measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the left side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the top side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrapType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to wrap text around the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4095" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aed0e7128877067f315ca0c7da8321ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOnlineVideo</definition>
        <argsstring>(const System::String &amp;videoUrl, const System::String &amp;videoEmbedCode, const System::ArrayPtr&lt; uint8_t &gt; &amp;thumbnailImageBytes, Aspose::Words::Drawing::RelativeHorizontalPosition horzPos, double left, Aspose::Words::Drawing::RelativeVerticalPosition vertPos, double top, double width, double height, Aspose::Words::Drawing::WrapType wrapType)</argsstring>
        <name>InsertOnlineVideo</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOnlineVideo</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>videoUrl</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>videoEmbedCode</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt; &amp;</type>
          <declname>thumbnailImageBytes</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93" kindref="member">Aspose::Words::Drawing::RelativeHorizontalPosition</ref></type>
          <declname>horzPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41d" kindref="member">Aspose::Words::Drawing::RelativeVerticalPosition</ref></type>
          <declname>vertPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99ba" kindref="member">Aspose::Words::Drawing::WrapType</ref></type>
          <declname>wrapType</declname>
        </param>
        <briefdescription>
<para>Inserts an online video object into the document and scales it to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>videoUrl</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL to the video. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>videoEmbedCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The embed code for the video. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thumbnailImageBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The thumbnail image bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horzPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image is measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the left side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the image measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the top side of the image. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrapType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to wrap text around the image.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an online video into a document with a custom thumbnail. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>videoUrl<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;https://vimeo.com/52477838&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>videoEmbedCode<sp/>=<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;&lt;iframe<sp/>src=\&quot;https://player.vimeo.com/video/52477838\&quot;<sp/>width=\&quot;640\&quot;<sp/>height=\&quot;360\&quot;<sp/>frameborder=\&quot;0\&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;title=\&quot;Aspose\&quot;<sp/>webkitallowfullscreen<sp/>mozallowfullscreen<sp/>allowfullscreen&gt;&lt;/iframe&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ArrayPtr&lt;uint8_t&gt;<sp/>thumbnailImageBytes<sp/>=<sp/><ref refid="class/system.i_o.file/_1abdf236ad2f3924d0fc9259f8f715a5c4" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::File::ReadAllBytes</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream<sp/>=<sp/>MakeObject&lt;System::IO::MemoryStream&gt;(thumbnailImageBytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a422c9ba7c9a4a7964e7cc7a39f64faff" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromStream</ref>(stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>creating<sp/>a<sp/>shape<sp/>with<sp/>a<sp/>custom<sp/>thumbnail,<sp/>which<sp/>links<sp/>to<sp/>an<sp/>online<sp/>video</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>will<sp/>play<sp/>when<sp/>we<sp/>click<sp/>on<sp/>the<sp/>shape<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Insert<sp/>an<sp/>inline<sp/>shape<sp/>at<sp/>the<sp/>builder&apos;s<sp/>node<sp/>insertion<sp/>cursor:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;InsertOnlineVideo(videoUrl,<sp/>videoEmbedCode,<sp/>thumbnailImageBytes,<sp/>image-&gt;get_Width(),<sp/>image-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Insert<sp/>a<sp/>floating<sp/>shape:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>builder-&gt;get_PageSetup()-&gt;get_RightMargin()<sp/>-<sp/>image-&gt;get_Width();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>builder-&gt;get_PageSetup()-&gt;get_BottomMargin()<sp/>-<sp/>image-&gt;get_Height();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;InsertOnlineVideo(videoUrl,<sp/>videoEmbedCode,<sp/>thumbnailImageBytes,<sp/>RelativeHorizontalPosition::RightMargin,<sp/>left,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RelativeVerticalPosition::BottomMargin,<sp/>top,<sp/>image-&gt;get_Width(),<sp/>image-&gt;get_Height(),<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertOnlineVideoCustomThumbnail.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4200" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aef1d3626e6706169dfccba533e4608c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOnlineVideo</definition>
        <argsstring>(const System::String &amp;videoUrl, const System::String &amp;videoEmbedCode, const System::ArrayPtr&lt; uint8_t &gt; &amp;thumbnailImageBytes, double width, double height)</argsstring>
        <name>InsertOnlineVideo</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOnlineVideo</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>videoUrl</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>videoEmbedCode</declname>
        </param>
        <param>
          <type>const <ref refid="namespace/system/_1a64e8d7c8f13f967748bdd283b4062425" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::ArrayPtr</ref>&lt; uint8_t &gt; &amp;</type>
          <declname>thumbnailImageBytes</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Inserts an online video object into the document and scales it to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>videoUrl</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL to the video. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>videoEmbedCode</parametername>
</parameternamelist>
<parameterdescription>
<para>The embed code for the video. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thumbnailImageBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The thumbnail image bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an online video into a document with a custom thumbnail. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>videoUrl<sp/>=<sp/>u</highlight><highlight class="stringliteral">&quot;https://vimeo.com/52477838&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref><sp/>videoEmbedCode<sp/>=<sp/><ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;&lt;iframe<sp/>src=\&quot;https://player.vimeo.com/video/52477838\&quot;<sp/>width=\&quot;640\&quot;<sp/>height=\&quot;360\&quot;<sp/>frameborder=\&quot;0\&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;title=\&quot;Aspose\&quot;<sp/>webkitallowfullscreen<sp/>mozallowfullscreen<sp/>allowfullscreen&gt;&lt;/iframe&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ArrayPtr&lt;uint8_t&gt;<sp/>thumbnailImageBytes<sp/>=<sp/><ref refid="class/system.i_o.file/_1abdf236ad2f3924d0fc9259f8f715a5c4" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::IO::File::ReadAllBytes</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Logo.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stream<sp/>=<sp/>MakeObject&lt;System::IO::MemoryStream&gt;(thumbnailImageBytes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a422c9ba7c9a4a7964e7cc7a39f64faff" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromStream</ref>(stream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>creating<sp/>a<sp/>shape<sp/>with<sp/>a<sp/>custom<sp/>thumbnail,<sp/>which<sp/>links<sp/>to<sp/>an<sp/>online<sp/>video</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>will<sp/>play<sp/>when<sp/>we<sp/>click<sp/>on<sp/>the<sp/>shape<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Insert<sp/>an<sp/>inline<sp/>shape<sp/>at<sp/>the<sp/>builder&apos;s<sp/>node<sp/>insertion<sp/>cursor:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;InsertOnlineVideo(videoUrl,<sp/>videoEmbedCode,<sp/>thumbnailImageBytes,<sp/>image-&gt;get_Width(),<sp/>image-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Insert<sp/>a<sp/>floating<sp/>shape:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>builder-&gt;get_PageSetup()-&gt;get_RightMargin()<sp/>-<sp/>image-&gt;get_Width();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>top<sp/>=<sp/>builder-&gt;get_PageSetup()-&gt;get_BottomMargin()<sp/>-<sp/>image-&gt;get_Height();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder-&gt;InsertOnlineVideo(videoUrl,<sp/>videoEmbedCode,<sp/>thumbnailImageBytes,<sp/>RelativeHorizontalPosition::RightMargin,<sp/>left,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RelativeVerticalPosition::BottomMargin,<sp/>top,<sp/>image-&gt;get_Width(),<sp/>image-&gt;get_Height(),<sp/>WrapType::Square);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertOnlineVideoCustomThumbnail.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4145" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1af477603b6a0bc7d50f775ea70fafb7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertOnlineVideo</definition>
        <argsstring>(const System::String &amp;videoUrl, double width, double height)</argsstring>
        <name>InsertOnlineVideo</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertOnlineVideo</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>videoUrl</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Inserts an online video object into the document and scales it to the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para>Insertion of online video from the following resources is supported:</para>
<para><itemizedlist>
<listitem><para><ulink url="https://www.youtube.com/">https://www.youtube.com/</ulink></para>
</listitem><listitem><para><ulink url="https://vimeo.com/">https://vimeo.com/</ulink></para>
</listitem></itemizedlist>
</para>
<para>If your online video is not displaying correctly, use <ref refid="" kindref="compound">InsertOnlineVideo()</ref>, which accepts custom embedded html code.</para>
<para>The code for embedding video can vary between providers, consult your corresponding provider of choice for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>videoUrl</parametername>
</parameternamelist>
<parameterdescription>
<para>The URL to the video. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the image in points. Can be a negative or zero value to request 100% scale. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the image in points. Can be a negative or zero value to request 100% scale.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an online video into a document using a URL. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertOnlineVideo(u</highlight><highlight class="stringliteral">&quot;https://youtu.be/t_1LYZ102RA&quot;</highlight><highlight class="normal">,<sp/>360,<sp/>270);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>watch<sp/>the<sp/>video<sp/>from<sp/>Microsoft<sp/>Word<sp/>by<sp/>clicking<sp/>on<sp/>the<sp/>shape.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertVideoWithUrl.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4069" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ab305a508262a77604978dcaece8a09fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Aspose::Words::Paragraph</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Paragraph &gt; Aspose::Words::DocumentBuilder::InsertParagraph</definition>
        <argsstring>()</argsstring>
        <name>InsertParagraph</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertParagraph</qualifiedname>
        <briefdescription>
<para>Inserts a paragraph break into the document. </para>
        </briefdescription>
        <detaileddescription>
<para>Current paragraph formatting specified by the <ref refid="class_aspose_1_1_words_1_1_document_builder_1a50e7eb77bacf84cbaa8bde0293cd308b" kindref="member">ParagraphFormat</ref> property is used.</para>
<para>Breaks the current paragraph in two. After inserting the paragraph, the cursor is placed at the beginning of the new paragraph.</para>
<para><simplesect kind="return"><para>The paragraph node that was just inserted. It is the same node as <ref refid="class_aspose_1_1_words_1_1_document_builder_1a1d0509775253820dcb7231884e14d070" kindref="member">CurrentParagraph</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a paragraph into the document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Font&gt;<sp/>font<sp/>=<sp/>builder-&gt;get_Font();</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Size(16);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">font-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a3663598d5c5858b5a6040b1bbed4f187" kindref="member">Underline::Dash</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphFormat&gt;<sp/>paragraphFormat<sp/>=<sp/>builder-&gt;get_ParagraphFormat();</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_FirstLineIndent(8);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4b425d212a2e7b36c38703bfdcd57823" kindref="member" tooltip="Text is aligned to both left and right.">ParagraphAlignment::Justify</ref>);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndAlpha(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_AddSpaceBetweenFarEastAndDigit(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paragraphFormat-&gt;set_KeepTogether(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;Writeln&quot;<sp/>method<sp/>ends<sp/>the<sp/>paragraph<sp/>after<sp/>appending<sp/>text</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>starts<sp/>a<sp/>new<sp/>line,<sp/>adding<sp/>a<sp/>new<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentParagraph()-&gt;get_IsEndOfDocument());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2260" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a44219ac8096ebe0481a8f0448e6c7bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertShape</definition>
        <argsstring>(Aspose::Words::Drawing::ShapeType shapeType, Aspose::Words::Drawing::RelativeHorizontalPosition horzPos, double left, Aspose::Words::Drawing::RelativeVerticalPosition vertPos, double top, double width, double height, Aspose::Words::Drawing::WrapType wrapType)</argsstring>
        <name>InsertShape</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertShape</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcc" kindref="member">Aspose::Words::Drawing::ShapeType</ref></type>
          <declname>shapeType</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93" kindref="member">Aspose::Words::Drawing::RelativeHorizontalPosition</ref></type>
          <declname>horzPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41d" kindref="member">Aspose::Words::Drawing::RelativeVerticalPosition</ref></type>
          <declname>vertPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99ba" kindref="member">Aspose::Words::Drawing::WrapType</ref></type>
          <declname>wrapType</declname>
        </param>
        <briefdescription>
<para>Inserts free-floating shape with specified position, size and text wrap type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shapeType</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape type to insert into the document </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horzPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the horizontal distance to the shape is measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the left side of the shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the vertical distance to the shape is measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the top side of the shape. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the shape in points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the shape in points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrapType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to wrap text around the shape.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The shape node that was inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert DML shapes into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>wrapping<sp/>types<sp/>that<sp/>shapes<sp/>may<sp/>have.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Floating:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertShape(ShapeType::TopCornersRounded,<sp/>RelativeHorizontalPosition::Page,<sp/>100,<sp/>RelativeVerticalPosition::Page,<sp/>100,<sp/>50,<sp/>50,<sp/>WrapType::None);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertShape(ShapeType::DiagonalCornersRounded,<sp/>50,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>need<sp/>to<sp/>create<sp/>&quot;non-primitive&quot;<sp/>shapes,<sp/>such<sp/>as<sp/>SingleCornerSnipped,<sp/>TopCornersSnipped,<sp/>DiagonalCornersSnipped,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>TopCornersOneRoundedOneSnipped,<sp/>SingleCornerRounded,<sp/>TopCornersRounded,<sp/>or<sp/>DiagonalCornersRounded,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>save<sp/>the<sp/>document<sp/>with<sp/>&quot;Strict&quot;<sp/>or<sp/>&quot;Transitional&quot;<sp/>compliance,<sp/>which<sp/>allows<sp/>saving<sp/>shape<sp/>as<sp/>DML.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>saveOptions<sp/>=<sp/>MakeObject&lt;OoxmlSaveOptions&gt;(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a21c22cc98b22ad080d57e7d8d847d8cb" kindref="member" tooltip="Saves the document as an Office Open XML WordprocessingML Document (macro-free).">SaveFormat::Docx</ref>);</highlight></codeline>
<codeline><highlight class="normal">saveOptions-&gt;set_Compliance(OoxmlCompliance::Iso29500_2008_Transitional);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Shape.ShapeInsertion.docx&quot;</highlight><highlight class="normal">,<sp/>saveOptions);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3980" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a8664af2fb90097d377474e03c8652f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertShape</definition>
        <argsstring>(Aspose::Words::Drawing::ShapeType shapeType, double width, double height)</argsstring>
        <name>InsertShape</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertShape</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a497d548e329ebb218fbc1754e4c74bcc" kindref="member">Aspose::Words::Drawing::ShapeType</ref></type>
          <declname>shapeType</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Inserts inline shape with specified type and size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shapeType</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape type to insert into the document. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the shape in points. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the shape in points.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The shape node that was inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert DML shapes into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Below<sp/>are<sp/>two<sp/>wrapping<sp/>types<sp/>that<sp/>shapes<sp/>may<sp/>have.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Floating:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertShape(ShapeType::TopCornersRounded,<sp/>RelativeHorizontalPosition::Page,<sp/>100,<sp/>RelativeVerticalPosition::Page,<sp/>100,<sp/>50,<sp/>50,<sp/>WrapType::None);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inline:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertShape(ShapeType::DiagonalCornersRounded,<sp/>50,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>need<sp/>to<sp/>create<sp/>&quot;non-primitive&quot;<sp/>shapes,<sp/>such<sp/>as<sp/>SingleCornerSnipped,<sp/>TopCornersSnipped,<sp/>DiagonalCornersSnipped,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>TopCornersOneRoundedOneSnipped,<sp/>SingleCornerRounded,<sp/>TopCornersRounded,<sp/>or<sp/>DiagonalCornersRounded,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>save<sp/>the<sp/>document<sp/>with<sp/>&quot;Strict&quot;<sp/>or<sp/>&quot;Transitional&quot;<sp/>compliance,<sp/>which<sp/>allows<sp/>saving<sp/>shape<sp/>as<sp/>DML.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>saveOptions<sp/>=<sp/>MakeObject&lt;OoxmlSaveOptions&gt;(<ref refid="namespace_aspose_1_1_words_1a115f4c887d1fbaa2cbe273d422f7e847a21c22cc98b22ad080d57e7d8d847d8cb" kindref="member" tooltip="Saves the document as an Office Open XML WordprocessingML Document (macro-free).">SaveFormat::Docx</ref>);</highlight></codeline>
<codeline><highlight class="normal">saveOptions-&gt;set_Compliance(OoxmlCompliance::Iso29500_2008_Transitional);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Shape.ShapeInsertion.docx&quot;</highlight><highlight class="normal">,<sp/>saveOptions);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="3943" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1adff2d798d05b5656c16e9bd20307eae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertSignatureLine</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::SignatureLineOptions &gt; &amp;signatureLineOptions)</argsstring>
        <name>InsertSignatureLine</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertSignatureLine</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_signature_line_options" kindref="compound">Aspose::Words::SignatureLineOptions</ref> &gt; &amp;</type>
          <declname>signatureLineOptions</declname>
        </param>
        <briefdescription>
<para>Inserts a signature line at the current position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signatureLineOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>The object that stores parameters of creating signature line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The signature line node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to sign a document with a personal certificate and a signature line. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>signatureLineOptions<sp/>=<sp/>MakeObject&lt;SignatureLineOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">signatureLineOptions-&gt;set_Signer(u</highlight><highlight class="stringliteral">&quot;vderyushev&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">signatureLineOptions-&gt;set_SignerTitle(u</highlight><highlight class="stringliteral">&quot;QA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">signatureLineOptions-&gt;set_Email(u</highlight><highlight class="stringliteral">&quot;vderyushev@aspose.com&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">signatureLineOptions-&gt;set_ShowDate(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">signatureLineOptions-&gt;set_DefaultInstructions(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">signatureLineOptions-&gt;set_Instructions(u</highlight><highlight class="stringliteral">&quot;Please<sp/>sign<sp/>here.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">signatureLineOptions-&gt;set_AllowComments(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;SignatureLine&gt;<sp/>signatureLine<sp/>=<sp/>builder-&gt;InsertSignatureLine(signatureLineOptions)-&gt;get_SignatureLine();</highlight></codeline>
<codeline><highlight class="normal">signatureLine-&gt;set_ProviderId(<ref refid="class/system.guid/_1a514508d9dd63f7eeb65ae305493f2411" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Guid::Parse</ref>(u</highlight><highlight class="stringliteral">&quot;CF5A7BB4-8F3C-4756-9DF6-BEF7F13259A2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(signatureLine-&gt;get_IsSigned());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_FALSE(signatureLine-&gt;get_IsValid());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SignatureLineProviderId.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>signOptions<sp/>=<sp/>MakeObject&lt;SignOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">signOptions-&gt;set_SignatureLineId(signatureLine-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal">signOptions-&gt;set_ProviderId(signatureLine-&gt;get_ProviderId());</highlight></codeline>
<codeline><highlight class="normal">signOptions-&gt;set_Comments(u</highlight><highlight class="stringliteral">&quot;Document<sp/>was<sp/>signed<sp/>by<sp/>vderyushev&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">signOptions-&gt;set_SignTime(<ref refid="class/system.date_time/_1aa3b77946fdc1a915b5108d572eb6866d" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::DateTime::get_Now</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CertificateHolder&gt;<sp/>certHolder<sp/>=<sp/>CertificateHolder::Create(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;morzal.pfx&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;aw&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">DigitalSignatureUtil::Sign(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SignatureLineProviderId.docx&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SignatureLineProviderId.Signed.docx&quot;</highlight><highlight class="normal">,<sp/>certHolder,<sp/>signOptions);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Re-open<sp/>our<sp/>saved<sp/>document,<sp/>and<sp/>verify<sp/>that<sp/>the<sp/>&quot;IsSigned&quot;<sp/>and<sp/>&quot;IsValid&quot;<sp/>properties<sp/>both<sp/>equal<sp/>&quot;true&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>indicating<sp/>that<sp/>the<sp/>signature<sp/>line<sp/>contains<sp/>a<sp/>signature.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc<sp/>=<sp/>MakeObject&lt;Document&gt;(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SignatureLineProviderId.Signed.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>System::DynamicCast&lt;Shape&gt;(doc-&gt;GetChild(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a880c1273b27d27cfc82004c3a4b205c9" kindref="member" tooltip="A drawing object, such as an OfficeArt shape, image or an OLE object. A Shape node can contain Paragr...">NodeType::Shape</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">signatureLine<sp/>=<sp/>shape-&gt;get_SignatureLine();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(signatureLine-&gt;get_IsSigned());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(signatureLine-&gt;get_IsValid());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4252" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1af85ee90a76f8fa862798eb076f9452e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Aspose::Words::Drawing::Shape</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Drawing::Shape &gt; Aspose::Words::DocumentBuilder::InsertSignatureLine</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::SignatureLineOptions &gt; &amp;signatureLineOptions, Aspose::Words::Drawing::RelativeHorizontalPosition horzPos, double left, Aspose::Words::Drawing::RelativeVerticalPosition vertPos, double top, Aspose::Words::Drawing::WrapType wrapType)</argsstring>
        <name>InsertSignatureLine</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertSignatureLine</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_signature_line_options" kindref="compound">Aspose::Words::SignatureLineOptions</ref> &gt; &amp;</type>
          <declname>signatureLineOptions</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8e90f9cda614a150f92b5fdac6e8bb93" kindref="member">Aspose::Words::Drawing::RelativeHorizontalPosition</ref></type>
          <declname>horzPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a8ced2882da57fa8603a594e7e959b41d" kindref="member">Aspose::Words::Drawing::RelativeVerticalPosition</ref></type>
          <declname>vertPos</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_drawing_1a211270c1edcc434e5a65e88553fa99ba" kindref="member">Aspose::Words::Drawing::WrapType</ref></type>
          <declname>wrapType</declname>
        </param>
        <briefdescription>
<para>Inserts a signature line at the specified position. </para>
        </briefdescription>
        <detaileddescription>
<para>You can change the image size, location, positioning method and other settings using the <ref refid="class_aspose_1_1_words_1_1_drawing_1_1_shape" kindref="compound">Shape</ref> object returned by this method.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signatureLineOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>The object that stores parameters of creating signature line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>horzPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the signature line is measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the left side of the signature line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vertPos</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies where the distance to the signature line measured from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Distance in points from the origin to the top side of the signature line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrapType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies how to wrap text around the signature line.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The signature line node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert an inline signature line into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>options<sp/>=<sp/>MakeObject&lt;SignatureLineOptions&gt;();</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_Signer(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_SignerTitle(u</highlight><highlight class="stringliteral">&quot;Manager&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_Email(u</highlight><highlight class="stringliteral">&quot;johndoe@aspose.com&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_ShowDate(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_DefaultInstructions(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_Instructions(u</highlight><highlight class="stringliteral">&quot;Please<sp/>sign<sp/>here.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">options-&gt;set_AllowComments(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertSignatureLine(options,<sp/>RelativeHorizontalPosition::RightMargin,<sp/>2.0,<sp/>RelativeVerticalPosition::Page,<sp/>3.0,<sp/>WrapType::Inline);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>signature<sp/>line<sp/>can<sp/>be<sp/>signed<sp/>in<sp/>Microsoft<sp/>Word<sp/>by<sp/>double<sp/>clicking<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SignatureLineInline.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4289" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a656843a07a6c53b11e61e41eb160443d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::InsertStyleSeparator</definition>
        <argsstring>()</argsstring>
        <name>InsertStyleSeparator</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertStyleSeparator</qualifiedname>
        <briefdescription>
<para>Inserts style separator into the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with style separators. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>paragraph<sp/>can<sp/>only<sp/>have<sp/>one<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>InsertStyleSeparator<sp/>method<sp/>allows<sp/>us<sp/>to<sp/>work<sp/>around<sp/>this<sp/>limitation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>in<sp/>a<sp/>Heading<sp/>style.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertStyleSeparator();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Style&gt;<sp/>paraStyle<sp/>=<sp/>builder-&gt;get_Document()-&gt;get_Styles()-&gt;Add(<ref refid="namespace_aspose_1_1_words_1a460532e21a1d6b973b05cec9f5a67b1bafeaf0a320c3d678ad30dd179b7d21584" kindref="member" tooltip="The style is a paragraph style.">StyleType::Paragraph</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyParaStyle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paraStyle-&gt;get_Font()-&gt;set_Bold(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">paraStyle-&gt;get_Font()-&gt;set_Size(8);</highlight></codeline>
<codeline><highlight class="normal">paraStyle-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleName(paraStyle-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;This<sp/>text<sp/>is<sp/>in<sp/>a<sp/>custom<sp/>style.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calling<sp/>the<sp/>InsertStyleSeparator<sp/>method<sp/>creates<sp/>another<sp/>paragraph,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>can<sp/>have<sp/>a<sp/>different<sp/>style<sp/>to<sp/>the<sp/>previous.<sp/>There<sp/>will<sp/>be<sp/>no<sp/>break<sp/>between<sp/>paragraphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>text<sp/>in<sp/>the<sp/>output<sp/>document<sp/>will<sp/>look<sp/>like<sp/>one<sp/>paragraph<sp/>with<sp/>two<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(2,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(0)-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;MyParaStyle&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs()-&gt;idx_get(1)-&gt;get_ParagraphFormat()-&gt;get_Style()-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertStyleSeparator.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2294" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a0ea777c70100ed16e3867ef5ef319fb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Aspose::Words::Fields::Field</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fields::Field &gt; Aspose::Words::DocumentBuilder::InsertTableOfContents</definition>
        <argsstring>(const System::String &amp;switches)</argsstring>
        <name>InsertTableOfContents</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertTableOfContents</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>switches</declname>
        </param>
        <briefdescription>
<para>Inserts a TOC (table of contents) field into the document. </para>
        </briefdescription>
        <detaileddescription>
<para>This method inserts a TOC (table of contents) field into the document at the current position.</para>
<para>A table of contents in a Word document can be built in a number of ways and formatted using a variety of options. The way the table is built and displayed by Microsoft Word is controlled by the field switches.</para>
<para>The easiest way to specify the switches is to insert and configure a table of contents into a Word document using the Insert-&gt;Reference-&gt;Index and <ref refid="namespace_aspose_1_1_words_1_1_tables" kindref="compound">Tables</ref> menu, then switch display of field codes on to see the switches. You can press Alt+F9 in Microsoft Word to toggle display of field codes on or off.</para>
<para>For example, after creating a table of contents, the following field is inserted into the document: <bold>%{ TOC \o &quot;1-3&quot; \h \z \u }</bold>. You can copy <bold>%\o &quot;1-3&quot; \h \z \u</bold> and use it as the switches parameter.</para>
<para>Note that <bold>InsertTableOfContents</bold> will only insert a TOC field, but will not actually build the table of contents. The table of contents is built by Microsoft Word when the field is updated.</para>
<para>If you insert a table of contents using this method and then open the file in Microsoft Word, you will not see the table of contents because the TOC field has not yet been updated.</para>
<para>In Microsoft Word, fields are not automatically updated when a document is opened, but you can update fields in a document at any time by pressing F9.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>switches</parametername>
</parameternamelist>
<parameterdescription>
<para>The TOC field switches.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a Table of contents (TOC) into a document using heading styles as entries. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>table<sp/>of<sp/>contents<sp/>for<sp/>the<sp/>first<sp/>page<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>table<sp/>to<sp/>pick<sp/>up<sp/>paragraphs<sp/>with<sp/>headings<sp/>of<sp/>levels<sp/>1<sp/>to<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>set<sp/>its<sp/>entries<sp/>to<sp/>be<sp/>hyperlinks<sp/>that<sp/>will<sp/>take<sp/>us</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>location<sp/>of<sp/>the<sp/>heading<sp/>when<sp/>left-clicked<sp/>in<sp/>Microsoft<sp/>Word.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTableOfContents(u</highlight><highlight class="stringliteral">&quot;\\o<sp/>\&quot;1-3\&quot;<sp/>\\h<sp/>\\z<sp/>\\u&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Populate<sp/>the<sp/>table<sp/>of<sp/>contents<sp/>by<sp/>adding<sp/>paragraphs<sp/>with<sp/>heading<sp/>styles.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>such<sp/>heading<sp/>with<sp/>a<sp/>level<sp/>between<sp/>1<sp/>and<sp/>3<sp/>will<sp/>create<sp/>an<sp/>entry<sp/>in<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a87f33c2e9209edfc0333a264ec3085a2" kindref="member" tooltip="The Heading 1 style.">StyleIdentifier::Heading1</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a5c20c643b1731618a5eddb7660b10a3e" kindref="member" tooltip="The Heading 3 style.">StyleIdentifier::Heading3</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a1418e44fe2e519f30b903c1fbf263097" kindref="member" tooltip="The Heading 4 style.">StyleIdentifier::Heading4</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3.1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.1.3.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34aa6bef18a8a766b5e3c9facc5b87ed2c8" kindref="member" tooltip="The Heading 2 style.">StyleIdentifier::Heading2</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Heading<sp/>3.3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>table<sp/>of<sp/>contents<sp/>is<sp/>a<sp/>field<sp/>of<sp/>a<sp/>type<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>updated<sp/>to<sp/>show<sp/>an<sp/>up-to-date<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;UpdateFields();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertToc.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2482" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1af13ffbcaa55fd2fe0d658dffce37b928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_form_field" kindref="compound">Aspose::Words::Fields::FormField</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Fields::FormField &gt; Aspose::Words::DocumentBuilder::InsertTextInput</definition>
        <argsstring>(const System::String &amp;name, Aspose::Words::Fields::TextFormFieldType type, const System::String &amp;format, const System::String &amp;fieldValue, int32_t maxLength)</argsstring>
        <name>InsertTextInput</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::InsertTextInput</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1_1_fields_1a36f189bc569a0916113383750bcd817f" kindref="member">Aspose::Words::Fields::TextFormFieldType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fieldValue</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>maxLength</declname>
        </param>
        <briefdescription>
<para>Inserts a text form field at the current position. </para>
        </briefdescription>
        <detaileddescription>
<para>If you specify a name for the form field, then a bookmark is automatically created with the same name.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the form field. Can be an empty string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the type of the text form field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string used to format the value of the form field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Text that will be shown in the field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum length the user can enter into the form field. Set to zero for unlimited length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The form field node that was just inserted.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create form fields. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Form<sp/>fields<sp/>are<sp/>objects<sp/>in<sp/>the<sp/>document<sp/>that<sp/>the<sp/>user<sp/>can<sp/>interact<sp/>with<sp/>by<sp/>being<sp/>prompted<sp/>to<sp/>enter<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>them<sp/>using<sp/>a<sp/>document<sp/>builder,<sp/>and<sp/>below<sp/>are<sp/>two<sp/>ways<sp/>of<sp/>doing<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Basic<sp/>text<sp/>input:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTextInput(u</highlight><highlight class="stringliteral">&quot;My<sp/>text<sp/>input&quot;</highlight><highlight class="normal">,<sp/>TextFormFieldType::Regular,<sp/>u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Enter<sp/>your<sp/>name<sp/>here&quot;</highlight><highlight class="normal">,<sp/>30);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Combo<sp/>box<sp/>with<sp/>prompt<sp/>text,<sp/>and<sp/>a<sp/>range<sp/>of<sp/>possible<sp/>values:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ArrayPtr&lt;String&gt;<sp/>items<sp/>=<sp/>MakeArray&lt;String&gt;({u</highlight><highlight class="stringliteral">&quot;--<sp/>Select<sp/>your<sp/>favorite<sp/>footwear<sp/>--&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Sneakers&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Oxfords&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Flip-flops&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Other&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertParagraph();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertComboBox(u</highlight><highlight class="stringliteral">&quot;My<sp/>combo<sp/>box&quot;</highlight><highlight class="normal">,<sp/>items,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Document()-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.CreateForm.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a text input form field into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>form<sp/>that<sp/>prompts<sp/>the<sp/>user<sp/>to<sp/>enter<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTextInput(u</highlight><highlight class="stringliteral">&quot;TextInput&quot;</highlight><highlight class="normal">,<sp/>TextFormFieldType::Regular,<sp/>u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Enter<sp/>your<sp/>text<sp/>here&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTextInput.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a text input form field. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Please<sp/>enter<sp/>text<sp/>here:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>text<sp/>input<sp/>field,<sp/>which<sp/>will<sp/>allow<sp/>the<sp/>user<sp/>to<sp/>click<sp/>it<sp/>and<sp/>enter<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assign<sp/>some<sp/>placeholder<sp/>text<sp/>that<sp/>the<sp/>user<sp/>may<sp/>overwrite<sp/>and<sp/>pass</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>maximum<sp/>text<sp/>length<sp/>of<sp/>0<sp/>to<sp/>apply<sp/>no<sp/>limit<sp/>on<sp/>the<sp/>form<sp/>field&apos;s<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertTextInput(u</highlight><highlight class="stringliteral">&quot;TextInput1&quot;</highlight><highlight class="normal">,<sp/>TextFormFieldType::Regular,<sp/>u</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Placeholder<sp/>text&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>form<sp/>field<sp/>will<sp/>appear<sp/>in<sp/>the<sp/>form<sp/>of<sp/>an<sp/>&quot;input&quot;<sp/>html<sp/>tag,<sp/>with<sp/>a<sp/>type<sp/>of<sp/>&quot;text&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;FormFields.TextInput.html&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2819" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a0f673a13986e4b5a7957266e05e77d20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::MoveTo</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Node &gt; &amp;node)</argsstring>
        <name>MoveTo</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveTo</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_node" kindref="compound">Aspose::Words::Node</ref> &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Moves the cursor to an inline node or to the end of a paragraph. </para>
        </briefdescription>
        <detaileddescription>
<para>When <emphasis>node</emphasis> is an inline-level node, the cursor is moved to this node and further content will be inserted before that node.</para>
<para>When <emphasis>node</emphasis> is a <bold>Paragraph</bold>, the cursor is moved to the end of the paragraph and further content will be inserted just before the paragraph break.</para>
<para>When <emphasis>node</emphasis> is a block-level node but not a <ref refid="class_aspose_1_1_words_1_1_paragraph" kindref="compound">Paragraph</ref>, the cursor is moved to the end of the first paragraph into block-level node and further content will be inserted just before the paragraph break.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>The node must be a paragraph or a direct child of a paragraph.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s cursor to different nodes in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>valid<sp/>bookmark,<sp/>an<sp/>entity<sp/>that<sp/>consists<sp/>of<sp/>nodes<sp/>enclosed<sp/>by<sp/>a<sp/>bookmark<sp/>start<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>a<sp/>bookmark<sp/>end<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>firstParagraphNodes<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ChildNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>firstParagraphNodes-&gt;idx_get(0)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379acf68b65492c5c8b1aa801725023836c0" kindref="member" tooltip="An end of a bookmark marker.">NodeType::BookmarkEnd</ref>,<sp/>firstParagraphNodes-&gt;idx_get(2)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>always<sp/>ahead<sp/>of<sp/>the<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document,<sp/>its<sp/>current<sp/>node<sp/>will<sp/>be<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>previous<sp/>node<sp/>is<sp/>the<sp/>bookmark<sp/>end<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>new<sp/>nodes<sp/>with<sp/>the<sp/>builder<sp/>will<sp/>append<sp/>them<sp/>to<sp/>the<sp/>last<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>a<sp/>different<sp/>part<sp/>of<sp/>the<sp/>document<sp/>with<sp/>the<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>bring<sp/>its<sp/>cursor<sp/>to<sp/>the<sp/>node<sp/>we<sp/>wish<sp/>to<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moving<sp/>it<sp/>to<sp/>a<sp/>bookmark<sp/>will<sp/>move<sp/>it<sp/>to<sp/>the<sp/>first<sp/>node<sp/>within<sp/>the<sp/>bookmark<sp/>start<sp/>and<sp/>end<sp/>nodes,<sp/>the<sp/>enclosed<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(firstParagraphNodes-&gt;idx_get(1),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>an<sp/>individual<sp/>node<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>builder-&gt;get_CurrentNode()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>builder-&gt;get_CurrentParagraph());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>specific<sp/>methods<sp/>to<sp/>move<sp/>to<sp/>the<sp/>start/end<sp/>of<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtEndOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentStart();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
</programlisting></para>
<para>Shows how to move a <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>&apos;s cursor position to a specified node. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Run<sp/>1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder<sp/>has<sp/>a<sp/>cursor,<sp/>which<sp/>acts<sp/>as<sp/>the<sp/>part<sp/>of<sp/>the<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>the<sp/>builder<sp/>appends<sp/>new<sp/>nodes<sp/>when<sp/>we<sp/>use<sp/>its<sp/>document<sp/>construction<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>cursor<sp/>functions<sp/>in<sp/>the<sp/>same<sp/>way<sp/>as<sp/>Microsoft<sp/>Word&apos;s<sp/>blinking<sp/>cursor,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>it<sp/>also<sp/>always<sp/>ends<sp/>up<sp/>immediately<sp/>after<sp/>any<sp/>node<sp/>that<sp/>the<sp/>builder<sp/>just<sp/>inserted.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>append<sp/>content<sp/>to<sp/>a<sp/>different<sp/>part<sp/>of<sp/>the<sp/>document,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>can<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>a<sp/>different<sp/>node<sp/>with<sp/>the<sp/>&quot;MoveTo&quot;<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_Runs()-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>cursor<sp/>is<sp/>now<sp/>in<sp/>front<sp/>of<sp/>the<sp/>node<sp/>that<sp/>we<sp/>moved<sp/>it<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>a<sp/>second<sp/>run<sp/>will<sp/>insert<sp/>it<sp/>in<sp/>front<sp/>of<sp/>the<sp/>first<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Run<sp/>2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Run<sp/>2.<sp/>\rRun<sp/>1.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>cursor<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document<sp/>to<sp/>continue<sp/>appending<sp/>text<sp/>to<sp/>the<sp/>end<sp/>as<sp/>before.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(doc-&gt;get_LastSection()-&gt;get_Body()-&gt;get_LastParagraph());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Run<sp/>3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Run<sp/>2.<sp/>\rRun<sp/>1.<sp/>\rRun<sp/>3.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1954" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a28c8f3fb7e5688bfac7b697ae8f6e0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::DocumentBuilder::MoveToBookmark</definition>
        <argsstring>(const System::String &amp;bookmarkName)</argsstring>
        <name>MoveToBookmark</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToBookmark</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>bookmarkName</declname>
        </param>
        <briefdescription>
<para>Moves the cursor to a bookmark. </para>
        </briefdescription>
        <detaileddescription>
<para>Moves the cursor to a position just after the start of the bookmark with the specified name.</para>
<para>The comparison is not case-sensitive. If the bookmark was not found, false is returned and the cursor is not moved.</para>
<para>Inserting new text does not replace existing text of the bookmark.</para>
<para>Note that some bookmarks in the document are assigned to form fields. Moving to such a bookmark and inserting text there inserts the text into the form field code. Although this will not invalidate the form field, the inserted text will not be visible because it becomes part of the field code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bookmarkName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the bookmark to move the cursor to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the bookmark was found; false otherwise.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s cursor to different nodes in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>valid<sp/>bookmark,<sp/>an<sp/>entity<sp/>that<sp/>consists<sp/>of<sp/>nodes<sp/>enclosed<sp/>by<sp/>a<sp/>bookmark<sp/>start<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>a<sp/>bookmark<sp/>end<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>firstParagraphNodes<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ChildNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>firstParagraphNodes-&gt;idx_get(0)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379acf68b65492c5c8b1aa801725023836c0" kindref="member" tooltip="An end of a bookmark marker.">NodeType::BookmarkEnd</ref>,<sp/>firstParagraphNodes-&gt;idx_get(2)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>always<sp/>ahead<sp/>of<sp/>the<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document,<sp/>its<sp/>current<sp/>node<sp/>will<sp/>be<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>previous<sp/>node<sp/>is<sp/>the<sp/>bookmark<sp/>end<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>new<sp/>nodes<sp/>with<sp/>the<sp/>builder<sp/>will<sp/>append<sp/>them<sp/>to<sp/>the<sp/>last<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>a<sp/>different<sp/>part<sp/>of<sp/>the<sp/>document<sp/>with<sp/>the<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>bring<sp/>its<sp/>cursor<sp/>to<sp/>the<sp/>node<sp/>we<sp/>wish<sp/>to<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moving<sp/>it<sp/>to<sp/>a<sp/>bookmark<sp/>will<sp/>move<sp/>it<sp/>to<sp/>the<sp/>first<sp/>node<sp/>within<sp/>the<sp/>bookmark<sp/>start<sp/>and<sp/>end<sp/>nodes,<sp/>the<sp/>enclosed<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(firstParagraphNodes-&gt;idx_get(1),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>an<sp/>individual<sp/>node<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>builder-&gt;get_CurrentNode()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>builder-&gt;get_CurrentParagraph());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>specific<sp/>methods<sp/>to<sp/>move<sp/>to<sp/>the<sp/>start/end<sp/>of<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtEndOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentStart();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1716" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a54076e2608fb5e53553442a515f4094c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::DocumentBuilder::MoveToBookmark</definition>
        <argsstring>(const System::String &amp;bookmarkName, bool isStart, bool isAfter)</argsstring>
        <name>MoveToBookmark</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToBookmark</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>bookmarkName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isStart</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isAfter</declname>
        </param>
        <briefdescription>
<para>Moves the cursor to a bookmark with greater precision. </para>
        </briefdescription>
        <detaileddescription>
<para>Moves the cursor to a position before or after the bookmark start or end.</para>
<para>If desired position is not at inline level, moves to the next paragraph.</para>
<para>The comparison is not case-sensitive. If the bookmark was not found, false is returned and the cursor is not moved.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bookmarkName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the bookmark to move the cursor to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isStart</parametername>
</parameternamelist>
<parameterdescription>
<para>When true, moves the cursor to the beginning of the bookmark. When false, moves the cursor to the end of the bookmark. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isAfter</parametername>
</parameternamelist>
<parameterdescription>
<para>When true, moves the cursor to be after the bookmark start or end position. When false, moves the cursor to be before the bookmark start or end position.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the bookmark was found; false otherwise.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s node insertion point cursor to a bookmark. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>valid<sp/>bookmark<sp/>consists<sp/>of<sp/>a<sp/>BookmarkStart<sp/>node,<sp/>a<sp/>BookmarkEnd<sp/>node<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>matching<sp/>bookmark<sp/>name<sp/>somewhere<sp/>afterward,<sp/>and<sp/>contents<sp/>enclosed<sp/>by<sp/>those<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>4<sp/>ways<sp/>of<sp/>moving<sp/>a<sp/>document<sp/>builder&apos;s<sp/>cursor<sp/>to<sp/>a<sp/>bookmark.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>are<sp/>between<sp/>the<sp/>BookmarkStart<sp/>and<sp/>BookmarkEnd<sp/>nodes,<sp/>the<sp/>cursor<sp/>will<sp/>be<sp/>inside<sp/>the<sp/>bookmark.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>means<sp/>that<sp/>any<sp/>text<sp/>added<sp/>by<sp/>the<sp/>builder<sp/>will<sp/>become<sp/>a<sp/>part<sp/>of<sp/>the<sp/>bookmark.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>-<sp/><sp/>Outside<sp/>of<sp/>the<sp/>bookmark,<sp/>in<sp/>front<sp/>of<sp/>the<sp/>BookmarkStart<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;1.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Bookmarks()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">)-&gt;get_Text());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;1.<sp/>Hello<sp/>world!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inside<sp/>the<sp/>bookmark,<sp/>right<sp/>after<sp/>the<sp/>BookmarkStart<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;2.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;2.<sp/>Hello<sp/>world!<sp/>&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Bookmarks()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">)-&gt;get_Text());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;1.<sp/>2.<sp/>Hello<sp/>world!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2<sp/>-<sp/><sp/>Inside<sp/>the<sp/>bookmark,<sp/>right<sp/>in<sp/>front<sp/>of<sp/>the<sp/>BookmarkEnd<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;3.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;2.<sp/>Hello<sp/>world!<sp/>3.<sp/>&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Bookmarks()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">)-&gt;get_Text());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;1.<sp/>2.<sp/>Hello<sp/>world!<sp/>3.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>4<sp/>-<sp/><sp/>Outside<sp/>of<sp/>the<sp/>bookmark,<sp/>after<sp/>the<sp/>BookmarkEnd<sp/>node:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;4.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;2.<sp/>Hello<sp/>world!<sp/>3.<sp/>&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Bookmarks()-&gt;idx_get(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">)-&gt;get_Text());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;1.<sp/>2.<sp/>Hello<sp/>world!<sp/>3.<sp/>4.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1780" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aec7fe7cdcde66fbce497014a27c6a426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::MoveToCell</definition>
        <argsstring>(int32_t tableIndex, int32_t rowIndex, int32_t columnIndex, int32_t characterIndex)</argsstring>
        <name>MoveToCell</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToCell</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>tableIndex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>rowIndex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>columnIndex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>characterIndex</declname>
        </param>
        <briefdescription>
<para>Moves the cursor to a table cell in the current section. </para>
        </briefdescription>
        <detaileddescription>
<para>The navigation is performed inside the current story of the current section.</para>
<para>For the index parameters, when index is greater than or equal to 0, it specifies an index from the beginning with 0 being the first element. When index is less than 0, it specified an index from the end with -1 being the last element.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tableIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the table to move to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the row in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columnIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the column in the table. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>characterIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the character inside the cell. A negative value allows you to specify a position from the end of the cell. Use -1 to move to the end of the cell.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s cursor to a cell in a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>an<sp/>empty<sp/>2x2<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Because<sp/>we<sp/>have<sp/>ended<sp/>the<sp/>table<sp/>with<sp/>the<sp/>EndTable<sp/>method,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>document<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>currently<sp/>outside<sp/>the<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>cursor<sp/>has<sp/>the<sp/>same<sp/>function<sp/>as<sp/>Microsoft<sp/>Word&apos;s<sp/>blinking<sp/>text<sp/>cursor.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>also<sp/>be<sp/>moved<sp/>to<sp/>a<sp/>different<sp/>location<sp/>in<sp/>the<sp/>document<sp/>using<sp/>the<sp/>builder&apos;s<sp/>MoveTo<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>move<sp/>the<sp/>cursor<sp/>back<sp/>inside<sp/>the<sp/>table<sp/>to<sp/>a<sp/>specific<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToCell(0,<sp/>1,<sp/>1,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Column<sp/>2,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.MoveToCell.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1863" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a06de091c8b56ce18eff0a1a822420647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::MoveToDocumentEnd</definition>
        <argsstring>()</argsstring>
        <name>MoveToDocumentEnd</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToDocumentEnd</qualifiedname>
        <briefdescription>
<para>Moves the cursor to the end of the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s cursor to different nodes in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>valid<sp/>bookmark,<sp/>an<sp/>entity<sp/>that<sp/>consists<sp/>of<sp/>nodes<sp/>enclosed<sp/>by<sp/>a<sp/>bookmark<sp/>start<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>a<sp/>bookmark<sp/>end<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>firstParagraphNodes<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ChildNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>firstParagraphNodes-&gt;idx_get(0)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379acf68b65492c5c8b1aa801725023836c0" kindref="member" tooltip="An end of a bookmark marker.">NodeType::BookmarkEnd</ref>,<sp/>firstParagraphNodes-&gt;idx_get(2)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>always<sp/>ahead<sp/>of<sp/>the<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document,<sp/>its<sp/>current<sp/>node<sp/>will<sp/>be<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>previous<sp/>node<sp/>is<sp/>the<sp/>bookmark<sp/>end<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>new<sp/>nodes<sp/>with<sp/>the<sp/>builder<sp/>will<sp/>append<sp/>them<sp/>to<sp/>the<sp/>last<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>a<sp/>different<sp/>part<sp/>of<sp/>the<sp/>document<sp/>with<sp/>the<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>bring<sp/>its<sp/>cursor<sp/>to<sp/>the<sp/>node<sp/>we<sp/>wish<sp/>to<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moving<sp/>it<sp/>to<sp/>a<sp/>bookmark<sp/>will<sp/>move<sp/>it<sp/>to<sp/>the<sp/>first<sp/>node<sp/>within<sp/>the<sp/>bookmark<sp/>start<sp/>and<sp/>end<sp/>nodes,<sp/>the<sp/>enclosed<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(firstParagraphNodes-&gt;idx_get(1),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>an<sp/>individual<sp/>node<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>builder-&gt;get_CurrentNode()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>builder-&gt;get_CurrentParagraph());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>specific<sp/>methods<sp/>to<sp/>move<sp/>to<sp/>the<sp/>start/end<sp/>of<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtEndOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentStart();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1425" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a883df72569ee5de6693962198ce8a93f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::MoveToDocumentStart</definition>
        <argsstring>()</argsstring>
        <name>MoveToDocumentStart</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToDocumentStart</qualifiedname>
        <briefdescription>
<para>Moves the cursor to the beginning of the document. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s cursor to different nodes in a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>valid<sp/>bookmark,<sp/>an<sp/>entity<sp/>that<sp/>consists<sp/>of<sp/>nodes<sp/>enclosed<sp/>by<sp/>a<sp/>bookmark<sp/>start<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>a<sp/>bookmark<sp/>end<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;NodeCollection&gt;<sp/>firstParagraphNodes<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;get_ChildNodes();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>firstParagraphNodes-&gt;idx_get(0)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ac5301693c4e792bcd5a479ef38fb8f8d" kindref="member" tooltip="A run of text.">NodeType::Run</ref>,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Bookmark<sp/>contents.&quot;</highlight><highlight class="normal">,<sp/>firstParagraphNodes-&gt;idx_get(1)-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379acf68b65492c5c8b1aa801725023836c0" kindref="member" tooltip="An end of a bookmark marker.">NodeType::BookmarkEnd</ref>,<sp/>firstParagraphNodes-&gt;idx_get(2)-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>document<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>always<sp/>ahead<sp/>of<sp/>the<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>document,<sp/>its<sp/>current<sp/>node<sp/>will<sp/>be<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>previous<sp/>node<sp/>is<sp/>the<sp/>bookmark<sp/>end<sp/>node<sp/>that<sp/>we<sp/>last<sp/>added.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adding<sp/>new<sp/>nodes<sp/>with<sp/>the<sp/>builder<sp/>will<sp/>append<sp/>them<sp/>to<sp/>the<sp/>last<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>a<sp/>different<sp/>part<sp/>of<sp/>the<sp/>document<sp/>with<sp/>the<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>will<sp/>need<sp/>to<sp/>bring<sp/>its<sp/>cursor<sp/>to<sp/>the<sp/>node<sp/>we<sp/>wish<sp/>to<sp/>edit.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Moving<sp/>it<sp/>to<sp/>a<sp/>bookmark<sp/>will<sp/>move<sp/>it<sp/>to<sp/>the<sp/>first<sp/>node<sp/>within<sp/>the<sp/>bookmark<sp/>start<sp/>and<sp/>end<sp/>nodes,<sp/>the<sp/>enclosed<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(firstParagraphNodes-&gt;idx_get(1),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>also<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>an<sp/>individual<sp/>node<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveTo(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph()-&gt;GetChildNodes(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379aed36a1ef76a59ee3f15180e0441188ad" kindref="member" tooltip="Indicates all node types. Allows to select all children.">NodeType::Any</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)-&gt;idx_get(0));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ad67c32ed140020eb5c069e6ce87f3aa3" kindref="member" tooltip="A beginning of a bookmark marker.">NodeType::BookmarkStart</ref>,<sp/>builder-&gt;get_CurrentNode()-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_FirstParagraph(),<sp/>builder-&gt;get_CurrentParagraph());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>use<sp/>specific<sp/>methods<sp/>to<sp/>move<sp/>to<sp/>the<sp/>start/end<sp/>of<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentEnd();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtEndOfParagraph());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToDocumentStart();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_IsAtStartOfParagraph());</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1372" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1acd723f7e70469ff76bd8b34e66d570f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::MoveToField</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Fields::Field &gt; &amp;field, bool isAfter)</argsstring>
        <name>MoveToField</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToField</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_fields_1_1_field" kindref="compound">Aspose::Words::Fields::Field</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isAfter</declname>
        </param>
        <briefdescription>
<para>Moves the cursor to a field in the document. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>field</parametername>
</parameternamelist>
<parameterdescription>
<para>The field to move the cursor to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isAfter</parametername>
</parameternamelist>
<parameterdescription>
<para>When true, moves the cursor to be after the field end. When false, moves the cursor to be before the field start.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a document builder&apos;s node insertion point cursor to a specific field. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>field<sp/>using<sp/>the<sp/>DocumentBuilder<sp/>and<sp/>add<sp/>a<sp/>run<sp/>of<sp/>text<sp/>after<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Field&gt;<sp/>field<sp/>=<sp/>builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>AUTHOR<sp/>\&quot;John<sp/>Doe\&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder&apos;s<sp/>cursor<sp/>is<sp/>currently<sp/>at<sp/>end<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_TRUE(builder-&gt;get_CurrentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>cursor<sp/>to<sp/>the<sp/>field<sp/>while<sp/>specifying<sp/>whether<sp/>to<sp/>place<sp/>that<sp/>cursor<sp/>before<sp/>or<sp/>after<sp/>the<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToField(field,<sp/>moveCursorToAfterTheField);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>cursor<sp/>is<sp/>outside<sp/>of<sp/>the<sp/>field<sp/>in<sp/>both<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>means<sp/>that<sp/>we<sp/>cannot<sp/>edit<sp/>the<sp/>field<sp/>using<sp/>the<sp/>builder<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>edit<sp/>a<sp/>field,<sp/>we<sp/>can<sp/>use<sp/>the<sp/>builder&apos;s<sp/>MoveTo<sp/>method<sp/>on<sp/>a<sp/>field&apos;s<sp/>FieldStart</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>FieldSeparator<sp/>node<sp/>to<sp/>place<sp/>the<sp/>cursor<sp/>inside.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(moveCursorToAfterTheField)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(builder-&gt;get_CurrentNode()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>Text<sp/>immediately<sp/>after<sp/>the<sp/>field.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;\u0013<sp/>AUTHOR<sp/>\&quot;John<sp/>Doe\&quot;<sp/>\u0014John<sp/>Doe\u0015<sp/>Text<sp/>immediately<sp/>after<sp/>the<sp/>field.&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASPOSE_ASSERT_EQ(field-&gt;get_Start(),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>immediately<sp/>before<sp/>the<sp/>field.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Text<sp/>immediately<sp/>before<sp/>the<sp/>field.<sp/>\u0013<sp/>AUTHOR<sp/>\&quot;John<sp/>Doe\&quot;<sp/>\u0014John<sp/>Doe\u0015&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;GetText().Trim());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1646" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a7a7e4a62578b022e5b201ab55c4dd658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::MoveToHeaderFooter</definition>
        <argsstring>(Aspose::Words::HeaderFooterType headerFooterType)</argsstring>
        <name>MoveToHeaderFooter</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToHeaderFooter</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69" kindref="member">Aspose::Words::HeaderFooterType</ref></type>
          <declname>headerFooterType</declname>
        </param>
        <briefdescription>
<para>Moves the cursor to the beginning of a header or footer in the current section. </para>
        </briefdescription>
        <detaileddescription>
<para>After you moved the cursor into a header or footer, you can use the rest of <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref> methods to modify the contents of the header or footer.</para>
<para>If you want to create headers and footers different for the first page, you need to set <ref refid="class_aspose_1_1_words_1_1_page_setup_1a5d67014720e6adf5affd5c733d8b1693" kindref="member">DifferentFirstPageHeaderFooter</ref>.</para>
<para>If you want to create headers and footers different for even and odd pages, you need to set <ref refid="class_aspose_1_1_words_1_1_page_setup_1ae895431419dba856a6a92beaedf2a0d7" kindref="member">OddAndEvenPagesHeaderFooter</ref>.</para>
<para>Use <ref refid="class_aspose_1_1_words_1_1_document_builder_1a415920fd3d8356ac7e6abbc41bc61a12" kindref="member">MoveToSection()</ref> to move out of the header into the main text.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>headerFooterType</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the header or footer to move to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create headers and footers in a document using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>that<sp/>we<sp/>want<sp/>different<sp/>headers<sp/>and<sp/>footers<sp/>for<sp/>first,<sp/>even<sp/>and<sp/>odd<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_DifferentFirstPageHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_OddAndEvenPagesHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>headers,<sp/>then<sp/>add<sp/>three<sp/>pages<sp/>to<sp/>the<sp/>document<sp/>to<sp/>display<sp/>each<sp/>header<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a545b1c922d56aca91ca2080eed0d7913" kindref="member" tooltip="Header for the first page of the section.">HeaderFooterType::HeaderFirst</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>the<sp/>first<sp/>page&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69adfe2914bbaa51fcbf35bdb65ac3865d6" kindref="member" tooltip="Header for even numbered pages.">HeaderFooterType::HeaderEven</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>even<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>all<sp/>other<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.HeadersAndFooters.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to insert an image, and use it as a watermark. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>the<sp/>image<sp/>into<sp/>the<sp/>header<sp/>so<sp/>that<sp/>it<sp/>will<sp/>be<sp/>visible<sp/>on<sp/>every<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;System::Drawing::Image&gt;<sp/>image<sp/>=<sp/><ref refid="class/system.drawing.image/_1a744ad35e2fcb00393fb7ce4e24e59263" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Image::FromFile</ref>(ImageDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Transparent<sp/>background<sp/>logo.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Shape&gt;<sp/>shape<sp/>=<sp/>builder-&gt;InsertImage(image);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_WrapType(WrapType::None);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_BehindText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Place<sp/>the<sp/>image<sp/>at<sp/>the<sp/>center<sp/>of<sp/>the<sp/>page.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_RelativeHorizontalPosition(RelativeHorizontalPosition::Page);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_RelativeVerticalPosition(RelativeVerticalPosition::Page);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Left((builder-&gt;get_PageSetup()-&gt;get_PageWidth()<sp/>-<sp/>shape-&gt;get_Width())<sp/>/<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">shape-&gt;set_Top((builder-&gt;get_PageSetup()-&gt;get_PageHeight()<sp/>-<sp/>shape-&gt;get_Height())<sp/>/<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertWatermark.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1531" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1adab9c4d64a5343999008d6140d8b60d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::DocumentBuilder::MoveToMergeField</definition>
        <argsstring>(const System::String &amp;fieldName)</argsstring>
        <name>MoveToMergeField</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToMergeField</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <briefdescription>
<para>Moves the cursor to a position just beyond the specified merge field and removes the merge field. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this method deletes the merge field from the document after moving the cursor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fieldName</parametername>
</parameternamelist>
<parameterdescription>
<para>The case-insensitive name of the mail merge field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the merge field was found and the cursor was moved; false otherwise.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to fill MERGEFIELDs with data with a document builder instead of a mail merge. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>some<sp/>MERGEFIELDS,<sp/>which<sp/>accept<sp/>data<sp/>from<sp/>columns<sp/>of<sp/>the<sp/>same<sp/>name<sp/>in<sp/>a<sp/>data<sp/>source<sp/>during<sp/>a<sp/>mail<sp/>merge,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>fill<sp/>them<sp/>manually.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>Chairman<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>ChiefFinancialOfficer<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;<sp/>MERGEFIELD<sp/>ChiefTechnologyOfficer<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;Chairman&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;set_Bold(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;John<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;ChiefFinancialOfficer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;set_Italic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Jane<sp/>Doe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;ChiefTechnologyOfficer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;set_Italic(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;John<sp/>Bloggs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.FillMergeFields.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1568" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ad924a5b4551935f70748aad8e57ba5f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Aspose::Words::DocumentBuilder::MoveToMergeField</definition>
        <argsstring>(const System::String &amp;fieldName, bool isAfter, bool isDeleteField)</argsstring>
        <name>MoveToMergeField</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToMergeField</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>fieldName</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isAfter</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isDeleteField</declname>
        </param>
        <briefdescription>
<para>Moves the merge field to the specified merge field. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fieldName</parametername>
</parameternamelist>
<parameterdescription>
<para>The case-insensitive name of the mail merge field. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isAfter</parametername>
</parameternamelist>
<parameterdescription>
<para>When true, moves the cursor to be after the field end. When false, moves the cursor to be before the field start. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isDeleteField</parametername>
</parameternamelist>
<parameterdescription>
<para>When true, deletes the merge field.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the merge field was found and the cursor was moved; false otherwise.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert fields, and move the document builder&apos;s cursor to them. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;MERGEFIELD<sp/>MyMergeField1<sp/>\\*<sp/>MERGEFORMAT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertField(u</highlight><highlight class="stringliteral">&quot;MERGEFIELD<sp/>MyMergeField2<sp/>\\*<sp/>MERGEFORMAT&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>cursor<sp/>to<sp/>the<sp/>first<sp/>MERGEFIELD.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToMergeField(u</highlight><highlight class="stringliteral">&quot;MyMergeField1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>cursor<sp/>is<sp/>placed<sp/>immediately<sp/>after<sp/>the<sp/>first<sp/>MERGEFIELD,<sp/>and<sp/>before<sp/>the<sp/>second.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(1)-&gt;get_Start(),<sp/>builder-&gt;get_CurrentNode());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(doc-&gt;get_Range()-&gt;get_Fields()-&gt;idx_get(0)-&gt;get_End(),<sp/>builder-&gt;get_CurrentNode()-&gt;get_PreviousSibling());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>wish<sp/>to<sp/>edit<sp/>the<sp/>field&apos;s<sp/>field<sp/>code<sp/>or<sp/>contents<sp/>using<sp/>the<sp/>builder,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>its<sp/>cursor<sp/>would<sp/>need<sp/>to<sp/>be<sp/>inside<sp/>a<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>place<sp/>it<sp/>inside<sp/>a<sp/>field,<sp/>we<sp/>would<sp/>need<sp/>to<sp/>call<sp/>the<sp/>document<sp/>builder&apos;s<sp/>MoveTo<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>pass<sp/>the<sp/>field&apos;s<sp/>start<sp/>or<sp/>separator<sp/>node<sp/>as<sp/>an<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;<sp/>Text<sp/>between<sp/>our<sp/>merge<sp/>fields.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.MergeFields.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1603" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a47f4661fa21baca0fa4b694f4058a674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::MoveToParagraph</definition>
        <argsstring>(int32_t paragraphIndex, int32_t characterIndex)</argsstring>
        <name>MoveToParagraph</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToParagraph</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>paragraphIndex</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>characterIndex</declname>
        </param>
        <briefdescription>
<para>Moves the cursor to a paragraph in the current section. </para>
        </briefdescription>
        <detaileddescription>
<para>The navigation is performed inside the current story of the current section. That is, if you moved the cursor to the primary header of the first section, then paragraphIndex specified the index of the paragraph inside that header of that section.</para>
<para>When paragraphIndex is greater than or equal to 0, it specifies an index from the beginning of the section with 0 being the first paragraph. When paragraphIndex is less than 0, it specified an index from the end of the section with -1 being the last paragraph.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paragraphIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the paragraph to move to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>characterIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the character inside the paragraph. A negative value allows you to specify a position from the end of the paragraph. Use -1 to move to the end of the paragraph.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to move a builder&apos;s cursor position to a specified paragraph. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;(MyDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Paragraphs.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;ParagraphCollection&gt;<sp/>paragraphs<sp/>=<sp/>doc-&gt;get_FirstSection()-&gt;get_Body()-&gt;get_Paragraphs();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(22,<sp/>paragraphs-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>document<sp/>builder<sp/>to<sp/>edit<sp/>the<sp/>document.<sp/>The<sp/>builder&apos;s<sp/>cursor,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>the<sp/>point<sp/>where<sp/>it<sp/>will<sp/>insert<sp/>new<sp/>nodes<sp/>when<sp/>we<sp/>call<sp/>its<sp/>document<sp/>construction<sp/>methods,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>currently<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(0,<sp/>paragraphs-&gt;IndexOf(builder-&gt;get_CurrentParagraph()));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Move<sp/>that<sp/>cursor<sp/>to<sp/>a<sp/>different<sp/>paragraph<sp/>will<sp/>place<sp/>that<sp/>cursor<sp/>in<sp/>front<sp/>of<sp/>that<sp/>paragraph.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToParagraph(2,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Any<sp/>new<sp/>content<sp/>that<sp/>we<sp/>add<sp/>will<sp/>be<sp/>inserted<sp/>at<sp/>that<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>new<sp/>third<sp/>paragraph.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1820" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a415920fd3d8356ac7e6abbc41bc61a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::MoveToSection</definition>
        <argsstring>(int32_t sectionIndex)</argsstring>
        <name>MoveToSection</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::MoveToSection</qualifiedname>
        <param>
          <type>int32_t</type>
          <declname>sectionIndex</declname>
        </param>
        <briefdescription>
<para>Moves the cursor to the beginning of the body in a specified section. </para>
        </briefdescription>
        <detaileddescription>
<para>When sectionIndex is greater than or equal to 0, it specifies an index from the beginning of the document with 0 being the first section. When sectionIndex is less than 0, it specified an index from the end of the document with -1 being the last section.</para>
<para>The cursor is moved to the first paragraph in the <bold>Body</bold> of the specified section.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sectionIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the section to move to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create headers and footers in a document using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>that<sp/>we<sp/>want<sp/>different<sp/>headers<sp/>and<sp/>footers<sp/>for<sp/>first,<sp/>even<sp/>and<sp/>odd<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_DifferentFirstPageHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_OddAndEvenPagesHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>headers,<sp/>then<sp/>add<sp/>three<sp/>pages<sp/>to<sp/>the<sp/>document<sp/>to<sp/>display<sp/>each<sp/>header<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a545b1c922d56aca91ca2080eed0d7913" kindref="member" tooltip="Header for the first page of the section.">HeaderFooterType::HeaderFirst</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>the<sp/>first<sp/>page&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69adfe2914bbaa51fcbf35bdb65ac3865d6" kindref="member" tooltip="Header for even numbered pages.">HeaderFooterType::HeaderEven</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>even<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>all<sp/>other<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.HeadersAndFooters.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="1465" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a5c8c7add514c77ac40e84ae43801b162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::PopFont</definition>
        <argsstring>()</argsstring>
        <name>PopFont</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::PopFont</qualifiedname>
        <briefdescription>
<para>Retrieves character formatting previously saved on the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_builder_1a49bd68eef34fcb42a305e7197c476fe5" kindref="member">Aspose::Words::DocumentBuilder::get_Font</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_builder_1a88c174a51a51692e5f4fb559a4cb80c5" kindref="member">Aspose::Words::DocumentBuilder::PushFont</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use a document builder&apos;s formatting stack. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>font<sp/>formatting,<sp/>then<sp/>write<sp/>the<sp/>text<sp/>that<sp/>goes<sp/>before<sp/>the<sp/>hyperlink.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;To<sp/>visit<sp/>Google,<sp/>hold<sp/>Ctrl<sp/>and<sp/>click<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Preserve<sp/>our<sp/>current<sp/>formatting<sp/>configuration<sp/>on<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;PushFont();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Alter<sp/>the<sp/>builder&apos;s<sp/>current<sp/>formatting<sp/>by<sp/>applying<sp/>a<sp/>new<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a79cd387280b73179eee47b96dadafc7b" kindref="member" tooltip="The Hyperlink style.">StyleIdentifier::Hyperlink</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHyperlink(u</highlight><highlight class="stringliteral">&quot;here&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;http://www.google.com&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>().ToArgb(),<sp/>builder-&gt;get_Font()-&gt;get_Color().ToArgb());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a66ba162102bbf6ae31b522aec561735e" kindref="member">Underline::Single</ref>,<sp/>builder-&gt;get_Font()-&gt;get_Underline());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>font<sp/>formatting<sp/>that<sp/>we<sp/>saved<sp/>earlier<sp/>and<sp/>remove<sp/>the<sp/>element<sp/>from<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;PopFont();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>.ToArgb(),<sp/>builder-&gt;get_Font()-&gt;get_Color().ToArgb());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Underline::None</ref>,<sp/>builder-&gt;get_Font()-&gt;get_Underline());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;.<sp/>We<sp/>hope<sp/>you<sp/>enjoyed<sp/>the<sp/>example.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.PushPopFont.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5411" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a88c174a51a51692e5f4fb559a4cb80c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::PushFont</definition>
        <argsstring>()</argsstring>
        <name>PushFont</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::PushFont</qualifiedname>
        <briefdescription>
<para>Saves current character formatting onto the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_builder_1a49bd68eef34fcb42a305e7197c476fe5" kindref="member">Aspose::Words::DocumentBuilder::get_Font</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_aspose_1_1_words_1_1_document_builder_1a5c8c7add514c77ac40e84ae43801b162" kindref="member">Aspose::Words::DocumentBuilder::PopFont</ref></para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to use a document builder&apos;s formatting stack. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>font<sp/>formatting,<sp/>then<sp/>write<sp/>the<sp/>text<sp/>that<sp/>goes<sp/>before<sp/>the<sp/>hyperlink.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Name(u</highlight><highlight class="stringliteral">&quot;Arial&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Size(24);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;To<sp/>visit<sp/>Google,<sp/>hold<sp/>Ctrl<sp/>and<sp/>click<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Preserve<sp/>our<sp/>current<sp/>formatting<sp/>configuration<sp/>on<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;PushFont();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Alter<sp/>the<sp/>builder&apos;s<sp/>current<sp/>formatting<sp/>by<sp/>applying<sp/>a<sp/>new<sp/>style.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_StyleIdentifier(<ref refid="namespace_aspose_1_1_words_1abffb83b9a70f034f432216a95d8ded34a79cd387280b73179eee47b96dadafc7b" kindref="member" tooltip="The Hyperlink style.">StyleIdentifier::Hyperlink</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHyperlink(u</highlight><highlight class="stringliteral">&quot;here&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;http://www.google.com&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>().ToArgb(),<sp/>builder-&gt;get_Font()-&gt;get_Color().ToArgb());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a66ba162102bbf6ae31b522aec561735e" kindref="member">Underline::Single</ref>,<sp/>builder-&gt;get_Font()-&gt;get_Underline());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>font<sp/>formatting<sp/>that<sp/>we<sp/>saved<sp/>earlier<sp/>and<sp/>remove<sp/>the<sp/>element<sp/>from<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;PopFont();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="class/system.drawing.color/_1a41736737b8045f7ffbed1c8dc84182fe" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::Empty</ref>.ToArgb(),<sp/>builder-&gt;get_Font()-&gt;get_Color().ToArgb());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a6adf97f83acf6453d4a6a4b1070f3754" kindref="member">Underline::None</ref>,<sp/>builder-&gt;get_Font()-&gt;get_Underline());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;.<sp/>We<sp/>hope<sp/>you<sp/>enjoyed<sp/>the<sp/>example.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.PushPopFont.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5372" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a84de613af2ada9885b0d85562bc50301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::set_Bold</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Bold</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::set_Bold</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_builder_1aa11845e9df34409420154b5c1e872a01" kindref="member">Aspose::Words::DocumentBuilder::get_Bold</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="417" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1af68558e90b140838e3897e45ab82387e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::set_Document</definition>
        <argsstring>(const System::SharedPtr&lt; Aspose::Words::Document &gt; &amp;value)</argsstring>
        <name>set_Document</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::set_Document</qualifiedname>
        <param>
          <type>const <ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_document" kindref="compound">Aspose::Words::Document</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_builder_1ad7f4c9930f6107e63082576d261cdef3" kindref="member">Aspose::Words::DocumentBuilder::get_Document</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="303" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1adb0902cd3e7a904fcfbdb49ca40e7bbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::set_Italic</definition>
        <argsstring>(bool value)</argsstring>
        <name>set_Italic</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::set_Italic</qualifiedname>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_builder_1aff6212cdd69724c6b791ec0c39af384c" kindref="member">Aspose::Words::DocumentBuilder::get_Italic</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="451" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1ada91a74a36453ded89fcb3f72fbc7276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::set_Underline</definition>
        <argsstring>(Aspose::Words::Underline value)</argsstring>
        <name>set_Underline</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::set_Underline</qualifiedname>
        <param>
          <type><ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94" kindref="member">Aspose::Words::Underline</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Setter for <ref refid="class_aspose_1_1_words_1_1_document_builder_1a572d304e8d4cede9f7687013926effe8" kindref="member">Aspose::Words::DocumentBuilder::get_Underline</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="474" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1aec1a4c64fd5ecbf7f943a610112a8217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_bookmark_start" kindref="compound">Aspose::Words::BookmarkStart</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::BookmarkStart &gt; Aspose::Words::DocumentBuilder::StartBookmark</definition>
        <argsstring>(const System::String &amp;bookmarkName)</argsstring>
        <name>StartBookmark</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::StartBookmark</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>bookmarkName</declname>
        </param>
        <briefdescription>
<para>Marks the current position in the document as a bookmark start. </para>
        </briefdescription>
        <detaileddescription>
<para>Bookmarks in a document can overlap and span any range. To create a valid bookmark you need to call both <ref refid="" kindref="compound">StartBookmark()</ref> and <ref refid="" kindref="compound">EndBookmark()</ref> with the same <bold>bookmarkName</bold> parameter.</para>
<para>Badly formed bookmarks or bookmarks with duplicate names will be ignored when the document is saved.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bookmarkName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the bookmark.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bookmark start node that was just created.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how create a bookmark. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>valid<sp/>bookmark<sp/>needs<sp/>to<sp/>have<sp/>document<sp/>body<sp/>text<sp/>enclosed<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>BookmarkStart<sp/>and<sp/>BookmarkEnd<sp/>nodes<sp/>created<sp/>with<sp/>a<sp/>matching<sp/>bookmark<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(1,<sp/>doc-&gt;get_Range()-&gt;get_Bookmarks()-&gt;get_Count());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;MyBookmark&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Bookmarks()-&gt;idx_get(0)-&gt;get_Name());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!&quot;</highlight><highlight class="normal">,<sp/>doc-&gt;get_Range()-&gt;get_Bookmarks()-&gt;idx_get(0)-&gt;get_Text().Trim());</highlight></codeline>
</programlisting></para>
<para>Shows how to insert a hyperlink which references a local bookmark. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartBookmark(u</highlight><highlight class="stringliteral">&quot;Bookmark1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Bookmarked<sp/>text.<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndBookmark(u</highlight><highlight class="stringliteral">&quot;Bookmark1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Text<sp/>outside<sp/>of<sp/>the<sp/>bookmark.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>HYPERLINK<sp/>field<sp/>that<sp/>links<sp/>to<sp/>the<sp/>bookmark.<sp/>We<sp/>can<sp/>pass<sp/>field<sp/>switches</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>&quot;InsertHyperlink&quot;<sp/>method<sp/>as<sp/>part<sp/>of<sp/>the<sp/>argument<sp/>containing<sp/>the<sp/>referenced<sp/>bookmark&apos;s<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Color(<ref refid="class/system.drawing.color/_1ab474c53c67f5f442eb14597234e16e5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Blue</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;set_Underline(<ref refid="namespace_aspose_1_1_words_1aedb2afadc4813c7e4de736b7b7481c94a66ba162102bbf6ae31b522aec561735e" kindref="member">Underline::Single</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertHyperlink(u</highlight><highlight class="stringliteral">&quot;Link<sp/>to<sp/>Bookmark1&quot;</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="stringliteral">&quot;Bookmark1\&quot;<sp/>\\o<sp/>\&quot;Hyperlink<sp/>Tip&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertHyperlinkToLocalBookmark.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4910" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a456d0b96a25bda578075c089997089b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_bookmark_start" kindref="compound">Aspose::Words::BookmarkStart</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::BookmarkStart &gt; Aspose::Words::DocumentBuilder::StartColumnBookmark</definition>
        <argsstring>(const System::String &amp;bookmarkName)</argsstring>
        <name>StartColumnBookmark</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::StartColumnBookmark</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>bookmarkName</declname>
        </param>
        <briefdescription>
<para>Marks the current position in the document as a column bookmark start. The position must be in a table cell. </para>
        </briefdescription>
        <detaileddescription>
<para>A column bookmark covers one or more columns in a range of rows. To create a valid bookmark you need to call both <ref refid="" kindref="compound">StartColumnBookmark()</ref> and <ref refid="" kindref="compound">EndColumnBookmark()</ref> with the same <bold>bookmarkName</bold> parameter.</para>
<para>Badly formed bookmarks or bookmarks with duplicate names will be ignored when the document is saved.</para>
<para>The actual position of the inserted <ref refid="class_aspose_1_1_words_1_1_bookmark_start" kindref="compound">BookmarkStart</ref> node may differ from the current document builder position.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bookmarkName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the bookmark.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The bookmark start node that was just created.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create a column bookmark. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cells<sp/>1,2,4,5<sp/>will<sp/>be<sp/>bookmarked.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartColumnBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Badly<sp/>formed<sp/>bookmarks<sp/>or<sp/>bookmarks<sp/>with<sp/>duplicate<sp/>names<sp/>will<sp/>be<sp/>ignored<sp/>when<sp/>the<sp/>document<sp/>is<sp/>saved.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartColumnBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartColumnBookmark(u</highlight><highlight class="stringliteral">&quot;BadStartBookmark&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndColumnBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndColumnBookmark(u</highlight><highlight class="stringliteral">&quot;MyBookmark_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Cell<sp/>6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Bookmarks.CreateColumnBookmark.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5018" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1afa102ba223b55da4aa2335edc44ef20c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_editable_range_start" kindref="compound">Aspose::Words::EditableRangeStart</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::EditableRangeStart &gt; Aspose::Words::DocumentBuilder::StartEditableRange</definition>
        <argsstring>()</argsstring>
        <name>StartEditableRange</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::StartEditableRange</qualifiedname>
        <briefdescription>
<para>Marks the current position in the document as an editable range start. </para>
        </briefdescription>
        <detaileddescription>
<para>Editable range in a document can overlap and span any range. To create a valid editable range you need to call both <ref refid="class_aspose_1_1_words_1_1_document_builder_1afa102ba223b55da4aa2335edc44ef20c" kindref="member">StartEditableRange</ref> and <ref refid="class_aspose_1_1_words_1_1_document_builder_1abc58d5e55a771e9e29a34249255fbad2" kindref="member">EndEditableRange</ref> or <ref refid="" kindref="compound">EndEditableRange()</ref> methods.</para>
<para>Badly formed editable range will be ignored when the document is saved.</para>
<para><simplesect kind="return"><para>The editable range start node that was just created.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to work with an editable range. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>Since<sp/>we<sp/>have<sp/>set<sp/>the<sp/>document&apos;s<sp/>protection<sp/>level<sp/>to<sp/>read-only,&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;<sp/>we<sp/>cannot<sp/>edit<sp/>this<sp/>paragraph<sp/>without<sp/>the<sp/>password.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Editable<sp/>ranges<sp/>allow<sp/>us<sp/>to<sp/>leave<sp/>parts<sp/>of<sp/>protected<sp/>documents<sp/>open<sp/>for<sp/>editing.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;EditableRangeStart&gt;<sp/>editableRangeStart<sp/>=<sp/>builder-&gt;StartEditableRange();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>is<sp/>inside<sp/>an<sp/>editable<sp/>range,<sp/>and<sp/>can<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;EditableRangeEnd&gt;<sp/>editableRangeEnd<sp/>=<sp/>builder-&gt;EndEditableRange();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>well-formed<sp/>editable<sp/>range<sp/>has<sp/>a<sp/>start<sp/>node,<sp/>and<sp/>end<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>nodes<sp/>have<sp/>matching<sp/>IDs<sp/>and<sp/>encompass<sp/>editable<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;EditableRange&gt;<sp/>editableRange<sp/>=<sp/>editableRangeStart-&gt;get_EditableRange();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRangeStart-&gt;get_Id(),<sp/>editableRange-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRangeEnd-&gt;get_Id(),<sp/>editableRange-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Different<sp/>parts<sp/>of<sp/>the<sp/>editable<sp/>range<sp/>link<sp/>to<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRangeStart-&gt;get_Id(),<sp/>editableRange-&gt;get_EditableRangeStart()-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRangeStart-&gt;get_Id(),<sp/>editableRangeEnd-&gt;get_EditableRangeStart()-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRange-&gt;get_Id(),<sp/>editableRangeStart-&gt;get_EditableRange()-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(editableRangeEnd-&gt;get_Id(),<sp/>editableRange-&gt;get_EditableRangeEnd()-&gt;get_Id());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>access<sp/>the<sp/>node<sp/>types<sp/>of<sp/>each<sp/>part<sp/>like<sp/>this.<sp/>The<sp/>editable<sp/>range<sp/>itself<sp/>is<sp/>not<sp/>a<sp/>node,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>an<sp/>entity<sp/>which<sp/>consists<sp/>of<sp/>a<sp/>start,<sp/>an<sp/>end,<sp/>and<sp/>their<sp/>enclosed<sp/>contents.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379ab88eb18c19662bf66714b9ac6f20b1fc" kindref="member" tooltip="A beginning of an editable range.">NodeType::EditableRangeStart</ref>,<sp/>editableRangeStart-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a344de11ed54cf046eea1f8954a396379a65e9b68ed547a62d4d9eb928da137251" kindref="member" tooltip="An end of an editable range.">NodeType::EditableRangeEnd</ref>,<sp/>editableRangeEnd-&gt;get_NodeType());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>is<sp/>outside<sp/>the<sp/>editable<sp/>range,<sp/>and<sp/>cannot<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;EditableRange.CreateAndRemove.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>an<sp/>editable<sp/>range.<sp/>All<sp/>the<sp/>nodes<sp/>that<sp/>were<sp/>inside<sp/>the<sp/>range<sp/>will<sp/>remain<sp/>intact.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">editableRange-&gt;Remove();</highlight></codeline>
</programlisting></para>
<para>Shows how to create nested editable ranges. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Protect(<ref refid="namespace_aspose_1_1_words_1a4b3be683cf728f992b0c78c0ce8acd60a131fb182a881796e7606ed6da27f1197" kindref="member" tooltip="No changes are allowed to the document. Available since Microsoft Word 2003.">ProtectionType::ReadOnly</ref>,<sp/>u</highlight><highlight class="stringliteral">&quot;MyPassword&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(<ref refid="namespace_aspose_1_1_words_1_1_properties_1a18e161ff3021eed5f834261f8cbf2108a27118326006d3829667a400ad23d5d98" kindref="member" tooltip="The property is a string value.">String</ref>(u</highlight><highlight class="stringliteral">&quot;Hello<sp/>world!<sp/>Since<sp/>we<sp/>have<sp/>set<sp/>the<sp/>document&apos;s<sp/>protection<sp/>level<sp/>to<sp/>read-only,<sp/>&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u</highlight><highlight class="stringliteral">&quot;we<sp/>cannot<sp/>edit<sp/>this<sp/>paragraph<sp/>without<sp/>the<sp/>password.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>two<sp/>nested<sp/>editable<sp/>ranges.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;EditableRangeStart&gt;<sp/>outerEditableRangeStart<sp/>=<sp/>builder-&gt;StartEditableRange();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>inside<sp/>the<sp/>outer<sp/>editable<sp/>range<sp/>and<sp/>can<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;EditableRangeStart&gt;<sp/>innerEditableRangeStart<sp/>=<sp/>builder-&gt;StartEditableRange();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>inside<sp/>both<sp/>the<sp/>outer<sp/>and<sp/>inner<sp/>editable<sp/>ranges<sp/>and<sp/>can<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Currently,<sp/>the<sp/>document<sp/>builder&apos;s<sp/>node<sp/>insertion<sp/>cursor<sp/>is<sp/>in<sp/>more<sp/>than<sp/>one<sp/>ongoing<sp/>editable<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>we<sp/>want<sp/>to<sp/>end<sp/>an<sp/>editable<sp/>range<sp/>in<sp/>this<sp/>situation,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>specify<sp/>which<sp/>of<sp/>the<sp/>ranges<sp/>we<sp/>wish<sp/>to<sp/>end<sp/>by<sp/>passing<sp/>its<sp/>EditableRangeStart<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndEditableRange(innerEditableRangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>inside<sp/>the<sp/>outer<sp/>editable<sp/>range<sp/>and<sp/>can<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndEditableRange(outerEditableRangeStart);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;This<sp/>paragraph<sp/>is<sp/>outside<sp/>any<sp/>editable<sp/>ranges,<sp/>and<sp/>cannot<sp/>be<sp/>edited.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>region<sp/>of<sp/>text<sp/>has<sp/>two<sp/>overlapping<sp/>editable<sp/>ranges<sp/>with<sp/>specified<sp/>groups,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>combined<sp/>group<sp/>of<sp/>users<sp/>excluded<sp/>by<sp/>both<sp/>groups<sp/>are<sp/>prevented<sp/>from<sp/>editing<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">outerEditableRangeStart-&gt;get_EditableRange()-&gt;set_EditorGroup(<ref refid="namespace_aspose_1_1_words_1a91d5f723074b64ad6e414ec9a2e7f773af9ae5e5c44e59f94680af569879f704a" kindref="member" tooltip="Specifies that all users that open the document shall be allowed to edit editable ranges using this e...">EditorType::Everyone</ref>);</highlight></codeline>
<codeline><highlight class="normal">innerEditableRangeStart-&gt;get_EditableRange()-&gt;set_EditorGroup(<ref refid="namespace_aspose_1_1_words_1a91d5f723074b64ad6e414ec9a2e7f773a96858cb143562346b7f065e32c403f30" kindref="member" tooltip="Specifies that users associated with the Contributors group shall be allowed to edit editable ranges ...">EditorType::Contributors</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;EditableRange.Nested.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="5164" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a860c20f4bf79b527a2722ad797ac6f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespace/system/_1a6b77ccd8c49df28c153be0462cdfdf49" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::SharedPtr</ref>&lt; <ref refid="class_aspose_1_1_words_1_1_tables_1_1_table" kindref="compound">Aspose::Words::Tables::Table</ref> &gt;</type>
        <definition>System::SharedPtr&lt; Aspose::Words::Tables::Table &gt; Aspose::Words::DocumentBuilder::StartTable</definition>
        <argsstring>()</argsstring>
        <name>StartTable</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::StartTable</qualifiedname>
        <briefdescription>
<para>Starts a table in the document. </para>
        </briefdescription>
        <detaileddescription>
<para>The next method to call is <ref refid="class_aspose_1_1_words_1_1_document_builder_1af82339419cbcd5ef32c583b493600faa" kindref="member">InsertCell</ref>.</para>
<para>This method starts a nested table when called inside a cell.</para>
<para><simplesect kind="return"><para>The table node that was just created.</para>
</simplesect>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a formatted 2x2 table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>While<sp/>building<sp/>the<sp/>table,<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>its<sp/>current<sp/>RowFormat/CellFormat<sp/>property<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>current<sp/>row/cell<sp/>that<sp/>its<sp/>cursor<sp/>is<sp/>in<sp/>and<sp/>any<sp/>new<sp/>rows/cells<sp/>as<sp/>it<sp/>creates<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(100);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Previously<sp/>added<sp/>rows<sp/>and<sp/>cells<sp/>are<sp/>not<sp/>retroactively<sp/>affected<sp/>by<sp/>changes<sp/>to<sp/>the<sp/>builder&apos;s<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(100,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.BuildTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to format cells with a document builder. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>a<sp/>second<sp/>cell,<sp/>and<sp/>then<sp/>configure<sp/>cell<sp/>text<sp/>padding<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>builder<sp/>will<sp/>apply<sp/>these<sp/>settings<sp/>at<sp/>its<sp/>current<sp/>cell,<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>creates<sp/>afterwards.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;CellFormat&gt;<sp/>cellFormat<sp/>=<sp/>builder-&gt;get_CellFormat();</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_Width(250);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_LeftPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_RightPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_TopPadding(30);</highlight></codeline>
<codeline><highlight class="normal">cellFormat-&gt;set_BottomPadding(30);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>was<sp/>unaffected<sp/>by<sp/>the<sp/>padding<sp/>reconfiguration,<sp/>and<sp/>still<sp/>holds<sp/>the<sp/>default<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(5.4,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(250.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Width());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_LeftPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_RightPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_TopPadding());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(30.0,<sp/>table-&gt;get_FirstRow()-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_BottomPadding());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>cell<sp/>will<sp/>still<sp/>grow<sp/>in<sp/>the<sp/>output<sp/>document<sp/>to<sp/>match<sp/>the<sp/>size<sp/>of<sp/>its<sp/>neighboring<sp/>cell.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.SetCellFormatting.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="4564" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a0fd276bfc28b3941500a4cf4c8851e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::Write</definition>
        <argsstring>(const System::String &amp;text)</argsstring>
        <name>Write</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::Write</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Inserts a string into the document at the current insert position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to insert into the document.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to insert a string surrounded by a border into a document. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a77fddff8420436e0eec436f1fb13ee5b" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Green</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_LineWidth(2.5);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_Font()-&gt;get_Border()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09da8cf8027b2b64fbbc8ed979f94a7555b8" kindref="member">LineStyle::DashDotStroker</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Text<sp/>surrounded<sp/>by<sp/>green<sp/>border.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;Border.FontBorder.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to use a document builder to create a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Start<sp/>the<sp/>table,<sp/>then<sp/>populate<sp/>the<sp/>first<sp/>row<sp/>with<sp/>two<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>builder&apos;s<sp/>&quot;EndRow&quot;<sp/>method<sp/>to<sp/>start<sp/>a<sp/>new<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.CreateTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a formatted 2x2 table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>While<sp/>building<sp/>the<sp/>table,<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>its<sp/>current<sp/>RowFormat/CellFormat<sp/>property<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>current<sp/>row/cell<sp/>that<sp/>its<sp/>cursor<sp/>is<sp/>in<sp/>and<sp/>any<sp/>new<sp/>rows/cells<sp/>as<sp/>it<sp/>creates<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(100);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Previously<sp/>added<sp/>rows<sp/>and<sp/>cells<sp/>are<sp/>not<sp/>retroactively<sp/>affected<sp/>by<sp/>changes<sp/>to<sp/>the<sp/>builder&apos;s<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(100,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.BuildTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2144" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1a4d0e7fad77490a3d8b317c4159001ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::Writeln</definition>
        <argsstring>()</argsstring>
        <name>Writeln</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::Writeln</qualifiedname>
        <briefdescription>
<para>Inserts a paragraph break into the document. </para>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="class_aspose_1_1_words_1_1_document_builder_1ab305a508262a77604978dcaece8a09fb" kindref="member">InsertParagraph</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2223" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_aspose_1_1_words_1_1_document_builder_1abdf01c5675e107a6dd917d7e6b87e9c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Aspose::Words::DocumentBuilder::Writeln</definition>
        <argsstring>(const System::String &amp;text)</argsstring>
        <name>Writeln</name>
        <qualifiedname>Aspose::Words::DocumentBuilder::Writeln</qualifiedname>
        <param>
          <type>const <ref refid="class/system.string/" kindref="compound" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::String</ref> &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Inserts a string and a paragraph break into the document. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The string to insert into the document.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create headers and footers in a document using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>that<sp/>we<sp/>want<sp/>different<sp/>headers<sp/>and<sp/>footers<sp/>for<sp/>first,<sp/>even<sp/>and<sp/>odd<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_DifferentFirstPageHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_OddAndEvenPagesHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>headers,<sp/>then<sp/>add<sp/>three<sp/>pages<sp/>to<sp/>the<sp/>document<sp/>to<sp/>display<sp/>each<sp/>header<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a545b1c922d56aca91ca2080eed0d7913" kindref="member" tooltip="Header for the first page of the section.">HeaderFooterType::HeaderFirst</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>the<sp/>first<sp/>page&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69adfe2914bbaa51fcbf35bdb65ac3865d6" kindref="member" tooltip="Header for even numbered pages.">HeaderFooterType::HeaderEven</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>even<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>all<sp/>other<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.HeadersAndFooters.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a formatted 2x2 table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">SharedPtr&lt;Table&gt;<sp/>table<sp/>=<sp/>builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>While<sp/>building<sp/>the<sp/>table,<sp/>the<sp/>document<sp/>builder<sp/>will<sp/>apply<sp/>its<sp/>current<sp/>RowFormat/CellFormat<sp/>property<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>current<sp/>row/cell<sp/>that<sp/>its<sp/>cursor<sp/>is<sp/>in<sp/>and<sp/>any<sp/>new<sp/>rows/cells<sp/>as<sp/>it<sp/>creates<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(CellVerticalAlignment::Center,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_VerticalAlignment());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(100);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Previously<sp/>added<sp/>rows<sp/>and<sp/>cells<sp/>are<sp/>not<sp/>retroactively<sp/>affected<sp/>by<sp/>changes<sp/>to<sp/>the<sp/>builder&apos;s<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(0,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba06b9281e396db002010bde1de57262eb" kindref="member" tooltip="The height will grow automatically to accommodate all text inside an object.">HeightRule::Auto</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(0)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASPOSE_ASSERT_EQ(100,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_Height());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_RowFormat()-&gt;get_HeightRule());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(0)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal">ASSERT_EQ(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>,<sp/>table-&gt;get_Rows()-&gt;idx_get(1)-&gt;get_Cells()-&gt;idx_get(1)-&gt;get_CellFormat()-&gt;get_Orientation());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.BuildTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="2218" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides methods to insert text, images and other content, specify font, paragraph and section formatting. </para>
    </briefdescription>
    <detaileddescription>
<para><bold>DocumentBuilder</bold> makes the process of building a <bold>Document</bold> easier. <bold>Document</bold> is a composite object consisting of a tree of nodes and while inserting content nodes directly into the tree is possible, it requires good understanding of the tree structure. <bold>DocumentBuilder</bold> is a &quot;facade&quot; for the complex structure of <bold>Document</bold> and allows to insert content and formatting quickly and easily.</para>
<para>Create a <bold>DocumentBuilder</bold> and associate it with a <ref refid="class_aspose_1_1_words_1_1_document_builder_1ad7f4c9930f6107e63082576d261cdef3" kindref="member">Document</ref>.</para>
<para>The <bold>DocumentBuilder</bold> has an internal cursor where the text will be inserted when you call <ref refid="" kindref="compound">Write()</ref>, <ref refid="" kindref="compound">Writeln()</ref>, <ref refid="class_aspose_1_1_words_1_1_document_builder_1a571c26886e30a740fc710e99daaed446" kindref="member">InsertBreak()</ref> and other methods. You can navigate the <bold>DocumentBuilder</bold> cursor to a different location in a document using various MoveToXXX methods.</para>
<para>Use the <ref refid="class_aspose_1_1_words_1_1_document_builder_1a49bd68eef34fcb42a305e7197c476fe5" kindref="member">Font</ref> property to specify character formatting that will apply to all text inserted from the current position in the document onwards.</para>
<para>Use the <ref refid="class_aspose_1_1_words_1_1_document_builder_1a50e7eb77bacf84cbaa8bde0293cd308b" kindref="member">ParagraphFormat</ref> property to specify paragraph formatting for the current and all paragraphs that will be inserted.</para>
<para>Use the <ref refid="class_aspose_1_1_words_1_1_document_builder_1af4bb2e610d428af5ad5a50138b4131e8" kindref="member">PageSetup</ref> property to specify page and section properties for the current section and all section that will be inserted.</para>
<para>Use the <ref refid="class_aspose_1_1_words_1_1_document_builder_1a8df42877c8de0aafc1ed208d6fd8152d" kindref="member">CellFormat</ref> and <ref refid="class_aspose_1_1_words_1_1_document_builder_1a458cf5b271d7bc664e4d6c7e98c72468" kindref="member">RowFormat</ref> properties to specify formatting properties for table cells and rows. User the <ref refid="class_aspose_1_1_words_1_1_document_builder_1af82339419cbcd5ef32c583b493600faa" kindref="member">InsertCell</ref> and <ref refid="class_aspose_1_1_words_1_1_document_builder_1a02fe2bcf78b96b2b0319ef7988cc79f2" kindref="member">EndRow</ref> methods to build a table.</para>
<para>Note that <bold>Font</bold>, <bold>ParagraphFormat</bold> and <bold>PageSetup</bold> properties are updated whenever you navigate to a different place in the document to reflect formatting properties available at the new location.</para>
<para><simplesect kind="par"><title>Examples</title><para></para>
</simplesect>
Shows how to create headers and footers in a document using <ref refid="class_aspose_1_1_words_1_1_document_builder" kindref="compound">DocumentBuilder</ref>. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specify<sp/>that<sp/>we<sp/>want<sp/>different<sp/>headers<sp/>and<sp/>footers<sp/>for<sp/>first,<sp/>even<sp/>and<sp/>odd<sp/>pages.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_DifferentFirstPageHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_PageSetup()-&gt;set_OddAndEvenPagesHeaderFooter(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>headers,<sp/>then<sp/>add<sp/>three<sp/>pages<sp/>to<sp/>the<sp/>document<sp/>to<sp/>display<sp/>each<sp/>header<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a545b1c922d56aca91ca2080eed0d7913" kindref="member" tooltip="Header for the first page of the section.">HeaderFooterType::HeaderFirst</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>the<sp/>first<sp/>page&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69adfe2914bbaa51fcbf35bdb65ac3865d6" kindref="member" tooltip="Header for even numbered pages.">HeaderFooterType::HeaderEven</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>even<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToHeaderFooter(<ref refid="namespace_aspose_1_1_words_1a10e750a2a2dc23104fb5cb70787e3a69a12c5d70f31f632e51d3a7273fc3c23f2" kindref="member" tooltip="Primary header, also used for odd numbered pages.">HeaderFooterType::HeaderPrimary</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Header<sp/>for<sp/>all<sp/>other<sp/>pages&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;MoveToSection(0);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertBreak(<ref refid="namespace_aspose_1_1_words_1a7e027e6d9b3949cd64616f40db971a2ea63be6634e47079da3b4bf81bb9f8cf37" kindref="member" tooltip="Explicit page break.">BreakType::PageBreak</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Writeln(u</highlight><highlight class="stringliteral">&quot;Page3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.HeadersAndFooters.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to build a table with custom borders. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Setting<sp/>table<sp/>formatting<sp/>options<sp/>for<sp/>a<sp/>document<sp/>builder</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>apply<sp/>them<sp/>to<sp/>every<sp/>row<sp/>and<sp/>cell<sp/>that<sp/>we<sp/>add<sp/>with<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_ParagraphFormat()-&gt;set_Alignment(<ref refid="namespace_aspose_1_1_words_1ae0fabf27a56cdd6988da762600dd9007a4f1f6016fc9f3f2353c0cc7c67b292bd" kindref="member" tooltip="Text is centered horizontally.">ParagraphAlignment::Center</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Width(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_VerticalAlignment(CellVerticalAlignment::Center);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;set_BackgroundPatternColor(<ref refid="class/system.drawing.color/_1a186a4a03d76eeba314f392f91da04011" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_GreenYellow</ref>());</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_WrapText(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_FitText(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_HeightRule(<ref refid="namespace_aspose_1_1_words_1a5a06eed54291a03fff010f2caa3daccba32f01c1611a4a80b752afe034a7210a5" kindref="member" tooltip="The height is specified exactly in points. Please note that if the text cannot fit inside the object ...">HeightRule::Exactly</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(50);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_LineStyle(<ref refid="namespace_aspose_1_1_words_1a7b6888839fb40e2141c101764ad7e09dafd80474b6c09afcb4bedd1a3bdab0b83" kindref="member">LineStyle::Engrave3D</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;get_Borders()-&gt;set_Color(<ref refid="class/system.drawing.color/_1a8c00b1d8ade4eff88b5bf0e054650dd0" kindref="member" external="X:/temp/apireference/asposecpplib.containerize.api.tag">System::Drawing::Color::get_Orange</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changing<sp/>the<sp/>formatting<sp/>will<sp/>apply<sp/>it<sp/>to<sp/>the<sp/>current<sp/>cell,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>new<sp/>cells<sp/>that<sp/>we<sp/>create<sp/>with<sp/>the<sp/>builder<sp/>afterward.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>affect<sp/>the<sp/>cells<sp/>that<sp/>we<sp/>have<sp/>added<sp/>previously.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;get_Shading()-&gt;ClearFormatting();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Increase<sp/>row<sp/>height<sp/>to<sp/>fit<sp/>the<sp/>vertical<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_RowFormat()-&gt;set_Height(150);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a2fad4fd9e0a2737fdcac5ff87ffe403c" kindref="member" tooltip="Text is rotated 90 degrees to the left to appear from bottom to top (bt-lr).">TextOrientation::Upward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;get_CellFormat()-&gt;set_Orientation(<ref refid="namespace_aspose_1_1_words_1a22518c6919e497447ac00018a4f45394a021f1340f5979a4f4f9642940221ad53" kindref="member" tooltip="Text is rotated 90 degrees to the right to appear from top to bottom (tb-rl).">TextOrientation::Downward</ref>);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>3,<sp/>Col<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.InsertTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
<para>Shows how to use a document builder to create a table. <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>doc<sp/>=<sp/>MakeObject&lt;Document&gt;();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>builder<sp/>=<sp/>MakeObject&lt;DocumentBuilder&gt;(doc);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Start<sp/>the<sp/>table,<sp/>then<sp/>populate<sp/>the<sp/>first<sp/>row<sp/>with<sp/>two<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;StartTable();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>1,<sp/>Cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>builder&apos;s<sp/>&quot;EndRow&quot;<sp/>method<sp/>to<sp/>start<sp/>a<sp/>new<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndRow();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>1.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;InsertCell();</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;Write(u</highlight><highlight class="stringliteral">&quot;Row<sp/>2,<sp/>Cell<sp/>2.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">builder-&gt;EndTable();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">doc-&gt;Save(ArtifactsDir<sp/>+<sp/>u</highlight><highlight class="stringliteral">&quot;DocumentBuilder.CreateTable.docx&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Aspose::Words::DocumentBuilder</label>
        <link refid="class_aspose_1_1_words_1_1_document_builder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Aspose::Words::ICellAttrSource</label>
      </node>
      <node id="3">
        <label>Aspose::Words::IRowAttrSource</label>
      </node>
      <node id="2">
        <label>Aspose::Words::IRunAttrSource</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Aspose::Words::DocumentBuilder</label>
        <link refid="class_aspose_1_1_words_1_1_document_builder"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>Aspose::Words::ICellAttrSource</label>
      </node>
      <node id="3">
        <label>Aspose::Words::IRowAttrSource</label>
      </node>
      <node id="2">
        <label>Aspose::Words::IRunAttrSource</label>
      </node>
    </collaborationgraph>
    <location file="Aspose.Words.Cpp/DocumentBuilder.h" line="255" column="1" bodyfile="Aspose.Words.Cpp/DocumentBuilder.h" bodystart="256" bodyend="5546"/>
    <listofallmembers>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a01d04df1b2432feacc92129236c51d78" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>BaseType</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a89b88d18ff1f9c1dc04d37b72cdcbf1a" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>BaseType1</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ab86c9910d9fe163bd3118532a6bc675c" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>BaseType2</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1afa01f39baa86bfce3e32023044c10e3a" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>DeleteRow</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1accace6a637ef09481c4b7acb729eb981" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>DocumentBuilder</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ab879364d5e576f45ec0ff35ec03f8b1e" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>DocumentBuilder</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a7550962b4842aa0a12f1fb1b303a1b44" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>EndBookmark</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a4eff139293213b332e8bba6b56b71f53" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>EndColumnBookmark</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1abc58d5e55a771e9e29a34249255fbad2" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>EndEditableRange</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a67acacaa453e749a88a75e35b4f45cd0" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>EndEditableRange</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a02fe2bcf78b96b2b0319ef7988cc79f2" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>EndRow</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a26b721722234df47e55d38e14e9cfea2" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>EndTable</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aa11845e9df34409420154b5c1e872a01" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_Bold</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a8df42877c8de0aafc1ed208d6fd8152d" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_CellFormat</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ac3dbf55b947bd7e36b46ba9b5ada0630" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_CurrentNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a1d0509775253820dcb7231884e14d070" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_CurrentParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ad7545e14ba06e588901b616aaf86598e" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_CurrentSection</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ad39892460a31227f1a4cb0f4091409ab" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_CurrentStory</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ad7f4c9930f6107e63082576d261cdef3" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a49bd68eef34fcb42a305e7197c476fe5" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_Font</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a3f305d6002abe07bb3a8b9b7949050df" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_IsAtEndOfParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a1e089ae3c611ef9b7199b9ffafef2d56" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_IsAtStartOfParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aff6212cdd69724c6b791ec0c39af384c" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_Italic</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1af9cc028cc784040418e16ad8ba8c084e" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_ListFormat</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1af4bb2e610d428af5ad5a50138b4131e8" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_PageSetup</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a50e7eb77bacf84cbaa8bde0293cd308b" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_ParagraphFormat</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a458cf5b271d7bc664e4d6c7e98c72468" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_RowFormat</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a572d304e8d4cede9f7687013926effe8" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>get_Underline</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a571c26886e30a740fc710e99daaed446" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertBreak</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1af82339419cbcd5ef32c583b493600faa" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertCell</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aeb709e74f76e66be4fe270ca13245f99" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertChart</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a1432a663bfdf45f0f2b95c234abd20d0" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertChart</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a078d20238eac2ddc84087e1aedb913d3" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertCheckBox</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aae89a284b2fcfcd4c19fd1cf540fb66d" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertCheckBox</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a27c02821a8c7de8a7e3b6673db247d11" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertComboBox</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aa14757cbd59d2e9e53d4281077a3e135" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertDocument</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ab7f10612e96e891e4f9d40671f51e14e" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertDocument</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ac98e449ffa0206c5cab306d58ae2c6f7" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertField</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a5a640e84409b8968db118a5cfcfb0e17" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertField</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a13586e4e8cffa2acd710ecbf83bb7936" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertField</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a109f4602b37dffa8745cd1d94e986a2d" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertFootnote</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a10911690b71094fdd090b5ca1b156ac0" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertFootnote</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a493c9fa50a76b73c0190b89d2ca93193" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertHorizontalRule</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a0e1b8e9772eb058022fc79c344224800" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertHtml</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a97d98583cb022ca71d9b9b6071d0995e" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertHtml</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a281d1bf6f6c61665870684e6cb809788" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertHtml</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a82ca4d29fee5db47ae1dcd1ebb1cfe4f" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertHyperlink</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a4b7ea15aca1793bc7485e418583c9bdf" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ae1f9db5ccfbe436b6e9bf9e3d1fa2e7b" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a9b5183410bf6f9553ae023b690cb21e3" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aa76fc3d035aca8ee766876607ed0b0d9" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a61d7d1d0c686e218ff129307234f530d" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1adb3af8a570a08227389b88c7e4101c0c" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a1df84c86fbd77059550513a611ce3bc2" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a82925838692c89169d992a983ac095fd" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ad665359a0fad80dd16517501df09fe41" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aeeafcaf81da826364f98bf0930982908" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a8f7d34175990e27c24f05ccff7dcf3b3" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a5f4bd6e35dba9475f44dc4f5232bf58c" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a7b330b9975e41bb5bbde9811997bd19c" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ad5adacabdc491ae5f0d7ca6f54587ee3" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a654a16ee544189af55e8684935c65709" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertImage</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a02b741e360433f23de2fdf0aea7b35e2" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertNode</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a782fab995c1a67bbd77e7fbe2e215160" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOleObject</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a5c13161a87a1ad4f2cc80a0b52ce9313" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOleObject</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a35edd8411a9f368ff713394e3c11d6f9" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOleObject</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ade746f0cb9e2c308a9e58a0501bcfd25" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOleObject</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a994efcbb01cef9a6137d20a32bb56d0e" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOleObject</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1af27f692a34427f779bce0962b17aaf23" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOleObject</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aa80d1377c39e01257d20b76f3a6c0f4f" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOleObjectAsIcon</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a421cae4453abbf8f7cd0b9fa078e7030" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOleObjectAsIcon</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a72be9cb0b09c3a7c771aac616645625b" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOleObjectAsIcon</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a05f82ba343bda5a85f76a3a5f39d4468" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOleObjectAsIcon</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1af477603b6a0bc7d50f775ea70fafb7a0" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOnlineVideo</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a65ec90d5ba149b46c1260e06a8a86929" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOnlineVideo</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aef1d3626e6706169dfccba533e4608c1" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOnlineVideo</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aed0e7128877067f315ca0c7da8321ae7" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertOnlineVideo</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ab305a508262a77604978dcaece8a09fb" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a8664af2fb90097d377474e03c8652f3b" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertShape</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a44219ac8096ebe0481a8f0448e6c7bd9" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertShape</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1adff2d798d05b5656c16e9bd20307eae3" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertSignatureLine</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1af85ee90a76f8fa862798eb076f9452e6" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertSignatureLine</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a656843a07a6c53b11e61e41eb160443d" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertStyleSeparator</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a0ea777c70100ed16e3867ef5ef319fb3" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertTableOfContents</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1af13ffbcaa55fd2fe0d658dffce37b928" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>InsertTextInput</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1abf2790d87894562bfd465d6c6f22cdd8" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField0</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a282a7be9ab26f1607a042ece2571f5ba" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField1</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a3d9ce130b75f2b2021df71bba3b8d44f" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField10</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1af55c269bed97b9d8738947d6794c934a" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField11</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1adc31d5fad6d70f24901fa2159a74b655" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField12</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a9f80906b93e4a6d8fd604eeeabb96951" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField13</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a63ce23f3c0a586012ca36e74b8e5f411" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField14</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1af7ca5a92ca78ec850c65d3b2b7f22b16" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField15</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a50100455f54adf32e6648292bb4ed958" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField2</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a173676d0e14d9853bccce8eadadc47ed" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField3</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aa0403c1ca09e7c911754a55452abc194" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField4</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1afec058a63ae02c03d416d00d02aef246" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField5</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ad940639d66a9a84746667595147931e0" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField6</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a1ead8da510fd2fc097f17df81ff9755f" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField7</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a6342e98fffb14a7a386cdb13cb0b7fc9" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField8</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ace7ebcda36c9c32f1e53492de03212de" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>mField9</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a0f673a13986e4b5a7957266e05e77d20" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveTo</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a28c8f3fb7e5688bfac7b697ae8f6e0d1" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToBookmark</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a54076e2608fb5e53553442a515f4094c" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToBookmark</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aec7fe7cdcde66fbce497014a27c6a426" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToCell</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a06de091c8b56ce18eff0a1a822420647" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToDocumentEnd</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a883df72569ee5de6693962198ce8a93f" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToDocumentStart</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1acd723f7e70469ff76bd8b34e66d570f3" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToField</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a7a7e4a62578b022e5b201ab55c4dd658" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToHeaderFooter</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1adab9c4d64a5343999008d6140d8b60d3" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToMergeField</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ad924a5b4551935f70748aad8e57ba5f9" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToMergeField</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a47f4661fa21baca0fa4b694f4058a674" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToParagraph</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a415920fd3d8356ac7e6abbc41bc61a12" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>MoveToSection</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a5c8c7add514c77ac40e84ae43801b162" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>PopFont</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a88c174a51a51692e5f4fb559a4cb80c5" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>PushFont</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a09579c123653f7256b4bd70dc35654aa" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>RTTI_INFO_DECL_EX</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a84de613af2ada9885b0d85562bc50301" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>set_Bold</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1af68558e90b140838e3897e45ab82387e" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>set_Document</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1adb0902cd3e7a904fcfbdb49ca40e7bbc" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>set_Italic</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1ada91a74a36453ded89fcb3f72fbc7276" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>set_Underline</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1aec1a4c64fd5ecbf7f943a610112a8217" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>StartBookmark</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a456d0b96a25bda578075c089997089b6" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>StartColumnBookmark</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1afa102ba223b55da4aa2335edc44ef20c" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>StartEditableRange</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a860c20f4bf79b527a2722ad797ac6f77" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>StartTable</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a52051ce680cf534ccdbc09b577b2968e" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>ThisType</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a7f22b999753cb5b89f069e5deaa4a551" prot="private" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>ThisTypeBaseTypesInfo</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a0fd276bfc28b3941500a4cf4c8851e93" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>Write</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1abdf01c5675e107a6dd917d7e6b87e9c3" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>Writeln</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1a4d0e7fad77490a3d8b317c4159001ee9" prot="public" virt="non-virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>Writeln</name></member>
      <member refid="class_aspose_1_1_words_1_1_document_builder_1afad80d42faa3478ac6af3c8b18a078cd" prot="private" virt="virtual"><scope>Aspose::Words::DocumentBuilder</scope><name>~DocumentBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
